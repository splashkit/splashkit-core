//
// SplashKit C Generated Library Code
// DO NOT MODIFY
//

#ifndef __splashkit_clib
#define __splashkit_clib

#include<stdint.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef struct {
    char *string;
    unsigned int size;
    void *ptr;
} __sklib_string;
void __sklib__free__sklib_string(__sklib_string s);
typedef int __sklib_bool;
typedef int8_t __sklib_int8_t;
typedef int __sklib_int;
typedef short __sklib_short;
typedef int64_t __sklib_int64_t;
typedef float __sklib_float;
typedef double __sklib_double;
typedef char __sklib_char;
typedef unsigned int __sklib_unsigned_int;
typedef unsigned short __sklib_unsigned_short;
typedef unsigned char __sklib_unsigned_char;
#define __sklib_ptr void *
typedef __sklib_ptr __sklib_json;
typedef __sklib_ptr __sklib_music;
typedef __sklib_ptr __sklib_connection;
typedef __sklib_ptr __sklib_message;
typedef __sklib_ptr __sklib_server_socket;
typedef __sklib_ptr __sklib_sound_effect;
typedef __sklib_ptr __sklib_sprite;
typedef __sklib_ptr __sklib_timer;
typedef __sklib_ptr __sklib_animation;
typedef __sklib_ptr __sklib_animation_script;
typedef __sklib_ptr __sklib_bitmap;
typedef __sklib_ptr __sklib_display;
typedef __sklib_ptr __sklib_font;
typedef __sklib_ptr __sklib_http_response;
typedef __sklib_ptr __sklib_http_request;
typedef __sklib_ptr __sklib_web_server;
typedef __sklib_ptr __sklib_window;
typedef int __sklib_key_code;
typedef int __sklib_log_level;
typedef int __sklib_log_mode;
typedef int __sklib_mouse_button;
typedef int __sklib_connection_type;
typedef int __sklib_resource_kind;
typedef int __sklib_collision_test_kind;
typedef int __sklib_sprite_event_kind;
typedef int __sklib_drawing_dest;
typedef int __sklib_font_style;
typedef int __sklib_http_status_code;
typedef int __sklib_interface_style;
typedef int __sklib_pin_modes;
typedef int __sklib_pin_values;
typedef int __sklib_pins;
typedef int __sklib_pull_up_down;
typedef int __sklib_http_method;
typedef struct {
    __sklib_double elements[9];
} __sklib_matrix_2d;
typedef struct {
    __sklib_double x;
    __sklib_double y;
} __sklib_point_2d;
typedef struct {
    __sklib_point_2d center;
    __sklib_double radius;
} __sklib_circle;
typedef struct {
    __sklib_float r;
    __sklib_float g;
    __sklib_float b;
    __sklib_float a;
} __sklib_color;
typedef struct {
    __sklib_double x;
    __sklib_double y;
    __sklib_double width;
    __sklib_double height;
} __sklib_rectangle;
typedef struct {
    __sklib_ptr dest;
    __sklib_float scale_x;
    __sklib_float scale_y;
    __sklib_float angle;
    __sklib_float anchor_offset_x;
    __sklib_float anchor_offset_y;
    __sklib_bool flip_x;
    __sklib_bool flip_y;
    __sklib_bool is_part;
    __sklib_rectangle part;
    __sklib_int draw_cell;
    __sklib_drawing_dest camera;
    __sklib_int line_width;
    __sklib_animation anim;
} __sklib_drawing_options;
typedef struct {
    __sklib_point_2d start_point;
    __sklib_point_2d end_point;
} __sklib_line;
typedef struct {
    __sklib_point_2d points[4];
} __sklib_quad;
typedef struct {
    __sklib_point_2d points[3];
} __sklib_triangle;
typedef struct {
    __sklib_double x;
    __sklib_double y;
} __sklib_vector_2d;
typedef void (__sklib_key_callback)(int code);
typedef void (__sklib_free_notifier)(__sklib_ptr pointer);
typedef void (__sklib_sprite_event_handler)(__sklib_ptr s, int evt);
typedef void (__sklib_sprite_float_function)(__sklib_ptr s, float f);
typedef void (__sklib_sprite_function)(__sklib_ptr s);
typedef struct {
    __sklib_string *data_from_app;
    unsigned int size_from_app;
    __sklib_string *data_from_lib;
    unsigned int size_from_lib;
} __sklib_vector_string;
void __sklib__free__sklib_vector_string(__sklib_vector_string v);
typedef struct {
    __sklib_line *data_from_app;
    unsigned int size_from_app;
    __sklib_line *data_from_lib;
    unsigned int size_from_lib;
} __sklib_vector_line;
void __sklib__free__sklib_vector_line(__sklib_vector_line v);
typedef struct {
    unsigned char *data_from_app;
    unsigned int size_from_app;
    unsigned char *data_from_lib;
    unsigned int size_from_lib;
} __sklib_vector_int8_t;
void __sklib__free__sklib_vector_int8_t(__sklib_vector_int8_t v);
typedef struct {
    __sklib_triangle *data_from_app;
    unsigned int size_from_app;
    __sklib_triangle *data_from_lib;
    unsigned int size_from_lib;
} __sklib_vector_triangle;
void __sklib__free__sklib_vector_triangle(__sklib_vector_triangle v);
typedef struct {
    double *data_from_app;
    unsigned int size_from_app;
    double *data_from_lib;
    unsigned int size_from_lib;
} __sklib_vector_double;
void __sklib__free__sklib_vector_double(__sklib_vector_double v);
typedef struct {
    __sklib_json *data_from_app;
    unsigned int size_from_app;
    __sklib_json *data_from_lib;
    unsigned int size_from_lib;
} __sklib_vector_json;
void __sklib__free__sklib_vector_json(__sklib_vector_json v);
typedef struct {
    int *data_from_app;
    unsigned int size_from_app;
    int *data_from_lib;
    unsigned int size_from_lib;
} __sklib_vector_bool;
void __sklib__free__sklib_vector_bool(__sklib_vector_bool v);
int __sklib__animation_count__animation_script(__sklib_animation_script script);
int __sklib__animation_current_cell__animation(__sklib_animation anim);
__sklib_vector_2d __sklib__animation_current_vector__animation(__sklib_animation anim);
int __sklib__animation_ended__animation(__sklib_animation anim);
int __sklib__animation_entered_frame__animation(__sklib_animation anim);
float __sklib__animation_frame_time__animation(__sklib_animation anim);
int __sklib__animation_index__animation_script__string_ref(__sklib_animation_script script, const __sklib_string name);
__sklib_string __sklib__animation_name__animation(__sklib_animation temp);
__sklib_string __sklib__animation_script_name__animation_script(__sklib_animation_script script);
__sklib_animation_script __sklib__animation_script_named__string_ref(const __sklib_string name);
void __sklib__assign_animation__animation__animation_script__string_ref(__sklib_animation anim, __sklib_animation_script script, const __sklib_string name);
void __sklib__assign_animation__animation__animation_script__string_ref__bool(__sklib_animation anim, __sklib_animation_script script, const __sklib_string name, int with_sound);
void __sklib__assign_animation__animation__animation_script__int(__sklib_animation anim, __sklib_animation_script script, int idx);
void __sklib__assign_animation__animation__animation_script__int__bool(__sklib_animation anim, __sklib_animation_script script, int idx, int with_sound);
void __sklib__assign_animation__animation__string_ref__string_ref(__sklib_animation anim, const __sklib_string script_name, const __sklib_string name);
void __sklib__assign_animation__animation__string_ref__string_ref__bool(__sklib_animation anim, const __sklib_string script_name, const __sklib_string name, int with_sound);
void __sklib__assign_animation__animation__int(__sklib_animation anim, int idx);
void __sklib__assign_animation__animation__int__bool(__sklib_animation anim, int idx, int with_sound);
void __sklib__assign_animation__animation__string(__sklib_animation anim, __sklib_string name);
void __sklib__assign_animation__animation__string__bool(__sklib_animation anim, __sklib_string name, int with_sound);
__sklib_animation __sklib__create_animation__animation_script__int__bool(__sklib_animation_script script, int idx, int with_sound);
__sklib_animation __sklib__create_animation__animation_script__string_ref(__sklib_animation_script script, const __sklib_string name);
__sklib_animation __sklib__create_animation__animation_script__string_ref__bool(__sklib_animation_script script, const __sklib_string name, int with_sound);
__sklib_animation __sklib__create_animation__string_ref__string_ref(const __sklib_string script_name, const __sklib_string name);
__sklib_animation __sklib__create_animation__string_ref__string_ref__bool(const __sklib_string script_name, const __sklib_string name, int with_sound);
void __sklib__free_all_animation_scripts();
void __sklib__free_animation__animation(__sklib_animation ani);
void __sklib__free_animation_script__animation_script(__sklib_animation_script script_to_free);
void __sklib__free_animation_script__string_ref(const __sklib_string name);
int __sklib__has_animation_named__animation_script__string_ref(__sklib_animation_script script, const __sklib_string name);
int __sklib__has_animation_script__string_ref(const __sklib_string name);
__sklib_animation_script __sklib__load_animation_script__string_ref__string_ref(const __sklib_string name, const __sklib_string filename);
void __sklib__restart_animation__animation(__sklib_animation anim);
void __sklib__restart_animation__animation__bool(__sklib_animation anim, int with_sound);
void __sklib__update_animation__animation__float__bool(__sklib_animation anim, float pct, int with_sound);
void __sklib__update_animation__animation(__sklib_animation anim);
void __sklib__update_animation__animation__float(__sklib_animation anim, float pct);
int __sklib__audio_ready();
void __sklib__close_audio();
void __sklib__open_audio();
int __sklib__contains__string_ref__string_ref(const __sklib_string text, const __sklib_string subtext);
double __sklib__convert_to_double__string_ref(const __sklib_string text);
int __sklib__convert_to_integer__string_ref(const __sklib_string text);
int __sklib__index_of__string_ref__string_ref(const __sklib_string text, const __sklib_string subtext);
int __sklib__is_double__string_ref(const __sklib_string text);
int __sklib__is_integer__string_ref(const __sklib_string text);
int __sklib__is_number__string_ref(const __sklib_string text);
int __sklib__length_of__string_ref(const __sklib_string text);
__sklib_string __sklib__replace_all__string_ref__string_ref__string_ref(const __sklib_string text, const __sklib_string substr, const __sklib_string new_text);
__sklib_vector_string __sklib__split__string_ref__char(const __sklib_string text, char delimiter);
__sklib_string __sklib__to_lowercase__string_ref(const __sklib_string text);
__sklib_string __sklib__to_uppercase__string_ref(const __sklib_string text);
__sklib_string __sklib__trim__string_ref(const __sklib_string text);
void __sklib__free_resource_bundle__string(const __sklib_string name);
int __sklib__has_resource_bundle__string_ref(const __sklib_string name);
void __sklib__load_resource_bundle__string_ref__string_ref(const __sklib_string name, const __sklib_string filename);
__sklib_point_2d __sklib__camera_position();
double __sklib__camera_x();
double __sklib__camera_y();
void __sklib__center_camera_on__sprite__vector_2d_ref(__sklib_sprite s, const __sklib_vector_2d offset);
void __sklib__center_camera_on__sprite__double__double(__sklib_sprite s, double offset_x, double offset_y);
void __sklib__move_camera_by__vector_2d_ref(const __sklib_vector_2d offset);
void __sklib__move_camera_by__double__double(double dx, double dy);
void __sklib__move_camera_to__point_2d_ref(const __sklib_point_2d pt);
void __sklib__move_camera_to__double__double(double x, double y);
int __sklib__point_in_window__window__point_2d_ref(__sklib_window wind, const __sklib_point_2d pt);
int __sklib__point_on_screen__point_2d_ref(const __sklib_point_2d pt);
int __sklib__rect_in_window__window__rectangle_ref(__sklib_window wind, const __sklib_rectangle rect);
int __sklib__rect_on_screen__rectangle_ref(const __sklib_rectangle rect);
__sklib_point_2d __sklib__screen_center();
__sklib_rectangle __sklib__screen_rectangle();
void __sklib__set_camera_position__point_2d(__sklib_point_2d pos);
void __sklib__set_camera_x__double(double x);
void __sklib__set_camera_y__double(double y);
__sklib_point_2d __sklib__to_screen__point_2d_ref(const __sklib_point_2d pt);
__sklib_rectangle __sklib__to_screen__rectangle_ref(const __sklib_rectangle rect);
double __sklib__to_screen_x__double(double world_x);
double __sklib__to_screen_y__double(double world_y);
__sklib_point_2d __sklib__to_world__point_2d_ref(const __sklib_point_2d pt);
double __sklib__to_world_x__double(double screen_x);
double __sklib__to_world_y__double(double screen_y);
__sklib_vector_2d __sklib__vector_world_to_screen();
__sklib_rectangle __sklib__window_area__window(__sklib_window wind);
void __sklib__draw_circle__color__circle_ref(__sklib_color clr, const __sklib_circle c);
void __sklib__draw_circle__color__circle_ref__drawing_options(__sklib_color clr, const __sklib_circle c, __sklib_drawing_options opts);
void __sklib__draw_circle__color__double__double__double(__sklib_color clr, double x, double y, double radius);
void __sklib__draw_circle__color__double__double__double__drawing_options(__sklib_color clr, double x, double y, double radius, __sklib_drawing_options opts);
void __sklib__draw_circle_on_bitmap__bitmap__color__double__double__double(__sklib_bitmap destination, __sklib_color clr, double x, double y, double radius);
void __sklib__draw_circle_on_bitmap__bitmap__color__double__double__double__drawing_options(__sklib_bitmap destination, __sklib_color clr, double x, double y, double radius, __sklib_drawing_options opts);
void __sklib__draw_circle_on_window__window__color__double__double__double(__sklib_window destination, __sklib_color clr, double x, double y, double radius);
void __sklib__draw_circle_on_window__window__color__double__double__double__drawing_options(__sklib_window destination, __sklib_color clr, double x, double y, double radius, __sklib_drawing_options opts);
void __sklib__fill_circle__color__circle_ref(__sklib_color clr, const __sklib_circle c);
void __sklib__fill_circle__color__circle_ref__drawing_options(__sklib_color clr, const __sklib_circle c, __sklib_drawing_options opts);
void __sklib__fill_circle__color__double__double__double(__sklib_color clr, double x, double y, double radius);
void __sklib__fill_circle__color__double__double__double__drawing_options(__sklib_color clr, double x, double y, double radius, __sklib_drawing_options opts);
void __sklib__fill_circle_on_bitmap__bitmap__color__double__double__double(__sklib_bitmap destination, __sklib_color clr, double x, double y, double radius);
void __sklib__fill_circle_on_bitmap__bitmap__color__double__double__double__drawing_options(__sklib_bitmap destination, __sklib_color clr, double x, double y, double radius, __sklib_drawing_options opts);
void __sklib__fill_circle_on_window__window__color__double__double__double(__sklib_window destination, __sklib_color clr, double x, double y, double radius);
void __sklib__fill_circle_on_window__window__color__double__double__double__drawing_options(__sklib_window destination, __sklib_color clr, double x, double y, double radius, __sklib_drawing_options opts);
__sklib_point_2d __sklib__center_point__circle_ref(const __sklib_circle c);
__sklib_circle __sklib__circle_at__point_2d_ref__double(const __sklib_point_2d pt, double radius);
__sklib_circle __sklib__circle_at__double__double__double(double x, double y, double radius);
float __sklib__circle_radius__circle(const __sklib_circle c);
int __sklib__circle_triangle_intersect__circle_ref__triangle_ref(const __sklib_circle c, const __sklib_triangle tri);
int __sklib__circle_triangle_intersect__circle_ref__triangle_ref__point_2d_ref(const __sklib_circle c, const __sklib_triangle tri, __sklib_point_2d *p);
float __sklib__circle_x__circle_ref(const __sklib_circle c);
float __sklib__circle_y__circle_ref(const __sklib_circle c);
int __sklib__circles_intersect__circle__circle(__sklib_circle c1, __sklib_circle c2);
int __sklib__circles_intersect__double__double__double__double__double__double(double c1_x, double c1_y, double c1_radius, double c2_x, double c2_y, double c2_radius);
__sklib_point_2d __sklib__closest_point_on_circle__point_2d_ref__circle_ref(const __sklib_point_2d from_pt, const __sklib_circle c);
__sklib_point_2d __sklib__closest_point_on_line_from_circle__circle_ref__line_ref(const __sklib_circle c, const __sklib_line l);
__sklib_point_2d __sklib__closest_point_on_rect_from_circle__circle_ref__rectangle_ref(const __sklib_circle c, const __sklib_rectangle rect);
__sklib_point_2d __sklib__closest_point_on_triangle_from_circle__circle_ref__triangle_ref(const __sklib_circle c, const __sklib_triangle tri);
__sklib_point_2d __sklib__distant_point_on_circle__point_2d_ref__circle_ref(const __sklib_point_2d pt, const __sklib_circle c);
int __sklib__distant_point_on_circle_heading__point_2d_ref__circle_ref__vector_2d_ref__point_2d_ref(const __sklib_point_2d pt, const __sklib_circle c, const __sklib_vector_2d heading, __sklib_point_2d *opposite_pt);
float __sklib__ray_circle_intersect_distance__point_2d_ref__vector_2d_ref__circle_ref(const __sklib_point_2d ray_origin, const __sklib_vector_2d ray_heading, const __sklib_circle c);
int __sklib__tangent_points__point_2d_ref__circle_ref__point_2d_ref__point_2d_ref(const __sklib_point_2d from_pt, const __sklib_circle c, __sklib_point_2d *p1, __sklib_point_2d *p2);
void __sklib__widest_points__circle_ref__vector_2d_ref__point_2d_ref__point_2d_ref(const __sklib_circle c, const __sklib_vector_2d along, __sklib_point_2d *pt1, __sklib_point_2d *pt2);
__sklib_rectangle __sklib__current_clip();
__sklib_rectangle __sklib__current_clip__bitmap(__sklib_bitmap bmp);
__sklib_rectangle __sklib__current_clip__window(__sklib_window wnd);
void __sklib__pop_clip__window(__sklib_window wnd);
void __sklib__pop_clip();
void __sklib__pop_clip__bitmap(__sklib_bitmap bmp);
void __sklib__push_clip__window__rectangle_ref(__sklib_window wnd, const __sklib_rectangle r);
void __sklib__push_clip__bitmap__rectangle_ref(__sklib_bitmap bmp, const __sklib_rectangle r);
void __sklib__push_clip__rectangle_ref(const __sklib_rectangle r);
void __sklib__reset_clip__bitmap(__sklib_bitmap bmp);
void __sklib__reset_clip();
void __sklib__reset_clip__window(__sklib_window wnd);
void __sklib__set_clip__rectangle_ref(const __sklib_rectangle r);
void __sklib__set_clip__bitmap__rectangle_ref(__sklib_bitmap bmp, const __sklib_rectangle r);
void __sklib__set_clip__window__rectangle_ref(__sklib_window wnd, const __sklib_rectangle r);
int __sklib__bitmap_circle_collision__bitmap__point_2d_ref__circle_ref(__sklib_bitmap bmp, const __sklib_point_2d pt, const __sklib_circle circ);
int __sklib__bitmap_circle_collision__bitmap__double__double__circle_ref(__sklib_bitmap bmp, double x, double y, const __sklib_circle circ);
int __sklib__bitmap_circle_collision__bitmap__int__matrix_2d_ref__circle_ref(__sklib_bitmap bmp, int cell, const __sklib_matrix_2d translation, const __sklib_circle circ);
int __sklib__bitmap_circle_collision__bitmap__int__point_2d_ref__circle_ref(__sklib_bitmap bmp, int cell, const __sklib_point_2d pt, const __sklib_circle circ);
int __sklib__bitmap_circle_collision__bitmap__int__double__double__circle_ref(__sklib_bitmap bmp, int cell, double x, double y, const __sklib_circle circ);
int __sklib__bitmap_collision__bitmap__double__double__bitmap__double__double(__sklib_bitmap bmp1, double x1, double y1, __sklib_bitmap bmp2, double x2, double y2);
int __sklib__bitmap_collision__bitmap__point_2d_ref__bitmap__point_2d_ref(__sklib_bitmap bmp1, const __sklib_point_2d pt1, __sklib_bitmap bmp2, const __sklib_point_2d pt2);
int __sklib__bitmap_collision__bitmap__int__matrix_2d_ref__bitmap__int__matrix_2d_ref(__sklib_bitmap bmp1, int cell1, const __sklib_matrix_2d matrix1, __sklib_bitmap bmp2, int cell2, const __sklib_matrix_2d matrix2);
int __sklib__bitmap_collision__bitmap__int__point_2d_ref__bitmap__int__point_2d_ref(__sklib_bitmap bmp1, int cell1, const __sklib_point_2d pt1, __sklib_bitmap bmp2, int cell2, const __sklib_point_2d pt2);
int __sklib__bitmap_collision__bitmap__int__double__double__bitmap__int__double__double(__sklib_bitmap bmp1, int cell1, double x1, double y1, __sklib_bitmap bmp2, int cell2, double x2, double y2);
int __sklib__bitmap_point_collision__bitmap__matrix_2d_ref__point_2d_ref(__sklib_bitmap bmp, const __sklib_matrix_2d translation, const __sklib_point_2d pt);
int __sklib__bitmap_point_collision__bitmap__point_2d_ref__point_2d_ref(__sklib_bitmap bmp, const __sklib_point_2d bmp_pt, const __sklib_point_2d pt);
int __sklib__bitmap_point_collision__bitmap__double__double__double__double(__sklib_bitmap bmp, double bmp_x, double bmp_y, double x, double y);
int __sklib__bitmap_point_collision__bitmap__int__matrix_2d_ref__point_2d_ref(__sklib_bitmap bmp, int cell, const __sklib_matrix_2d translation, const __sklib_point_2d pt);
int __sklib__bitmap_point_collision__bitmap__int__point_2d_ref__point_2d_ref(__sklib_bitmap bmp, int cell, const __sklib_point_2d bmp_pt, const __sklib_point_2d pt);
int __sklib__bitmap_point_collision__bitmap__int__double__double__double__double(__sklib_bitmap bmp, int cell, double bmp_x, double bmp_y, double x, double y);
int __sklib__bitmap_quad_collision__bitmap__int__matrix_2d_ref__quad_ref(__sklib_bitmap bmp, int cell, const __sklib_matrix_2d translation, const __sklib_quad q);
int __sklib__bitmap_ray_collision__bitmap__point_2d_ref__point_2d_ref__vector_2d_ref(__sklib_bitmap bmp, const __sklib_point_2d pt, const __sklib_point_2d origin, const __sklib_vector_2d heading);
int __sklib__bitmap_ray_collision__bitmap__double__double__point_2d_ref__vector_2d_ref(__sklib_bitmap bmp, double x, double y, const __sklib_point_2d origin, const __sklib_vector_2d heading);
int __sklib__bitmap_ray_collision__bitmap__int__matrix_2d_ref__point_2d_ref__vector_2d_ref(__sklib_bitmap bmp, int cell, const __sklib_matrix_2d translation, const __sklib_point_2d origin, const __sklib_vector_2d heading);
int __sklib__bitmap_ray_collision__bitmap__int__point_2d_ref__point_2d_ref__vector_2d_ref(__sklib_bitmap bmp, int cell, const __sklib_point_2d pt, const __sklib_point_2d origin, const __sklib_vector_2d heading);
int __sklib__bitmap_ray_collision__bitmap__int__double__double__point_2d_ref__vector_2d_ref(__sklib_bitmap bmp, int cell, double x, double y, const __sklib_point_2d origin, const __sklib_vector_2d heading);
int __sklib__bitmap_rectangle_collision__bitmap__point_2d_ref__rectangle_ref(__sklib_bitmap bmp, const __sklib_point_2d pt, const __sklib_rectangle rect);
int __sklib__bitmap_rectangle_collision__bitmap__double__double__rectangle_ref(__sklib_bitmap bmp, double x, double y, const __sklib_rectangle rect);
int __sklib__bitmap_rectangle_collision__bitmap__int__matrix_2d_ref__rectangle_ref(__sklib_bitmap bmp, int cell, const __sklib_matrix_2d translation, const __sklib_rectangle rect);
int __sklib__bitmap_rectangle_collision__bitmap__int__point_2d_ref__rectangle_ref(__sklib_bitmap bmp, int cell, const __sklib_point_2d pt, const __sklib_rectangle rect);
int __sklib__bitmap_rectangle_collision__bitmap__int__double__double__rectangle_ref(__sklib_bitmap bmp, int cell, double x, double y, const __sklib_rectangle rect);
int __sklib__sprite_bitmap_collision__sprite__bitmap__double__double(__sklib_sprite s, __sklib_bitmap bmp, double x, double y);
int __sklib__sprite_bitmap_collision__sprite__bitmap__int__point_2d_ref(__sklib_sprite s, __sklib_bitmap bmp, int cell, const __sklib_point_2d pt);
int __sklib__sprite_bitmap_collision__sprite__bitmap__int__double__double(__sklib_sprite s, __sklib_bitmap bmp, int cell, double x, double y);
int __sklib__sprite_collision__sprite__sprite(__sklib_sprite s1, __sklib_sprite s2);
int __sklib__sprite_point_collision__sprite__point_2d_ref(__sklib_sprite s, const __sklib_point_2d pt);
int __sklib__sprite_ray_collision__sprite__point_2d_ref__vector_2d_ref(__sklib_sprite s, const __sklib_point_2d origin, const __sklib_vector_2d heading);
int __sklib__sprite_rectangle_collision__sprite__rectangle_ref(__sklib_sprite s, const __sklib_rectangle rect);
int __sklib__alpha_of__color(__sklib_color c);
int __sklib__blue_of__color(__sklib_color c);
double __sklib__brightness_of__color(__sklib_color c);
__sklib_color __sklib__color_alice_blue();
__sklib_color __sklib__color_antique_white();
__sklib_color __sklib__color_aqua();
__sklib_color __sklib__color_aquamarine();
__sklib_color __sklib__color_azure();
__sklib_color __sklib__color_beige();
__sklib_color __sklib__color_bisque();
__sklib_color __sklib__color_black();
__sklib_color __sklib__color_blanched_almond();
__sklib_color __sklib__color_blue();
__sklib_color __sklib__color_blue_violet();
__sklib_color __sklib__color_bright_green();
__sklib_color __sklib__color_brown();
__sklib_color __sklib__color_burly_wood();
__sklib_color __sklib__color_cadet_blue();
__sklib_color __sklib__color_chartreuse();
__sklib_color __sklib__color_chocolate();
__sklib_color __sklib__color_coral();
__sklib_color __sklib__color_cornflower_blue();
__sklib_color __sklib__color_cornsilk();
__sklib_color __sklib__color_crimson();
__sklib_color __sklib__color_cyan();
__sklib_color __sklib__color_dark_blue();
__sklib_color __sklib__color_dark_cyan();
__sklib_color __sklib__color_dark_goldenrod();
__sklib_color __sklib__color_dark_gray();
__sklib_color __sklib__color_dark_green();
__sklib_color __sklib__color_dark_khaki();
__sklib_color __sklib__color_dark_magenta();
__sklib_color __sklib__color_dark_olive_green();
__sklib_color __sklib__color_dark_orange();
__sklib_color __sklib__color_dark_orchid();
__sklib_color __sklib__color_dark_red();
__sklib_color __sklib__color_dark_salmon();
__sklib_color __sklib__color_dark_sea_green();
__sklib_color __sklib__color_dark_slate_blue();
__sklib_color __sklib__color_dark_slate_gray();
__sklib_color __sklib__color_dark_turquoise();
__sklib_color __sklib__color_dark_violet();
__sklib_color __sklib__color_deep_pink();
__sklib_color __sklib__color_deep_sky_blue();
__sklib_color __sklib__color_dim_gray();
__sklib_color __sklib__color_dodger_blue();
__sklib_color __sklib__color_firebrick();
__sklib_color __sklib__color_floral_white();
__sklib_color __sklib__color_forest_green();
__sklib_color __sklib__color_fuchsia();
__sklib_color __sklib__color_gainsboro();
__sklib_color __sklib__color_ghost_white();
__sklib_color __sklib__color_gold();
__sklib_color __sklib__color_goldenrod();
__sklib_color __sklib__color_gray();
__sklib_color __sklib__color_green();
__sklib_color __sklib__color_green_yellow();
__sklib_color __sklib__color_honeydew();
__sklib_color __sklib__color_hot_pink();
__sklib_color __sklib__color_indian_red();
__sklib_color __sklib__color_indigo();
__sklib_color __sklib__color_ivory();
__sklib_color __sklib__color_khaki();
__sklib_color __sklib__color_lavender();
__sklib_color __sklib__color_lavender_blush();
__sklib_color __sklib__color_lawn_green();
__sklib_color __sklib__color_lemon_chiffon();
__sklib_color __sklib__color_light_blue();
__sklib_color __sklib__color_light_coral();
__sklib_color __sklib__color_light_cyan();
__sklib_color __sklib__color_light_goldenrod_yellow();
__sklib_color __sklib__color_light_gray();
__sklib_color __sklib__color_light_green();
__sklib_color __sklib__color_light_pink();
__sklib_color __sklib__color_light_salmon();
__sklib_color __sklib__color_light_sea_green();
__sklib_color __sklib__color_light_sky_blue();
__sklib_color __sklib__color_light_slate_gray();
__sklib_color __sklib__color_light_steel_blue();
__sklib_color __sklib__color_light_yellow();
__sklib_color __sklib__color_lime();
__sklib_color __sklib__color_lime_green();
__sklib_color __sklib__color_linen();
__sklib_color __sklib__color_magenta();
__sklib_color __sklib__color_maroon();
__sklib_color __sklib__color_medium_aquamarine();
__sklib_color __sklib__color_medium_blue();
__sklib_color __sklib__color_medium_orchid();
__sklib_color __sklib__color_medium_purple();
__sklib_color __sklib__color_medium_sea_green();
__sklib_color __sklib__color_medium_slate_blue();
__sklib_color __sklib__color_medium_spring_green();
__sklib_color __sklib__color_medium_turquoise();
__sklib_color __sklib__color_medium_violet_red();
__sklib_color __sklib__color_midnight_blue();
__sklib_color __sklib__color_mint_cream();
__sklib_color __sklib__color_misty_rose();
__sklib_color __sklib__color_moccasin();
__sklib_color __sklib__color_navajo_white();
__sklib_color __sklib__color_navy();
__sklib_color __sklib__color_old_lace();
__sklib_color __sklib__color_olive();
__sklib_color __sklib__color_olive_drab();
__sklib_color __sklib__color_orange();
__sklib_color __sklib__color_orange_red();
__sklib_color __sklib__color_orchid();
__sklib_color __sklib__color_pale_goldenrod();
__sklib_color __sklib__color_pale_green();
__sklib_color __sklib__color_pale_turquoise();
__sklib_color __sklib__color_pale_violet_red();
__sklib_color __sklib__color_papaya_whip();
__sklib_color __sklib__color_peach_puff();
__sklib_color __sklib__color_peru();
__sklib_color __sklib__color_pink();
__sklib_color __sklib__color_plum();
__sklib_color __sklib__color_powder_blue();
__sklib_color __sklib__color_purple();
__sklib_color __sklib__color_red();
__sklib_color __sklib__color_rosy_brown();
__sklib_color __sklib__color_royal_blue();
__sklib_color __sklib__color_saddle_brown();
__sklib_color __sklib__color_salmon();
__sklib_color __sklib__color_sandy_brown();
__sklib_color __sklib__color_sea_green();
__sklib_color __sklib__color_sea_shell();
__sklib_color __sklib__color_sienna();
__sklib_color __sklib__color_silver();
__sklib_color __sklib__color_sky_blue();
__sklib_color __sklib__color_slate_blue();
__sklib_color __sklib__color_slate_gray();
__sklib_color __sklib__color_snow();
__sklib_color __sklib__color_spring_green();
__sklib_color __sklib__color_steel_blue();
__sklib_color __sklib__color_swinburne_red();
__sklib_color __sklib__color_tan();
__sklib_color __sklib__color_teal();
__sklib_color __sklib__color_thistle();
__sklib_string __sklib__color_to_string__color(__sklib_color c);
__sklib_color __sklib__color_tomato();
__sklib_color __sklib__color_transparent();
__sklib_color __sklib__color_turquoise();
__sklib_color __sklib__color_violet();
__sklib_color __sklib__color_wheat();
__sklib_color __sklib__color_white();
__sklib_color __sklib__color_white_smoke();
__sklib_color __sklib__color_yellow();
__sklib_color __sklib__color_yellow_green();
int __sklib__green_of__color(__sklib_color c);
__sklib_color __sklib__hsb_color__double__double__double(double hue, double saturation, double brightness);
double __sklib__hue_of__color(__sklib_color c);
__sklib_color __sklib__random_color();
__sklib_color __sklib__random_rgb_color__int(int alpha);
int __sklib__red_of__color(__sklib_color c);
__sklib_color __sklib__rgb_color__double__double__double(double red, double green, double blue);
__sklib_color __sklib__rgb_color__int__int__int(int red, int green, int blue);
__sklib_color __sklib__rgba_color__double__double__double__double(double red, double green, double blue, double alpha);
__sklib_color __sklib__rgba_color__int__int__int__int(int red, int green, int blue, int alpha);
double __sklib__saturation_of__color(__sklib_color c);
__sklib_color __sklib__string_to_color__string(__sklib_string str);
__sklib_drawing_options __sklib__option_defaults();
__sklib_drawing_options __sklib__option_draw_to__bitmap(__sklib_bitmap dest);
__sklib_drawing_options __sklib__option_draw_to__bitmap__drawing_options(__sklib_bitmap dest, __sklib_drawing_options opts);
__sklib_drawing_options __sklib__option_draw_to__window(__sklib_window dest);
__sklib_drawing_options __sklib__option_draw_to__window__drawing_options(__sklib_window dest, __sklib_drawing_options opts);
__sklib_drawing_options __sklib__option_flip_x();
__sklib_drawing_options __sklib__option_flip_x__drawing_options(__sklib_drawing_options opts);
__sklib_drawing_options __sklib__option_flip_xy();
__sklib_drawing_options __sklib__option_flip_xy__drawing_options(__sklib_drawing_options opts);
__sklib_drawing_options __sklib__option_flip_y();
__sklib_drawing_options __sklib__option_flip_y__drawing_options(__sklib_drawing_options opts);
__sklib_drawing_options __sklib__option_line_width__int(int width);
__sklib_drawing_options __sklib__option_line_width__int__drawing_options(int width, __sklib_drawing_options opts);
__sklib_drawing_options __sklib__option_part_bmp__double__double__double__double(double x, double y, double w, double h);
__sklib_drawing_options __sklib__option_part_bmp__double__double__double__double__drawing_options(double x, double y, double w, double h, __sklib_drawing_options opts);
__sklib_drawing_options __sklib__option_part_bmp__rectangle(__sklib_rectangle part);
__sklib_drawing_options __sklib__option_part_bmp__rectangle__drawing_options(__sklib_rectangle part, __sklib_drawing_options opts);
__sklib_drawing_options __sklib__option_rotate_bmp__double(double angle);
__sklib_drawing_options __sklib__option_rotate_bmp__double__double__double(double angle, double anchor_x, double anchor_y);
__sklib_drawing_options __sklib__option_rotate_bmp__double__double__double__drawing_options(double angle, double anchor_x, double anchor_y, __sklib_drawing_options opts);
__sklib_drawing_options __sklib__option_rotate_bmp__double__drawing_options(double angle, __sklib_drawing_options opts);
__sklib_drawing_options __sklib__option_scale_bmp__double__double(double scale_x, double scale_y);
__sklib_drawing_options __sklib__option_scale_bmp__double__double__drawing_options(double scale_x, double scale_y, __sklib_drawing_options opts);
__sklib_drawing_options __sklib__option_to_screen();
__sklib_drawing_options __sklib__option_to_screen__drawing_options(__sklib_drawing_options opts);
__sklib_drawing_options __sklib__option_to_world();
__sklib_drawing_options __sklib__option_to_world__drawing_options(__sklib_drawing_options opts);
__sklib_drawing_options __sklib__option_with_animation__animation(__sklib_animation anim);
__sklib_drawing_options __sklib__option_with_animation__animation__drawing_options(__sklib_animation anim, __sklib_drawing_options opts);
__sklib_drawing_options __sklib__option_with_bitmap_cell__int(int cell);
__sklib_drawing_options __sklib__option_with_bitmap_cell__int__drawing_options(int cell, __sklib_drawing_options opts);
void __sklib__draw_ellipse__color__rectangle(__sklib_color clr, const __sklib_rectangle rect);
void __sklib__draw_ellipse__color__rectangle__drawing_options(__sklib_color clr, const __sklib_rectangle rect, __sklib_drawing_options opts);
void __sklib__draw_ellipse__color__double__double__double__double(__sklib_color clr, double x, double y, double width, double height);
void __sklib__draw_ellipse__color__double__double__double__double__drawing_options(__sklib_color clr, double x, double y, double width, double height, __sklib_drawing_options opts);
void __sklib__draw_ellipse_on_bitmap__bitmap__color__rectangle(__sklib_bitmap destination, __sklib_color clr, const __sklib_rectangle rect);
void __sklib__draw_ellipse_on_bitmap__bitmap__color__rectangle__drawing_options(__sklib_bitmap destination, __sklib_color clr, const __sklib_rectangle rect, __sklib_drawing_options opts);
void __sklib__draw_ellipse_on_bitmap__bitmap__color__double__double__double__double(__sklib_bitmap destination, __sklib_color clr, double x, double y, double width, double height);
void __sklib__draw_ellipse_on_bitmap__bitmap__color__double__double__double__double__drawing_options(__sklib_bitmap destination, __sklib_color clr, double x, double y, double width, double height, __sklib_drawing_options opts);
void __sklib__draw_ellipse_on_window__window__color__rectangle(__sklib_window destination, __sklib_color clr, const __sklib_rectangle rect);
void __sklib__draw_ellipse_on_window__window__color__rectangle__drawing_options(__sklib_window destination, __sklib_color clr, const __sklib_rectangle rect, __sklib_drawing_options opts);
void __sklib__draw_ellipse_on_window__window__color__double__double__double__double(__sklib_window destination, __sklib_color clr, double x, double y, double width, double height);
void __sklib__draw_ellipse_on_window__window__color__double__double__double__double__drawing_options(__sklib_window destination, __sklib_color clr, double x, double y, double width, double height, __sklib_drawing_options opts);
void __sklib__fill_ellipse__color__rectangle(__sklib_color clr, const __sklib_rectangle rect);
void __sklib__fill_ellipse__color__rectangle__drawing_options(__sklib_color clr, const __sklib_rectangle rect, __sklib_drawing_options opts);
void __sklib__fill_ellipse__color__double__double__double__double(__sklib_color clr, double x, double y, double width, double height);
void __sklib__fill_ellipse__color__double__double__double__double__drawing_options(__sklib_color clr, double x, double y, double width, double height, __sklib_drawing_options opts);
void __sklib__fill_ellipse_on_bitmap__bitmap__color__rectangle(__sklib_bitmap destination, __sklib_color clr, const __sklib_rectangle rect);
void __sklib__fill_ellipse_on_bitmap__bitmap__color__rectangle__drawing_options(__sklib_bitmap destination, __sklib_color clr, const __sklib_rectangle rect, __sklib_drawing_options opts);
void __sklib__fill_ellipse_on_bitmap__bitmap__color__double__double__double__double(__sklib_bitmap destination, __sklib_color clr, double x, double y, double width, double height);
void __sklib__fill_ellipse_on_bitmap__bitmap__color__double__double__double__double__drawing_options(__sklib_bitmap destination, __sklib_color clr, double x, double y, double width, double height, __sklib_drawing_options opts);
void __sklib__fill_ellipse_on_window__window__color__rectangle(__sklib_window destination, __sklib_color clr, const __sklib_rectangle rect);
void __sklib__fill_ellipse_on_window__window__color__rectangle__drawing_options(__sklib_window destination, __sklib_color clr, const __sklib_rectangle rect, __sklib_drawing_options opts);
void __sklib__fill_ellipse_on_window__window__color__double__double__double__double(__sklib_window destination, __sklib_color clr, double x, double y, double width, double height);
void __sklib__fill_ellipse_on_window__window__color__double__double__double__double__drawing_options(__sklib_window destination, __sklib_color clr, double x, double y, double width, double height, __sklib_drawing_options opts);
float __sklib__cosine__float(float degrees);
float __sklib__sine__float(float degrees);
float __sklib__tangent__float(float degrees);
void __sklib__clear_screen();
void __sklib__clear_screen__color(__sklib_color clr);
__sklib_display __sklib__display_details__unsigned_int(unsigned int index);
int __sklib__display_height__display(__sklib_display disp);
__sklib_string __sklib__display_name__display(__sklib_display disp);
int __sklib__display_width__display(__sklib_display disp);
int __sklib__display_x__display(__sklib_display disp);
int __sklib__display_y__display(__sklib_display disp);
int __sklib__number_of_displays();
void __sklib__refresh_screen();
void __sklib__refresh_screen__unsigned_int(unsigned int target_fps);
void __sklib__save_bitmap__bitmap__string_ref(__sklib_bitmap bmp, const __sklib_string basename);
int __sklib__screen_height();
int __sklib__screen_width();
void __sklib__take_screenshot__string_ref(const __sklib_string basename);
void __sklib__take_screenshot__window__string_ref(__sklib_window wind, const __sklib_string basename);
__sklib_circle __sklib__bitmap_bounding_circle__bitmap__point_2d_ref(__sklib_bitmap bmp, const __sklib_point_2d pt);
__sklib_rectangle __sklib__bitmap_bounding_rectangle__bitmap(__sklib_bitmap bmp);
__sklib_rectangle __sklib__bitmap_bounding_rectangle__bitmap__double__double(__sklib_bitmap bmp, double x, double y);
__sklib_point_2d __sklib__bitmap_cell_center__bitmap(__sklib_bitmap bmp);
__sklib_circle __sklib__bitmap_cell_circle__bitmap__double__double(__sklib_bitmap bmp, double x, double y);
__sklib_circle __sklib__bitmap_cell_circle__bitmap__point_2d(__sklib_bitmap bmp, const __sklib_point_2d pt);
__sklib_circle __sklib__bitmap_cell_circle__bitmap__point_2d__double(__sklib_bitmap bmp, const __sklib_point_2d pt, double scale);
int __sklib__bitmap_cell_columns__bitmap(__sklib_bitmap bmp);
int __sklib__bitmap_cell_count__bitmap(__sklib_bitmap bmp);
int __sklib__bitmap_cell_height__bitmap(__sklib_bitmap bmp);
__sklib_vector_2d __sklib__bitmap_cell_offset__bitmap__int(__sklib_bitmap src, int cell);
__sklib_rectangle __sklib__bitmap_cell_rectangle__bitmap(__sklib_bitmap src);
__sklib_rectangle __sklib__bitmap_cell_rectangle__bitmap__point_2d_ref(__sklib_bitmap src, const __sklib_point_2d pt);
int __sklib__bitmap_cell_rows__bitmap(__sklib_bitmap bmp);
int __sklib__bitmap_cell_width__bitmap(__sklib_bitmap bmp);
__sklib_point_2d __sklib__bitmap_center__bitmap(__sklib_bitmap bmp);
__sklib_string __sklib__bitmap_filename__bitmap(__sklib_bitmap bmp);
int __sklib__bitmap_height__bitmap(__sklib_bitmap bmp);
int __sklib__bitmap_height__string(__sklib_string name);
__sklib_string __sklib__bitmap_name__bitmap(__sklib_bitmap bmp);
__sklib_bitmap __sklib__bitmap_named__string(__sklib_string name);
__sklib_rectangle __sklib__bitmap_rectangle_of_cell__bitmap__int(__sklib_bitmap src, int cell);
void __sklib__bitmap_set_cell_details__bitmap__int__int__int__int__int(__sklib_bitmap bmp, int width, int height, int columns, int rows, int count);
int __sklib__bitmap_valid__bitmap(__sklib_bitmap bmp);
int __sklib__bitmap_width__bitmap(__sklib_bitmap bmp);
int __sklib__bitmap_width__string(__sklib_string name);
void __sklib__clear_bitmap__bitmap__color(__sklib_bitmap bmp, __sklib_color clr);
void __sklib__clear_bitmap__string__color(__sklib_string name, __sklib_color clr);
__sklib_bitmap __sklib__create_bitmap__string__int__int(__sklib_string name, int width, int height);
void __sklib__draw_bitmap__bitmap__double__double(__sklib_bitmap bmp, double x, double y);
void __sklib__draw_bitmap__bitmap__double__double__drawing_options(__sklib_bitmap bmp, double x, double y, __sklib_drawing_options opts);
void __sklib__draw_bitmap__string__double__double(__sklib_string name, double x, double y);
void __sklib__draw_bitmap__string__double__double__drawing_options(__sklib_string name, double x, double y, __sklib_drawing_options opts);
void __sklib__draw_bitmap_on_bitmap__bitmap__bitmap__double__double(__sklib_bitmap destination, __sklib_bitmap bmp, double x, double y);
void __sklib__draw_bitmap_on_bitmap__bitmap__bitmap__double__double__drawing_options(__sklib_bitmap destination, __sklib_bitmap bmp, double x, double y, __sklib_drawing_options opts);
void __sklib__draw_bitmap_on_window__window__bitmap__double__double(__sklib_window destination, __sklib_bitmap bmp, double x, double y);
void __sklib__draw_bitmap_on_window__window__bitmap__double__double__drawing_options(__sklib_window destination, __sklib_bitmap bmp, double x, double y, __sklib_drawing_options opts);
void __sklib__free_all_bitmaps();
void __sklib__free_bitmap__bitmap(__sklib_bitmap to_delete);
int __sklib__has_bitmap__string(__sklib_string name);
__sklib_bitmap __sklib__load_bitmap__string__string(__sklib_string name, __sklib_string filename);
int __sklib__pixel_drawn_at_point__bitmap__point_2d_ref(__sklib_bitmap bmp, const __sklib_point_2d pt);
int __sklib__pixel_drawn_at_point__bitmap__double__double(__sklib_bitmap bmp, double x, double y);
int __sklib__pixel_drawn_at_point__bitmap__int__point_2d_ref(__sklib_bitmap bmp, int cell, const __sklib_point_2d pt);
int __sklib__pixel_drawn_at_point__bitmap__int__double__double(__sklib_bitmap bmp, int cell, double x, double y);
void __sklib__setup_collision_mask__bitmap(__sklib_bitmap bmp);
void __sklib__process_events();
int __sklib__quit_requested();
void __sklib__reset_quit();
void __sklib__add_column__int(int width);
void __sklib__add_column_relative__double(double width);
int __sklib__bitmap_button__bitmap(__sklib_bitmap bmp);
int __sklib__bitmap_button__bitmap__rectangle_ref(__sklib_bitmap bmp, const __sklib_rectangle rect);
int __sklib__bitmap_button__bitmap__rectangle_ref__drawing_options(__sklib_bitmap bmp, const __sklib_rectangle rect, __sklib_drawing_options opts);
int __sklib__bitmap_button__bitmap__drawing_options(__sklib_bitmap bmp, __sklib_drawing_options opts);
int __sklib__bitmap_button__string_ref__bitmap(const __sklib_string label_text, __sklib_bitmap bmp);
int __sklib__bitmap_button__string_ref__bitmap__drawing_options(const __sklib_string label_text, __sklib_bitmap bmp, __sklib_drawing_options opts);
int __sklib__button__string_ref__rectangle_ref(const __sklib_string text, const __sklib_rectangle rect);
int __sklib__button__string_ref(const __sklib_string text);
int __sklib__button__string_ref__string_ref(const __sklib_string label_text, const __sklib_string text);
int __sklib__checkbox__string_ref__bool_ref__rectangle_ref(const __sklib_string text, const int value, const __sklib_rectangle rect);
int __sklib__checkbox__string_ref__bool_ref(const __sklib_string text, const int value);
int __sklib__checkbox__string_ref__string_ref__bool_ref(const __sklib_string label_text, const __sklib_string text, const int value);
__sklib_color __sklib__color_slider__color_ref__rectangle_ref(const __sklib_color clr, const __sklib_rectangle rect);
__sklib_color __sklib__color_slider__color_ref(const __sklib_color clr);
__sklib_color __sklib__color_slider__string_ref__color_ref(const __sklib_string label_text, const __sklib_color clr);
void __sklib__disable_interface();
void __sklib__draw_interface();
void __sklib__enable_interface();
void __sklib__end_inset__string_ref(const __sklib_string name);
void __sklib__end_panel__string_ref(const __sklib_string name);
void __sklib__end_popup__string_ref(const __sklib_string name);
void __sklib__end_treenode__string_ref(const __sklib_string label_text);
void __sklib__enter_column();
int __sklib__get_interface_label_width();
int __sklib__header__string_ref(const __sklib_string label_text);
__sklib_color __sklib__hsb_color_slider__color_ref__rectangle_ref(const __sklib_color clr, const __sklib_rectangle rect);
__sklib_color __sklib__hsb_color_slider__color_ref(const __sklib_color clr);
__sklib_color __sklib__hsb_color_slider__string_ref__color_ref(const __sklib_string label_text, const __sklib_color clr);
int __sklib__interface_enabled();
void __sklib__interface_style_panel__rectangle_ref(const __sklib_rectangle initial_rectangle);
void __sklib__label_element__string_ref(const __sklib_string text);
void __sklib__label_element__string_ref__rectangle_ref(const __sklib_string text, const __sklib_rectangle rect);
int __sklib__last_element_changed();
int __sklib__last_element_confirmed();
void __sklib__leave_column();
float __sklib__number_box__float_ref__float__rectangle_ref(const float value, float step, const __sklib_rectangle rect);
float __sklib__number_box__float_ref__float(const float value, float step);
float __sklib__number_box__string_ref__float_ref__float(const __sklib_string label_text, const float value, float step);
void __sklib__open_popup__string_ref(const __sklib_string name);
void __sklib__paragraph__string_ref(const __sklib_string text);
void __sklib__paragraph__string_ref__rectangle_ref(const __sklib_string text, const __sklib_rectangle rect);
void __sklib__reset_layout();
void __sklib__set_interface_accent_color__color__float(__sklib_color clr, float contrast);
void __sklib__set_interface_border_color__color(__sklib_color clr);
void __sklib__set_interface_colors_auto__color__color__float__float__float(__sklib_color main_clr, __sklib_color accent_clr, float contrast, float accent_contrast, float border_contrast);
void __sklib__set_interface_element_color__color__float(__sklib_color clr, float contrast);
void __sklib__set_interface_element_shadows__int__color__point_2d(int radius, __sklib_color clr, __sklib_point_2d offset);
void __sklib__set_interface_font__string_ref(const __sklib_string fnt);
void __sklib__set_interface_font__font(__sklib_font fnt);
void __sklib__set_interface_font_size__int(int size);
void __sklib__set_interface_label_width__int(int width);
void __sklib__set_interface_panel_shadows__int__color__point_2d(int radius, __sklib_color clr, __sklib_point_2d offset);
void __sklib__set_interface_root_text_color__color(__sklib_color clr);
void __sklib__set_interface_shadows__int__color__point_2d(int radius, __sklib_color clr, __sklib_point_2d offset);
void __sklib__set_interface_spacing__int__int(int spacing, int padding);
void __sklib__set_interface_style__interface_style(int style);
void __sklib__set_interface_style__interface_style__color(int style, __sklib_color clr);
void __sklib__set_interface_text_color__color(__sklib_color clr);
void __sklib__set_layout_height__int(int height);
void __sklib__single_line_layout();
float __sklib__slider__float_ref__float__float__rectangle_ref(const float value, float min_value, float max_value, const __sklib_rectangle rect);
float __sklib__slider__float_ref__float__float(const float value, float min_value, float max_value);
float __sklib__slider__string_ref__float_ref__float__float(const __sklib_string label_text, const float value, float min_value, float max_value);
void __sklib__split_into_columns__int(int count);
void __sklib__split_into_columns__int__int(int count, int last_width);
void __sklib__split_into_columns_relative__int__double(int count, double last_width);
void __sklib__start_custom_layout();
void __sklib__start_inset__string_ref__rectangle_ref(const __sklib_string name, const __sklib_rectangle rect);
void __sklib__start_inset__string_ref__int(const __sklib_string name, int height);
int __sklib__start_panel__string_ref__rectangle(const __sklib_string name, __sklib_rectangle initial_rectangle);
int __sklib__start_popup__string_ref(const __sklib_string name);
int __sklib__start_treenode__string_ref(const __sklib_string label_text);
__sklib_string __sklib__text_box__string_ref(const __sklib_string value);
__sklib_string __sklib__text_box__string_ref__rectangle_ref(const __sklib_string value, const __sklib_rectangle rect);
__sklib_string __sklib__text_box__string_ref__string_ref(const __sklib_string label_text, const __sklib_string value);
__sklib_json __sklib__create_json();
__sklib_json __sklib__create_json__string(__sklib_string json_string);
void __sklib__free_all_json();
void __sklib__free_json__json(__sklib_json j);
int __sklib__json_count_keys__json(__sklib_json j);
__sklib_json __sklib__json_from_color__color(__sklib_color clr);
__sklib_json __sklib__json_from_file__string_ref(const __sklib_string filename);
__sklib_json __sklib__json_from_string__string_ref(const __sklib_string j_string);
int __sklib__json_has_key__json__string(__sklib_json j, __sklib_string key);
void __sklib__json_read_array__json__string__vector_double_ref(__sklib_json j, __sklib_string key, __sklib_vector_double *out_result);
void __sklib__json_read_array__json__string__vector_json_ref(__sklib_json j, __sklib_string key, __sklib_vector_json *out_result);
void __sklib__json_read_array__json__string__vector_string_ref(__sklib_json j, __sklib_string key, __sklib_vector_string *out_result);
void __sklib__json_read_array__json__string__vector_bool_ref(__sklib_json j, __sklib_string key, __sklib_vector_bool *out_result);
int __sklib__json_read_bool__json__string(__sklib_json j, __sklib_string key);
float __sklib__json_read_number__json__string(__sklib_json j, __sklib_string key);
double __sklib__json_read_number_as_double__json__string(__sklib_json j, __sklib_string key);
int __sklib__json_read_number_as_int__json__string(__sklib_json j, __sklib_string key);
__sklib_json __sklib__json_read_object__json__string(__sklib_json j, __sklib_string key);
__sklib_string __sklib__json_read_string__json__string(__sklib_json j, __sklib_string key);
void __sklib__json_set_array__json__string__vector_string(__sklib_json j, __sklib_string key, __sklib_vector_string value);
void __sklib__json_set_array__json__string__vector_double(__sklib_json j, __sklib_string key, __sklib_vector_double value);
void __sklib__json_set_array__json__string__vector_bool(__sklib_json j, __sklib_string key, __sklib_vector_bool value);
void __sklib__json_set_array__json__string__vector_json(__sklib_json j, __sklib_string key, __sklib_vector_json value);
void __sklib__json_set_bool__json__string__bool(__sklib_json j, __sklib_string key, int value);
void __sklib__json_set_number__json__string__int(__sklib_json j, __sklib_string key, int value);
void __sklib__json_set_number__json__string__double(__sklib_json j, __sklib_string key, double value);
void __sklib__json_set_number__json__string__float(__sklib_json j, __sklib_string key, float value);
void __sklib__json_set_object__json__string__json(__sklib_json j, __sklib_string key, __sklib_json obj);
void __sklib__json_set_string__json__string__string(__sklib_json j, __sklib_string key, __sklib_string value);
__sklib_color __sklib__json_to_color__json(__sklib_json j);
void __sklib__json_to_file__json__string_ref(__sklib_json j, const __sklib_string filename);
__sklib_string __sklib__json_to_string__json(__sklib_json j);
int __sklib__any_key_pressed();
void __sklib__deregister_callback_on_key_down__key_callback_ptr(__sklib_key_callback *callback);
void __sklib__deregister_callback_on_key_typed__key_callback_ptr(__sklib_key_callback *callback);
void __sklib__deregister_callback_on_key_up__key_callback_ptr(__sklib_key_callback *callback);
int __sklib__key_down__key_code(int key);
__sklib_string __sklib__key_name__key_code(int key);
int __sklib__key_released__key_code(int key);
int __sklib__key_typed__key_code(int key);
int __sklib__key_up__key_code(int key);
void __sklib__register_callback_on_key_down__key_callback_ptr(__sklib_key_callback *callback);
void __sklib__register_callback_on_key_typed__key_callback_ptr(__sklib_key_callback *callback);
void __sklib__register_callback_on_key_up__key_callback_ptr(__sklib_key_callback *callback);
void __sklib__draw_line__color__line_ref(__sklib_color clr, const __sklib_line l);
void __sklib__draw_line__color__line_ref__drawing_options(__sklib_color clr, const __sklib_line l, __sklib_drawing_options opts);
void __sklib__draw_line__color__point_2d_ref__point_2d_ref(__sklib_color clr, const __sklib_point_2d from_pt, const __sklib_point_2d to_pt);
void __sklib__draw_line__color__point_2d_ref__point_2d_ref__drawing_options_ref(__sklib_color clr, const __sklib_point_2d from_pt, const __sklib_point_2d to_pt, const __sklib_drawing_options opts);
void __sklib__draw_line__color__double__double__double__double(__sklib_color clr, double x1, double y1, double x2, double y2);
void __sklib__draw_line__color__double__double__double__double__drawing_options_ref(__sklib_color clr, double x1, double y1, double x2, double y2, const __sklib_drawing_options opts);
void __sklib__draw_line_on_bitmap__bitmap__color__line_ref(__sklib_bitmap destination, __sklib_color clr, const __sklib_line l);
void __sklib__draw_line_on_bitmap__bitmap__color__line_ref__drawing_options(__sklib_bitmap destination, __sklib_color clr, const __sklib_line l, __sklib_drawing_options opts);
void __sklib__draw_line_on_bitmap__bitmap__color__point_2d_ref__point_2d_ref(__sklib_bitmap destination, __sklib_color clr, const __sklib_point_2d from_pt, const __sklib_point_2d to_pt);
void __sklib__draw_line_on_bitmap__bitmap__color__point_2d_ref__point_2d_ref__drawing_options_ref(__sklib_bitmap destination, __sklib_color clr, const __sklib_point_2d from_pt, const __sklib_point_2d to_pt, const __sklib_drawing_options opts);
void __sklib__draw_line_on_bitmap__bitmap__color__double__double__double__double(__sklib_bitmap destination, __sklib_color clr, double x1, double y1, double x2, double y2);
void __sklib__draw_line_on_bitmap__bitmap__color__double__double__double__double__drawing_options_ref(__sklib_bitmap destination, __sklib_color clr, double x1, double y1, double x2, double y2, const __sklib_drawing_options opts);
void __sklib__draw_line_on_window__window__color__line_ref(__sklib_window destination, __sklib_color clr, const __sklib_line l);
void __sklib__draw_line_on_window__window__color__line_ref__drawing_options(__sklib_window destination, __sklib_color clr, const __sklib_line l, __sklib_drawing_options opts);
void __sklib__draw_line_on_window__window__color__point_2d_ref__point_2d_ref(__sklib_window destination, __sklib_color clr, const __sklib_point_2d from_pt, const __sklib_point_2d to_pt);
void __sklib__draw_line_on_window__window__color__point_2d_ref__point_2d_ref__drawing_options_ref(__sklib_window destination, __sklib_color clr, const __sklib_point_2d from_pt, const __sklib_point_2d to_pt, const __sklib_drawing_options opts);
void __sklib__draw_line_on_window__window__color__double__double__double__double(__sklib_window destination, __sklib_color clr, double x1, double y1, double x2, double y2);
void __sklib__draw_line_on_window__window__color__double__double__double__double__drawing_options_ref(__sklib_window destination, __sklib_color clr, double x1, double y1, double x2, double y2, const __sklib_drawing_options opts);
__sklib_point_2d __sklib__closest_point_on_line__point_2d__line_ref(const __sklib_point_2d from_pt, const __sklib_line l);
__sklib_point_2d __sklib__closest_point_on_lines__point_2d__vector_line_ref__int_ref(const __sklib_point_2d from_pt, const __sklib_vector_line lines, int *line_idx);
__sklib_line __sklib__line_from__point_2d_ref__point_2d_ref(const __sklib_point_2d start, const __sklib_point_2d end_pt);
__sklib_line __sklib__line_from__point_2d_ref__vector_2d_ref(const __sklib_point_2d start, const __sklib_vector_2d offset);
__sklib_line __sklib__line_from__vector_2d_ref(const __sklib_vector_2d v);
__sklib_line __sklib__line_from__double__double__double__double(double x1, double y1, double x2, double y2);
int __sklib__line_intersection_point__line_ref__line_ref__point_2d_ref(const __sklib_line line1, const __sklib_line line2, __sklib_point_2d *pt);
int __sklib__line_intersects_circle__line_ref__circle_ref(const __sklib_line l, const __sklib_circle c);
int __sklib__line_intersects_lines__line_ref__vector_line_ref(const __sklib_line l, const __sklib_vector_line lines);
int __sklib__line_intersects_rect__line_ref__rectangle_ref(const __sklib_line l, const __sklib_rectangle rect);
float __sklib__line_length__line_ref(const __sklib_line l);
float __sklib__line_length_squared__line_ref(const __sklib_line l);
__sklib_point_2d __sklib__line_mid_point__line_ref(const __sklib_line l);
__sklib_vector_2d __sklib__line_normal__line_ref(const __sklib_line l);
__sklib_string __sklib__line_to_string__line_ref(const __sklib_line ln);
__sklib_vector_line __sklib__lines_from__rectangle_ref(const __sklib_rectangle rect);
__sklib_vector_line __sklib__lines_from__triangle_ref(const __sklib_triangle t);
int __sklib__lines_intersect__line_ref__line_ref(const __sklib_line l1, const __sklib_line l2);
void __sklib__close_log_process();
void __sklib__init_custom_logger__log_mode(int mode);
void __sklib__init_custom_logger__string__bool__log_mode(__sklib_string app_name, int override_prev_log, int mode);
void __sklib__log__log_level__string(int level, __sklib_string message);
void __sklib__apply_matrix__matrix_2d_ref__quad_ref(const __sklib_matrix_2d matrix, __sklib_quad *q);
void __sklib__apply_matrix__matrix_2d_ref__triangle_ref(const __sklib_matrix_2d m, __sklib_triangle *tri);
__sklib_matrix_2d __sklib__identity_matrix();
__sklib_matrix_2d __sklib__matrix_inverse__matrix_2d_ref(const __sklib_matrix_2d m);
__sklib_point_2d __sklib__matrix_multiply__matrix_2d_ref__point_2d_ref(const __sklib_matrix_2d m, const __sklib_point_2d pt);
__sklib_matrix_2d __sklib__matrix_multiply__matrix_2d_ref__matrix_2d_ref(const __sklib_matrix_2d m1, const __sklib_matrix_2d m2);
__sklib_vector_2d __sklib__matrix_multiply__matrix_2d_ref__vector_2d_ref(const __sklib_matrix_2d m, const __sklib_vector_2d v);
__sklib_string __sklib__matrix_to_string__matrix_2d_ref(const __sklib_matrix_2d matrix);
__sklib_matrix_2d __sklib__rotation_matrix__double(double deg);
__sklib_matrix_2d __sklib__scale_matrix__point_2d_ref(const __sklib_point_2d scale);
__sklib_matrix_2d __sklib__scale_matrix__vector_2d_ref(const __sklib_vector_2d scale);
__sklib_matrix_2d __sklib__scale_matrix__double(double scale);
__sklib_matrix_2d __sklib__scale_rotate_translate_matrix__point_2d_ref__double__point_2d_ref(const __sklib_point_2d scale, double deg, const __sklib_point_2d translate);
__sklib_matrix_2d __sklib__translation_matrix__point_2d_ref(const __sklib_point_2d pt);
__sklib_matrix_2d __sklib__translation_matrix__vector_2d_ref(const __sklib_vector_2d pt);
__sklib_matrix_2d __sklib__translation_matrix__double__double(double dx, double dy);
void __sklib__hide_mouse();
int __sklib__mouse_clicked__mouse_button(int button);
int __sklib__mouse_down__mouse_button(int button);
__sklib_vector_2d __sklib__mouse_movement();
__sklib_point_2d __sklib__mouse_position();
__sklib_vector_2d __sklib__mouse_position_vector();
int __sklib__mouse_shown();
int __sklib__mouse_up__mouse_button(int button);
__sklib_vector_2d __sklib__mouse_wheel_scroll();
float __sklib__mouse_x();
float __sklib__mouse_y();
void __sklib__move_mouse__double__double(double x, double y);
void __sklib__move_mouse__point_2d(__sklib_point_2d point);
void __sklib__show_mouse();
void __sklib__show_mouse__bool(int show);
void __sklib__fade_music_in__string_ref__int(const __sklib_string name, int ms);
void __sklib__fade_music_in__string_ref__int__int(const __sklib_string name, int times, int ms);
void __sklib__fade_music_in__music__int(__sklib_music data, int ms);
void __sklib__fade_music_in__music__int__int(__sklib_music data, int times, int ms);
void __sklib__fade_music_out__int(int ms);
void __sklib__free_all_music();
void __sklib__free_music__music(__sklib_music effect);
int __sklib__has_music__string_ref(const __sklib_string name);
__sklib_music __sklib__load_music__string_ref__string_ref(const __sklib_string name, const __sklib_string filename);
__sklib_string __sklib__music_filename__music(__sklib_music data);
__sklib_string __sklib__music_name__music(__sklib_music data);
__sklib_music __sklib__music_named__string_ref(const __sklib_string name);
int __sklib__music_playing();
int __sklib__music_valid__music(__sklib_music m);
double __sklib__music_volume();
void __sklib__pause_music();
void __sklib__play_music__string_ref(const __sklib_string name);
void __sklib__play_music__string_ref__int(const __sklib_string name, int times);
void __sklib__play_music__music(__sklib_music data);
void __sklib__play_music__music__int(__sklib_music data, int times);
void __sklib__play_music__music__int__double(__sklib_music data, int times, double volume);
void __sklib__resume_music();
void __sklib__set_music_volume__double(double volume);
void __sklib__stop_music();
int __sklib__accept_all_new_connections();
int __sklib__accept_new_connection__server_socket(__sklib_server_socket server);
void __sklib__broadcast_message__string_ref__server_socket(const __sklib_string a_msg, __sklib_server_socket svr);
void __sklib__broadcast_message__string_ref(const __sklib_string a_msg);
void __sklib__broadcast_message__string_ref__string_ref(const __sklib_string a_msg, const __sklib_string name);
void __sklib__check_network_activity();
void __sklib__clear_messages__string_ref(const __sklib_string name);
void __sklib__clear_messages__connection(__sklib_connection a_connection);
void __sklib__clear_messages__server_socket(__sklib_server_socket svr);
void __sklib__close_all_connections();
void __sklib__close_all_servers();
int __sklib__close_connection__connection(__sklib_connection a_connection);
int __sklib__close_connection__string_ref(const __sklib_string name);
void __sklib__close_message__message(__sklib_message msg);
int __sklib__close_server__string_ref(const __sklib_string name);
int __sklib__close_server__server_socket(__sklib_server_socket svr);
unsigned int __sklib__connection_count__string_ref(const __sklib_string name);
unsigned int __sklib__connection_count__server_socket(__sklib_server_socket server);
unsigned int __sklib__connection_ip__connection(__sklib_connection a_connection);
unsigned int __sklib__connection_ip__string_ref(const __sklib_string name);
__sklib_connection __sklib__connection_named__string_ref(const __sklib_string name);
unsigned short __sklib__connection_port__connection(__sklib_connection a_connection);
unsigned short __sklib__connection_port__string_ref(const __sklib_string name);
__sklib_server_socket __sklib__create_server__string_ref__unsigned_short(const __sklib_string name, unsigned short port);
__sklib_server_socket __sklib__create_server__string_ref__unsigned_short__connection_type(const __sklib_string name, unsigned short port, int protocol);
__sklib_string __sklib__dec_to_hex__unsigned_int(unsigned int a_dec);
__sklib_connection __sklib__fetch_new_connection__server_socket(__sklib_server_socket server);
int __sklib__has_connection__string_ref(const __sklib_string name);
int __sklib__has_messages();
int __sklib__has_messages__connection(__sklib_connection con);
int __sklib__has_messages__string_ref(const __sklib_string name);
int __sklib__has_messages__server_socket(__sklib_server_socket svr);
int __sklib__has_new_connections();
int __sklib__has_server__string_ref(const __sklib_string name);
__sklib_string __sklib__hex_str_to_ipv4__string_ref(const __sklib_string a_hex);
__sklib_string __sklib__hex_to_dec_string__string_ref(const __sklib_string a_hex);
unsigned int __sklib__ipv4_to_dec__string_ref(const __sklib_string a_ip);
__sklib_string __sklib__ipv4_to_hex__string_ref(const __sklib_string a_ip);
__sklib_string __sklib__ipv4_to_str__unsigned_int(unsigned int ip);
int __sklib__is_connection_open__connection(__sklib_connection con);
int __sklib__is_connection_open__string_ref(const __sklib_string name);
int __sklib__is_valid_ipv4__string_ref(const __sklib_string ip);
__sklib_connection __sklib__last_connection__string_ref(const __sklib_string name);
__sklib_connection __sklib__last_connection__server_socket(__sklib_server_socket server);
__sklib_connection __sklib__message_connection__message(__sklib_message msg);
unsigned int __sklib__message_count__server_socket(__sklib_server_socket svr);
unsigned int __sklib__message_count__connection(__sklib_connection a_connection);
unsigned int __sklib__message_count__string_ref(const __sklib_string name);
__sklib_string __sklib__message_data__message(__sklib_message msg);
__sklib_vector_int8_t __sklib__message_data_bytes__message(__sklib_message msg);
__sklib_string __sklib__message_host__message(__sklib_message msg);
unsigned short __sklib__message_port__message(__sklib_message msg);
int __sklib__message_protocol__message(__sklib_message msg);
__sklib_string __sklib__my_ip();
__sklib_string __sklib__name_for_connection__string__unsigned_int(const __sklib_string host, const unsigned int port);
int __sklib__new_connection_count__server_socket(__sklib_server_socket server);
__sklib_connection __sklib__open_connection__string_ref__string_ref__unsigned_short(const __sklib_string name, const __sklib_string host, unsigned short port);
__sklib_connection __sklib__open_connection__string_ref__string_ref__unsigned_short__connection_type(const __sklib_string name, const __sklib_string host, unsigned short port, int protocol);
__sklib_message __sklib__read_message();
__sklib_message __sklib__read_message__connection(__sklib_connection a_connection);
__sklib_message __sklib__read_message__string_ref(const __sklib_string name);
__sklib_message __sklib__read_message__server_socket(__sklib_server_socket svr);
__sklib_string __sklib__read_message_data__string_ref(const __sklib_string name);
__sklib_string __sklib__read_message_data__connection(__sklib_connection a_connection);
__sklib_string __sklib__read_message_data__server_socket(__sklib_server_socket svr);
void __sklib__reconnect__connection(__sklib_connection a_connection);
void __sklib__reconnect__string_ref(const __sklib_string name);
void __sklib__release_all_connections();
void __sklib__reset_new_connection_count__server_socket(__sklib_server_socket server);
__sklib_connection __sklib__retrieve_connection__string_ref__int(const __sklib_string name, int idx);
__sklib_connection __sklib__retrieve_connection__server_socket__int(__sklib_server_socket server, int idx);
int __sklib__send_message_to__string_ref__connection(const __sklib_string a_msg, __sklib_connection a_connection);
int __sklib__send_message_to__string_ref__string_ref(const __sklib_string a_msg, const __sklib_string name);
int __sklib__server_has_new_connection__string_ref(const __sklib_string name);
int __sklib__server_has_new_connection__server_socket(__sklib_server_socket server);
__sklib_server_socket __sklib__server_named__string_ref(const __sklib_string name);
void __sklib__set_udp_packet_size__unsigned_int(unsigned int udp_packet_size);
unsigned int __sklib__udp_packet_size();
void __sklib__draw_pixel__color__point_2d_ref(__sklib_color clr, const __sklib_point_2d pt);
void __sklib__draw_pixel__color__point_2d_ref__drawing_options(__sklib_color clr, const __sklib_point_2d pt, __sklib_drawing_options opts);
void __sklib__draw_pixel__color__double__double(__sklib_color clr, double x, double y);
void __sklib__draw_pixel__color__double__double__drawing_options(__sklib_color clr, double x, double y, __sklib_drawing_options opts);
void __sklib__draw_pixel_on_bitmap__bitmap__color__point_2d_ref(__sklib_bitmap destination, __sklib_color clr, const __sklib_point_2d pt);
void __sklib__draw_pixel_on_bitmap__bitmap__color__point_2d_ref__drawing_options(__sklib_bitmap destination, __sklib_color clr, const __sklib_point_2d pt, __sklib_drawing_options opts);
void __sklib__draw_pixel_on_bitmap__bitmap__color__double__double(__sklib_bitmap destination, __sklib_color clr, double x, double y);
void __sklib__draw_pixel_on_bitmap__bitmap__color__double__double__drawing_options(__sklib_bitmap destination, __sklib_color clr, double x, double y, __sklib_drawing_options opts);
void __sklib__draw_pixel_on_window__window__color__point_2d_ref(__sklib_window destination, __sklib_color clr, const __sklib_point_2d pt);
void __sklib__draw_pixel_on_window__window__color__point_2d_ref__drawing_options(__sklib_window destination, __sklib_color clr, const __sklib_point_2d pt, __sklib_drawing_options opts);
void __sklib__draw_pixel_on_window__window__color__double__double(__sklib_window destination, __sklib_color clr, double x, double y);
void __sklib__draw_pixel_on_window__window__color__double__double__drawing_options(__sklib_window destination, __sklib_color clr, double x, double y, __sklib_drawing_options opts);
__sklib_color __sklib__get_pixel__bitmap__point_2d_ref(__sklib_bitmap bmp, const __sklib_point_2d pt);
__sklib_color __sklib__get_pixel__bitmap__double__double(__sklib_bitmap bmp, double x, double y);
__sklib_color __sklib__get_pixel__point_2d_ref(const __sklib_point_2d pt);
__sklib_color __sklib__get_pixel__double__double(double x, double y);
__sklib_color __sklib__get_pixel__window__point_2d_ref(__sklib_window wnd, const __sklib_point_2d pt);
__sklib_color __sklib__get_pixel__window__double__double(__sklib_window wnd, double x, double y);
__sklib_color __sklib__get_pixel_from_window__window__point_2d_ref(__sklib_window destination, const __sklib_point_2d pt);
__sklib_color __sklib__get_pixel_from_window__window__double__double(__sklib_window destination, double x, double y);
__sklib_point_2d __sklib__point_at__double__double(double x, double y);
__sklib_point_2d __sklib__point_at_origin();
int __sklib__point_in_circle__point_2d_ref__circle_ref(const __sklib_point_2d pt, const __sklib_circle c);
int __sklib__point_in_circle__double__double__double__double__double(double ptx, double pty, double cx, double cy, double radius);
int __sklib__point_in_quad__point_2d_ref__quad_ref(const __sklib_point_2d pt, const __sklib_quad q);
int __sklib__point_in_rectangle__point_2d_ref__rectangle_ref(const __sklib_point_2d pt, const __sklib_rectangle rect);
int __sklib__point_in_rectangle__double__double__double__double__double__double(double ptx, double pty, double rect_x, double rect_y, double rect_width, double rect_height);
int __sklib__point_in_triangle__point_2d_ref__triangle_ref(const __sklib_point_2d pt, const __sklib_triangle tri);
float __sklib__point_line_distance__point_2d_ref__line_ref(const __sklib_point_2d pt, const __sklib_line l);
__sklib_point_2d __sklib__point_offset_by__point_2d_ref__vector_2d_ref(const __sklib_point_2d start_point, const __sklib_vector_2d offset);
__sklib_point_2d __sklib__point_offset_from_origin__vector_2d_ref(const __sklib_vector_2d offset);
int __sklib__point_on_line__point_2d_ref__line_ref(const __sklib_point_2d pt, const __sklib_line l);
int __sklib__point_on_line__point_2d_ref__line_ref__float(const __sklib_point_2d pt, const __sklib_line l, float proximity);
float __sklib__point_point_angle__point_2d_ref__point_2d_ref(const __sklib_point_2d pt1, const __sklib_point_2d pt2);
double __sklib__point_point_distance__point_2d_ref__point_2d_ref(const __sklib_point_2d pt1, const __sklib_point_2d pt2);
__sklib_string __sklib__point_to_string__point_2d_ref(const __sklib_point_2d pt);
__sklib_point_2d __sklib__random_bitmap_point__bitmap(__sklib_bitmap bmp);
__sklib_point_2d __sklib__random_screen_point();
__sklib_point_2d __sklib__random_window_point__window(__sklib_window wind);
int __sklib__same_point__point_2d_ref__point_2d_ref(const __sklib_point_2d pt1, const __sklib_point_2d pt2);
__sklib_quad __sklib__quad_from__point_2d_ref__point_2d_ref__double(const __sklib_point_2d line_origin, const __sklib_point_2d line_end, double width);
__sklib_quad __sklib__quad_from__point_2d_ref__point_2d_ref__point_2d_ref__point_2d_ref(const __sklib_point_2d p1, const __sklib_point_2d p2, const __sklib_point_2d p3, const __sklib_point_2d p4);
__sklib_quad __sklib__quad_from__rectangle_ref(const __sklib_rectangle rect);
__sklib_quad __sklib__quad_from__rectangle_ref__matrix_2d_ref(const __sklib_rectangle rect, const __sklib_matrix_2d transform);
__sklib_quad __sklib__quad_from__double__double__double__double__double__double__double__double(double x_top_left, double y_top_left, double x_top_right, double y_top_right, double x_bottom_left, double y_bottom_left, double x_bottom_right, double y_bottom_right);
int __sklib__quads_intersect__quad_ref__quad_ref(const __sklib_quad q1, const __sklib_quad q2);
void __sklib__set_quad_point__quad_ref__int__point_2d_ref(__sklib_quad *q, int idx, const __sklib_point_2d value);
__sklib_vector_triangle __sklib__triangles_from__quad_ref(const __sklib_quad q);
int __sklib__rnd__int__int(int min, int max);
float __sklib__rnd();
int __sklib__rnd__int(int ubound);
int __sklib__has_gpio();
void __sklib__raspi_cleanup();
int __sklib__raspi_get_mode__pins(int pin);
void __sklib__raspi_init();
int __sklib__raspi_read__pins(int pin);
void __sklib__raspi_set_mode__pins__pin_modes(int pin, int mode);
void __sklib__raspi_set_pull_up_down__pins__pull_up_down(int pin, int pud);
void __sklib__raspi_set_pwm_dutycycle__pins__int(int pin, int dutycycle);
void __sklib__raspi_set_pwm_frequency__pins__int(int pin, int frequency);
void __sklib__raspi_set_pwm_range__pins__int(int pin, int range);
void __sklib__raspi_write__pins__pin_values(int pin, int value);
void __sklib__draw_quad__color__quad_ref(__sklib_color clr, const __sklib_quad q);
void __sklib__draw_quad__color__quad_ref__drawing_options_ref(__sklib_color clr, const __sklib_quad q, const __sklib_drawing_options opts);
void __sklib__draw_quad_on_bitmap__bitmap__color__quad_ref(__sklib_bitmap destination, __sklib_color clr, const __sklib_quad q);
void __sklib__draw_quad_on_bitmap__bitmap__color__quad_ref__drawing_options_ref(__sklib_bitmap destination, __sklib_color clr, const __sklib_quad q, const __sklib_drawing_options opts);
void __sklib__draw_quad_on_window__window__color__quad_ref(__sklib_window destination, __sklib_color clr, const __sklib_quad q);
void __sklib__draw_quad_on_window__window__color__quad_ref__drawing_options_ref(__sklib_window destination, __sklib_color clr, const __sklib_quad q, const __sklib_drawing_options opts);
void __sklib__draw_rectangle__color__rectangle_ref(__sklib_color clr, const __sklib_rectangle rect);
void __sklib__draw_rectangle__color__rectangle_ref__drawing_options_ref(__sklib_color clr, const __sklib_rectangle rect, const __sklib_drawing_options opts);
void __sklib__draw_rectangle__color__double__double__double__double(__sklib_color clr, double x, double y, double width, double height);
void __sklib__draw_rectangle__color__double__double__double__double__drawing_options_ref(__sklib_color clr, double x, double y, double width, double height, const __sklib_drawing_options opts);
void __sklib__draw_rectangle_on_bitmap__bitmap__color__rectangle_ref(__sklib_bitmap destination, __sklib_color clr, const __sklib_rectangle rect);
void __sklib__draw_rectangle_on_bitmap__bitmap__color__rectangle_ref__drawing_options_ref(__sklib_bitmap destination, __sklib_color clr, const __sklib_rectangle rect, const __sklib_drawing_options opts);
void __sklib__draw_rectangle_on_bitmap__bitmap__color__double__double__double__double(__sklib_bitmap destination, __sklib_color clr, double x, double y, double width, double height);
void __sklib__draw_rectangle_on_bitmap__bitmap__color__double__double__double__double__drawing_options(__sklib_bitmap destination, __sklib_color clr, double x, double y, double width, double height, __sklib_drawing_options opts);
void __sklib__draw_rectangle_on_window__window__color__rectangle_ref(__sklib_window destination, __sklib_color clr, const __sklib_rectangle rect);
void __sklib__draw_rectangle_on_window__window__color__rectangle_ref__drawing_options_ref(__sklib_window destination, __sklib_color clr, const __sklib_rectangle rect, const __sklib_drawing_options opts);
void __sklib__draw_rectangle_on_window__window__color__double__double__double__double(__sklib_window destination, __sklib_color clr, double x, double y, double width, double height);
void __sklib__draw_rectangle_on_window__window__color__double__double__double__double__drawing_options(__sklib_window destination, __sklib_color clr, double x, double y, double width, double height, __sklib_drawing_options opts);
void __sklib__fill_quad__color__quad_ref(__sklib_color clr, const __sklib_quad q);
void __sklib__fill_quad__color__quad_ref__drawing_options_ref(__sklib_color clr, const __sklib_quad q, const __sklib_drawing_options opts);
void __sklib__fill_quad_on_bitmap__bitmap__color__quad_ref(__sklib_bitmap destination, __sklib_color clr, const __sklib_quad q);
void __sklib__fill_quad_on_bitmap__bitmap__color__quad_ref__drawing_options_ref(__sklib_bitmap destination, __sklib_color clr, const __sklib_quad q, const __sklib_drawing_options opts);
void __sklib__fill_quad_on_window__window__color__quad_ref(__sklib_window destination, __sklib_color clr, const __sklib_quad q);
void __sklib__fill_quad_on_window__window__color__quad_ref__drawing_options_ref(__sklib_window destination, __sklib_color clr, const __sklib_quad q, const __sklib_drawing_options opts);
void __sklib__fill_rectangle__color__rectangle_ref(__sklib_color clr, const __sklib_rectangle rect);
void __sklib__fill_rectangle__color__rectangle_ref__drawing_options_ref(__sklib_color clr, const __sklib_rectangle rect, const __sklib_drawing_options opts);
void __sklib__fill_rectangle__color__double__double__double__double(__sklib_color clr, double x, double y, double width, double height);
void __sklib__fill_rectangle__color__double__double__double__double__drawing_options_ref(__sklib_color clr, double x, double y, double width, double height, const __sklib_drawing_options opts);
void __sklib__fill_rectangle_on_bitmap__bitmap__color__rectangle_ref(__sklib_bitmap destination, __sklib_color clr, const __sklib_rectangle rect);
void __sklib__fill_rectangle_on_bitmap__bitmap__color__rectangle_ref__drawing_options_ref(__sklib_bitmap destination, __sklib_color clr, const __sklib_rectangle rect, const __sklib_drawing_options opts);
void __sklib__fill_rectangle_on_bitmap__bitmap__color__double__double__double__double(__sklib_bitmap destination, __sklib_color clr, double x, double y, double width, double height);
void __sklib__fill_rectangle_on_bitmap__bitmap__color__double__double__double__double__drawing_options_ref(__sklib_bitmap destination, __sklib_color clr, double x, double y, double width, double height, const __sklib_drawing_options opts);
void __sklib__fill_rectangle_on_window__window__color__rectangle_ref(__sklib_window destination, __sklib_color clr, const __sklib_rectangle rect);
void __sklib__fill_rectangle_on_window__window__color__rectangle_ref__drawing_options_ref(__sklib_window destination, __sklib_color clr, const __sklib_rectangle rect, const __sklib_drawing_options opts);
void __sklib__fill_rectangle_on_window__window__color__double__double__double__double(__sklib_window destination, __sklib_color clr, double x, double y, double width, double height);
void __sklib__fill_rectangle_on_window__window__color__double__double__double__double__drawing_options_ref(__sklib_window destination, __sklib_color clr, double x, double y, double width, double height, const __sklib_drawing_options opts);
__sklib_rectangle __sklib__inset_rectangle__rectangle_ref__float(const __sklib_rectangle rect, float inset_amount);
__sklib_rectangle __sklib__intersection__rectangle_ref__rectangle_ref(const __sklib_rectangle rect1, const __sklib_rectangle rect2);
__sklib_rectangle __sklib__rectangle_around__circle_ref(const __sklib_circle c);
__sklib_rectangle __sklib__rectangle_around__line_ref(const __sklib_line l);
__sklib_rectangle __sklib__rectangle_around__quad_ref(const __sklib_quad q);
__sklib_rectangle __sklib__rectangle_around__triangle_ref(const __sklib_triangle t);
double __sklib__rectangle_bottom__rectangle_ref(const __sklib_rectangle rect);
__sklib_point_2d __sklib__rectangle_center__rectangle_ref(const __sklib_rectangle rect);
__sklib_rectangle __sklib__rectangle_from__point_2d__double__double(const __sklib_point_2d pt, const double width, const double height);
__sklib_rectangle __sklib__rectangle_from__point_2d__point_2d(const __sklib_point_2d pt1, const __sklib_point_2d pt2);
__sklib_rectangle __sklib__rectangle_from__double__double__double__double(double x, double y, double width, double height);
double __sklib__rectangle_left__rectangle_ref(const __sklib_rectangle rect);
__sklib_rectangle __sklib__rectangle_offset_by__rectangle_ref__vector_2d_ref(const __sklib_rectangle rect, const __sklib_vector_2d offset);
double __sklib__rectangle_right__rectangle_ref(const __sklib_rectangle rect);
__sklib_string __sklib__rectangle_to_string__rectangle_ref(const __sklib_rectangle rect);
double __sklib__rectangle_top__rectangle_ref(const __sklib_rectangle rect);
int __sklib__rectangles_intersect__rectangle_ref__rectangle_ref(const __sklib_rectangle rect1, const __sklib_rectangle rect2);
void __sklib__deregister_free_notifier__free_notifier_ptr(__sklib_free_notifier *handler);
__sklib_string __sklib__path_to_resource__string_ref__resource_kind(const __sklib_string filename, int kind);
__sklib_string __sklib__path_to_resources();
__sklib_string __sklib__path_to_resources__resource_kind(int kind);
void __sklib__register_free_notifier__free_notifier_ptr(__sklib_free_notifier *fn);
void __sklib__set_resources_path__string_ref(const __sklib_string path);
void __sklib__fade_all_sound_effects_out__int(int ms);
void __sklib__fade_sound_effect_out__sound_effect__int(__sklib_sound_effect effect, int ms);
void __sklib__free_all_sound_effects();
void __sklib__free_sound_effect__sound_effect(__sklib_sound_effect effect);
int __sklib__has_sound_effect__string_ref(const __sklib_string name);
__sklib_sound_effect __sklib__load_sound_effect__string_ref__string_ref(const __sklib_string name, const __sklib_string filename);
void __sklib__play_sound_effect__string_ref(const __sklib_string name);
void __sklib__play_sound_effect__string_ref__double(const __sklib_string name, double volume);
void __sklib__play_sound_effect__string_ref__int(const __sklib_string name, int times);
void __sklib__play_sound_effect__string_ref__int__double(const __sklib_string name, int times, double volume);
void __sklib__play_sound_effect__sound_effect(__sklib_sound_effect effect);
void __sklib__play_sound_effect__sound_effect__double(__sklib_sound_effect effect, double volume);
void __sklib__play_sound_effect__sound_effect__int(__sklib_sound_effect effect, int times);
void __sklib__play_sound_effect__sound_effect__int__double(__sklib_sound_effect effect, int times, double volume);
__sklib_string __sklib__sound_effect_filename__sound_effect(__sklib_sound_effect effect);
__sklib_string __sklib__sound_effect_name__sound_effect(__sklib_sound_effect effect);
__sklib_sound_effect __sklib__sound_effect_named__string_ref(const __sklib_string name);
int __sklib__sound_effect_playing__string_ref(const __sklib_string name);
int __sklib__sound_effect_playing__sound_effect(__sklib_sound_effect effect);
int __sklib__sound_effect_valid__sound_effect(__sklib_sound_effect effect);
void __sklib__stop_sound_effect__string_ref(const __sklib_string name);
void __sklib__stop_sound_effect__sound_effect(__sklib_sound_effect effect);
void __sklib__call_for_all_sprites__sprite_float_function_ptr__float(__sklib_sprite_float_function *fn, float val);
void __sklib__call_for_all_sprites__sprite_function_ptr(__sklib_sprite_function *fn);
void __sklib__call_on_sprite_event__sprite_event_handler_ptr(__sklib_sprite_event_handler *handler);
__sklib_sprite __sklib__create_sprite__bitmap(__sklib_bitmap layer);
__sklib_sprite __sklib__create_sprite__bitmap__animation_script(__sklib_bitmap layer, __sklib_animation_script ani);
__sklib_sprite __sklib__create_sprite__string_ref(const __sklib_string bitmap_name);
__sklib_sprite __sklib__create_sprite__string_ref__bitmap(const __sklib_string name, __sklib_bitmap layer);
__sklib_sprite __sklib__create_sprite__string_ref__bitmap__animation_script(const __sklib_string name, __sklib_bitmap layer, __sklib_animation_script ani);
__sklib_sprite __sklib__create_sprite__string_ref__string_ref(const __sklib_string bitmap_name, const __sklib_string animation_name);
void __sklib__create_sprite_pack__string_ref(const __sklib_string name);
__sklib_string __sklib__current_sprite_pack();
void __sklib__draw_all_sprites();
void __sklib__draw_sprite__sprite__vector_2d_ref(__sklib_sprite s, const __sklib_vector_2d offset);
void __sklib__draw_sprite__sprite(__sklib_sprite s);
void __sklib__draw_sprite__sprite__double__double(__sklib_sprite s, double x_offset, double y_offset);
void __sklib__free_all_sprites();
void __sklib__free_sprite__sprite(__sklib_sprite s);
void __sklib__free_sprite_pack__string_ref(const __sklib_string name);
int __sklib__has_sprite__string_ref(const __sklib_string name);
int __sklib__has_sprite_pack__string_ref(const __sklib_string name);
void __sklib__move_sprite__sprite(__sklib_sprite s);
void __sklib__move_sprite__sprite__vector_2d_ref(__sklib_sprite s, const __sklib_vector_2d distance);
void __sklib__move_sprite__sprite__vector_2d_ref__float(__sklib_sprite s, const __sklib_vector_2d distance, float pct);
void __sklib__move_sprite__sprite__float(__sklib_sprite s, float pct);
void __sklib__move_sprite_to__sprite__double__double(__sklib_sprite s, double x, double y);
void __sklib__select_sprite_pack__string_ref(const __sklib_string name);
int __sklib__sprite_add_layer__sprite__bitmap__string_ref(__sklib_sprite s, __sklib_bitmap new_layer, const __sklib_string layer_name);
void __sklib__sprite_add_to_velocity__sprite__vector_2d_ref(__sklib_sprite s, const __sklib_vector_2d value);
void __sklib__sprite_add_value__sprite__string_ref(__sklib_sprite s, const __sklib_string name);
void __sklib__sprite_add_value__sprite__string_ref__float(__sklib_sprite s, const __sklib_string name, float init_val);
__sklib_point_2d __sklib__sprite_anchor_point__sprite(__sklib_sprite s);
__sklib_point_2d __sklib__sprite_anchor_position__sprite(__sklib_sprite s);
int __sklib__sprite_animation_has_ended__sprite(__sklib_sprite s);
__sklib_string __sklib__sprite_animation_name__sprite(__sklib_sprite s);
int __sklib__sprite_at__sprite__point_2d_ref(__sklib_sprite s, const __sklib_point_2d pt);
void __sklib__sprite_bring_layer_forward__sprite__int(__sklib_sprite s, int visible_layer);
void __sklib__sprite_bring_layer_to_front__sprite__int(__sklib_sprite s, int visible_layer);
void __sklib__sprite_call_on_event__sprite__sprite_event_handler_ptr(__sklib_sprite s, __sklib_sprite_event_handler *handler);
__sklib_point_2d __sklib__sprite_center_point__sprite(__sklib_sprite s);
__sklib_circle __sklib__sprite_circle__sprite(__sklib_sprite s);
__sklib_bitmap __sklib__sprite_collision_bitmap__sprite(__sklib_sprite s);
__sklib_circle __sklib__sprite_collision_circle__sprite(__sklib_sprite s);
int __sklib__sprite_collision_kind__sprite(__sklib_sprite s);
__sklib_rectangle __sklib__sprite_collision_rectangle__sprite(__sklib_sprite s);
int __sklib__sprite_current_cell__sprite(__sklib_sprite s);
__sklib_rectangle __sklib__sprite_current_cell_rectangle__sprite(__sklib_sprite s);
double __sklib__sprite_dx__sprite(__sklib_sprite s);
double __sklib__sprite_dy__sprite(__sklib_sprite s);
int __sklib__sprite_has_value__sprite__string(__sklib_sprite s, __sklib_string name);
float __sklib__sprite_heading__sprite(__sklib_sprite s);
int __sklib__sprite_height__sprite(__sklib_sprite s);
void __sklib__sprite_hide_layer__sprite__string_ref(__sklib_sprite s, const __sklib_string name);
void __sklib__sprite_hide_layer__sprite__int(__sklib_sprite s, int id);
__sklib_bitmap __sklib__sprite_layer__sprite__string_ref(__sklib_sprite s, const __sklib_string name);
__sklib_bitmap __sklib__sprite_layer__sprite__int(__sklib_sprite s, int idx);
__sklib_circle __sklib__sprite_layer_circle__sprite__string_ref(__sklib_sprite s, const __sklib_string name);
__sklib_circle __sklib__sprite_layer_circle__sprite__int(__sklib_sprite s, int idx);
int __sklib__sprite_layer_count__sprite(__sklib_sprite s);
int __sklib__sprite_layer_height__sprite__string_ref(__sklib_sprite s, const __sklib_string name);
int __sklib__sprite_layer_height__sprite__int(__sklib_sprite s, int idx);
int __sklib__sprite_layer_index__sprite__string_ref(__sklib_sprite s, const __sklib_string name);
__sklib_string __sklib__sprite_layer_name__sprite__int(__sklib_sprite s, int idx);
__sklib_vector_2d __sklib__sprite_layer_offset__sprite__string_ref(__sklib_sprite s, const __sklib_string name);
__sklib_vector_2d __sklib__sprite_layer_offset__sprite__int(__sklib_sprite s, int idx);
__sklib_rectangle __sklib__sprite_layer_rectangle__sprite__string_ref(__sklib_sprite s, const __sklib_string name);
__sklib_rectangle __sklib__sprite_layer_rectangle__sprite__int(__sklib_sprite s, int idx);
int __sklib__sprite_layer_width__sprite__string_ref(__sklib_sprite s, const __sklib_string name);
int __sklib__sprite_layer_width__sprite__int(__sklib_sprite s, int idx);
__sklib_matrix_2d __sklib__sprite_location_matrix__sprite(__sklib_sprite s);
float __sklib__sprite_mass__sprite(__sklib_sprite s);
int __sklib__sprite_move_from_anchor_point__sprite(__sklib_sprite s);
void __sklib__sprite_move_to__sprite__point_2d_ref__float(__sklib_sprite s, const __sklib_point_2d pt, float taking_seconds);
__sklib_string __sklib__sprite_name__sprite(__sklib_sprite s);
__sklib_sprite __sklib__sprite_named__string_ref(const __sklib_string name);
int __sklib__sprite_offscreen__sprite(__sklib_sprite s);
int __sklib__sprite_on_screen_at__sprite__point_2d_ref(__sklib_sprite s, const __sklib_point_2d pt);
int __sklib__sprite_on_screen_at__sprite__double__double(__sklib_sprite s, double x, double y);
__sklib_point_2d __sklib__sprite_position__sprite(__sklib_sprite s);
void __sklib__sprite_replay_animation__sprite(__sklib_sprite s);
void __sklib__sprite_replay_animation__sprite__bool(__sklib_sprite s, int with_sound);
float __sklib__sprite_rotation__sprite(__sklib_sprite s);
float __sklib__sprite_scale__sprite(__sklib_sprite s);
__sklib_rectangle __sklib__sprite_screen_rectangle__sprite(__sklib_sprite s);
void __sklib__sprite_send_layer_backward__sprite__int(__sklib_sprite s, int visible_layer);
void __sklib__sprite_send_layer_to_back__sprite__int(__sklib_sprite s, int visible_layer);
void __sklib__sprite_set_anchor_point__sprite__point_2d_ref(__sklib_sprite s, const __sklib_point_2d pt);
void __sklib__sprite_set_collision_bitmap__sprite__bitmap(__sklib_sprite s, __sklib_bitmap bmp);
void __sklib__sprite_set_collision_kind__sprite__collision_test_kind(__sklib_sprite s, int value);
void __sklib__sprite_set_dx__sprite__double(__sklib_sprite s, double value);
void __sklib__sprite_set_dy__sprite__double(__sklib_sprite s, double value);
void __sklib__sprite_set_heading__sprite__float(__sklib_sprite s, float value);
void __sklib__sprite_set_layer_offset__sprite__string_ref__vector_2d_ref(__sklib_sprite s, const __sklib_string name, const __sklib_vector_2d value);
void __sklib__sprite_set_layer_offset__sprite__int__vector_2d_ref(__sklib_sprite s, int idx, const __sklib_vector_2d value);
void __sklib__sprite_set_mass__sprite__float(__sklib_sprite s, float value);
void __sklib__sprite_set_move_from_anchor_point__sprite__bool(__sklib_sprite s, int value);
void __sklib__sprite_set_position__sprite__point_2d_ref(__sklib_sprite s, const __sklib_point_2d value);
void __sklib__sprite_set_rotation__sprite__float(__sklib_sprite s, float value);
void __sklib__sprite_set_scale__sprite__float(__sklib_sprite s, float value);
void __sklib__sprite_set_speed__sprite__double(__sklib_sprite s, double value);
void __sklib__sprite_set_value__sprite__string_ref__float(__sklib_sprite s, const __sklib_string name, float val);
void __sklib__sprite_set_velocity__sprite__vector_2d_ref(__sklib_sprite s, const __sklib_vector_2d value);
void __sklib__sprite_set_x__sprite__double(__sklib_sprite s, double value);
void __sklib__sprite_set_y__sprite__double(__sklib_sprite s, double value);
int __sklib__sprite_show_layer__sprite__string_ref(__sklib_sprite s, const __sklib_string name);
int __sklib__sprite_show_layer__sprite__int(__sklib_sprite s, int id);
double __sklib__sprite_speed__sprite(__sklib_sprite s);
void __sklib__sprite_start_animation__sprite__string_ref(__sklib_sprite s, const __sklib_string named);
void __sklib__sprite_start_animation__sprite__string_ref__bool(__sklib_sprite s, const __sklib_string named, int with_sound);
void __sklib__sprite_start_animation__sprite__int(__sklib_sprite s, int idx);
void __sklib__sprite_start_animation__sprite__int__bool(__sklib_sprite s, int idx, int with_sound);
void __sklib__sprite_stop_calling_on_event__sprite__sprite_event_handler_ptr(__sklib_sprite s, __sklib_sprite_event_handler *handler);
void __sklib__sprite_toggle_layer_visible__sprite__string_ref(__sklib_sprite s, const __sklib_string name);
void __sklib__sprite_toggle_layer_visible__sprite__int(__sklib_sprite s, int id);
float __sklib__sprite_value__sprite__string_ref(__sklib_sprite s, const __sklib_string name);
int __sklib__sprite_value_count__sprite(__sklib_sprite s);
__sklib_vector_2d __sklib__sprite_velocity__sprite(__sklib_sprite s);
int __sklib__sprite_visible_index_of_layer__sprite__string_ref(__sklib_sprite s, const __sklib_string name);
int __sklib__sprite_visible_index_of_layer__sprite__int(__sklib_sprite s, int id);
int __sklib__sprite_visible_layer__sprite__int(__sklib_sprite s, int idx);
int __sklib__sprite_visible_layer_count__sprite(__sklib_sprite s);
int __sklib__sprite_visible_layer_id__sprite__int(__sklib_sprite s, int idx);
int __sklib__sprite_width__sprite(__sklib_sprite s);
double __sklib__sprite_x__sprite(__sklib_sprite s);
double __sklib__sprite_y__sprite(__sklib_sprite s);
void __sklib__stop_calling_on_sprite_event__sprite_event_handler_ptr(__sklib_sprite_event_handler *handler);
void __sklib__update_all_sprites();
void __sklib__update_all_sprites__float(float pct);
void __sklib__update_sprite__sprite(__sklib_sprite s);
void __sklib__update_sprite__sprite__bool(__sklib_sprite s, int with_sound);
void __sklib__update_sprite__sprite__float(__sklib_sprite s, float pct);
void __sklib__update_sprite__sprite__float__bool(__sklib_sprite s, float pct, int with_sound);
void __sklib__update_sprite_animation__sprite(__sklib_sprite s);
void __sklib__update_sprite_animation__sprite__bool(__sklib_sprite s, int with_sound);
void __sklib__update_sprite_animation__sprite__float(__sklib_sprite s, float pct);
void __sklib__update_sprite_animation__sprite__float__bool(__sklib_sprite s, float pct, int with_sound);
__sklib_vector_2d __sklib__vector_from_center_sprite_to_point__sprite__point_2d_ref(__sklib_sprite s, const __sklib_point_2d pt);
__sklib_vector_2d __sklib__vector_from_to__sprite__sprite(__sklib_sprite s1, __sklib_sprite s2);
char __sklib__read_char();
__sklib_string __sklib__read_line();
int __sklib__terminal_has_input();
void __sklib__write__char(char data);
void __sklib__write__double(double data);
void __sklib__write__int(int data);
void __sklib__write__string(__sklib_string text);
void __sklib__write_line__char(char data);
void __sklib__write_line();
void __sklib__write_line__double(double data);
void __sklib__write_line__int(int data);
void __sklib__write_line__string(__sklib_string line);
void __sklib__draw_text__string_ref__color_ref__string_ref__int__double__double(const __sklib_string text, const __sklib_color clr, const __sklib_string fnt, int font_size, double x, double y);
void __sklib__draw_text__string_ref__color_ref__string_ref__int__double__double__drawing_options_ref(const __sklib_string text, const __sklib_color clr, const __sklib_string fnt, int font_size, double x, double y, const __sklib_drawing_options opts);
void __sklib__draw_text__string_ref__color_ref__double__double(const __sklib_string text, const __sklib_color clr, double x, double y);
void __sklib__draw_text__string_ref__color_ref__double__double__drawing_options_ref(const __sklib_string text, const __sklib_color clr, double x, double y, const __sklib_drawing_options opts);
void __sklib__draw_text__string_ref__color_ref__font__int__double__double(const __sklib_string text, const __sklib_color clr, __sklib_font fnt, int font_size, double x, double y);
void __sklib__draw_text__string_ref__color_ref__font__int__double__double__drawing_options_ref(const __sklib_string text, const __sklib_color clr, __sklib_font fnt, int font_size, double x, double y, const __sklib_drawing_options opts);
void __sklib__draw_text_on_bitmap__bitmap__string_ref__color_ref__string_ref__int__double__double(__sklib_bitmap bmp, const __sklib_string text, const __sklib_color clr, const __sklib_string fnt, int font_size, double x, double y);
void __sklib__draw_text_on_bitmap__bitmap__string_ref__color_ref__string_ref__int__double__double__drawing_options_ref(__sklib_bitmap bmp, const __sklib_string text, const __sklib_color clr, const __sklib_string fnt, int font_size, double x, double y, const __sklib_drawing_options opts);
void __sklib__draw_text_on_bitmap__bitmap__string_ref__color_ref__double__double(__sklib_bitmap bmp, const __sklib_string text, const __sklib_color clr, double x, double y);
void __sklib__draw_text_on_bitmap__bitmap__string_ref__color_ref__double__double__drawing_options_ref(__sklib_bitmap bmp, const __sklib_string text, const __sklib_color clr, double x, double y, const __sklib_drawing_options opts);
void __sklib__draw_text_on_bitmap__bitmap__string_ref__color_ref__font__int__double__double(__sklib_bitmap bmp, const __sklib_string text, const __sklib_color clr, __sklib_font fnt, int font_size, double x, double y);
void __sklib__draw_text_on_bitmap__bitmap__string_ref__color_ref__font__int__double__double__drawing_options_ref(__sklib_bitmap bmp, const __sklib_string text, const __sklib_color clr, __sklib_font fnt, int font_size, double x, double y, const __sklib_drawing_options opts);
void __sklib__draw_text_on_window__window__string_ref__color_ref__string_ref__int__double__double(__sklib_window wnd, const __sklib_string text, const __sklib_color clr, const __sklib_string fnt, int font_size, double x, double y);
void __sklib__draw_text_on_window__window__string_ref__color_ref__string_ref__int__double__double__drawing_options_ref(__sklib_window wnd, const __sklib_string text, const __sklib_color clr, const __sklib_string fnt, int font_size, double x, double y, const __sklib_drawing_options opts);
void __sklib__draw_text_on_window__window__string_ref__color_ref__double__double(__sklib_window wnd, const __sklib_string text, const __sklib_color clr, double x, double y);
void __sklib__draw_text_on_window__window__string_ref__color_ref__double__double__drawing_options_ref(__sklib_window wnd, const __sklib_string text, const __sklib_color clr, double x, double y, const __sklib_drawing_options opts);
void __sklib__draw_text_on_window__window__string_ref__color_ref__font__int__double__double(__sklib_window wnd, const __sklib_string text, const __sklib_color clr, __sklib_font fnt, int font_size, double x, double y);
void __sklib__draw_text_on_window__window__string_ref__color_ref__font__int__double__double__drawing_options_ref(__sklib_window wnd, const __sklib_string text, const __sklib_color clr, __sklib_font fnt, int font_size, double x, double y, const __sklib_drawing_options opts);
int __sklib__font_has_size__string_ref__int(const __sklib_string name, int font_size);
int __sklib__font_has_size__font__int(__sklib_font fnt, int font_size);
void __sklib__font_load_size__string_ref__int(const __sklib_string name, int font_size);
void __sklib__font_load_size__font__int(__sklib_font fnt, int font_size);
__sklib_font __sklib__font_named__string(__sklib_string name);
void __sklib__free_all_fonts();
void __sklib__free_font__font(__sklib_font fnt);
int __sklib__get_font_style__string_ref(const __sklib_string name);
int __sklib__get_font_style__font(__sklib_font fnt);
__sklib_font __sklib__get_system_font();
int __sklib__has_font__font(__sklib_font fnt);
int __sklib__has_font__string(__sklib_string name);
__sklib_font __sklib__load_font__string_ref__string_ref(const __sklib_string name, const __sklib_string filename);
void __sklib__set_font_style__string_ref__font_style(const __sklib_string name, int style);
void __sklib__set_font_style__font__font_style(__sklib_font fnt, int style);
int __sklib__text_height__string_ref__string_ref__int(const __sklib_string text, const __sklib_string fnt, int font_size);
int __sklib__text_height__string_ref__font__int(const __sklib_string text, __sklib_font fnt, int font_size);
int __sklib__text_width__string_ref__string_ref__int(const __sklib_string text, const __sklib_string fnt, int font_size);
int __sklib__text_width__string_ref__font__int(const __sklib_string text, __sklib_font fnt, int font_size);
void __sklib__draw_collected_text__color__font__int__drawing_options_ref(__sklib_color clr, __sklib_font fnt, int font_size, const __sklib_drawing_options opts);
void __sklib__end_reading_text();
void __sklib__end_reading_text__window(__sklib_window wind);
int __sklib__reading_text();
int __sklib__reading_text__window(__sklib_window wind);
void __sklib__start_reading_text__rectangle(__sklib_rectangle rect);
void __sklib__start_reading_text__rectangle__string(__sklib_rectangle rect, __sklib_string initial_text);
void __sklib__start_reading_text__window__rectangle(__sklib_window wind, __sklib_rectangle rect);
void __sklib__start_reading_text__window__rectangle__string(__sklib_window wind, __sklib_rectangle rect, __sklib_string initial_text);
int __sklib__text_entry_cancelled();
int __sklib__text_entry_cancelled__window(__sklib_window wind);
__sklib_string __sklib__text_input();
__sklib_string __sklib__text_input__window(__sklib_window wind);
__sklib_timer __sklib__create_timer__string(__sklib_string name);
void __sklib__free_all_timers();
void __sklib__free_timer__timer(__sklib_timer to_free);
int __sklib__has_timer__string(__sklib_string name);
void __sklib__pause_timer__string(__sklib_string name);
void __sklib__pause_timer__timer(__sklib_timer to_pause);
void __sklib__reset_timer__string(__sklib_string name);
void __sklib__reset_timer__timer(__sklib_timer tmr);
void __sklib__resume_timer__string(__sklib_string name);
void __sklib__resume_timer__timer(__sklib_timer to_resume);
void __sklib__start_timer__string(__sklib_string name);
void __sklib__start_timer__timer(__sklib_timer to_start);
void __sklib__stop_timer__string(__sklib_string name);
void __sklib__stop_timer__timer(__sklib_timer to_stop);
__sklib_timer __sklib__timer_named__string(__sklib_string name);
int __sklib__timer_paused__string(__sklib_string name);
int __sklib__timer_paused__timer(__sklib_timer to_get);
int __sklib__timer_started__string(__sklib_string name);
int __sklib__timer_started__timer(__sklib_timer to_get);
unsigned int __sklib__timer_ticks__string(__sklib_string name);
unsigned int __sklib__timer_ticks__timer(__sklib_timer to_get);
void __sklib__draw_triangle__color__triangle_ref(__sklib_color clr, const __sklib_triangle tri);
void __sklib__draw_triangle__color__triangle_ref__drawing_options(__sklib_color clr, const __sklib_triangle tri, __sklib_drawing_options opts);
void __sklib__draw_triangle__color__double__double__double__double__double__double(__sklib_color clr, double x1, double y1, double x2, double y2, double x3, double y3);
void __sklib__draw_triangle__color__double__double__double__double__double__double__drawing_options(__sklib_color clr, double x1, double y1, double x2, double y2, double x3, double y3, __sklib_drawing_options opts);
void __sklib__draw_triangle_on_bitmap__bitmap__color__triangle_ref(__sklib_bitmap destination, __sklib_color clr, const __sklib_triangle tri);
void __sklib__draw_triangle_on_bitmap__bitmap__color__triangle_ref__drawing_options(__sklib_bitmap destination, __sklib_color clr, const __sklib_triangle tri, __sklib_drawing_options opts);
void __sklib__draw_triangle_on_bitmap__bitmap__color__double__double__double__double__double__double(__sklib_bitmap destination, __sklib_color clr, double x1, double y1, double x2, double y2, double x3, double y3);
void __sklib__draw_triangle_on_bitmap__bitmap__color__double__double__double__double__double__double__drawing_options(__sklib_bitmap destination, __sklib_color clr, double x1, double y1, double x2, double y2, double x3, double y3, __sklib_drawing_options opts);
void __sklib__draw_triangle_on_window__window__color__triangle_ref(__sklib_window destination, __sklib_color clr, const __sklib_triangle tri);
void __sklib__draw_triangle_on_window__window__color__triangle_ref__drawing_options(__sklib_window destination, __sklib_color clr, const __sklib_triangle tri, __sklib_drawing_options opts);
void __sklib__draw_triangle_on_window__window__color__double__double__double__double__double__double(__sklib_window destination, __sklib_color clr, double x1, double y1, double x2, double y2, double x3, double y3);
void __sklib__draw_triangle_on_window__window__color__double__double__double__double__double__double__drawing_options(__sklib_window destination, __sklib_color clr, double x1, double y1, double x2, double y2, double x3, double y3, __sklib_drawing_options opts);
void __sklib__fill_triangle__color__triangle_ref(__sklib_color clr, const __sklib_triangle tri);
void __sklib__fill_triangle__color__triangle_ref__drawing_options(__sklib_color clr, const __sklib_triangle tri, __sklib_drawing_options opts);
void __sklib__fill_triangle__color__double__double__double__double__double__double(__sklib_color clr, double x1, double y1, double x2, double y2, double x3, double y3);
void __sklib__fill_triangle__color__double__double__double__double__double__double__drawing_options(__sklib_color clr, double x1, double y1, double x2, double y2, double x3, double y3, __sklib_drawing_options opts);
void __sklib__fill_triangle_on_bitmap__bitmap__color__triangle_ref(__sklib_bitmap destination, __sklib_color clr, const __sklib_triangle tri);
void __sklib__fill_triangle_on_bitmap__bitmap__color__triangle_ref__drawing_options(__sklib_bitmap destination, __sklib_color clr, const __sklib_triangle tri, __sklib_drawing_options opts);
void __sklib__fill_triangle_on_bitmap__bitmap__color__double__double__double__double__double__double(__sklib_bitmap destination, __sklib_color clr, double x1, double y1, double x2, double y2, double x3, double y3);
void __sklib__fill_triangle_on_bitmap__bitmap__color__double__double__double__double__double__double__drawing_options(__sklib_bitmap destination, __sklib_color clr, double x1, double y1, double x2, double y2, double x3, double y3, __sklib_drawing_options opts);
void __sklib__fill_triangle_on_window__window__color__triangle_ref(__sklib_window destination, __sklib_color clr, const __sklib_triangle tri);
void __sklib__fill_triangle_on_window__window__color__triangle_ref__drawing_options(__sklib_window destination, __sklib_color clr, const __sklib_triangle tri, __sklib_drawing_options opts);
void __sklib__fill_triangle_on_window__window__color__double__double__double__double__double__double(__sklib_window destination, __sklib_color clr, double x1, double y1, double x2, double y2, double x3, double y3);
void __sklib__fill_triangle_on_window__window__color__double__double__double__double__double__double__drawing_options(__sklib_window destination, __sklib_color clr, double x1, double y1, double x2, double y2, double x3, double y3, __sklib_drawing_options opts);
__sklib_point_2d __sklib__triangle_barycenter__triangle_ref(const __sklib_triangle tri);
__sklib_triangle __sklib__triangle_from__point_2d_ref__point_2d_ref__point_2d_ref(const __sklib_point_2d p1, const __sklib_point_2d p2, const __sklib_point_2d p3);
__sklib_triangle __sklib__triangle_from__double__double__double__double__double__double(double x1, double y1, double x2, double y2, double x3, double y3);
int __sklib__triangle_rectangle_intersect__triangle_ref__rectangle_ref(const __sklib_triangle tri, const __sklib_rectangle rect);
__sklib_string __sklib__triangle_to_string__triangle_ref(const __sklib_triangle tri);
int __sklib__triangles_intersect__triangle_ref__triangle_ref(const __sklib_triangle t1, const __sklib_triangle t2);
unsigned int __sklib__current_ticks();
void __sklib__delay__int(int milliseconds);
void __sklib__display_dialog__string_ref__string_ref__font__int(const __sklib_string title, const __sklib_string msg, __sklib_font output_font, int font_size);
__sklib_string __sklib__file_as_string__string__resource_kind(__sklib_string filename, int kind);
double __sklib__angle_between__vector_2d_ref__vector_2d_ref(const __sklib_vector_2d v1, const __sklib_vector_2d v2);
double __sklib__dot_product__vector_2d_ref__vector_2d_ref(const __sklib_vector_2d v1, const __sklib_vector_2d v2);
int __sklib__is_zero_vector__vector_2d_ref(const __sklib_vector_2d v);
int __sklib__ray_intersection_point__point_2d_ref__vector_2d_ref__line_ref__point_2d_ref(const __sklib_point_2d from_pt, const __sklib_vector_2d heading, const __sklib_line l, __sklib_point_2d *pt);
__sklib_vector_2d __sklib__unit_vector__vector_2d_ref(const __sklib_vector_2d v);
__sklib_vector_2d __sklib__vector_add__vector_2d_ref__vector_2d_ref(const __sklib_vector_2d v1, const __sklib_vector_2d v2);
double __sklib__vector_angle__vector_2d(const __sklib_vector_2d v);
__sklib_vector_2d __sklib__vector_from_angle__double__double(double angle, double magnitude);
__sklib_vector_2d __sklib__vector_from_line__line_ref(const __sklib_line l);
__sklib_vector_2d __sklib__vector_from_point_to_rect__point_2d_ref__rectangle_ref(const __sklib_point_2d pt, const __sklib_rectangle rect);
int __sklib__vector_in_rect__vector_2d_ref__rectangle_ref(const __sklib_vector_2d v, const __sklib_rectangle rect);
__sklib_vector_2d __sklib__vector_invert__vector_2d_ref(const __sklib_vector_2d v);
__sklib_vector_2d __sklib__vector_limit__vector_2d_ref__double(const __sklib_vector_2d v, double limit);
double __sklib__vector_magnitude__vector_2d_ref(const __sklib_vector_2d v);
double __sklib__vector_magnitude_squared__vector_2d_ref(const __sklib_vector_2d v);
__sklib_vector_2d __sklib__vector_multiply__vector_2d_ref__double(const __sklib_vector_2d v1, double s);
__sklib_vector_2d __sklib__vector_normal__vector_2d_ref(const __sklib_vector_2d v);
__sklib_vector_2d __sklib__vector_out_of_circle_from_circle__circle_ref__circle_ref__vector_2d_ref(const __sklib_circle src, const __sklib_circle bounds, const __sklib_vector_2d velocity);
__sklib_vector_2d __sklib__vector_out_of_circle_from_point__point_2d_ref__circle_ref__vector_2d_ref(const __sklib_point_2d pt, const __sklib_circle c, const __sklib_vector_2d velocity);
__sklib_vector_2d __sklib__vector_out_of_rect_from_circle__circle_ref__rectangle_ref__vector_2d_ref(const __sklib_circle c, const __sklib_rectangle rect, const __sklib_vector_2d velocity);
__sklib_vector_2d __sklib__vector_out_of_rect_from_point__point_2d_ref__rectangle_ref__vector_2d_ref(const __sklib_point_2d pt, const __sklib_rectangle rect, const __sklib_vector_2d velocity);
__sklib_vector_2d __sklib__vector_out_of_rect_from_rect__rectangle_ref__rectangle_ref__vector_2d_ref(const __sklib_rectangle src, const __sklib_rectangle bounds, const __sklib_vector_2d velocity);
__sklib_vector_2d __sklib__vector_point_to_point__point_2d_ref__point_2d_ref(const __sklib_point_2d start, const __sklib_point_2d end_pt);
__sklib_vector_2d __sklib__vector_subtract__vector_2d_ref__vector_2d_ref(const __sklib_vector_2d v1, const __sklib_vector_2d v2);
__sklib_vector_2d __sklib__vector_to__point_2d_ref(const __sklib_point_2d p1);
__sklib_vector_2d __sklib__vector_to__double__double(double x, double y);
__sklib_string __sklib__vector_to_string__vector_2d_ref(const __sklib_vector_2d v);
int __sklib__vectors_equal__vector_2d_ref__vector_2d(const __sklib_vector_2d v1, const __sklib_vector_2d v2);
int __sklib__vectors_not_equal__vector_2d_ref__vector_2d(const __sklib_vector_2d v1, const __sklib_vector_2d v2);
__sklib_bitmap __sklib__download_bitmap__string_ref__string_ref__unsigned_short(const __sklib_string name, const __sklib_string url, unsigned short port);
__sklib_font __sklib__download_font__string_ref__string_ref__unsigned_short(const __sklib_string name, const __sklib_string url, unsigned short port);
__sklib_music __sklib__download_music__string_ref__string_ref__unsigned_short(const __sklib_string name, const __sklib_string url, unsigned short port);
__sklib_sound_effect __sklib__download_sound_effect__string_ref__string_ref__unsigned_short(const __sklib_string name, const __sklib_string url, unsigned short port);
void __sklib__free_response__http_response(__sklib_http_response response);
__sklib_http_response __sklib__http_get__string_ref__unsigned_short(const __sklib_string url, unsigned short port);
__sklib_http_response __sklib__http_post__string_ref__unsigned_short__string_ref__vector_string_ref(const __sklib_string url, unsigned short port, const __sklib_string body, const __sklib_vector_string headers);
__sklib_http_response __sklib__http_post__string_ref__unsigned_short__string(const __sklib_string url, unsigned short port, __sklib_string body);
__sklib_string __sklib__http_response_to_string__http_response(__sklib_http_response response);
void __sklib__save_response_to_file__http_response__string(__sklib_http_response response, __sklib_string path);
int __sklib__has_incoming_requests__web_server(__sklib_web_server server);
int __sklib__is_delete_request_for__http_request__string_ref(__sklib_http_request request, const __sklib_string path);
int __sklib__is_get_request_for__http_request__string_ref(__sklib_http_request request, const __sklib_string path);
int __sklib__is_options_request_for__http_request__string_ref(__sklib_http_request request, const __sklib_string path);
int __sklib__is_post_request_for__http_request__string_ref(__sklib_http_request request, const __sklib_string path);
int __sklib__is_put_request_for__http_request__string_ref(__sklib_http_request request, const __sklib_string path);
int __sklib__is_request_for__http_request__http_method__string_ref(__sklib_http_request request, int method, const __sklib_string path);
int __sklib__is_trace_request_for__http_request__string_ref(__sklib_http_request request, const __sklib_string path);
__sklib_http_request __sklib__next_web_request__web_server(__sklib_web_server server);
__sklib_string __sklib__request_body__http_request(__sklib_http_request r);
int __sklib__request_has_query_parameter__http_request__string_ref(__sklib_http_request r, const __sklib_string name);
__sklib_vector_string __sklib__request_headers__http_request(__sklib_http_request r);
int __sklib__request_method__http_request(__sklib_http_request r);
__sklib_string __sklib__request_query_parameter__http_request__string_ref__string_ref(__sklib_http_request r, const __sklib_string name, const __sklib_string default_value);
__sklib_string __sklib__request_query_string__http_request(__sklib_http_request r);
__sklib_string __sklib__request_uri__http_request(__sklib_http_request r);
__sklib_vector_string __sklib__request_uri_stubs__http_request(__sklib_http_request r);
void __sklib__send_css_file_response__http_request__string_ref(__sklib_http_request r, const __sklib_string filename);
void __sklib__send_file_response__http_request__string_ref__string_ref(__sklib_http_request r, const __sklib_string filename, const __sklib_string content_type);
void __sklib__send_html_file_response__http_request__string_ref(__sklib_http_request r, const __sklib_string filename);
void __sklib__send_javascript_file_response__http_request__string_ref(__sklib_http_request r, const __sklib_string filename);
void __sklib__send_response__http_request(__sklib_http_request r);
void __sklib__send_response__http_request__string_ref(__sklib_http_request r, const __sklib_string message);
void __sklib__send_response__http_request__http_status_code(__sklib_http_request r, int code);
void __sklib__send_response__http_request__http_status_code__string_ref(__sklib_http_request r, int code, const __sklib_string message);
void __sklib__send_response__http_request__http_status_code__string_ref__string_ref(__sklib_http_request r, int code, const __sklib_string message, const __sklib_string content_type);
void __sklib__send_response__http_request__http_status_code__string_ref__string_ref__vector_string_ref(__sklib_http_request r, int code, const __sklib_string message, const __sklib_string content_type, const __sklib_vector_string headers);
void __sklib__send_response__http_request__json(__sklib_http_request r, __sklib_json j);
__sklib_vector_string __sklib__split_uri_stubs__string_ref(const __sklib_string uri);
__sklib_web_server __sklib__start_web_server();
__sklib_web_server __sklib__start_web_server__unsigned_short(unsigned short port);
void __sklib__stop_web_server__web_server(__sklib_web_server server);
void __sklib__clear_window__window__color(__sklib_window wind, __sklib_color clr);
void __sklib__close_all_windows();
void __sklib__close_current_window();
void __sklib__close_window__string_ref(const __sklib_string name);
void __sklib__close_window__window(__sklib_window wind);
__sklib_window __sklib__current_window();
int __sklib__current_window_has_border();
int __sklib__current_window_height();
int __sklib__current_window_is_fullscreen();
__sklib_point_2d __sklib__current_window_position();
void __sklib__current_window_toggle_border();
void __sklib__current_window_toggle_fullscreen();
int __sklib__current_window_width();
int __sklib__current_window_x();
int __sklib__current_window_y();
int __sklib__has_window__string(__sklib_string caption);
int __sklib__is_current_window__window(__sklib_window wind);
void __sklib__move_current_window_to__int__int(int x, int y);
void __sklib__move_window_to__string_ref__int__int(const __sklib_string name, int x, int y);
void __sklib__move_window_to__window__int__int(__sklib_window wind, int x, int y);
__sklib_window __sklib__open_window__string__int__int(__sklib_string caption, int width, int height);
void __sklib__refresh_window__window(__sklib_window wind);
void __sklib__refresh_window__window__unsigned_int(__sklib_window wind, unsigned int target_fps);
void __sklib__resize_current_window__int__int(int width, int height);
void __sklib__resize_window__window__int__int(__sklib_window wnd, int width, int height);
void __sklib__set_current_window__string_ref(const __sklib_string name);
void __sklib__set_current_window__window(__sklib_window wind);
__sklib_string __sklib__window_caption__window(__sklib_window wind);
int __sklib__window_close_requested__string_ref(const __sklib_string name);
int __sklib__window_close_requested__window(__sklib_window wind);
int __sklib__window_has_border__string_ref(const __sklib_string name);
int __sklib__window_has_border__window(__sklib_window wnd);
int __sklib__window_has_focus__window(__sklib_window wind);
int __sklib__window_height__string_ref(const __sklib_string name);
int __sklib__window_height__window(__sklib_window wind);
int __sklib__window_is_fullscreen__string_ref(const __sklib_string name);
int __sklib__window_is_fullscreen__window(__sklib_window wnd);
__sklib_window __sklib__window_named__string(__sklib_string caption);
__sklib_point_2d __sklib__window_position__string_ref(const __sklib_string name);
__sklib_point_2d __sklib__window_position__window(__sklib_window wnd);
void __sklib__window_set_icon__window__bitmap(__sklib_window wind, __sklib_bitmap bmp);
void __sklib__window_toggle_border__string_ref(const __sklib_string name);
void __sklib__window_toggle_border__window(__sklib_window wnd);
void __sklib__window_toggle_fullscreen__string_ref(const __sklib_string name);
void __sklib__window_toggle_fullscreen__window(__sklib_window wnd);
int __sklib__window_width__string_ref(const __sklib_string name);
int __sklib__window_width__window(__sklib_window wind);
__sklib_window __sklib__window_with_focus();
int __sklib__window_x__string_ref(const __sklib_string name);
int __sklib__window_x__window(__sklib_window wnd);
int __sklib__window_y__string_ref(const __sklib_string name);
int __sklib__window_y__window(__sklib_window wnd);

#ifdef __cplusplus
}
#endif

#endif /* __splashkit_clib */
