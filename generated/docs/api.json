{
  "animations": {
    "brief": "Animations in SplashKit can be used to move between cells in\nbitmaps and sprites. Each animation generates a number sequence\nthat can then be used when drawing bitmaps.",
    "description": "",
    "functions": [
      {
        "signature": "int animation_count(animation_script script);",
        "name": "animation_count",
        "method_name": null,
        "unique_global_name": "animation_count",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the number of `animation`s within an `animation_script`.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "Returns an `int` equal to the total number of animations in the script.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "script": {
            "type": "animation_script",
            "description": "The `animation_script` to count the animations in.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation_script",
          "getter": "animation_count",
          "self": "script",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "python": [
            "def animation_count(script):"
          ],
          "csharp": [
            "public int AnimationScript.AnimationCount { get }",
            "public static int SplashKit.AnimationCount(AnimationScript script);"
          ],
          "cpp": [
            "int animation_count(animation_script script)"
          ],
          "pascal": [
            "function AnimationCount(script: AnimationScript): Integer"
          ]
        }
      },
      {
        "signature": "int animation_current_cell(animation anim);",
        "name": "animation_current_cell",
        "method_name": null,
        "unique_global_name": "animation_current_cell",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the current cell (the part of the image or sprite) of this\nanimation. This can be used to animate an image or sprite.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "Returns the current cell of the animation passed to the method.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "The `animation` to return the cell of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation",
          "getter": "current_cell",
          "self": "anim",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "python": [
            "def animation_current_cell(anim):"
          ],
          "csharp": [
            "public int Animation.CurrentCell { get }",
            "public static int SplashKit.AnimationCurrentCell(Animation anim);"
          ],
          "cpp": [
            "int animation_current_cell(animation anim)"
          ],
          "pascal": [
            "function AnimationCurrentCell(anim: Animation): Integer"
          ]
        }
      },
      {
        "signature": "vector_2d animation_current_vector(animation anim);",
        "name": "animation_current_vector",
        "method_name": null,
        "unique_global_name": "animation_current_vector",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the `vector_2d` assigned to the current frame in the animation.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "Returns the `vector_2d` assigned to the current frame in the animation.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "The animation to check the vector of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation",
          "getter": "current_vector",
          "group": "animations",
          "static": "animation",
          "self": "anim"
        },
        "signatures": {
          "python": [
            "def animation_current_vector(anim):"
          ],
          "csharp": [
            "public Vector2D Animation.CurrentVector { get }",
            "public static Vector2D SplashKit.AnimationCurrentVector(Animation anim);"
          ],
          "cpp": [
            "vector_2d animation_current_vector(animation anim)"
          ],
          "pascal": [
            "function AnimationCurrentVector(anim: Animation): Vector2D"
          ]
        }
      },
      {
        "signature": "bool animation_ended(animation anim);",
        "name": "animation_ended",
        "method_name": null,
        "unique_global_name": "animation_ended",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks if an `animation` has ended.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Returns a `bool` denoting whether the `animation` has ended.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "The animation to check.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation",
          "getter": "ended",
          "group": "animations",
          "static": "animation",
          "self": "anim"
        },
        "signatures": {
          "python": [
            "def animation_ended(anim):"
          ],
          "csharp": [
            "public bool Animation.Ended { get }",
            "public static bool SplashKit.AnimationEnded(Animation anim);"
          ],
          "cpp": [
            "bool animation_ended(animation anim)"
          ],
          "pascal": [
            "function AnimationEnded(anim: Animation): Boolean"
          ]
        }
      },
      {
        "signature": "bool animation_entered_frame(animation anim);",
        "name": "animation_entered_frame",
        "method_name": null,
        "unique_global_name": "animation_entered_frame",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if the `animation` entered a new frame on its last update.\nThis can be used to trigger actions on frames within an animation.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Returns a `bool` denoting whether the `animation` has ended.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "The animation to check.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation",
          "getter": "entered_frame",
          "group": "animations",
          "static": "animation",
          "self": "anim"
        },
        "signatures": {
          "python": [
            "def animation_entered_frame(anim):"
          ],
          "csharp": [
            "public bool Animation.EnteredFrame { get }",
            "public static bool SplashKit.AnimationEnteredFrame(Animation anim);"
          ],
          "cpp": [
            "bool animation_entered_frame(animation anim)"
          ],
          "pascal": [
            "function AnimationEnteredFrame(anim: Animation): Boolean"
          ]
        }
      },
      {
        "signature": "float animation_frame_time(animation anim);",
        "name": "animation_frame_time",
        "method_name": null,
        "unique_global_name": "animation_frame_time",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the amount of time spent in the current frame. When this\nexceeds the frames duration the animation moves to the next frame.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "Returns the amount of time spent in the current frame as a `float`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "The animation to check.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation",
          "getter": "frame_time",
          "group": "animations",
          "static": "animation",
          "self": "anim"
        },
        "signatures": {
          "python": [
            "def animation_frame_time(anim):"
          ],
          "csharp": [
            "public float Animation.FrameTime { get }",
            "public static float SplashKit.AnimationFrameTime(Animation anim);"
          ],
          "cpp": [
            "float animation_frame_time(animation anim)"
          ],
          "pascal": [
            "function AnimationFrameTime(anim: Animation): Single"
          ]
        }
      },
      {
        "signature": "int animation_index(animation_script script,const string &name);",
        "name": "animation_index",
        "method_name": "animation_index",
        "unique_global_name": "animation_index",
        "unique_method_name": "animation_script.animation_index",
        "suffix_name": null,
        "description": "Searches an `animation_script` for an `animation` and returns its\nindex.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "Returns the index of the `animation` in the `animation_script`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "script": {
            "type": "animation_script",
            "description": "The `animation_script` to look for the `animation` in.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the `animation` to look for.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation_script",
          "method": "animation_index",
          "self": "script",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "python": [
            "def animation_index(script, name):"
          ],
          "csharp": [
            "public int AnimationScript.AnimationIndex(string name);",
            "public static int SplashKit.AnimationIndex(AnimationScript script, string name);"
          ],
          "cpp": [
            "int animation_index(animation_script script, const string &name)"
          ],
          "pascal": [
            "function AnimationIndex(script: AnimationScript; const name: String): Integer"
          ]
        }
      },
      {
        "signature": "string animation_name(animation temp);",
        "name": "animation_name",
        "method_name": null,
        "unique_global_name": "animation_name",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Searches an `animation_script` for an animation and returns its name.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "Returns the name of the `animation` in the `animation_script`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "temp": {
            "type": "animation",
            "description": "The `animation` to search for.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation",
          "getter": "name",
          "self": "temp",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "python": [
            "def animation_name(temp):"
          ],
          "csharp": [
            "public string Animation.Name { get }",
            "public static string SplashKit.AnimationName(Animation temp);"
          ],
          "cpp": [
            "string animation_name(animation temp)"
          ],
          "pascal": [
            "function AnimationName(temp: Animation): String"
          ]
        }
      },
      {
        "signature": "string animation_script_name(animation_script script);",
        "name": "animation_script_name",
        "method_name": null,
        "unique_global_name": "animation_script_name",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Retuns the name of an `animation_script`.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "Returns a `string` that is the name of the animation script passed to the method.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "script": {
            "type": "animation_script",
            "description": "The `animation_script` to return the name of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation_script",
          "getter": "name",
          "self": "script",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "python": [
            "def animation_script_name(script):"
          ],
          "csharp": [
            "public string AnimationScript.Name { get }",
            "public static string SplashKit.AnimationScriptName(AnimationScript script);"
          ],
          "cpp": [
            "string animation_script_name(animation_script script)"
          ],
          "pascal": [
            "function AnimationScriptName(script: AnimationScript): String"
          ]
        }
      },
      {
        "signature": "animation_script animation_script_named(const string &name);",
        "name": "animation_script_named",
        "method_name": null,
        "unique_global_name": "animation_script_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Loads and returns a `animation_script`. The supplied filename is\nused to locate the `animation_script` to load. The supplied name\nindicates the name to use to refer to this in SplashKit. The\n`animation_script` can then be retrieved by passing this name to\nthe animation_script_named method.",
        "brief": null,
        "return": {
          "type": "animation_script",
          "description": "Returns the newly loaded `animation_script`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Indicates the name used to locate the animation_script to load",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "static": "animation",
          "group": "animations"
        },
        "signatures": {
          "python": [
            "def animation_script_named(name):"
          ],
          "csharp": [
            "public static AnimationScript SplashKit.AnimationScriptNamed(string name);"
          ],
          "cpp": [
            "animation_script animation_script_named(const string &name)"
          ],
          "pascal": [
            "function AnimationScriptNamed(const name: String): AnimationScript"
          ]
        }
      },
      {
        "signature": "void assign_animation(animation anim,animation_script script,const string &name);",
        "name": "assign_animation",
        "method_name": "assign",
        "unique_global_name": "assign_animation_with_script",
        "unique_method_name": "animation.assign_with_script",
        "suffix_name": null,
        "description": "Setup an `animation` to follow the script from an indicated name.\nThis will switch the animation to use the supplied script.\nIt locates the name of the animation with the animation script and\nsets the `anim` to start at that point in the script.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "The `animation` to be assigned.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "script": {
            "type": "animation_script",
            "description": "The `animation_script` to assign the `animation` to.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the `animation` to be assigned.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation",
          "method": "assign",
          "self": "anim",
          "suffix": "with_script",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "python": [
            "def assign_animation_with_script(anim, script, name):"
          ],
          "csharp": [
            "public void Animation.Assign(AnimationScript script, string name);",
            "public static void SplashKit.AssignAnimation(Animation anim, AnimationScript script, string name);"
          ],
          "cpp": [
            "void assign_animation(animation anim, animation_script script, const string &name)"
          ],
          "pascal": [
            "procedure AssignAnimation(anim: Animation; script: AnimationScript; const name: String)"
          ]
        }
      },
      {
        "signature": "void assign_animation(animation anim,animation_script script,const string &name,bool with_sound);",
        "name": "assign_animation",
        "method_name": "assign",
        "unique_global_name": "assign_animation_with_script_and_sound",
        "unique_method_name": "animation.assign_with_script_and_sound",
        "suffix_name": null,
        "description": "Assigns an `animation` to an `animation_script`. This may play a\nsound effect if the animation is set to play a sound effect on its\nfirst frame.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "The `animation` to be assigned.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "script": {
            "type": "animation_script",
            "description": "The `animation_script` to assign the `animation` to.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the `animation` to be assigned.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "with_sound": {
            "type": "bool",
            "description": "Denotes whether the `animation` should play audio.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation",
          "method": "assign",
          "self": "anim",
          "suffix": "with_script_and_sound",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "python": [
            "def assign_animation_with_script_and_sound(anim, script, name, with_sound):"
          ],
          "csharp": [
            "public void Animation.Assign(AnimationScript script, string name, bool withSound);",
            "public static void SplashKit.AssignAnimation(Animation anim, AnimationScript script, string name, bool withSound);"
          ],
          "cpp": [
            "void assign_animation(animation anim, animation_script script, const string &name, bool with_sound)"
          ],
          "pascal": [
            "procedure AssignAnimation(anim: Animation; script: AnimationScript; const name: String; withSound: Boolean)"
          ]
        }
      },
      {
        "signature": "void assign_animation(animation anim,animation_script script,int idx);",
        "name": "assign_animation",
        "method_name": "assign",
        "unique_global_name": "assign_animation_index_with_script",
        "unique_method_name": "animation.assign_index_with_script",
        "suffix_name": null,
        "description": "Assigns an `animation` to an `animation_script`.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "The `animation` to be assigned.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "script": {
            "type": "animation_script",
            "description": "The `animation_script` to assign the `animation` to.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "idx": {
            "type": "int",
            "description": "The index of the `animation` to create.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation",
          "method": "assign",
          "self": "anim",
          "suffix": "index_with_script",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "python": [
            "def assign_animation_index_with_script(anim, script, idx):"
          ],
          "csharp": [
            "public void Animation.Assign(AnimationScript script, int idx);",
            "public static void SplashKit.AssignAnimation(Animation anim, AnimationScript script, int idx);"
          ],
          "cpp": [
            "void assign_animation(animation anim, animation_script script, int idx)"
          ],
          "pascal": [
            "procedure AssignAnimation(anim: Animation; script: AnimationScript; idx: Integer)"
          ]
        }
      },
      {
        "signature": "void assign_animation(animation anim,animation_script script,int idx,bool with_sound);",
        "name": "assign_animation",
        "method_name": "assign",
        "unique_global_name": "assign_animation_index_with_script_and_sound",
        "unique_method_name": "animation.assign_index_with_script_and_sound",
        "suffix_name": null,
        "description": "Assigns an `animation` to an `animation_script`. This may play a\nsound effect if the animation is set to play a sound effect on its\nfirst frame.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "The `animation` to be assigned.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "script": {
            "type": "animation_script",
            "description": "The `animation_script` to assign the `animation` to.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "idx": {
            "type": "int",
            "description": "The index of the `animation` to create.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "with_sound": {
            "type": "bool",
            "description": "Denotes whether the `animation` should play audio.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation",
          "method": "assign",
          "self": "anim",
          "suffix": "index_with_script_and_sound",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "python": [
            "def assign_animation_index_with_script_and_sound(anim, script, idx, with_sound):"
          ],
          "csharp": [
            "public void Animation.Assign(AnimationScript script, int idx, bool withSound);",
            "public static void SplashKit.AssignAnimation(Animation anim, AnimationScript script, int idx, bool withSound);"
          ],
          "cpp": [
            "void assign_animation(animation anim, animation_script script, int idx, bool with_sound)"
          ],
          "pascal": [
            "procedure AssignAnimation(anim: Animation; script: AnimationScript; idx: Integer; withSound: Boolean)"
          ]
        }
      },
      {
        "signature": "void assign_animation(animation anim,const string &script_name,const string &name);",
        "name": "assign_animation",
        "method_name": "assign",
        "unique_global_name": "assign_animation_with_script_named",
        "unique_method_name": "animation.assign_with_script_named",
        "suffix_name": null,
        "description": "Assigns an `animation` to an `animation_script`.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "The `animation` to be assigned.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "script_name": {
            "type": "string",
            "description": "The name of the `animation_script` to assign the `animation` to.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the `animation` to be assigned.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation",
          "method": "assign",
          "self": "anim",
          "suffix": "with_script_named",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "python": [
            "def assign_animation_with_script_named(anim, script_name, name):"
          ],
          "csharp": [
            "public void Animation.Assign(string scriptName, string name);",
            "public static void SplashKit.AssignAnimation(Animation anim, string scriptName, string name);"
          ],
          "cpp": [
            "void assign_animation(animation anim, const string &script_name, const string &name)"
          ],
          "pascal": [
            "procedure AssignAnimation(anim: Animation; const scriptName: String; const name: String)"
          ]
        }
      },
      {
        "signature": "void assign_animation(animation anim,const string &script_name,const string &name,bool with_sound);",
        "name": "assign_animation",
        "method_name": "assign",
        "unique_global_name": "assign_animation_with_script_named_and_sound",
        "unique_method_name": "animation.assign_with_script_named_and_sound",
        "suffix_name": null,
        "description": "Assigns an `animation` to an `animation_script`. This may play a\nsound effect if the animation is set to play a sound effect on its\nfirst frame.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "The `animation` to be assigned.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "script_name": {
            "type": "string",
            "description": "The name of the `animation_script` to assign the `animation` to.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the `animation` to be assigned",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "with_sound": {
            "type": "bool",
            "description": "Denotes whether the `animation` should play audio.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation",
          "method": "assign",
          "self": "anim",
          "suffix": "with_script_named_and_sound",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "python": [
            "def assign_animation_with_script_named_and_sound(anim, script_name, name, with_sound):"
          ],
          "csharp": [
            "public void Animation.Assign(string scriptName, string name, bool withSound);",
            "public static void SplashKit.AssignAnimation(Animation anim, string scriptName, string name, bool withSound);"
          ],
          "cpp": [
            "void assign_animation(animation anim, const string &script_name, const string &name, bool with_sound)"
          ],
          "pascal": [
            "procedure AssignAnimation(anim: Animation; const scriptName: String; const name: String; withSound: Boolean)"
          ]
        }
      },
      {
        "signature": "void assign_animation(animation anim,int idx);",
        "name": "assign_animation",
        "method_name": "assign",
        "unique_global_name": "assign_animation_index",
        "unique_method_name": "animation.assign_index",
        "suffix_name": null,
        "description": "Setup an `animation` to follow the script from an indicated index.\nThis uses the index from the current animation script and\nsets the supplied animation to start at that point in the script.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "The `animation` to be assigned.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "idx": {
            "type": "int",
            "description": "The index of the animation to use from its current script.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation",
          "method": "assign",
          "suffix": "index",
          "group": "animations",
          "static": "animation",
          "self": "anim"
        },
        "signatures": {
          "python": [
            "def assign_animation_index(anim, idx):"
          ],
          "csharp": [
            "public void Animation.Assign(int idx);",
            "public static void SplashKit.AssignAnimation(Animation anim, int idx);"
          ],
          "cpp": [
            "void assign_animation(animation anim, int idx)"
          ],
          "pascal": [
            "procedure AssignAnimation(anim: Animation; idx: Integer)"
          ]
        }
      },
      {
        "signature": "void assign_animation(animation anim,int idx,bool with_sound);",
        "name": "assign_animation",
        "method_name": "assign",
        "unique_global_name": "assign_animation_index_with_sound",
        "unique_method_name": "animation.assign_index_with_sound",
        "suffix_name": null,
        "description": "Setup an `animation` to follow the script from an indicated index.\nThis uses the index from the current animation script and\nsets the supplied animation to start at that point in the script.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "The `animation` to be assigned.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "idx": {
            "type": "int",
            "description": "The index of the animation to use from its current script.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "with_sound": {
            "type": "bool",
            "description": "Denotes whether the `animation` should play audio.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation",
          "method": "assign",
          "suffix": "index_with_sound",
          "group": "animations",
          "static": "animation",
          "self": "anim"
        },
        "signatures": {
          "python": [
            "def assign_animation_index_with_sound(anim, idx, with_sound):"
          ],
          "csharp": [
            "public void Animation.Assign(int idx, bool withSound);",
            "public static void SplashKit.AssignAnimation(Animation anim, int idx, bool withSound);"
          ],
          "cpp": [
            "void assign_animation(animation anim, int idx, bool with_sound)"
          ],
          "pascal": [
            "procedure AssignAnimation(anim: Animation; idx: Integer; withSound: Boolean)"
          ]
        }
      },
      {
        "signature": "void assign_animation(animation anim,string name);",
        "name": "assign_animation",
        "method_name": "assign",
        "unique_global_name": "assign_animation",
        "unique_method_name": "animation.assign",
        "suffix_name": null,
        "description": "Setup an `animation` to follow the script from an indicated name.\nThis locates the name of the animation from the current animation script and\nsets the supplied animation to start at that point in the script.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "The `animation` to be assigned.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the animation to use from its current script.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation",
          "method": "assign",
          "group": "animations",
          "static": "animation",
          "self": "anim"
        },
        "signatures": {
          "python": [
            "def assign_animation(anim, name):"
          ],
          "csharp": [
            "public void Animation.Assign(string name);",
            "public static void SplashKit.AssignAnimation(Animation anim, string name);"
          ],
          "cpp": [
            "void assign_animation(animation anim, string name)"
          ],
          "pascal": [
            "procedure AssignAnimation(anim: Animation; name: String)"
          ]
        }
      },
      {
        "signature": "void assign_animation(animation anim,string name,bool with_sound);",
        "name": "assign_animation",
        "method_name": "assign",
        "unique_global_name": "assign_animation_with_sound",
        "unique_method_name": "animation.assign_with_sound",
        "suffix_name": null,
        "description": "Setup an `animation` to follow the script from an indicated name.\nThis locates the name of the animation from the current animation script and\nsets the supplied animation to start at that point in the script.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "The `animation` to be assigned.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the animation to use from its current script.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "with_sound": {
            "type": "bool",
            "description": "Denotes whether the `animation` should play audio.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation",
          "method": "assign",
          "suffix": "with_sound",
          "group": "animations",
          "static": "animation",
          "self": "anim"
        },
        "signatures": {
          "python": [
            "def assign_animation_with_sound(anim, name, with_sound):"
          ],
          "csharp": [
            "public void Animation.Assign(string name, bool withSound);",
            "public static void SplashKit.AssignAnimation(Animation anim, string name, bool withSound);"
          ],
          "cpp": [
            "void assign_animation(animation anim, string name, bool with_sound)"
          ],
          "pascal": [
            "procedure AssignAnimation(anim: Animation; name: String; withSound: Boolean)"
          ]
        }
      },
      {
        "signature": "animation create_animation(animation_script script,int idx,bool with_sound);",
        "name": "create_animation",
        "method_name": null,
        "unique_global_name": "create_animation_from_index_with_sound",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates an animation from an `animation_script`. This may play a\nsound effect if the animation is set to play a sound effect on its\nfirst frame.",
        "brief": null,
        "return": {
          "type": "animation",
          "description": "Returns the newly created `animation_script`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "script": {
            "type": "animation_script",
            "description": "The `animation_script` to create the `animation` from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "idx": {
            "type": "int",
            "description": "The index of the `animation` to create.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "with_sound": {
            "type": "bool",
            "description": "Denotes whether the `animation` should play audio.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "from_index_with_sound",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "python": [
            "def create_animation_from_index_with_sound(script, idx, with_sound):"
          ],
          "csharp": [
            "public static Animation SplashKit.CreateAnimation(AnimationScript script, int idx, bool withSound);"
          ],
          "cpp": [
            "animation create_animation(animation_script script, int idx, bool with_sound)"
          ],
          "pascal": [
            "function CreateAnimation(script: AnimationScript; idx: Integer; withSound: Boolean): Animation"
          ]
        }
      },
      {
        "signature": "animation create_animation(animation_script script,const string &name);",
        "name": "create_animation",
        "method_name": "create_animation",
        "unique_global_name": "create_animation",
        "unique_method_name": "animation_script.create_animation",
        "suffix_name": null,
        "description": "Creates an animation from an `animation_script`.",
        "brief": null,
        "return": {
          "type": "animation",
          "description": "Returns the newly created `animation`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "script": {
            "type": "animation_script",
            "description": "The `animation_script` to create the `animation` from",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name for the new `animation`",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation_script",
          "method": "create_animation",
          "self": "script",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "python": [
            "def create_animation(script, name):"
          ],
          "csharp": [
            "public Animation AnimationScript.CreateAnimation(string name);",
            "public static Animation SplashKit.CreateAnimation(AnimationScript script, string name);"
          ],
          "cpp": [
            "animation create_animation(animation_script script, const string &name)"
          ],
          "pascal": [
            "function CreateAnimation(script: AnimationScript; const name: String): Animation"
          ]
        }
      },
      {
        "signature": "animation create_animation(animation_script script,const string &name,bool with_sound);",
        "name": "create_animation",
        "method_name": "create_animation",
        "unique_global_name": "create_animation_with_sound",
        "unique_method_name": "animation_script.create_animation_with_sound",
        "suffix_name": null,
        "description": "Creates an animation from a `animation_script`. This may play a\nsound effect if the animation is set to play a sound effect on\nits first frame.",
        "brief": null,
        "return": {
          "type": "animation",
          "description": "Returns the newly created `animation`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "script": {
            "type": "animation_script",
            "description": "The `animation_script` to create the `animation` from",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name for the new `animation`",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "with_sound": {
            "type": "bool",
            "description": "Denotes whether the `animation` should play audio.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation_script",
          "method": "create_animation",
          "self": "script",
          "suffix": "with_sound",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "python": [
            "def create_animation_with_sound(script, name, with_sound):"
          ],
          "csharp": [
            "public Animation AnimationScript.CreateAnimation(string name, bool withSound);",
            "public static Animation SplashKit.CreateAnimation(AnimationScript script, string name, bool withSound);"
          ],
          "cpp": [
            "animation create_animation(animation_script script, const string &name, bool with_sound)"
          ],
          "pascal": [
            "function CreateAnimation(script: AnimationScript; const name: String; withSound: Boolean): Animation"
          ]
        }
      },
      {
        "signature": "animation create_animation(const string &script_name,const string &name);",
        "name": "create_animation",
        "method_name": null,
        "unique_global_name": "create_animation_from_script_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates an animation from an `animation_script`'s name. This may\nplay a sound effect if the animation is set to play a sound effect\non its first frame.",
        "brief": null,
        "return": {
          "type": "animation",
          "description": "Returns the newly created `animation`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "script_name": {
            "type": "string",
            "description": "The name of the `animation_script` to create the `animation` from",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name for the new `animation`",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "from_script_named",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "python": [
            "def create_animation_from_script_named(script_name, name):"
          ],
          "csharp": [
            "public static Animation SplashKit.CreateAnimation(string scriptName, string name);"
          ],
          "cpp": [
            "animation create_animation(const string &script_name, const string &name)"
          ],
          "pascal": [
            "function CreateAnimation(const scriptName: String; const name: String): Animation"
          ]
        }
      },
      {
        "signature": "animation create_animation(const string &script_name,const string &name,bool with_sound);",
        "name": "create_animation",
        "method_name": null,
        "unique_global_name": "create_animation_from_script_named_with_sound",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates an animation from an `animation_script`'s name. This may\nplay a sound effect if the animation is set to play a sound effect\non its first frame.",
        "brief": null,
        "return": {
          "type": "animation",
          "description": "Returns the newly created `animation`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "script_name": {
            "type": "string",
            "description": "The name of the `animation_script` to create the `animation` from",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name for the new `animation`",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "with_sound": {
            "type": "bool",
            "description": "Denotes whether the `animation` should play audio.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "from_script_named_with_sound",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "python": [
            "def create_animation_from_script_named_with_sound(script_name, name, with_sound):"
          ],
          "csharp": [
            "public static Animation SplashKit.CreateAnimation(string scriptName, string name, bool withSound);"
          ],
          "cpp": [
            "animation create_animation(const string &script_name, const string &name, bool with_sound)"
          ],
          "pascal": [
            "function CreateAnimation(const scriptName: String; const name: String; withSound: Boolean): Animation"
          ]
        }
      },
      {
        "signature": "void free_all_animation_scripts();",
        "name": "free_all_animation_scripts",
        "method_name": "free_all",
        "unique_global_name": "free_all_animation_scripts",
        "unique_method_name": ".free_all",
        "suffix_name": null,
        "description": "Frees all loaded `animation_script`s.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "method": "free_all",
          "static": "animation",
          "group": "animations"
        },
        "signatures": {
          "python": [
            "def free_all_animation_scripts():"
          ],
          "csharp": [
            "public static void Animation.FreeAll();",
            "public static void SplashKit.FreeAllAnimationScripts();"
          ],
          "cpp": [
            "void free_all_animation_scripts()"
          ],
          "pascal": [
            "procedure FreeAllAnimationScripts()"
          ]
        }
      },
      {
        "signature": "void free_animation(animation ani);",
        "name": "free_animation",
        "method_name": null,
        "unique_global_name": "free_animation",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Disposes of the resources used in the animation.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "ani": {
            "type": "animation",
            "description": "The `animation` to be disposed of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation",
          "destructor": true,
          "self": "ani",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "python": [
            "def free_animation(ani):"
          ],
          "csharp": [
            "public static void SplashKit.FreeAnimation(Animation ani);"
          ],
          "cpp": [
            "void free_animation(animation ani)"
          ],
          "pascal": [
            "procedure FreeAnimation(ani: Animation)"
          ]
        }
      },
      {
        "signature": "void free_animation_script(animation_script script_to_free);",
        "name": "free_animation_script",
        "method_name": null,
        "unique_global_name": "free_animation_script",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Frees loaded animation frames data. Use this when you will no\nlonger be using the animation for any purpose, including within\nsprite.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "script_to_free": {
            "type": "animation_script",
            "description": "The `animation_script` to be freed.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation_script",
          "destructor": true,
          "self": "script_to_free",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "python": [
            "def free_animation_script(script_to_free):"
          ],
          "csharp": [
            "public static void SplashKit.FreeAnimationScript(AnimationScript scriptToFree);"
          ],
          "cpp": [
            "void free_animation_script(animation_script script_to_free)"
          ],
          "pascal": [
            "procedure FreeAnimationScript(scriptToFree: AnimationScript)"
          ]
        }
      },
      {
        "signature": "void free_animation_script(const string &name);",
        "name": "free_animation_script",
        "method_name": null,
        "unique_global_name": "free_animation_script_with_name",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Frees loaded `animation_script` data. Use this when you will no\nlonger be using the animation for any purpose, including within\nsprite.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the `animation_script` to be freed.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "static": "animation",
          "suffix": "with_name",
          "group": "animations"
        },
        "signatures": {
          "python": [
            "def free_animation_script_with_name(name):"
          ],
          "csharp": [
            "public static void SplashKit.FreeAnimationScript(string name);"
          ],
          "cpp": [
            "void free_animation_script(const string &name)"
          ],
          "pascal": [
            "procedure FreeAnimationScript(const name: String)"
          ]
        }
      },
      {
        "signature": "bool has_animation_named(animation_script script,const string &name);",
        "name": "has_animation_named",
        "method_name": null,
        "unique_global_name": "has_animation_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns whether an `animation_script` has been loaded with the\ngiven name.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Returns a `bool` that denotes whether the `animation_script` has been loaded.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "script": {
            "type": "animation_script",
            "description": "The `animation_script` to check.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the `animation_script` to look for.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation_script",
          "self": "script",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "python": [
            "def has_animation_named(script, name):"
          ],
          "csharp": [
            "public static bool SplashKit.HasAnimationNamed(AnimationScript script, string name);"
          ],
          "cpp": [
            "bool has_animation_named(animation_script script, const string &name)"
          ],
          "pascal": [
            "function HasAnimationNamed(script: AnimationScript; const name: String): Boolean"
          ]
        }
      },
      {
        "signature": "bool has_animation_script(const string &name);",
        "name": "has_animation_script",
        "method_name": null,
        "unique_global_name": "has_animation_script",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Determines if SplashKit has animation frames loaded for the\nsupplied name. This checks against all loaded animation frames,\nthose loaded without a name are assigned the filename as a default.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Returns the `bool` that denotes if the animation has the `animation_script`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the animation script to look for.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "static": "animation",
          "group": "animations"
        },
        "signatures": {
          "python": [
            "def has_animation_script(name):"
          ],
          "csharp": [
            "public static bool SplashKit.HasAnimationScript(string name);"
          ],
          "cpp": [
            "bool has_animation_script(const string &name)"
          ],
          "pascal": [
            "function HasAnimationScript(const name: String): Boolean"
          ]
        }
      },
      {
        "signature": "animation_script load_animation_script(const string &name,const string &filename);",
        "name": "load_animation_script",
        "method_name": null,
        "unique_global_name": "load_animation_script",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Load animation details from an animation frames file.",
        "brief": null,
        "return": {
          "type": "animation_script",
          "description": "Returns the newly loaded `animation_script`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the `animation_script`.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "filename": {
            "type": "string",
            "description": "The file to load the `animation_script` from.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation_script",
          "constructor": true,
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "python": [
            "def load_animation_script(name, filename):"
          ],
          "csharp": [
            "public static AnimationScript SplashKit.LoadAnimationScript(string name, string filename);",
            "public AnimationScript(string name, string filename);"
          ],
          "cpp": [
            "animation_script load_animation_script(const string &name, const string &filename)"
          ],
          "pascal": [
            "function LoadAnimationScript(const name: String; const filename: String): AnimationScript"
          ]
        }
      },
      {
        "signature": "void restart_animation(animation anim);",
        "name": "restart_animation",
        "method_name": "restart",
        "unique_global_name": "restart_animation",
        "unique_method_name": "animation.restart",
        "suffix_name": null,
        "description": "Restarts an `animation`.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "The `animation` to restart.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation",
          "method": "restart",
          "self": "anim",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "python": [
            "def restart_animation(anim):"
          ],
          "csharp": [
            "public void Animation.Restart();",
            "public static void SplashKit.RestartAnimation(Animation anim);"
          ],
          "cpp": [
            "void restart_animation(animation anim)"
          ],
          "pascal": [
            "procedure RestartAnimation(anim: Animation)"
          ]
        }
      },
      {
        "signature": "void restart_animation(animation anim,bool with_sound);",
        "name": "restart_animation",
        "method_name": "restart",
        "unique_global_name": "restart_animation_with_sound",
        "unique_method_name": "animation.restart_with_sound",
        "suffix_name": null,
        "description": "Restarts an `animation`. This may play a sound effect if the first\nframe triggers a sound.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "The `animation` to restart.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "with_sound": {
            "type": "bool",
            "description": "Denotes whether the `animation` should play audio.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation",
          "method": "restart",
          "self": "anim",
          "suffix": "with_sound",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "python": [
            "def restart_animation_with_sound(anim, with_sound):"
          ],
          "csharp": [
            "public void Animation.Restart(bool withSound);",
            "public static void SplashKit.RestartAnimation(Animation anim, bool withSound);"
          ],
          "cpp": [
            "void restart_animation(animation anim, bool with_sound)"
          ],
          "pascal": [
            "procedure RestartAnimation(anim: Animation; withSound: Boolean)"
          ]
        }
      },
      {
        "signature": "void update_animation(animation anim,float pct,bool with_sound);",
        "name": "update_animation",
        "method_name": null,
        "unique_global_name": "update_animation_percent_with_sound",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Updates the animation, updating the time spent and possibly moving to\na new frame in the animation. This may play a sound effect if the new\nframe triggers a sound.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "The `animation` to update.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pct": {
            "type": "float",
            "description": "The amount that the frame time will be incremented",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "with_sound": {
            "type": "bool",
            "description": "Denotes whether the `animation` should play audio.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "percent_with_sound",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "python": [
            "def update_animation_percent_with_sound(anim, pct, with_sound):"
          ],
          "csharp": [
            "public static void SplashKit.UpdateAnimation(Animation anim, float pct, bool withSound);"
          ],
          "cpp": [
            "void update_animation(animation anim, float pct, bool with_sound)"
          ],
          "pascal": [
            "procedure UpdateAnimation(anim: Animation; pct: Single; withSound: Boolean)"
          ]
        }
      },
      {
        "signature": "void update_animation(animation anim);",
        "name": "update_animation",
        "method_name": "update",
        "unique_global_name": "update_animation",
        "unique_method_name": "animation.update",
        "suffix_name": null,
        "description": "Updates the animation, updating the time spent and possibly moving to\na new frame in the animation. This may play a sound effect if the new\nframe triggers a sound.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "The `animation` to update.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation",
          "method": "update",
          "self": "anim",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "python": [
            "def update_animation(anim):"
          ],
          "csharp": [
            "public void Animation.Update();",
            "public static void SplashKit.UpdateAnimation(Animation anim);"
          ],
          "cpp": [
            "void update_animation(animation anim)"
          ],
          "pascal": [
            "procedure UpdateAnimation(anim: Animation)"
          ]
        }
      },
      {
        "signature": "void update_animation(animation anim,float pct);",
        "name": "update_animation",
        "method_name": "update",
        "unique_global_name": "update_animation_percent",
        "unique_method_name": "animation.update_percent",
        "suffix_name": null,
        "description": "Updates the animation, updating the time spent and possibly moving to\na new frame in the animation. This may play a sound effect if the new\nframe triggers a sound.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "The `animation` to update.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pct": {
            "type": "float",
            "description": "The amount that the frame time will be incremented",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation",
          "method": "update",
          "self": "anim",
          "suffix": "percent",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "python": [
            "def update_animation_percent(anim, pct):"
          ],
          "csharp": [
            "public void Animation.Update(float pct);",
            "public static void SplashKit.UpdateAnimation(Animation anim, float pct);"
          ],
          "cpp": [
            "void update_animation(animation anim, float pct)"
          ],
          "pascal": [
            "procedure UpdateAnimation(anim: Animation; pct: Single)"
          ]
        }
      }
    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "audio": {
    "brief": "SplashKit Audio allows you to load and play music and sound effects.",
    "description": "SplashKit's audio library allows you to easily load and play music and\nsound effects within your programs. To get started with audio the first\nthing you need to do is load a sound effect or music file. You can do this\nby calling the `load_sound_effect(string name)` function to the\n`load_music(string name)` function.",
    "functions": [
      {
        "signature": "bool audio_ready();",
        "name": "audio_ready",
        "method_name": null,
        "unique_global_name": "audio_ready",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks if SplashKit audio currently ready to be used.\n\nShould this return `false`, you may want to use `open_audio`\nto enable audio.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Returns `true` if the audio has been initalised.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "is_ready",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "python": [
            "def audio_ready():"
          ],
          "csharp": [
            "public static bool Audio.IsReady { get }",
            "public static bool SplashKit.AudioReady();"
          ],
          "cpp": [
            "bool audio_ready()"
          ],
          "pascal": [
            "function AudioReady(): Boolean"
          ]
        }
      },
      {
        "signature": "void close_audio();",
        "name": "close_audio",
        "method_name": null,
        "unique_global_name": "close_audio",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Turns off audio, stopping all current sounds effects and music.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "python": [
            "def close_audio():"
          ],
          "csharp": [
            "public static void SplashKit.CloseAudio();"
          ],
          "cpp": [
            "void close_audio()"
          ],
          "pascal": [
            "procedure CloseAudio()"
          ]
        }
      },
      {
        "signature": "void open_audio();",
        "name": "open_audio",
        "method_name": null,
        "unique_global_name": "open_audio",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Starts the SplashKit audio system working.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "python": [
            "def open_audio():"
          ],
          "csharp": [
            "public static void SplashKit.OpenAudio();"
          ],
          "cpp": [
            "void open_audio()"
          ],
          "pascal": [
            "procedure OpenAudio()"
          ]
        }
      },
      {
        "signature": "void fade_music_in(const string &name,int ms);",
        "name": "fade_music_in",
        "method_name": null,
        "unique_global_name": "fade_music_in_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fades music file matching the name to full volume over a specified number of milliseconds",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the `music` file to play.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "ms": {
            "type": "int",
            "description": "How many milliseconds it takes to fade the `music` to full volume",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "named",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "python": [
            "def fade_music_in_named(name, ms):"
          ],
          "csharp": [
            "public static void SplashKit.FadeMusicIn(string name, int ms);"
          ],
          "cpp": [
            "void fade_music_in(const string &name, int ms)"
          ],
          "pascal": [
            "procedure FadeMusicIn(const name: String; ms: Integer)"
          ]
        }
      },
      {
        "signature": "void fade_music_in(const string &name,int times,int ms);",
        "name": "fade_music_in",
        "method_name": null,
        "unique_global_name": "fade_music_in_named_with_times",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fades music file matching the name to full volume over a specified number of milliseconds\nand loops a specified number of times",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the `music` file to play.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "times": {
            "type": "int",
            "description": "Controls the number of times the music is played.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "ms": {
            "type": "int",
            "description": "How many milliseconds it takes to fade the `music` to full volume",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "named_with_times",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "python": [
            "def fade_music_in_named_with_times(name, times, ms):"
          ],
          "csharp": [
            "public static void SplashKit.FadeMusicIn(string name, int times, int ms);"
          ],
          "cpp": [
            "void fade_music_in(const string &name, int times, int ms)"
          ],
          "pascal": [
            "procedure FadeMusicIn(const name: String; times: Integer; ms: Integer)"
          ]
        }
      },
      {
        "signature": "void fade_music_in(music data,int ms);",
        "name": "fade_music_in",
        "method_name": "fade_in",
        "unique_global_name": "fade_music_in",
        "unique_method_name": "music.fade_in",
        "suffix_name": null,
        "description": "Fades music up to full volume over a specified number of milliseconds.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "data": {
            "type": "music",
            "description": "The name of the `music` to play.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "ms": {
            "type": "int",
            "description": "How many milliseconds it takes to fade the `music` to full volume",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "music",
          "method": "fade_in",
          "self": "data",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "python": [
            "def fade_music_in(data, ms):"
          ],
          "csharp": [
            "public void Music.FadeIn(int ms);",
            "public static void SplashKit.FadeMusicIn(Music data, int ms);"
          ],
          "cpp": [
            "void fade_music_in(music data, int ms)"
          ],
          "pascal": [
            "procedure FadeMusicIn(data: Music; ms: Integer)"
          ]
        }
      },
      {
        "signature": "void fade_music_in(music data,int times,int ms);",
        "name": "fade_music_in",
        "method_name": "fade_in",
        "unique_global_name": "fade_music_in_with_times",
        "unique_method_name": "music.fade_in_with_times",
        "suffix_name": null,
        "description": "Fades music up to full volume over a specified number of milliseconds\nfor a specified number of times.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "data": {
            "type": "music",
            "description": "The name of the `music` to play.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "times": {
            "type": "int",
            "description": "Controls the number of times the music is played.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "ms": {
            "type": "int",
            "description": "How many milliseconds it takes to fade the `music` to full volume",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "music",
          "method": "fade_in",
          "self": "data",
          "suffix": "with_times",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "python": [
            "def fade_music_in_with_times(data, times, ms):"
          ],
          "csharp": [
            "public void Music.FadeIn(int times, int ms);",
            "public static void SplashKit.FadeMusicIn(Music data, int times, int ms);"
          ],
          "cpp": [
            "void fade_music_in(music data, int times, int ms)"
          ],
          "pascal": [
            "procedure FadeMusicIn(data: Music; times: Integer; ms: Integer)"
          ]
        }
      },
      {
        "signature": "void fade_music_out(int ms);",
        "name": "fade_music_out",
        "method_name": "fade_out",
        "unique_global_name": "fade_music_out",
        "unique_method_name": ".fade_out",
        "suffix_name": null,
        "description": "Fades music outover a specified number of milliseconds",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "ms": {
            "type": "int",
            "description": "How many milliseconds it takes to fade the `music` out",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "method": "fade_out",
          "static": "audio",
          "group": "audio"
        },
        "signatures": {
          "python": [
            "def fade_music_out(ms):"
          ],
          "csharp": [
            "public static void Audio.FadeOut(int ms);",
            "public static void SplashKit.FadeMusicOut(int ms);"
          ],
          "cpp": [
            "void fade_music_out(int ms)"
          ],
          "pascal": [
            "procedure FadeMusicOut(ms: Integer)"
          ]
        }
      },
      {
        "signature": "void free_all_music();",
        "name": "free_all_music",
        "method_name": "free_all_music",
        "unique_global_name": "free_all_music",
        "unique_method_name": ".free_all_music",
        "suffix_name": null,
        "description": "Releases all of the music files that have been loaded.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "method": "free_all_music",
          "static": "audio",
          "group": "audio"
        },
        "signatures": {
          "python": [
            "def free_all_music():"
          ],
          "csharp": [
            "public static void Audio.FreeAllMusic();",
            "public static void SplashKit.FreeAllMusic();"
          ],
          "cpp": [
            "void free_all_music()"
          ],
          "pascal": [
            "procedure FreeAllMusic()"
          ]
        }
      },
      {
        "signature": "void free_music(music effect);",
        "name": "free_music",
        "method_name": null,
        "unique_global_name": "free_music",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Releases the SplashKit resources associated with music.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "effect": {
            "type": "music",
            "description": "The music file whose resources should be released.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "music",
          "destructor": true,
          "self": "effect",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "python": [
            "def free_music(effect):"
          ],
          "csharp": [
            "public static void SplashKit.FreeMusic(Music effect);"
          ],
          "cpp": [
            "void free_music(music effect)"
          ],
          "pascal": [
            "procedure FreeMusic(effect: Music)"
          ]
        }
      },
      {
        "signature": "bool has_music(const string &name);",
        "name": "has_music",
        "method_name": null,
        "unique_global_name": "has_music",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Determines if SplashKit has a music file loaded for the supplied name.\nThis checks against all music files loaded, those loaded without a name\nare assigned the filename as a default. If this returns `false`, you may\nwant to use `load_music` to load in a specific sound effect and give\nit the desired name.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Returns `true` if there is a music file with the given `name` has\nhas been loaded.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name to check if a music file is loaded.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "python": [
            "def has_music(name):"
          ],
          "csharp": [
            "public static bool SplashKit.HasMusic(string name);"
          ],
          "cpp": [
            "bool has_music(const string &name)"
          ],
          "pascal": [
            "function HasMusic(const name: String): Boolean"
          ]
        }
      },
      {
        "signature": "music load_music(const string &name,const string &filename);",
        "name": "load_music",
        "method_name": null,
        "unique_global_name": "load_music",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Loads and returns a music value. The supplied `filename` is used to\nlocate the music file to load. The supplied `name` indicates the\nname to use to refer to this Music value. The `music` can then be\nretrieved by passing this `name` to the `music_named` function.",
        "brief": null,
        "return": {
          "type": "music",
          "description": "A new music resource",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the resource for SplashKit",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "filename": {
            "type": "string",
            "description": "The filename to load",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "music",
          "constructor": true,
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "python": [
            "def load_music(name, filename):"
          ],
          "csharp": [
            "public static Music SplashKit.LoadMusic(string name, string filename);",
            "public Music(string name, string filename);"
          ],
          "cpp": [
            "music load_music(const string &name, const string &filename)"
          ],
          "pascal": [
            "function LoadMusic(const name: String; const filename: String): Music"
          ]
        }
      },
      {
        "signature": "string music_filename(music data);",
        "name": "music_filename",
        "method_name": null,
        "unique_global_name": "music_filename",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the filename the of the music data",
        "brief": null,
        "return": {
          "type": "string",
          "description": "Returns a string with the filename of the `music` file.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "data": {
            "type": "music",
            "description": "The music resource",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "music",
          "getter": "filename",
          "self": "data",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "python": [
            "def music_filename(data):"
          ],
          "csharp": [
            "public string Music.Filename { get }",
            "public static string SplashKit.MusicFilename(Music data);"
          ],
          "cpp": [
            "string music_filename(music data)"
          ],
          "pascal": [
            "function MusicFilename(data: Music): String"
          ]
        }
      },
      {
        "signature": "string music_name(music data);",
        "name": "music_name",
        "method_name": null,
        "unique_global_name": "music_name",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the name that SplashKit uses to refer to this music data",
        "brief": null,
        "return": {
          "type": "string",
          "description": "Returns a string with the name of the `music` that SplashKit refers to.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "data": {
            "type": "music",
            "description": "The music resource",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "music",
          "getter": "name",
          "self": "data",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "python": [
            "def music_name(data):"
          ],
          "csharp": [
            "public string Music.Name { get }",
            "public static string SplashKit.MusicName(Music data);"
          ],
          "cpp": [
            "string music_name(music data)"
          ],
          "pascal": [
            "function MusicName(data: Music): String"
          ]
        }
      },
      {
        "signature": "music music_named(const string &name);",
        "name": "music_named",
        "method_name": null,
        "unique_global_name": "music_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Retrieves a `music` that has been loaded into SplashKit.",
        "brief": null,
        "return": {
          "type": "music",
          "description": "Returns the `music` that has been loaded with the specified\n`name` using `load_music`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the music file to return.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "python": [
            "def music_named(name):"
          ],
          "csharp": [
            "public static Music SplashKit.MusicNamed(string name);"
          ],
          "cpp": [
            "music music_named(const string &name)"
          ],
          "pascal": [
            "function MusicNamed(const name: String): Music"
          ]
        }
      },
      {
        "signature": "bool music_playing();",
        "name": "music_playing",
        "method_name": null,
        "unique_global_name": "music_playing",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks whether music is currently playing.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Returns true or false value representing whether music is currently playing.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "playing",
          "static": "audio",
          "group": "audio"
        },
        "signatures": {
          "python": [
            "def music_playing():"
          ],
          "csharp": [
            "public static bool Audio.Playing { get }",
            "public static bool SplashKit.MusicPlaying();"
          ],
          "cpp": [
            "bool music_playing()"
          ],
          "pascal": [
            "function MusicPlaying(): Boolean"
          ]
        }
      },
      {
        "signature": "bool music_valid(music m);",
        "name": "music_valid",
        "method_name": null,
        "unique_global_name": "music_valid",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Lets you test if music value is valid. This will return true when it is a valid music.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "true when the music is valid.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "m": {
            "type": "music",
            "description": "the music source to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "python": [
            "def music_valid(m):"
          ],
          "csharp": [
            "public static bool SplashKit.MusicValid(Music m);"
          ],
          "cpp": [
            "bool music_valid(music m)"
          ],
          "pascal": [
            "function MusicValid(m: Music): Boolean"
          ]
        }
      },
      {
        "signature": "double music_volume();",
        "name": "music_volume",
        "method_name": null,
        "unique_global_name": "music_volume",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the volume of the currently playing `music`.",
        "brief": null,
        "return": {
          "type": "double",
          "description": "Returns the percentage of the currently playing `music`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "volume",
          "static": "audio",
          "group": "audio"
        },
        "signatures": {
          "python": [
            "def music_volume():"
          ],
          "csharp": [
            "public static double Audio.Volume { get }",
            "public static double SplashKit.MusicVolume();"
          ],
          "cpp": [
            "double music_volume()"
          ],
          "pascal": [
            "function MusicVolume(): Double"
          ]
        }
      },
      {
        "signature": "void pause_music();",
        "name": "pause_music",
        "method_name": "pause",
        "unique_global_name": "pause_music",
        "unique_method_name": ".pause",
        "suffix_name": null,
        "description": "Pauses currently playing music - see resume_music to continue playing.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "method": "pause",
          "static": "audio",
          "group": "audio"
        },
        "signatures": {
          "python": [
            "def pause_music():"
          ],
          "csharp": [
            "public static void Audio.Pause();",
            "public static void SplashKit.PauseMusic();"
          ],
          "cpp": [
            "void pause_music()"
          ],
          "pascal": [
            "procedure PauseMusic()"
          ]
        }
      },
      {
        "signature": "void play_music(const string &name);",
        "name": "play_music",
        "method_name": null,
        "unique_global_name": "play_music_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Plays the music file that matches the name once at full volume.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the `music` to play.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "named",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "python": [
            "def play_music_named(name):"
          ],
          "csharp": [
            "public static void SplashKit.PlayMusic(string name);"
          ],
          "cpp": [
            "void play_music(const string &name)"
          ],
          "pascal": [
            "procedure PlayMusic(const name: String)"
          ]
        }
      },
      {
        "signature": "void play_music(const string &name,int times);",
        "name": "play_music",
        "method_name": null,
        "unique_global_name": "play_music_named_with_times",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Plays the music file that matches the name a specified number of times at full volume.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the `music` to play.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "times": {
            "type": "int",
            "description": "Controls the number of times the music is played.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "named_with_times",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "python": [
            "def play_music_named_with_times(name, times):"
          ],
          "csharp": [
            "public static void SplashKit.PlayMusic(string name, int times);"
          ],
          "cpp": [
            "void play_music(const string &name, int times)"
          ],
          "pascal": [
            "procedure PlayMusic(const name: String; times: Integer)"
          ]
        }
      },
      {
        "signature": "void play_music(music data);",
        "name": "play_music",
        "method_name": "play",
        "unique_global_name": "play_music",
        "unique_method_name": "music.play",
        "suffix_name": null,
        "description": "Plays a music file once at full volume.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "data": {
            "type": "music",
            "description": "The name of the `music` to play.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "music",
          "method": "play",
          "self": "data",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "python": [
            "def play_music(data):"
          ],
          "csharp": [
            "public void Music.Play();",
            "public static void SplashKit.PlayMusic(Music data);"
          ],
          "cpp": [
            "void play_music(music data)"
          ],
          "pascal": [
            "procedure PlayMusic(data: Music)"
          ]
        }
      },
      {
        "signature": "void play_music(music data,int times);",
        "name": "play_music",
        "method_name": "play",
        "unique_global_name": "play_music_with_times",
        "unique_method_name": "music.play_with_times",
        "suffix_name": null,
        "description": "Plays a music file a specified number of times at full volume.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "data": {
            "type": "music",
            "description": "The name of the `music` to play.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "times": {
            "type": "int",
            "description": "Controls the number of times the music is played.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "music",
          "method": "play",
          "self": "data",
          "suffix": "with_times",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "python": [
            "def play_music_with_times(data, times):"
          ],
          "csharp": [
            "public void Music.Play(int times);",
            "public static void SplashKit.PlayMusic(Music data, int times);"
          ],
          "cpp": [
            "void play_music(music data, int times)"
          ],
          "pascal": [
            "procedure PlayMusic(data: Music; times: Integer)"
          ]
        }
      },
      {
        "signature": "void play_music(music data,int times,double volume);",
        "name": "play_music",
        "method_name": "play",
        "unique_global_name": "play_music_with_times_and_volume",
        "unique_method_name": "music.play_with_times_and_volume",
        "suffix_name": null,
        "description": "Plays a music file for a specified number of times and playback volume.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "data": {
            "type": "music",
            "description": "The name of the `music` to play.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "times": {
            "type": "int",
            "description": "Controls the number of times the music is played.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "volume": {
            "type": "double",
            "description": "Indicates the percentage of the original volume to play the\n`music` at. This must be between `0` and `1`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "music",
          "method": "play",
          "self": "data",
          "suffix": "with_times_and_volume",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "python": [
            "def play_music_with_times_and_volume(data, times, volume):"
          ],
          "csharp": [
            "public void Music.Play(int times, double volume);",
            "public static void SplashKit.PlayMusic(Music data, int times, double volume);"
          ],
          "cpp": [
            "void play_music(music data, int times, double volume)"
          ],
          "pascal": [
            "procedure PlayMusic(data: Music; times: Integer; volume: Double)"
          ]
        }
      },
      {
        "signature": "void resume_music();",
        "name": "resume_music",
        "method_name": "resume",
        "unique_global_name": "resume_music",
        "unique_method_name": ".resume",
        "suffix_name": null,
        "description": "Resumes currently paused music - see pause_music to pause playing music.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "method": "resume",
          "static": "audio",
          "group": "audio"
        },
        "signatures": {
          "python": [
            "def resume_music():"
          ],
          "csharp": [
            "public static void Audio.Resume();",
            "public static void SplashKit.ResumeMusic();"
          ],
          "cpp": [
            "void resume_music()"
          ],
          "pascal": [
            "procedure ResumeMusic()"
          ]
        }
      },
      {
        "signature": "void set_music_volume(double volume);",
        "name": "set_music_volume",
        "method_name": null,
        "unique_global_name": "set_music_volume",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the volume of the currently playing `music`. Must be between 0 and 1, e.g. 0.1 is 10%.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "volume": {
            "type": "double",
            "description": "Indicates the percentage of the original volume to play the\n`music` at. This must be between `0` and `1`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "setter": "volume",
          "static": "audio",
          "group": "audio"
        },
        "signatures": {
          "python": [
            "def set_music_volume(volume):"
          ],
          "csharp": [
            "public static void Audio.Volume { set }",
            "public static void SplashKit.SetMusicVolume(double volume);"
          ],
          "cpp": [
            "void set_music_volume(double volume)"
          ],
          "pascal": [
            "procedure SetMusicVolume(volume: Double)"
          ]
        }
      },
      {
        "signature": "void stop_music();",
        "name": "stop_music",
        "method_name": "stop",
        "unique_global_name": "stop_music",
        "unique_method_name": ".stop",
        "suffix_name": null,
        "description": "Stops currently playing music.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "method": "stop",
          "static": "audio",
          "group": "audio"
        },
        "signatures": {
          "python": [
            "def stop_music():"
          ],
          "csharp": [
            "public static void Audio.Stop();",
            "public static void SplashKit.StopMusic();"
          ],
          "cpp": [
            "void stop_music()"
          ],
          "pascal": [
            "procedure StopMusic()"
          ]
        }
      },
      {
        "signature": "void fade_all_sound_effects_out(int ms);",
        "name": "fade_all_sound_effects_out",
        "method_name": null,
        "unique_global_name": "fade_all_sound_effects_out",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fades out all `sound_effect`s over the specified milliseconds.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "ms": {
            "type": "int",
            "description": "The number of milliseconds to fade out all sound effects.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "python": [
            "def fade_all_sound_effects_out(ms):"
          ],
          "csharp": [
            "public static void SplashKit.FadeAllSoundEffectsOut(int ms);"
          ],
          "cpp": [
            "void fade_all_sound_effects_out(int ms)"
          ],
          "pascal": [
            "procedure FadeAllSoundEffectsOut(ms: Integer)"
          ]
        }
      },
      {
        "signature": "void fade_sound_effect_out(sound_effect effect,int ms);",
        "name": "fade_sound_effect_out",
        "method_name": "fade_out",
        "unique_global_name": "fade_sound_effect_out",
        "unique_method_name": "sound_effect.fade_out",
        "suffix_name": null,
        "description": "Fades out the `sound_effect` over the specified milliseconds.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "effect": {
            "type": "sound_effect",
            "description": "The `sound_effect` to fade out.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "ms": {
            "type": "int",
            "description": "The number of milliseconds to fade out the `sound_effect`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sound_effect",
          "method": "fade_out",
          "self": "effect",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "python": [
            "def fade_sound_effect_out(effect, ms):"
          ],
          "csharp": [
            "public void SoundEffect.FadeOut(int ms);",
            "public static void SplashKit.FadeSoundEffectOut(SoundEffect effect, int ms);"
          ],
          "cpp": [
            "void fade_sound_effect_out(sound_effect effect, int ms)"
          ],
          "pascal": [
            "procedure FadeSoundEffectOut(effect: SoundEffect; ms: Integer)"
          ]
        }
      },
      {
        "signature": "void free_all_sound_effects();",
        "name": "free_all_sound_effects",
        "method_name": null,
        "unique_global_name": "free_all_sound_effects",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Releases all of the sound effects that have been loaded.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "python": [
            "def free_all_sound_effects():"
          ],
          "csharp": [
            "public static void SplashKit.FreeAllSoundEffects();"
          ],
          "cpp": [
            "void free_all_sound_effects()"
          ],
          "pascal": [
            "procedure FreeAllSoundEffects()"
          ]
        }
      },
      {
        "signature": "void free_sound_effect(sound_effect effect);",
        "name": "free_sound_effect",
        "method_name": "close",
        "unique_global_name": "free_sound_effect",
        "unique_method_name": "sound_effect.close",
        "suffix_name": null,
        "description": "Releases the SplashKit resources associated with the sound effect.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "effect": {
            "type": "sound_effect",
            "description": "The `sound_effect` whose resources should be released.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sound_effect",
          "destructor": true,
          "method": "close",
          "self": "effect",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "python": [
            "def free_sound_effect(effect):"
          ],
          "csharp": [
            "public void SoundEffect.Close();",
            "public static void SplashKit.FreeSoundEffect(SoundEffect effect);"
          ],
          "cpp": [
            "void free_sound_effect(sound_effect effect)"
          ],
          "pascal": [
            "procedure FreeSoundEffect(effect: SoundEffect)"
          ]
        }
      },
      {
        "signature": "bool has_sound_effect(const string &name);",
        "name": "has_sound_effect",
        "method_name": null,
        "unique_global_name": "has_sound_effect",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Determines if SplashKit has a sound effect loaded for the supplied name.\nThis checks against all sounds loaded, those loaded without a name\nare assigned the filename as a default. If this returns `false`, you may\nwant to use `load_sound_effect` to load in a specific sound effect and give\nit the desired name.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Returns `true` if there is a sound effect with the given `name` has\nhas been loaded.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name to check if a sound effect is loaded.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "python": [
            "def has_sound_effect(name):"
          ],
          "csharp": [
            "public static bool SplashKit.HasSoundEffect(string name);"
          ],
          "cpp": [
            "bool has_sound_effect(const string &name)"
          ],
          "pascal": [
            "function HasSoundEffect(const name: String): Boolean"
          ]
        }
      },
      {
        "signature": "sound_effect load_sound_effect(const string &name,const string &filename);",
        "name": "load_sound_effect",
        "method_name": null,
        "unique_global_name": "load_sound_effect",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The supplied `filename` is used to locate the sound effect to load. The\nsupplied `name` indicates the name to use to refer to this `sound_effect`.\nThe `sound_effect` can then be retrieved by passing this `name` to\nthe `sound_effect_named` function.",
        "brief": "Loads and returns a sound effect.",
        "return": {
          "type": "sound_effect",
          "description": "A new `sound_effect` with the initialised values provided.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name used to refer to the sound effect.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "filename": {
            "type": "string",
            "description": "The filename used to locate the sound effect to use.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sound_effect",
          "constructor": true,
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "python": [
            "def load_sound_effect(name, filename):"
          ],
          "csharp": [
            "public static SoundEffect SplashKit.LoadSoundEffect(string name, string filename);",
            "public SoundEffect(string name, string filename);"
          ],
          "cpp": [
            "sound_effect load_sound_effect(const string &name, const string &filename)"
          ],
          "pascal": [
            "function LoadSoundEffect(const name: String; const filename: String): SoundEffect"
          ]
        }
      },
      {
        "signature": "void play_sound_effect(const string &name);",
        "name": "play_sound_effect",
        "method_name": null,
        "unique_global_name": "play_sound_effect_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Plays a sound effect once at full volume.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the effect to play.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "named",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "python": [
            "def play_sound_effect_named(name):"
          ],
          "csharp": [
            "public static void SplashKit.PlaySoundEffect(string name);"
          ],
          "cpp": [
            "void play_sound_effect(const string &name)"
          ],
          "pascal": [
            "procedure PlaySoundEffect(const name: String)"
          ]
        }
      },
      {
        "signature": "void play_sound_effect(const string &name,double volume);",
        "name": "play_sound_effect",
        "method_name": null,
        "unique_global_name": "play_sound_effect_named_with_volume",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Plays a sound effect once at full volume.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the effect to play.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "volume": {
            "type": "double",
            "description": "The volume to play the `sound_effect`",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "named_with_volume",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "python": [
            "def play_sound_effect_named_with_volume(name, volume):"
          ],
          "csharp": [
            "public static void SplashKit.PlaySoundEffect(string name, double volume);"
          ],
          "cpp": [
            "void play_sound_effect(const string &name, double volume)"
          ],
          "pascal": [
            "procedure PlaySoundEffect(const name: String; volume: Double)"
          ]
        }
      },
      {
        "signature": "void play_sound_effect(const string &name,int times);",
        "name": "play_sound_effect",
        "method_name": null,
        "unique_global_name": "play_sound_effect_named_with_times",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Plays a sound effect for a specified number of times at full volume.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the effect to play.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "times": {
            "type": "int",
            "description": "Controls the number of times the sound effect is played.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "named_with_times",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "python": [
            "def play_sound_effect_named_with_times(name, times):"
          ],
          "csharp": [
            "public static void SplashKit.PlaySoundEffect(string name, int times);"
          ],
          "cpp": [
            "void play_sound_effect(const string &name, int times)"
          ],
          "pascal": [
            "procedure PlaySoundEffect(const name: String; times: Integer)"
          ]
        }
      },
      {
        "signature": "void play_sound_effect(const string &name,int times,double volume);",
        "name": "play_sound_effect",
        "method_name": null,
        "unique_global_name": "play_sound_effect_named_with_times_and_volume",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Plays a sound effect for a specified number of times and playback volume.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the effect to play.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "times": {
            "type": "int",
            "description": "Controls the number of times the sound effect is played.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "volume": {
            "type": "double",
            "description": "Indicates the percentage of the original volume to play the\n`sound_effect` at. This must be between `0` and `1`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "named_with_times_and_volume",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "python": [
            "def play_sound_effect_named_with_times_and_volume(name, times, volume):"
          ],
          "csharp": [
            "public static void SplashKit.PlaySoundEffect(string name, int times, double volume);"
          ],
          "cpp": [
            "void play_sound_effect(const string &name, int times, double volume)"
          ],
          "pascal": [
            "procedure PlaySoundEffect(const name: String; times: Integer; volume: Double)"
          ]
        }
      },
      {
        "signature": "void play_sound_effect(sound_effect effect);",
        "name": "play_sound_effect",
        "method_name": "play",
        "unique_global_name": "play_sound_effect",
        "unique_method_name": "sound_effect.play",
        "suffix_name": null,
        "description": "Plays a sound effect once at full volume.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "effect": {
            "type": "sound_effect",
            "description": "The effect indicates which sound effect to start playing.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sound_effect",
          "method": "play",
          "self": "effect",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "python": [
            "def play_sound_effect(effect):"
          ],
          "csharp": [
            "public void SoundEffect.Play();",
            "public static void SplashKit.PlaySoundEffect(SoundEffect effect);"
          ],
          "cpp": [
            "void play_sound_effect(sound_effect effect)"
          ],
          "pascal": [
            "procedure PlaySoundEffect(effect: SoundEffect)"
          ]
        }
      },
      {
        "signature": "void play_sound_effect(sound_effect effect,double volume);",
        "name": "play_sound_effect",
        "method_name": "play",
        "unique_global_name": "play_sound_effect_with_volume",
        "unique_method_name": "sound_effect.play_with_volume",
        "suffix_name": null,
        "description": "Plays a sound effect once at playback volume.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "effect": {
            "type": "sound_effect",
            "description": "The effect indicates which sound effect to start playing.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "volume": {
            "type": "double",
            "description": "Indicates the percentage of the original volume to play the\n`sound_effect` at. This must be between `0` and `1`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sound_effect",
          "method": "play",
          "self": "effect",
          "suffix": "with_volume",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "python": [
            "def play_sound_effect_with_volume(effect, volume):"
          ],
          "csharp": [
            "public void SoundEffect.Play(double volume);",
            "public static void SplashKit.PlaySoundEffect(SoundEffect effect, double volume);"
          ],
          "cpp": [
            "void play_sound_effect(sound_effect effect, double volume)"
          ],
          "pascal": [
            "procedure PlaySoundEffect(effect: SoundEffect; volume: Double)"
          ]
        }
      },
      {
        "signature": "void play_sound_effect(sound_effect effect,int times);",
        "name": "play_sound_effect",
        "method_name": "play",
        "unique_global_name": "play_sound_effect_with_times",
        "unique_method_name": "sound_effect.play_with_times",
        "suffix_name": null,
        "description": "Plays a sound effect once at full volume.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "effect": {
            "type": "sound_effect",
            "description": "The effect indicates which sound effect to start playing.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "times": {
            "type": "int",
            "description": "Controls the number of times the sound effect is played.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sound_effect",
          "method": "play",
          "self": "effect",
          "suffix": "with_times",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "python": [
            "def play_sound_effect_with_times(effect, times):"
          ],
          "csharp": [
            "public void SoundEffect.Play(int times);",
            "public static void SplashKit.PlaySoundEffect(SoundEffect effect, int times);"
          ],
          "cpp": [
            "void play_sound_effect(sound_effect effect, int times)"
          ],
          "pascal": [
            "procedure PlaySoundEffect(effect: SoundEffect; times: Integer)"
          ]
        }
      },
      {
        "signature": "void play_sound_effect(sound_effect effect,int times,double volume);",
        "name": "play_sound_effect",
        "method_name": "play",
        "unique_global_name": "play_sound_effect_with_times_and_volume",
        "unique_method_name": "sound_effect.play_with_times_and_volume",
        "suffix_name": null,
        "description": "This version of `play_sound_effect` allows you to control both the number\nof times the `sound_effect` is repeated and its playback volume.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "effect": {
            "type": "sound_effect",
            "description": "The effect indicates which sound effect to start playing.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "times": {
            "type": "int",
            "description": "Controls the number of times the sound effect is played.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "volume": {
            "type": "double",
            "description": "Indicates the percentage of the original volume to play the\n`sound_effect` at. This must be between `0` and `1`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sound_effect",
          "method": "play",
          "self": "effect",
          "suffix": "with_times_and_volume",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "python": [
            "def play_sound_effect_with_times_and_volume(effect, times, volume):"
          ],
          "csharp": [
            "public void SoundEffect.Play(int times, double volume);",
            "public static void SplashKit.PlaySoundEffect(SoundEffect effect, int times, double volume);"
          ],
          "cpp": [
            "void play_sound_effect(sound_effect effect, int times, double volume)"
          ],
          "pascal": [
            "procedure PlaySoundEffect(effect: SoundEffect; times: Integer; volume: Double)"
          ]
        }
      },
      {
        "signature": "string sound_effect_filename(sound_effect effect);",
        "name": "sound_effect_filename",
        "method_name": null,
        "unique_global_name": "sound_effect_filename",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the filename of the `sound_effect` that has been loaded by SplashKit",
        "brief": null,
        "return": {
          "type": "string",
          "description": "Returns the filename of the `sound_effect` that has been loaded",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "effect": {
            "type": "sound_effect",
            "description": "The `sound_effect` to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sound_effect",
          "getter": "filename",
          "self": "effect",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "python": [
            "def sound_effect_filename(effect):"
          ],
          "csharp": [
            "public string SoundEffect.Filename { get }",
            "public static string SplashKit.SoundEffectFilename(SoundEffect effect);"
          ],
          "cpp": [
            "string sound_effect_filename(sound_effect effect)"
          ],
          "pascal": [
            "function SoundEffectFilename(effect: SoundEffect): String"
          ]
        }
      },
      {
        "signature": "string sound_effect_name(sound_effect effect);",
        "name": "sound_effect_name",
        "method_name": null,
        "unique_global_name": "sound_effect_name",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the name of the `sound_effect` that has been loaded by SplashKit",
        "brief": null,
        "return": {
          "type": "string",
          "description": "Returns the name of the `sound_effect` that has been loaded",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "effect": {
            "type": "sound_effect",
            "description": "The `sound_effect` to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sound_effect",
          "getter": "name",
          "self": "effect",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "python": [
            "def sound_effect_name(effect):"
          ],
          "csharp": [
            "public string SoundEffect.Name { get }",
            "public static string SplashKit.SoundEffectName(SoundEffect effect);"
          ],
          "cpp": [
            "string sound_effect_name(sound_effect effect)"
          ],
          "pascal": [
            "function SoundEffectName(effect: SoundEffect): String"
          ]
        }
      },
      {
        "signature": "sound_effect sound_effect_named(const string &name);",
        "name": "sound_effect_named",
        "method_name": null,
        "unique_global_name": "sound_effect_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Retrieves a `sound_effect` that has been loaded into SplashKit. If the\nsound effect has not been loaded, this will attempt to use the name to\nlocate the file for you. If a file can be found, the sound effect is loaded\nand returned.",
        "brief": null,
        "return": {
          "type": "sound_effect",
          "description": "Returns the `sound_effect` that has been loaded with the specified\n`name` using `load_sound_effect`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the sound effect to return.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "python": [
            "def sound_effect_named(name):"
          ],
          "csharp": [
            "public static SoundEffect SplashKit.SoundEffectNamed(string name);"
          ],
          "cpp": [
            "sound_effect sound_effect_named(const string &name)"
          ],
          "pascal": [
            "function SoundEffectNamed(const name: String): SoundEffect"
          ]
        }
      },
      {
        "signature": "bool sound_effect_playing(const string &name);",
        "name": "sound_effect_playing",
        "method_name": null,
        "unique_global_name": "sound_effect_playing_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks whether the `sound_effect` that matches the name is currently playing",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Returns whether the \"sound_effect\" that matches the name is currently playing or not",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the `sound_effect`",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "named",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "python": [
            "def sound_effect_playing_named(name):"
          ],
          "csharp": [
            "public static bool SplashKit.SoundEffectPlaying(string name);"
          ],
          "cpp": [
            "bool sound_effect_playing(const string &name)"
          ],
          "pascal": [
            "function SoundEffectPlaying(const name: String): Boolean"
          ]
        }
      },
      {
        "signature": "bool sound_effect_playing(sound_effect effect);",
        "name": "sound_effect_playing",
        "method_name": null,
        "unique_global_name": "sound_effect_playing",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks whether the `sound_effect` is currently playing",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Returns whether the \"sound_effect\" is currently playing or not",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "effect": {
            "type": "sound_effect",
            "description": "The `sound_effect` to be tested.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sound_effect",
          "getter": "is_playing",
          "self": "effect",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "python": [
            "def sound_effect_playing(effect):"
          ],
          "csharp": [
            "public bool SoundEffect.IsPlaying { get }",
            "public static bool SplashKit.SoundEffectPlaying(SoundEffect effect);"
          ],
          "cpp": [
            "bool sound_effect_playing(sound_effect effect)"
          ],
          "pascal": [
            "function SoundEffectPlaying(effect: SoundEffect): Boolean"
          ]
        }
      },
      {
        "signature": "bool sound_effect_valid(sound_effect effect);",
        "name": "sound_effect_valid",
        "method_name": null,
        "unique_global_name": "sound_effect_valid",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Lets you test if a sound effect is valid. This will return true when it is a valid sound effect.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "true when the sound effect is valid.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "effect": {
            "type": "sound_effect",
            "description": "the effect to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "python": [
            "def sound_effect_valid(effect):"
          ],
          "csharp": [
            "public static bool SplashKit.SoundEffectValid(SoundEffect effect);"
          ],
          "cpp": [
            "bool sound_effect_valid(sound_effect effect)"
          ],
          "pascal": [
            "function SoundEffectValid(effect: SoundEffect): Boolean"
          ]
        }
      },
      {
        "signature": "void stop_sound_effect(const string &name);",
        "name": "stop_sound_effect",
        "method_name": null,
        "unique_global_name": "stop_sound_effect_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Stops the `sound_effect` that matches the name, if it is currently playing.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the `sound_effect` to stop.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "named",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "python": [
            "def stop_sound_effect_named(name):"
          ],
          "csharp": [
            "public static void SplashKit.StopSoundEffect(string name);"
          ],
          "cpp": [
            "void stop_sound_effect(const string &name)"
          ],
          "pascal": [
            "procedure StopSoundEffect(const name: String)"
          ]
        }
      },
      {
        "signature": "void stop_sound_effect(sound_effect effect);",
        "name": "stop_sound_effect",
        "method_name": "stop",
        "unique_global_name": "stop_sound_effect",
        "unique_method_name": "sound_effect.stop",
        "suffix_name": null,
        "description": "Stops the `sound_effect` if it is currently playing",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "effect": {
            "type": "sound_effect",
            "description": "The `sound_effect` to stop.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sound_effect",
          "method": "stop",
          "self": "effect",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "python": [
            "def stop_sound_effect(effect):"
          ],
          "csharp": [
            "public void SoundEffect.Stop();",
            "public static void SplashKit.StopSoundEffect(SoundEffect effect);"
          ],
          "cpp": [
            "void stop_sound_effect(sound_effect effect)"
          ],
          "pascal": [
            "procedure StopSoundEffect(effect: SoundEffect)"
          ]
        }
      }
    ],
    "typedefs": [
      {
        "signature": "typedef struct _music_data *music;",
        "name": "music",
        "description": "The Music type is used to refer to music that can be\nplayed by SplashKit. Music files are loaded with\n`load_music`, played using `play_music`, and must be\nreleased using `free_music`.\n\nUnlike `sound_effect`s, there can only be one music track\nplaying at a time. Playing an new track will stop the currently\nplaying music and switch to the new track.",
        "brief": null,
        "attributes": {
          "class": "music",
          "group": "audio",
          "static": "audio"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      },
      {
        "signature": "typedef struct _sound_data *sound_effect;",
        "name": "sound_effect",
        "description": "The `sound_effect` type is used to refer to sound effects that can be\nplayed by the SplashKit audio code. Sound effects are:\n\n\n- loaded with `load_sound_effect`,\n\n- played using `play_sound_effect`,\n\n- and must be released using `delete_sound_effect` (to release a specific\nsound effect) or `delete_all_sound_effects` (to release all loaded\nsound effects).\n\nSplashKit will mix the audio from multiple sound effects, making it\npossible to play multiple `sound_effect`s, or even to play the one\n`sound_effect` multiple times.\n\nYou can check if a `sound_effect` is currently playing using\n`sound_effect_playing`.\n\nTo stop a `sound_effect` playing use `stop_sound_effect`. This will stop all\ninstances of this one sound effect from playing.\n\nUse `music` for background music for your games.",
        "brief": null,
        "attributes": {
          "class": "sound_effect",
          "group": "audio",
          "static": "audio"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      }
    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "camera": {
    "brief": "SplashKit camera functionality allows you to move a virtual camera\naround in your world.",
    "description": "Splashkit camera functionality allows you to move a virtual camera around in\nyour world. This camera projects to the users window, allowing you to\ndraw things to the screen in your world coordinates.",
    "functions": [
      {
        "signature": "point_2d camera_position();",
        "name": "camera_position",
        "method_name": null,
        "unique_global_name": "camera_position",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the position of the camera in game coordinates. This will be the\ncoordinate of the upper left corner of the screen.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "The position of the camera as a point_2d.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "position",
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "python": [
            "def camera_position():"
          ],
          "csharp": [
            "public static Point2D Camera.Position { get }",
            "public static Point2D SplashKit.CameraPosition();"
          ],
          "cpp": [
            "point_2d camera_position()"
          ],
          "pascal": [
            "function CameraPosition(): Point2D"
          ]
        }
      },
      {
        "signature": "double camera_x();",
        "name": "camera_x",
        "method_name": null,
        "unique_global_name": "camera_x",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the x location of the camera in game coordinates. This represents\nthe left most x value shown on the screen, with the right of the screen\nbeing at camera x + screen width.",
        "brief": null,
        "return": {
          "type": "double",
          "description": "The x location of the camera in game coordinates.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "x",
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "python": [
            "def camera_x():"
          ],
          "csharp": [
            "public static double Camera.X { get }",
            "public static double SplashKit.CameraX();"
          ],
          "cpp": [
            "double camera_x()"
          ],
          "pascal": [
            "function CameraX(): Double"
          ]
        }
      },
      {
        "signature": "double camera_y();",
        "name": "camera_y",
        "method_name": null,
        "unique_global_name": "camera_y",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the y location of the camera in game coordinates. This represents\nthe stop most y value shown on the screen, with bottom of screen being\nat camera y + screen height.",
        "brief": null,
        "return": {
          "type": "double",
          "description": "The y location of the camera in game coordinates.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "y",
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "python": [
            "def camera_y():"
          ],
          "csharp": [
            "public static double Camera.Y { get }",
            "public static double SplashKit.CameraY();"
          ],
          "cpp": [
            "double camera_y()"
          ],
          "pascal": [
            "function CameraY(): Double"
          ]
        }
      },
      {
        "signature": "void center_camera_on(sprite s,const vector_2d &offset);",
        "name": "center_camera_on",
        "method_name": "center_on",
        "unique_global_name": "center_camera_on_vector",
        "unique_method_name": ".center_on_vector",
        "suffix_name": null,
        "description": "Set the camera view to be centered over the specific sprite. The offset\nvector allows you to move the sprite from the direct center of the screen.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to track.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "offset": {
            "type": "vector_2d",
            "description": "The amount to offset the camera, allowing you to position\nthe sprite away from the center of the screen.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "method": "center_on",
          "suffix": "vector",
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "python": [
            "def center_camera_on_vector(s, offset):"
          ],
          "csharp": [
            "public static void Camera.CenterOn(Sprite s, Vector2D offset);",
            "public static void SplashKit.CenterCameraOn(Sprite s, Vector2D offset);"
          ],
          "cpp": [
            "void center_camera_on(sprite s, const vector_2d &offset)"
          ],
          "pascal": [
            "procedure CenterCameraOn(s: Sprite; const offset: Vector2D)"
          ]
        }
      },
      {
        "signature": "void center_camera_on(sprite s,double offset_x,double offset_y);",
        "name": "center_camera_on",
        "method_name": "center_on",
        "unique_global_name": "center_camera_on",
        "unique_method_name": ".center_on",
        "suffix_name": null,
        "description": "Set the camera view to be centered over the specific sprite. The offset\nvector allows you to move the sprite from the direct center of the screen.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to track.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "offset_x": {
            "type": "double",
            "description": "An additional offset added to the camera, allowing you to\nposition the sprite offset from the center of the screen.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "offset_y": {
            "type": "double",
            "description": "An additional offset added to the camera, allowing you to\nposition the sprite offset from the center of the screen.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "method": "center_on",
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "python": [
            "def center_camera_on(s, offset_x, offset_y):"
          ],
          "csharp": [
            "public static void Camera.CenterOn(Sprite s, double offsetX, double offsetY);",
            "public static void SplashKit.CenterCameraOn(Sprite s, double offsetX, double offsetY);"
          ],
          "cpp": [
            "void center_camera_on(sprite s, double offset_x, double offset_y)"
          ],
          "pascal": [
            "procedure CenterCameraOn(s: Sprite; offsetX: Double; offsetY: Double)"
          ]
        }
      },
      {
        "signature": "void move_camera_by(const vector_2d &offset);",
        "name": "move_camera_by",
        "method_name": "move_by",
        "unique_global_name": "move_camera_by_vector",
        "unique_method_name": ".move_by_vector",
        "suffix_name": null,
        "description": "Move the camera (offset its world x and y values) using the specified\nvector. For example, if you move the camera by the same speed vector of\na sprite the camera will \"track\" (be locked on to) the sprite as it moves.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "offset": {
            "type": "vector_2d",
            "description": "The amount to move the camera.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "method": "move_by",
          "suffix": "vector",
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "python": [
            "def move_camera_by_vector(offset):"
          ],
          "csharp": [
            "public static void Camera.MoveBy(Vector2D offset);",
            "public static void SplashKit.MoveCameraBy(Vector2D offset);"
          ],
          "cpp": [
            "void move_camera_by(const vector_2d &offset)"
          ],
          "pascal": [
            "procedure MoveCameraBy(const offset: Vector2D)"
          ]
        }
      },
      {
        "signature": "void move_camera_by(double dx,double dy);",
        "name": "move_camera_by",
        "method_name": "move_by",
        "unique_global_name": "move_camera_by",
        "unique_method_name": ".move_by",
        "suffix_name": null,
        "description": "Move the camera (offset its world x and y values) using the specified\ndx (change in x) and dy (change in x) values.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "dx": {
            "type": "double",
            "description": "The amount to move the camera along the x axis.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "dy": {
            "type": "double",
            "description": "The amount to move the camera along the y axis.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "method": "move_by",
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "python": [
            "def move_camera_by(dx, dy):"
          ],
          "csharp": [
            "public static void Camera.MoveBy(double dx, double dy);",
            "public static void SplashKit.MoveCameraBy(double dx, double dy);"
          ],
          "cpp": [
            "void move_camera_by(double dx, double dy)"
          ],
          "pascal": [
            "procedure MoveCameraBy(dx: Double; dy: Double)"
          ]
        }
      },
      {
        "signature": "void move_camera_to(const point_2d &pt);",
        "name": "move_camera_to",
        "method_name": "move_to",
        "unique_global_name": "move_camera_to_point",
        "unique_method_name": ".move_to_point",
        "suffix_name": null,
        "description": "Move the camera view (screen top left) to a specified point in the world.\nThis will be the new top left corner of the screen.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "The new camera location",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "method": "move_to",
          "suffix": "point",
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "python": [
            "def move_camera_to_point(pt):"
          ],
          "csharp": [
            "public static void Camera.MoveTo(Point2D pt);",
            "public static void SplashKit.MoveCameraTo(Point2D pt);"
          ],
          "cpp": [
            "void move_camera_to(const point_2d &pt)"
          ],
          "pascal": [
            "procedure MoveCameraTo(const pt: Point2D)"
          ]
        }
      },
      {
        "signature": "void move_camera_to(double x,double y);",
        "name": "move_camera_to",
        "method_name": "move_to",
        "unique_global_name": "move_camera_to",
        "unique_method_name": ".move_to",
        "suffix_name": null,
        "description": "Move the camera view to a world location specified by the x and y values.\nThis will be the new top left corner of the screen.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "x": {
            "type": "double",
            "description": "The new camera x location",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The new camera y location",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "method": "move_to",
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "python": [
            "def move_camera_to(x, y):"
          ],
          "csharp": [
            "public static void Camera.MoveTo(double x, double y);",
            "public static void SplashKit.MoveCameraTo(double x, double y);"
          ],
          "cpp": [
            "void move_camera_to(double x, double y)"
          ],
          "pascal": [
            "procedure MoveCameraTo(x: Double; y: Double)"
          ]
        }
      },
      {
        "signature": "bool point_in_window(window wind,const point_2d &pt);",
        "name": "point_in_window",
        "method_name": "point_in_window",
        "unique_global_name": "point_in_window",
        "unique_method_name": ".point_in_window",
        "suffix_name": null,
        "description": "Tests if the point is in the window.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the point is on the screen.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "The window to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The point to check.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "method": "point_in_window",
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "python": [
            "def point_in_window(wind, pt):"
          ],
          "csharp": [
            "public static bool Camera.PointInWindow(Window wind, Point2D pt);",
            "public static bool SplashKit.PointInWindow(Window wind, Point2D pt);"
          ],
          "cpp": [
            "bool point_in_window(window wind, const point_2d &pt)"
          ],
          "pascal": [
            "function PointInWindow(wind: Window; const pt: Point2D): Boolean"
          ]
        }
      },
      {
        "signature": "bool point_on_screen(const point_2d &pt);",
        "name": "point_on_screen",
        "method_name": "point_on_screen",
        "unique_global_name": "point_on_screen",
        "unique_method_name": ".point_on_screen",
        "suffix_name": null,
        "description": "Tests if the point is on the screen.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the point is on the screen.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "The point to check.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "method": "point_on_screen",
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "python": [
            "def point_on_screen(pt):"
          ],
          "csharp": [
            "public static bool Camera.PointOnScreen(Point2D pt);",
            "public static bool SplashKit.PointOnScreen(Point2D pt);"
          ],
          "cpp": [
            "bool point_on_screen(const point_2d &pt)"
          ],
          "pascal": [
            "function PointOnScreen(const pt: Point2D): Boolean"
          ]
        }
      },
      {
        "signature": "bool rect_in_window(window wind,const rectangle &rect);",
        "name": "rect_in_window",
        "method_name": "rect_in_window",
        "unique_global_name": "rect_in_window",
        "unique_method_name": ".rect_in_window",
        "suffix_name": null,
        "description": "Tests if the rectangle is within the bounds of the window.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if any part of the rectangle is in the window.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "The window to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to check.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "method": "rect_in_window",
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "python": [
            "def rect_in_window(wind, rect):"
          ],
          "csharp": [
            "public static bool Camera.RectInWindow(Window wind, Rectangle rect);",
            "public static bool SplashKit.RectInWindow(Window wind, Rectangle rect);"
          ],
          "cpp": [
            "bool rect_in_window(window wind, const rectangle &rect)"
          ],
          "pascal": [
            "function RectInWindow(wind: Window; const rect: Rectangle): Boolean"
          ]
        }
      },
      {
        "signature": "bool rect_on_screen(const rectangle &rect);",
        "name": "rect_on_screen",
        "method_name": "rect_on_screen",
        "unique_global_name": "rect_on_screen",
        "unique_method_name": ".rect_on_screen",
        "suffix_name": null,
        "description": "Tests if the rectangle is on the screen.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if any part of the rectangle is on the screen.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to check.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "method": "rect_on_screen",
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "python": [
            "def rect_on_screen(rect):"
          ],
          "csharp": [
            "public static bool Camera.RectOnScreen(Rectangle rect);",
            "public static bool SplashKit.RectOnScreen(Rectangle rect);"
          ],
          "cpp": [
            "bool rect_on_screen(const rectangle &rect)"
          ],
          "pascal": [
            "function RectOnScreen(const rect: Rectangle): Boolean"
          ]
        }
      },
      {
        "signature": "point_2d screen_center();",
        "name": "screen_center",
        "method_name": null,
        "unique_global_name": "screen_center",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the center of the screen in world coordinates.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "The center of the screen in world coordinates.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "screen_center",
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "python": [
            "def screen_center():"
          ],
          "csharp": [
            "public static Point2D Camera.ScreenCenter { get }",
            "public static Point2D SplashKit.ScreenCenter();"
          ],
          "cpp": [
            "point_2d screen_center()"
          ],
          "pascal": [
            "function ScreenCenter(): Point2D"
          ]
        }
      },
      {
        "signature": "rectangle screen_rectangle();",
        "name": "screen_rectangle",
        "method_name": null,
        "unique_global_name": "screen_rectangle",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a rectangle that represents the dimensions of the window.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "A rectangle representing the dimensions of the current window.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "screen_rectangle",
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "python": [
            "def screen_rectangle():"
          ],
          "csharp": [
            "public static Rectangle Camera.ScreenRectangle { get }",
            "public static Rectangle SplashKit.ScreenRectangle();"
          ],
          "cpp": [
            "rectangle screen_rectangle()"
          ],
          "pascal": [
            "function ScreenRectangle(): Rectangle"
          ]
        }
      },
      {
        "signature": "void set_camera_position(point_2d pos);",
        "name": "set_camera_position",
        "method_name": null,
        "unique_global_name": "set_camera_position",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Change the position of the camera to a specified world coordinate. This\nwill then be the new top left most position of the screen within the world.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pos": {
            "type": "point_2d",
            "description": "The new location of the camera.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "setter": "position",
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "python": [
            "def set_camera_position(pos):"
          ],
          "csharp": [
            "public static void Camera.Position { set }",
            "public static void SplashKit.SetCameraPosition(Point2D pos);"
          ],
          "cpp": [
            "void set_camera_position(point_2d pos)"
          ],
          "pascal": [
            "procedure SetCameraPosition(pos: Point2D)"
          ]
        }
      },
      {
        "signature": "void set_camera_x(double x);",
        "name": "set_camera_x",
        "method_name": null,
        "unique_global_name": "set_camera_x",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Change the X position of the camera to a specified world coordinate. This\nwill then be the new left most position of the screen within the world.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "x": {
            "type": "double",
            "description": "The new x coordinate for the camera",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "setter": "x",
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "python": [
            "def set_camera_x(x):"
          ],
          "csharp": [
            "public static void Camera.X { set }",
            "public static void SplashKit.SetCameraX(double x);"
          ],
          "cpp": [
            "void set_camera_x(double x)"
          ],
          "pascal": [
            "procedure SetCameraX(x: Double)"
          ]
        }
      },
      {
        "signature": "void set_camera_y(double y);",
        "name": "set_camera_y",
        "method_name": null,
        "unique_global_name": "set_camera_y",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Change the Y position of the camera to a specified world coordinate. This\nwill then be the new top most position of the screen within the world.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "y": {
            "type": "double",
            "description": "The new y coordinate for the camera",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "setter": "y",
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "python": [
            "def set_camera_y(y):"
          ],
          "csharp": [
            "public static void Camera.Y { set }",
            "public static void SplashKit.SetCameraY(double y);"
          ],
          "cpp": [
            "void set_camera_y(double y)"
          ],
          "pascal": [
            "procedure SetCameraY(y: Double)"
          ]
        }
      },
      {
        "signature": "point_2d to_screen(const point_2d &pt);",
        "name": "to_screen",
        "method_name": "to_screen",
        "unique_global_name": "to_screen_point",
        "unique_method_name": ".to_screen_point",
        "suffix_name": null,
        "description": "Convert the passed in world coordinates to screen coordinates.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "A point that represents pt in screen coordinates.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "The point to convert - this should be in world coordinates.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "method": "to_screen",
          "suffix": "point",
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "python": [
            "def to_screen_point(pt):"
          ],
          "csharp": [
            "public static Point2D Camera.ToScreen(Point2D pt);",
            "public static Point2D SplashKit.ToScreen(Point2D pt);"
          ],
          "cpp": [
            "point_2d to_screen(const point_2d &pt)"
          ],
          "pascal": [
            "function ToScreen(const pt: Point2D): Point2D"
          ]
        }
      },
      {
        "signature": "rectangle to_screen(const rectangle &rect);",
        "name": "to_screen",
        "method_name": "to_screen",
        "unique_global_name": "to_screen_rectangle",
        "unique_method_name": ".to_screen_rectangle",
        "suffix_name": null,
        "description": "Convert the rectangle in world coordinates to screen coordinates.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "A rectangle that represents rect in screen coordinates.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to convert - this should be in world coordinates.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "method": "to_screen",
          "suffix": "rectangle",
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "python": [
            "def to_screen_rectangle(rect):"
          ],
          "csharp": [
            "public static Rectangle Camera.ToScreen(Rectangle rect);",
            "public static Rectangle SplashKit.ToScreen(Rectangle rect);"
          ],
          "cpp": [
            "rectangle to_screen(const rectangle &rect)"
          ],
          "pascal": [
            "function ToScreen(const rect: Rectangle): Rectangle"
          ]
        }
      },
      {
        "signature": "double to_screen_x(double world_x);",
        "name": "to_screen_x",
        "method_name": "to_screen_x",
        "unique_global_name": "to_screen_x",
        "unique_method_name": ".to_screen_x",
        "suffix_name": null,
        "description": "Translate a world x value to the current screen x value which is based on\nthe camera position.",
        "brief": null,
        "return": {
          "type": "double",
          "description": "The x location of the world coordinate on the screen.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "world_x": {
            "type": "double",
            "description": "The value of the x coordinate to translate to screen.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "method": "to_screen_x",
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "python": [
            "def to_screen_x(world_x):"
          ],
          "csharp": [
            "public static double Camera.ToScreenX(double worldX);",
            "public static double SplashKit.ToScreenX(double worldX);"
          ],
          "cpp": [
            "double to_screen_x(double world_x)"
          ],
          "pascal": [
            "function ToScreenX(worldX: Double): Double"
          ]
        }
      },
      {
        "signature": "double to_screen_y(double world_y);",
        "name": "to_screen_y",
        "method_name": "to_screen_y",
        "unique_global_name": "to_screen_y",
        "unique_method_name": ".to_screen_y",
        "suffix_name": null,
        "description": "Translate a world y value to the current screen y value set by the camera.",
        "brief": null,
        "return": {
          "type": "double",
          "description": "The y location of the world coordinate on the screen.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "world_y": {
            "type": "double",
            "description": "The value of the y coordinate to translate to screen.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "method": "to_screen_y",
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "python": [
            "def to_screen_y(world_y):"
          ],
          "csharp": [
            "public static double Camera.ToScreenY(double worldY);",
            "public static double SplashKit.ToScreenY(double worldY);"
          ],
          "cpp": [
            "double to_screen_y(double world_y)"
          ],
          "pascal": [
            "function ToScreenY(worldY: Double): Double"
          ]
        }
      },
      {
        "signature": "point_2d to_world(const point_2d &pt);",
        "name": "to_world",
        "method_name": "to_world",
        "unique_global_name": "to_world",
        "unique_method_name": ".to_world",
        "suffix_name": null,
        "description": "Converts the passed in point from screen coordinates to world coordinates.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "The same point in world coordinates.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "The point in screen coordinates.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "method": "to_world",
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "python": [
            "def to_world(pt):"
          ],
          "csharp": [
            "public static Point2D Camera.ToWorld(Point2D pt);",
            "public static Point2D SplashKit.ToWorld(Point2D pt);"
          ],
          "cpp": [
            "point_2d to_world(const point_2d &pt)"
          ],
          "pascal": [
            "function ToWorld(const pt: Point2D): Point2D"
          ]
        }
      },
      {
        "signature": "double to_world_x(double screen_x);",
        "name": "to_world_x",
        "method_name": "to_world_x",
        "unique_global_name": "to_world_x",
        "unique_method_name": ".to_world_x",
        "suffix_name": null,
        "description": "Translate a screen x value (based on the camera) to a world x value",
        "brief": null,
        "return": {
          "type": "double",
          "description": "The x location of the screen coordinate in the world.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "screen_x": {
            "type": "double",
            "description": "The value of the x coordinate on screen to translate to\nthe world.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "method": "to_world_x",
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "python": [
            "def to_world_x(screen_x):"
          ],
          "csharp": [
            "public static double Camera.ToWorldX(double screenX);",
            "public static double SplashKit.ToWorldX(double screenX);"
          ],
          "cpp": [
            "double to_world_x(double screen_x)"
          ],
          "pascal": [
            "function ToWorldX(screenX: Double): Double"
          ]
        }
      },
      {
        "signature": "double to_world_y(double screen_y);",
        "name": "to_world_y",
        "method_name": "to_world_y",
        "unique_global_name": "to_world_y",
        "unique_method_name": ".to_world_y",
        "suffix_name": null,
        "description": "Translate a screen y value (based on the camera) to a world y value",
        "brief": null,
        "return": {
          "type": "double",
          "description": "The y location of the screen coordinate in the world.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "screen_y": {
            "type": "double",
            "description": "The value of the y coordinate on screen to translate to\nthe world.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "method": "to_world_y",
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "python": [
            "def to_world_y(screen_y):"
          ],
          "csharp": [
            "public static double Camera.ToWorldY(double screenY);",
            "public static double SplashKit.ToWorldY(double screenY);"
          ],
          "cpp": [
            "double to_world_y(double screen_y)"
          ],
          "pascal": [
            "function ToWorldY(screenY: Double): Double"
          ]
        }
      },
      {
        "signature": "vector_2d vector_world_to_screen();",
        "name": "vector_world_to_screen",
        "method_name": null,
        "unique_global_name": "vector_world_to_screen",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a vector that can transform points from world to screen coordinates.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "A vector representing the distance and direction points need\nto move to map from world to screen coordinates.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "vector_world_to_screen",
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "python": [
            "def vector_world_to_screen():"
          ],
          "csharp": [
            "public static Vector2D Camera.VectorWorldToScreen { get }",
            "public static Vector2D SplashKit.VectorWorldToScreen();"
          ],
          "cpp": [
            "vector_2d vector_world_to_screen()"
          ],
          "pascal": [
            "function VectorWorldToScreen(): Vector2D"
          ]
        }
      },
      {
        "signature": "rectangle window_area(window wind);",
        "name": "window_area",
        "method_name": null,
        "unique_global_name": "window_area",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a rectangle that represents the dimensions of the window based\non the camera.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "A rectangle representing the dimensions of the current window.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "The window",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "getter": "area",
          "group": "camera",
          "static": "camera",
          "self": "wind"
        },
        "signatures": {
          "python": [
            "def window_area(wind):"
          ],
          "csharp": [
            "public Rectangle Window.Area { get }",
            "public static Rectangle SplashKit.WindowArea(Window wind);"
          ],
          "cpp": [
            "rectangle window_area(window wind)"
          ],
          "pascal": [
            "function WindowArea(wind: Window): Rectangle"
          ]
        }
      }
    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "color": {
    "brief": "SplashKit simplifies color manipulation in graphical applications for developers, ensuring ease of use and efficiency.",
    "description": "",
    "functions": [
      {
        "signature": "int alpha_of(color c);",
        "name": "alpha_of",
        "method_name": null,
        "unique_global_name": "alpha_of",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the alpha of the supplied color.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The alpha component of the color",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "c": {
            "type": "color",
            "description": "The color",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "python": [
            "def alpha_of(c):"
          ],
          "csharp": [
            "public static int SplashKit.AlphaOf(Color c);"
          ],
          "cpp": [
            "int alpha_of(color c)"
          ],
          "pascal": [
            "function AlphaOf(c: Color): Integer"
          ]
        }
      },
      {
        "signature": "int blue_of(color c);",
        "name": "blue_of",
        "method_name": null,
        "unique_global_name": "blue_of",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the blue of the supplied color.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The blue component of the color",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "c": {
            "type": "color",
            "description": "The color",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "python": [
            "def blue_of(c):"
          ],
          "csharp": [
            "public static int SplashKit.BlueOf(Color c);"
          ],
          "cpp": [
            "int blue_of(color c)"
          ],
          "pascal": [
            "function BlueOf(c: Color): Integer"
          ]
        }
      },
      {
        "signature": "double brightness_of(color c);",
        "name": "brightness_of",
        "method_name": null,
        "unique_global_name": "brightness_of",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the brightness of the supplied color.",
        "brief": null,
        "return": {
          "type": "double",
          "description": "The brightness component of the color",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "c": {
            "type": "color",
            "description": "The color",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "python": [
            "def brightness_of(c):"
          ],
          "csharp": [
            "public static double SplashKit.BrightnessOf(Color c);"
          ],
          "cpp": [
            "double brightness_of(color c)"
          ],
          "pascal": [
            "function BrightnessOf(c: Color): Double"
          ]
        }
      },
      {
        "signature": "color color_alice_blue();",
        "name": "color_alice_blue",
        "method_name": null,
        "unique_global_name": "color_alice_blue",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `alice_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `alice_blue`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "alice_blue",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_alice_blue():"
          ],
          "csharp": [
            "public static Color Color.AliceBlue { get }",
            "public static Color SplashKit.ColorAliceBlue();"
          ],
          "cpp": [
            "#define COLOR_ALICE_BLUE",
            "color color_alice_blue()"
          ],
          "pascal": [
            "function ColorAliceBlue(): Color"
          ]
        }
      },
      {
        "signature": "color color_antique_white();",
        "name": "color_antique_white",
        "method_name": null,
        "unique_global_name": "color_antique_white",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `antique_white`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `antique_white`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "antique_white",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_antique_white():"
          ],
          "csharp": [
            "public static Color Color.AntiqueWhite { get }",
            "public static Color SplashKit.ColorAntiqueWhite();"
          ],
          "cpp": [
            "#define COLOR_ANTIQUE_WHITE",
            "color color_antique_white()"
          ],
          "pascal": [
            "function ColorAntiqueWhite(): Color"
          ]
        }
      },
      {
        "signature": "color color_aqua();",
        "name": "color_aqua",
        "method_name": null,
        "unique_global_name": "color_aqua",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `aqua`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `aqua`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "aqua",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_aqua():"
          ],
          "csharp": [
            "public static Color Color.Aqua { get }",
            "public static Color SplashKit.ColorAqua();"
          ],
          "cpp": [
            "#define COLOR_AQUA",
            "color color_aqua()"
          ],
          "pascal": [
            "function ColorAqua(): Color"
          ]
        }
      },
      {
        "signature": "color color_aquamarine();",
        "name": "color_aquamarine",
        "method_name": null,
        "unique_global_name": "color_aquamarine",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `aquamarine`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `aquamarine`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "aquamarine",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_aquamarine():"
          ],
          "csharp": [
            "public static Color Color.Aquamarine { get }",
            "public static Color SplashKit.ColorAquamarine();"
          ],
          "cpp": [
            "#define COLOR_AQUAMARINE",
            "color color_aquamarine()"
          ],
          "pascal": [
            "function ColorAquamarine(): Color"
          ]
        }
      },
      {
        "signature": "color color_azure();",
        "name": "color_azure",
        "method_name": null,
        "unique_global_name": "color_azure",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `azure`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `azure`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "azure",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_azure():"
          ],
          "csharp": [
            "public static Color Color.Azure { get }",
            "public static Color SplashKit.ColorAzure();"
          ],
          "cpp": [
            "#define COLOR_AZURE",
            "color color_azure()"
          ],
          "pascal": [
            "function ColorAzure(): Color"
          ]
        }
      },
      {
        "signature": "color color_beige();",
        "name": "color_beige",
        "method_name": null,
        "unique_global_name": "color_beige",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `beige`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `beige`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "beige",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_beige():"
          ],
          "csharp": [
            "public static Color Color.Beige { get }",
            "public static Color SplashKit.ColorBeige();"
          ],
          "cpp": [
            "#define COLOR_BEIGE",
            "color color_beige()"
          ],
          "pascal": [
            "function ColorBeige(): Color"
          ]
        }
      },
      {
        "signature": "color color_bisque();",
        "name": "color_bisque",
        "method_name": null,
        "unique_global_name": "color_bisque",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `bisque`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `bisque`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "bisque",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_bisque():"
          ],
          "csharp": [
            "public static Color Color.Bisque { get }",
            "public static Color SplashKit.ColorBisque();"
          ],
          "cpp": [
            "#define COLOR_BISQUE",
            "color color_bisque()"
          ],
          "pascal": [
            "function ColorBisque(): Color"
          ]
        }
      },
      {
        "signature": "color color_black();",
        "name": "color_black",
        "method_name": null,
        "unique_global_name": "color_black",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `black`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `black`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "black",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_black():"
          ],
          "csharp": [
            "public static Color Color.Black { get }",
            "public static Color SplashKit.ColorBlack();"
          ],
          "cpp": [
            "#define COLOR_BLACK",
            "color color_black()"
          ],
          "pascal": [
            "function ColorBlack(): Color"
          ]
        }
      },
      {
        "signature": "color color_blanched_almond();",
        "name": "color_blanched_almond",
        "method_name": null,
        "unique_global_name": "color_blanched_almond",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `blanched_almond`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `blanched_almond`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "blanched_almond",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_blanched_almond():"
          ],
          "csharp": [
            "public static Color Color.BlanchedAlmond { get }",
            "public static Color SplashKit.ColorBlanchedAlmond();"
          ],
          "cpp": [
            "#define COLOR_BLANCHED_ALMOND",
            "color color_blanched_almond()"
          ],
          "pascal": [
            "function ColorBlanchedAlmond(): Color"
          ]
        }
      },
      {
        "signature": "color color_blue();",
        "name": "color_blue",
        "method_name": null,
        "unique_global_name": "color_blue",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `blue`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "blue",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_blue():"
          ],
          "csharp": [
            "public static Color Color.Blue { get }",
            "public static Color SplashKit.ColorBlue();"
          ],
          "cpp": [
            "#define COLOR_BLUE",
            "color color_blue()"
          ],
          "pascal": [
            "function ColorBlue(): Color"
          ]
        }
      },
      {
        "signature": "color color_blue_violet();",
        "name": "color_blue_violet",
        "method_name": null,
        "unique_global_name": "color_blue_violet",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `blue_violet`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `blue_violet`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "blue_violet",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_blue_violet():"
          ],
          "csharp": [
            "public static Color Color.BlueViolet { get }",
            "public static Color SplashKit.ColorBlueViolet();"
          ],
          "cpp": [
            "#define COLOR_BLUE_VIOLET",
            "color color_blue_violet()"
          ],
          "pascal": [
            "function ColorBlueViolet(): Color"
          ]
        }
      },
      {
        "signature": "color color_bright_green();",
        "name": "color_bright_green",
        "method_name": null,
        "unique_global_name": "color_bright_green",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `bright_green`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `bright_green`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "bright_green",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_bright_green():"
          ],
          "csharp": [
            "public static Color Color.BrightGreen { get }",
            "public static Color SplashKit.ColorBrightGreen();"
          ],
          "cpp": [
            "#define COLOR_BRIGHT_GREEN",
            "color color_bright_green()"
          ],
          "pascal": [
            "function ColorBrightGreen(): Color"
          ]
        }
      },
      {
        "signature": "color color_brown();",
        "name": "color_brown",
        "method_name": null,
        "unique_global_name": "color_brown",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `brown`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `brown`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "brown",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_brown():"
          ],
          "csharp": [
            "public static Color Color.Brown { get }",
            "public static Color SplashKit.ColorBrown();"
          ],
          "cpp": [
            "#define COLOR_BROWN",
            "color color_brown()"
          ],
          "pascal": [
            "function ColorBrown(): Color"
          ]
        }
      },
      {
        "signature": "color color_burly_wood();",
        "name": "color_burly_wood",
        "method_name": null,
        "unique_global_name": "color_burly_wood",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `burly_wood`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `burly_wood`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "burly_wood",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_burly_wood():"
          ],
          "csharp": [
            "public static Color Color.BurlyWood { get }",
            "public static Color SplashKit.ColorBurlyWood();"
          ],
          "cpp": [
            "#define COLOR_BURLY_WOOD",
            "color color_burly_wood()"
          ],
          "pascal": [
            "function ColorBurlyWood(): Color"
          ]
        }
      },
      {
        "signature": "color color_cadet_blue();",
        "name": "color_cadet_blue",
        "method_name": null,
        "unique_global_name": "color_cadet_blue",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `cadet_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `cadet_blue`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "cadet_blue",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_cadet_blue():"
          ],
          "csharp": [
            "public static Color Color.CadetBlue { get }",
            "public static Color SplashKit.ColorCadetBlue();"
          ],
          "cpp": [
            "#define COLOR_CADET_BLUE",
            "color color_cadet_blue()"
          ],
          "pascal": [
            "function ColorCadetBlue(): Color"
          ]
        }
      },
      {
        "signature": "color color_chartreuse();",
        "name": "color_chartreuse",
        "method_name": null,
        "unique_global_name": "color_chartreuse",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `chartreuse`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `chartreuse`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "chartreuse",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_chartreuse():"
          ],
          "csharp": [
            "public static Color Color.Chartreuse { get }",
            "public static Color SplashKit.ColorChartreuse();"
          ],
          "cpp": [
            "#define COLOR_CHARTREUSE",
            "color color_chartreuse()"
          ],
          "pascal": [
            "function ColorChartreuse(): Color"
          ]
        }
      },
      {
        "signature": "color color_chocolate();",
        "name": "color_chocolate",
        "method_name": null,
        "unique_global_name": "color_chocolate",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `chocolate`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `chocolate`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "chocolate",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_chocolate():"
          ],
          "csharp": [
            "public static Color Color.Chocolate { get }",
            "public static Color SplashKit.ColorChocolate();"
          ],
          "cpp": [
            "#define COLOR_CHOCOLATE",
            "color color_chocolate()"
          ],
          "pascal": [
            "function ColorChocolate(): Color"
          ]
        }
      },
      {
        "signature": "color color_coral();",
        "name": "color_coral",
        "method_name": null,
        "unique_global_name": "color_coral",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `coral`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `coral`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "coral",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_coral():"
          ],
          "csharp": [
            "public static Color Color.Coral { get }",
            "public static Color SplashKit.ColorCoral();"
          ],
          "cpp": [
            "#define COLOR_CORAL",
            "color color_coral()"
          ],
          "pascal": [
            "function ColorCoral(): Color"
          ]
        }
      },
      {
        "signature": "color color_cornflower_blue();",
        "name": "color_cornflower_blue",
        "method_name": null,
        "unique_global_name": "color_cornflower_blue",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `cornflower_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `cornflower_blue`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "cornflower_blue",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_cornflower_blue():"
          ],
          "csharp": [
            "public static Color Color.CornflowerBlue { get }",
            "public static Color SplashKit.ColorCornflowerBlue();"
          ],
          "cpp": [
            "#define COLOR_CORNFLOWER_BLUE",
            "color color_cornflower_blue()"
          ],
          "pascal": [
            "function ColorCornflowerBlue(): Color"
          ]
        }
      },
      {
        "signature": "color color_cornsilk();",
        "name": "color_cornsilk",
        "method_name": null,
        "unique_global_name": "color_cornsilk",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `cornsilk`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `cornsilk`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "cornsilk",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_cornsilk():"
          ],
          "csharp": [
            "public static Color Color.Cornsilk { get }",
            "public static Color SplashKit.ColorCornsilk();"
          ],
          "cpp": [
            "#define COLOR_CORNSILK",
            "color color_cornsilk()"
          ],
          "pascal": [
            "function ColorCornsilk(): Color"
          ]
        }
      },
      {
        "signature": "color color_crimson();",
        "name": "color_crimson",
        "method_name": null,
        "unique_global_name": "color_crimson",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `crimson`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `crimson`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "crimson",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_crimson():"
          ],
          "csharp": [
            "public static Color Color.Crimson { get }",
            "public static Color SplashKit.ColorCrimson();"
          ],
          "cpp": [
            "#define COLOR_CRIMSON",
            "color color_crimson()"
          ],
          "pascal": [
            "function ColorCrimson(): Color"
          ]
        }
      },
      {
        "signature": "color color_cyan();",
        "name": "color_cyan",
        "method_name": null,
        "unique_global_name": "color_cyan",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `cyan`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `cyan`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "cyan",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_cyan():"
          ],
          "csharp": [
            "public static Color Color.Cyan { get }",
            "public static Color SplashKit.ColorCyan();"
          ],
          "cpp": [
            "#define COLOR_CYAN",
            "color color_cyan()"
          ],
          "pascal": [
            "function ColorCyan(): Color"
          ]
        }
      },
      {
        "signature": "color color_dark_blue();",
        "name": "color_dark_blue",
        "method_name": null,
        "unique_global_name": "color_dark_blue",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `dark_blue`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "dark_blue",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_dark_blue():"
          ],
          "csharp": [
            "public static Color Color.DarkBlue { get }",
            "public static Color SplashKit.ColorDarkBlue();"
          ],
          "cpp": [
            "#define COLOR_DARK_BLUE",
            "color color_dark_blue()"
          ],
          "pascal": [
            "function ColorDarkBlue(): Color"
          ]
        }
      },
      {
        "signature": "color color_dark_cyan();",
        "name": "color_dark_cyan",
        "method_name": null,
        "unique_global_name": "color_dark_cyan",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_cyan`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `dark_cyan`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "dark_cyan",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_dark_cyan():"
          ],
          "csharp": [
            "public static Color Color.DarkCyan { get }",
            "public static Color SplashKit.ColorDarkCyan();"
          ],
          "cpp": [
            "#define COLOR_DARK_CYAN",
            "color color_dark_cyan()"
          ],
          "pascal": [
            "function ColorDarkCyan(): Color"
          ]
        }
      },
      {
        "signature": "color color_dark_goldenrod();",
        "name": "color_dark_goldenrod",
        "method_name": null,
        "unique_global_name": "color_dark_goldenrod",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_goldenrod`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `dark_goldenrod`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "dark_goldenrod",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_dark_goldenrod():"
          ],
          "csharp": [
            "public static Color Color.DarkGoldenrod { get }",
            "public static Color SplashKit.ColorDarkGoldenrod();"
          ],
          "cpp": [
            "#define COLOR_DARK_GOLDENROD",
            "color color_dark_goldenrod()"
          ],
          "pascal": [
            "function ColorDarkGoldenrod(): Color"
          ]
        }
      },
      {
        "signature": "color color_dark_gray();",
        "name": "color_dark_gray",
        "method_name": null,
        "unique_global_name": "color_dark_gray",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_gray`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `dark_gray`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "dark_gray",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_dark_gray():"
          ],
          "csharp": [
            "public static Color Color.DarkGray { get }",
            "public static Color SplashKit.ColorDarkGray();"
          ],
          "cpp": [
            "#define COLOR_DARK_GRAY",
            "color color_dark_gray()"
          ],
          "pascal": [
            "function ColorDarkGray(): Color"
          ]
        }
      },
      {
        "signature": "color color_dark_green();",
        "name": "color_dark_green",
        "method_name": null,
        "unique_global_name": "color_dark_green",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_green`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `dark_green`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "dark_green",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_dark_green():"
          ],
          "csharp": [
            "public static Color Color.DarkGreen { get }",
            "public static Color SplashKit.ColorDarkGreen();"
          ],
          "cpp": [
            "#define COLOR_DARK_GREEN",
            "color color_dark_green()"
          ],
          "pascal": [
            "function ColorDarkGreen(): Color"
          ]
        }
      },
      {
        "signature": "color color_dark_khaki();",
        "name": "color_dark_khaki",
        "method_name": null,
        "unique_global_name": "color_dark_khaki",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_khaki`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `dark_khaki`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "dark_khaki",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_dark_khaki():"
          ],
          "csharp": [
            "public static Color Color.DarkKhaki { get }",
            "public static Color SplashKit.ColorDarkKhaki();"
          ],
          "cpp": [
            "#define COLOR_DARK_KHAKI",
            "color color_dark_khaki()"
          ],
          "pascal": [
            "function ColorDarkKhaki(): Color"
          ]
        }
      },
      {
        "signature": "color color_dark_magenta();",
        "name": "color_dark_magenta",
        "method_name": null,
        "unique_global_name": "color_dark_magenta",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_magenta`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `dark_magenta`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "dark_magenta",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_dark_magenta():"
          ],
          "csharp": [
            "public static Color Color.DarkMagenta { get }",
            "public static Color SplashKit.ColorDarkMagenta();"
          ],
          "cpp": [
            "#define COLOR_DARK_MAGENTA",
            "color color_dark_magenta()"
          ],
          "pascal": [
            "function ColorDarkMagenta(): Color"
          ]
        }
      },
      {
        "signature": "color color_dark_olive_green();",
        "name": "color_dark_olive_green",
        "method_name": null,
        "unique_global_name": "color_dark_olive_green",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_olive_green`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `dark_olive_green`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "dark_olive_green",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_dark_olive_green():"
          ],
          "csharp": [
            "public static Color Color.DarkOliveGreen { get }",
            "public static Color SplashKit.ColorDarkOliveGreen();"
          ],
          "cpp": [
            "#define COLOR_DARK_OLIVE_GREEN",
            "color color_dark_olive_green()"
          ],
          "pascal": [
            "function ColorDarkOliveGreen(): Color"
          ]
        }
      },
      {
        "signature": "color color_dark_orange();",
        "name": "color_dark_orange",
        "method_name": null,
        "unique_global_name": "color_dark_orange",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_orange`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `dark_orange`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "dark_orange",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_dark_orange():"
          ],
          "csharp": [
            "public static Color Color.DarkOrange { get }",
            "public static Color SplashKit.ColorDarkOrange();"
          ],
          "cpp": [
            "#define COLOR_DARK_ORANGE",
            "color color_dark_orange()"
          ],
          "pascal": [
            "function ColorDarkOrange(): Color"
          ]
        }
      },
      {
        "signature": "color color_dark_orchid();",
        "name": "color_dark_orchid",
        "method_name": null,
        "unique_global_name": "color_dark_orchid",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_orchid`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `dark_orchid`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "dark_orchid",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_dark_orchid():"
          ],
          "csharp": [
            "public static Color Color.DarkOrchid { get }",
            "public static Color SplashKit.ColorDarkOrchid();"
          ],
          "cpp": [
            "#define COLOR_DARK_ORCHID",
            "color color_dark_orchid()"
          ],
          "pascal": [
            "function ColorDarkOrchid(): Color"
          ]
        }
      },
      {
        "signature": "color color_dark_red();",
        "name": "color_dark_red",
        "method_name": null,
        "unique_global_name": "color_dark_red",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_red`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `dark_red`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "dark_red",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_dark_red():"
          ],
          "csharp": [
            "public static Color Color.DarkRed { get }",
            "public static Color SplashKit.ColorDarkRed();"
          ],
          "cpp": [
            "#define COLOR_DARK_RED",
            "color color_dark_red()"
          ],
          "pascal": [
            "function ColorDarkRed(): Color"
          ]
        }
      },
      {
        "signature": "color color_dark_salmon();",
        "name": "color_dark_salmon",
        "method_name": null,
        "unique_global_name": "color_dark_salmon",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_salmon`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `dark_salmon`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "dark_salmon",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_dark_salmon():"
          ],
          "csharp": [
            "public static Color Color.DarkSalmon { get }",
            "public static Color SplashKit.ColorDarkSalmon();"
          ],
          "cpp": [
            "#define COLOR_DARK_SALMON",
            "color color_dark_salmon()"
          ],
          "pascal": [
            "function ColorDarkSalmon(): Color"
          ]
        }
      },
      {
        "signature": "color color_dark_sea_green();",
        "name": "color_dark_sea_green",
        "method_name": null,
        "unique_global_name": "color_dark_sea_green",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_sea_green`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `dark_sea_green`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "dark_sea_green",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_dark_sea_green():"
          ],
          "csharp": [
            "public static Color Color.DarkSeaGreen { get }",
            "public static Color SplashKit.ColorDarkSeaGreen();"
          ],
          "cpp": [
            "#define COLOR_DARK_SEA_GREEN",
            "color color_dark_sea_green()"
          ],
          "pascal": [
            "function ColorDarkSeaGreen(): Color"
          ]
        }
      },
      {
        "signature": "color color_dark_slate_blue();",
        "name": "color_dark_slate_blue",
        "method_name": null,
        "unique_global_name": "color_dark_slate_blue",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_slate_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `dark_slate_blue`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "dark_slate_blue",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_dark_slate_blue():"
          ],
          "csharp": [
            "public static Color Color.DarkSlateBlue { get }",
            "public static Color SplashKit.ColorDarkSlateBlue();"
          ],
          "cpp": [
            "#define COLOR_DARK_SLATE_BLUE",
            "color color_dark_slate_blue()"
          ],
          "pascal": [
            "function ColorDarkSlateBlue(): Color"
          ]
        }
      },
      {
        "signature": "color color_dark_slate_gray();",
        "name": "color_dark_slate_gray",
        "method_name": null,
        "unique_global_name": "color_dark_slate_gray",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_slate_gray`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `dark_slate_gray`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "dark_slate_gray",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_dark_slate_gray():"
          ],
          "csharp": [
            "public static Color Color.DarkSlateGray { get }",
            "public static Color SplashKit.ColorDarkSlateGray();"
          ],
          "cpp": [
            "#define COLOR_DARK_SLATE_GRAY",
            "color color_dark_slate_gray()"
          ],
          "pascal": [
            "function ColorDarkSlateGray(): Color"
          ]
        }
      },
      {
        "signature": "color color_dark_turquoise();",
        "name": "color_dark_turquoise",
        "method_name": null,
        "unique_global_name": "color_dark_turquoise",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_turquoise`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `dark_turquoise`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "dark_turquoise",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_dark_turquoise():"
          ],
          "csharp": [
            "public static Color Color.DarkTurquoise { get }",
            "public static Color SplashKit.ColorDarkTurquoise();"
          ],
          "cpp": [
            "#define COLOR_DARK_TURQUOISE",
            "color color_dark_turquoise()"
          ],
          "pascal": [
            "function ColorDarkTurquoise(): Color"
          ]
        }
      },
      {
        "signature": "color color_dark_violet();",
        "name": "color_dark_violet",
        "method_name": null,
        "unique_global_name": "color_dark_violet",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_violet`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `dark_violet`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "dark_violet",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_dark_violet():"
          ],
          "csharp": [
            "public static Color Color.DarkViolet { get }",
            "public static Color SplashKit.ColorDarkViolet();"
          ],
          "cpp": [
            "#define COLOR_DARK_VIOLET",
            "color color_dark_violet()"
          ],
          "pascal": [
            "function ColorDarkViolet(): Color"
          ]
        }
      },
      {
        "signature": "color color_deep_pink();",
        "name": "color_deep_pink",
        "method_name": null,
        "unique_global_name": "color_deep_pink",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `deep_pink`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `deep_pink`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "deep_pink",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_deep_pink():"
          ],
          "csharp": [
            "public static Color Color.DeepPink { get }",
            "public static Color SplashKit.ColorDeepPink();"
          ],
          "cpp": [
            "#define COLOR_DEEP_PINK",
            "color color_deep_pink()"
          ],
          "pascal": [
            "function ColorDeepPink(): Color"
          ]
        }
      },
      {
        "signature": "color color_deep_sky_blue();",
        "name": "color_deep_sky_blue",
        "method_name": null,
        "unique_global_name": "color_deep_sky_blue",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `deep_sky_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `deep_sky_blue`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "deep_sky_blue",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_deep_sky_blue():"
          ],
          "csharp": [
            "public static Color Color.DeepSkyBlue { get }",
            "public static Color SplashKit.ColorDeepSkyBlue();"
          ],
          "cpp": [
            "#define COLOR_DEEP_SKY_BLUE",
            "color color_deep_sky_blue()"
          ],
          "pascal": [
            "function ColorDeepSkyBlue(): Color"
          ]
        }
      },
      {
        "signature": "color color_dim_gray();",
        "name": "color_dim_gray",
        "method_name": null,
        "unique_global_name": "color_dim_gray",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dim_gray`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `dim_gray`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "dim_gray",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_dim_gray():"
          ],
          "csharp": [
            "public static Color Color.DimGray { get }",
            "public static Color SplashKit.ColorDimGray();"
          ],
          "cpp": [
            "#define COLOR_DIM_GRAY",
            "color color_dim_gray()"
          ],
          "pascal": [
            "function ColorDimGray(): Color"
          ]
        }
      },
      {
        "signature": "color color_dodger_blue();",
        "name": "color_dodger_blue",
        "method_name": null,
        "unique_global_name": "color_dodger_blue",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dodger_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `dodger_blue`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "dodger_blue",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_dodger_blue():"
          ],
          "csharp": [
            "public static Color Color.DodgerBlue { get }",
            "public static Color SplashKit.ColorDodgerBlue();"
          ],
          "cpp": [
            "#define COLOR_DODGER_BLUE",
            "color color_dodger_blue()"
          ],
          "pascal": [
            "function ColorDodgerBlue(): Color"
          ]
        }
      },
      {
        "signature": "color color_firebrick();",
        "name": "color_firebrick",
        "method_name": null,
        "unique_global_name": "color_firebrick",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `firebrick`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `firebrick`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "firebrick",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_firebrick():"
          ],
          "csharp": [
            "public static Color Color.Firebrick { get }",
            "public static Color SplashKit.ColorFirebrick();"
          ],
          "cpp": [
            "#define COLOR_FIREBRICK",
            "color color_firebrick()"
          ],
          "pascal": [
            "function ColorFirebrick(): Color"
          ]
        }
      },
      {
        "signature": "color color_floral_white();",
        "name": "color_floral_white",
        "method_name": null,
        "unique_global_name": "color_floral_white",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `floral_white`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `floral_white`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "floral_white",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_floral_white():"
          ],
          "csharp": [
            "public static Color Color.FloralWhite { get }",
            "public static Color SplashKit.ColorFloralWhite();"
          ],
          "cpp": [
            "#define COLOR_FLORAL_WHITE",
            "color color_floral_white()"
          ],
          "pascal": [
            "function ColorFloralWhite(): Color"
          ]
        }
      },
      {
        "signature": "color color_forest_green();",
        "name": "color_forest_green",
        "method_name": null,
        "unique_global_name": "color_forest_green",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `forest_green`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `forest_green`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "forest_green",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_forest_green():"
          ],
          "csharp": [
            "public static Color Color.ForestGreen { get }",
            "public static Color SplashKit.ColorForestGreen();"
          ],
          "cpp": [
            "#define COLOR_FOREST_GREEN",
            "color color_forest_green()"
          ],
          "pascal": [
            "function ColorForestGreen(): Color"
          ]
        }
      },
      {
        "signature": "color color_fuchsia();",
        "name": "color_fuchsia",
        "method_name": null,
        "unique_global_name": "color_fuchsia",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `fuchsia`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `fuchsia`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "fuchsia",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_fuchsia():"
          ],
          "csharp": [
            "public static Color Color.Fuchsia { get }",
            "public static Color SplashKit.ColorFuchsia();"
          ],
          "cpp": [
            "#define COLOR_FUCHSIA",
            "color color_fuchsia()"
          ],
          "pascal": [
            "function ColorFuchsia(): Color"
          ]
        }
      },
      {
        "signature": "color color_gainsboro();",
        "name": "color_gainsboro",
        "method_name": null,
        "unique_global_name": "color_gainsboro",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `gainsboro`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `gainsboro`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "gainsboro",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_gainsboro():"
          ],
          "csharp": [
            "public static Color Color.Gainsboro { get }",
            "public static Color SplashKit.ColorGainsboro();"
          ],
          "cpp": [
            "#define COLOR_GAINSBORO",
            "color color_gainsboro()"
          ],
          "pascal": [
            "function ColorGainsboro(): Color"
          ]
        }
      },
      {
        "signature": "color color_ghost_white();",
        "name": "color_ghost_white",
        "method_name": null,
        "unique_global_name": "color_ghost_white",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `ghost_white`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `ghost_white`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "ghost_white",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_ghost_white():"
          ],
          "csharp": [
            "public static Color Color.GhostWhite { get }",
            "public static Color SplashKit.ColorGhostWhite();"
          ],
          "cpp": [
            "#define COLOR_GHOST_WHITE",
            "color color_ghost_white()"
          ],
          "pascal": [
            "function ColorGhostWhite(): Color"
          ]
        }
      },
      {
        "signature": "color color_gold();",
        "name": "color_gold",
        "method_name": null,
        "unique_global_name": "color_gold",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `gold`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `gold`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "gold",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_gold():"
          ],
          "csharp": [
            "public static Color Color.Gold { get }",
            "public static Color SplashKit.ColorGold();"
          ],
          "cpp": [
            "#define COLOR_GOLD",
            "color color_gold()"
          ],
          "pascal": [
            "function ColorGold(): Color"
          ]
        }
      },
      {
        "signature": "color color_goldenrod();",
        "name": "color_goldenrod",
        "method_name": null,
        "unique_global_name": "color_goldenrod",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `goldenrod`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `goldenrod`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "goldenrod",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_goldenrod():"
          ],
          "csharp": [
            "public static Color Color.Goldenrod { get }",
            "public static Color SplashKit.ColorGoldenrod();"
          ],
          "cpp": [
            "#define COLOR_GOLDENROD",
            "color color_goldenrod()"
          ],
          "pascal": [
            "function ColorGoldenrod(): Color"
          ]
        }
      },
      {
        "signature": "color color_gray();",
        "name": "color_gray",
        "method_name": null,
        "unique_global_name": "color_gray",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `gray`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `gray`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "gray",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_gray():"
          ],
          "csharp": [
            "public static Color Color.Gray { get }",
            "public static Color SplashKit.ColorGray();"
          ],
          "cpp": [
            "#define COLOR_GRAY",
            "color color_gray()"
          ],
          "pascal": [
            "function ColorGray(): Color"
          ]
        }
      },
      {
        "signature": "color color_green();",
        "name": "color_green",
        "method_name": null,
        "unique_global_name": "color_green",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `green`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `green`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "green",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_green():"
          ],
          "csharp": [
            "public static Color Color.Green { get }",
            "public static Color SplashKit.ColorGreen();"
          ],
          "cpp": [
            "#define COLOR_GREEN",
            "color color_green()"
          ],
          "pascal": [
            "function ColorGreen(): Color"
          ]
        }
      },
      {
        "signature": "color color_green_yellow();",
        "name": "color_green_yellow",
        "method_name": null,
        "unique_global_name": "color_green_yellow",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `green_yellow`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `green_yellow`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "green_yellow",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_green_yellow():"
          ],
          "csharp": [
            "public static Color Color.GreenYellow { get }",
            "public static Color SplashKit.ColorGreenYellow();"
          ],
          "cpp": [
            "#define COLOR_GREEN_YELLOW",
            "color color_green_yellow()"
          ],
          "pascal": [
            "function ColorGreenYellow(): Color"
          ]
        }
      },
      {
        "signature": "color color_honeydew();",
        "name": "color_honeydew",
        "method_name": null,
        "unique_global_name": "color_honeydew",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `honeydew`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `honeydew`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "honeydew",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_honeydew():"
          ],
          "csharp": [
            "public static Color Color.Honeydew { get }",
            "public static Color SplashKit.ColorHoneydew();"
          ],
          "cpp": [
            "#define COLOR_HONEYDEW",
            "color color_honeydew()"
          ],
          "pascal": [
            "function ColorHoneydew(): Color"
          ]
        }
      },
      {
        "signature": "color color_hot_pink();",
        "name": "color_hot_pink",
        "method_name": null,
        "unique_global_name": "color_hot_pink",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `hot_pink`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `hot_pink`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "hot_pink",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_hot_pink():"
          ],
          "csharp": [
            "public static Color Color.HotPink { get }",
            "public static Color SplashKit.ColorHotPink();"
          ],
          "cpp": [
            "#define COLOR_HOT_PINK",
            "color color_hot_pink()"
          ],
          "pascal": [
            "function ColorHotPink(): Color"
          ]
        }
      },
      {
        "signature": "color color_indian_red();",
        "name": "color_indian_red",
        "method_name": null,
        "unique_global_name": "color_indian_red",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `indian_red`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `indian_red`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "indian_red",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_indian_red():"
          ],
          "csharp": [
            "public static Color Color.IndianRed { get }",
            "public static Color SplashKit.ColorIndianRed();"
          ],
          "cpp": [
            "#define COLOR_INDIAN_RED",
            "color color_indian_red()"
          ],
          "pascal": [
            "function ColorIndianRed(): Color"
          ]
        }
      },
      {
        "signature": "color color_indigo();",
        "name": "color_indigo",
        "method_name": null,
        "unique_global_name": "color_indigo",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `indigo`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `indigo`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "indigo",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_indigo():"
          ],
          "csharp": [
            "public static Color Color.Indigo { get }",
            "public static Color SplashKit.ColorIndigo();"
          ],
          "cpp": [
            "#define COLOR_INDIGO",
            "color color_indigo()"
          ],
          "pascal": [
            "function ColorIndigo(): Color"
          ]
        }
      },
      {
        "signature": "color color_ivory();",
        "name": "color_ivory",
        "method_name": null,
        "unique_global_name": "color_ivory",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `ivory`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `ivory`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "ivory",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_ivory():"
          ],
          "csharp": [
            "public static Color Color.Ivory { get }",
            "public static Color SplashKit.ColorIvory();"
          ],
          "cpp": [
            "#define COLOR_IVORY",
            "color color_ivory()"
          ],
          "pascal": [
            "function ColorIvory(): Color"
          ]
        }
      },
      {
        "signature": "color color_khaki();",
        "name": "color_khaki",
        "method_name": null,
        "unique_global_name": "color_khaki",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `khaki`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `khaki`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "khaki",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_khaki():"
          ],
          "csharp": [
            "public static Color Color.Khaki { get }",
            "public static Color SplashKit.ColorKhaki();"
          ],
          "cpp": [
            "#define COLOR_KHAKI",
            "color color_khaki()"
          ],
          "pascal": [
            "function ColorKhaki(): Color"
          ]
        }
      },
      {
        "signature": "color color_lavender();",
        "name": "color_lavender",
        "method_name": null,
        "unique_global_name": "color_lavender",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `lavender`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `lavender`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "lavender",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_lavender():"
          ],
          "csharp": [
            "public static Color Color.Lavender { get }",
            "public static Color SplashKit.ColorLavender();"
          ],
          "cpp": [
            "#define COLOR_LAVENDER",
            "color color_lavender()"
          ],
          "pascal": [
            "function ColorLavender(): Color"
          ]
        }
      },
      {
        "signature": "color color_lavender_blush();",
        "name": "color_lavender_blush",
        "method_name": null,
        "unique_global_name": "color_lavender_blush",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `lavender_blush`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `lavender_blush`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "lavender_blush",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_lavender_blush():"
          ],
          "csharp": [
            "public static Color Color.LavenderBlush { get }",
            "public static Color SplashKit.ColorLavenderBlush();"
          ],
          "cpp": [
            "#define COLOR_LAVENDER_BLUSH",
            "color color_lavender_blush()"
          ],
          "pascal": [
            "function ColorLavenderBlush(): Color"
          ]
        }
      },
      {
        "signature": "color color_lawn_green();",
        "name": "color_lawn_green",
        "method_name": null,
        "unique_global_name": "color_lawn_green",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `lawn_green`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `lawn_green`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "lawn_green",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_lawn_green():"
          ],
          "csharp": [
            "public static Color Color.LawnGreen { get }",
            "public static Color SplashKit.ColorLawnGreen();"
          ],
          "cpp": [
            "#define COLOR_LAWN_GREEN",
            "color color_lawn_green()"
          ],
          "pascal": [
            "function ColorLawnGreen(): Color"
          ]
        }
      },
      {
        "signature": "color color_lemon_chiffon();",
        "name": "color_lemon_chiffon",
        "method_name": null,
        "unique_global_name": "color_lemon_chiffon",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `lemon_chiffon`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `lemon_chiffon`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "lemon_chiffon",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_lemon_chiffon():"
          ],
          "csharp": [
            "public static Color Color.LemonChiffon { get }",
            "public static Color SplashKit.ColorLemonChiffon();"
          ],
          "cpp": [
            "#define COLOR_LEMON_CHIFFON",
            "color color_lemon_chiffon()"
          ],
          "pascal": [
            "function ColorLemonChiffon(): Color"
          ]
        }
      },
      {
        "signature": "color color_light_blue();",
        "name": "color_light_blue",
        "method_name": null,
        "unique_global_name": "color_light_blue",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `light_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `light_blue`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "light_blue",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_light_blue():"
          ],
          "csharp": [
            "public static Color Color.LightBlue { get }",
            "public static Color SplashKit.ColorLightBlue();"
          ],
          "cpp": [
            "#define COLOR_LIGHT_BLUE",
            "color color_light_blue()"
          ],
          "pascal": [
            "function ColorLightBlue(): Color"
          ]
        }
      },
      {
        "signature": "color color_light_coral();",
        "name": "color_light_coral",
        "method_name": null,
        "unique_global_name": "color_light_coral",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `light_coral`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `light_coral`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "light_coral",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_light_coral():"
          ],
          "csharp": [
            "public static Color Color.LightCoral { get }",
            "public static Color SplashKit.ColorLightCoral();"
          ],
          "cpp": [
            "#define COLOR_LIGHT_CORAL",
            "color color_light_coral()"
          ],
          "pascal": [
            "function ColorLightCoral(): Color"
          ]
        }
      },
      {
        "signature": "color color_light_cyan();",
        "name": "color_light_cyan",
        "method_name": null,
        "unique_global_name": "color_light_cyan",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `light_cyan`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `light_cyan`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "light_cyan",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_light_cyan():"
          ],
          "csharp": [
            "public static Color Color.LightCyan { get }",
            "public static Color SplashKit.ColorLightCyan();"
          ],
          "cpp": [
            "#define COLOR_LIGHT_CYAN",
            "color color_light_cyan()"
          ],
          "pascal": [
            "function ColorLightCyan(): Color"
          ]
        }
      },
      {
        "signature": "color color_light_goldenrod_yellow();",
        "name": "color_light_goldenrod_yellow",
        "method_name": null,
        "unique_global_name": "color_light_goldenrod_yellow",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `light_goldenrod_yellow`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `light_goldenrod_yellow`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "light_goldenrod_yellow",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_light_goldenrod_yellow():"
          ],
          "csharp": [
            "public static Color Color.LightGoldenrodYellow { get }",
            "public static Color SplashKit.ColorLightGoldenrodYellow();"
          ],
          "cpp": [
            "#define COLOR_LIGHT_GOLDENROD_YELLOW",
            "color color_light_goldenrod_yellow()"
          ],
          "pascal": [
            "function ColorLightGoldenrodYellow(): Color"
          ]
        }
      },
      {
        "signature": "color color_light_gray();",
        "name": "color_light_gray",
        "method_name": null,
        "unique_global_name": "color_light_gray",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `light_gray`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `light_gray`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "light_gray",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_light_gray():"
          ],
          "csharp": [
            "public static Color Color.LightGray { get }",
            "public static Color SplashKit.ColorLightGray();"
          ],
          "cpp": [
            "#define COLOR_LIGHT_GRAY",
            "color color_light_gray()"
          ],
          "pascal": [
            "function ColorLightGray(): Color"
          ]
        }
      },
      {
        "signature": "color color_light_green();",
        "name": "color_light_green",
        "method_name": null,
        "unique_global_name": "color_light_green",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `light_green`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `light_green`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "light_green",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_light_green():"
          ],
          "csharp": [
            "public static Color Color.LightGreen { get }",
            "public static Color SplashKit.ColorLightGreen();"
          ],
          "cpp": [
            "#define COLOR_LIGHT_GREEN",
            "color color_light_green()"
          ],
          "pascal": [
            "function ColorLightGreen(): Color"
          ]
        }
      },
      {
        "signature": "color color_light_pink();",
        "name": "color_light_pink",
        "method_name": null,
        "unique_global_name": "color_light_pink",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `light_pink`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `light_pink`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "light_pink",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_light_pink():"
          ],
          "csharp": [
            "public static Color Color.LightPink { get }",
            "public static Color SplashKit.ColorLightPink();"
          ],
          "cpp": [
            "#define COLOR_LIGHT_PINK",
            "color color_light_pink()"
          ],
          "pascal": [
            "function ColorLightPink(): Color"
          ]
        }
      },
      {
        "signature": "color color_light_salmon();",
        "name": "color_light_salmon",
        "method_name": null,
        "unique_global_name": "color_light_salmon",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `light_salmon`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `light_salmon`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "light_salmon",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_light_salmon():"
          ],
          "csharp": [
            "public static Color Color.LightSalmon { get }",
            "public static Color SplashKit.ColorLightSalmon();"
          ],
          "cpp": [
            "#define COLOR_LIGHT_SALMON",
            "color color_light_salmon()"
          ],
          "pascal": [
            "function ColorLightSalmon(): Color"
          ]
        }
      },
      {
        "signature": "color color_light_sea_green();",
        "name": "color_light_sea_green",
        "method_name": null,
        "unique_global_name": "color_light_sea_green",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `light_sea_green`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `light_sea_green`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "light_sea_green",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_light_sea_green():"
          ],
          "csharp": [
            "public static Color Color.LightSeaGreen { get }",
            "public static Color SplashKit.ColorLightSeaGreen();"
          ],
          "cpp": [
            "#define COLOR_LIGHT_SEA_GREEN",
            "color color_light_sea_green()"
          ],
          "pascal": [
            "function ColorLightSeaGreen(): Color"
          ]
        }
      },
      {
        "signature": "color color_light_sky_blue();",
        "name": "color_light_sky_blue",
        "method_name": null,
        "unique_global_name": "color_light_sky_blue",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `light_sky_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `light_sky_blue`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "light_sky_blue",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_light_sky_blue():"
          ],
          "csharp": [
            "public static Color Color.LightSkyBlue { get }",
            "public static Color SplashKit.ColorLightSkyBlue();"
          ],
          "cpp": [
            "#define COLOR_LIGHT_SKY_BLUE",
            "color color_light_sky_blue()"
          ],
          "pascal": [
            "function ColorLightSkyBlue(): Color"
          ]
        }
      },
      {
        "signature": "color color_light_slate_gray();",
        "name": "color_light_slate_gray",
        "method_name": null,
        "unique_global_name": "color_light_slate_gray",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `light_slate_gray`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `light_slate_gray`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "light_slate_gray",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_light_slate_gray():"
          ],
          "csharp": [
            "public static Color Color.LightSlateGray { get }",
            "public static Color SplashKit.ColorLightSlateGray();"
          ],
          "cpp": [
            "#define COLOR_LIGHT_SLATE_GRAY",
            "color color_light_slate_gray()"
          ],
          "pascal": [
            "function ColorLightSlateGray(): Color"
          ]
        }
      },
      {
        "signature": "color color_light_steel_blue();",
        "name": "color_light_steel_blue",
        "method_name": null,
        "unique_global_name": "color_light_steel_blue",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `light_steel_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `light_steel_blue`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "light_steel_blue",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_light_steel_blue():"
          ],
          "csharp": [
            "public static Color Color.LightSteelBlue { get }",
            "public static Color SplashKit.ColorLightSteelBlue();"
          ],
          "cpp": [
            "#define COLOR_LIGHT_STEEL_BLUE",
            "color color_light_steel_blue()"
          ],
          "pascal": [
            "function ColorLightSteelBlue(): Color"
          ]
        }
      },
      {
        "signature": "color color_light_yellow();",
        "name": "color_light_yellow",
        "method_name": null,
        "unique_global_name": "color_light_yellow",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `light_yellow`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `light_yellow`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "light_yellow",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_light_yellow():"
          ],
          "csharp": [
            "public static Color Color.LightYellow { get }",
            "public static Color SplashKit.ColorLightYellow();"
          ],
          "cpp": [
            "#define COLOR_LIGHT_YELLOW",
            "color color_light_yellow()"
          ],
          "pascal": [
            "function ColorLightYellow(): Color"
          ]
        }
      },
      {
        "signature": "color color_lime();",
        "name": "color_lime",
        "method_name": null,
        "unique_global_name": "color_lime",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `lime`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `lime`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "lime",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_lime():"
          ],
          "csharp": [
            "public static Color Color.Lime { get }",
            "public static Color SplashKit.ColorLime();"
          ],
          "cpp": [
            "#define COLOR_LIME",
            "color color_lime()"
          ],
          "pascal": [
            "function ColorLime(): Color"
          ]
        }
      },
      {
        "signature": "color color_lime_green();",
        "name": "color_lime_green",
        "method_name": null,
        "unique_global_name": "color_lime_green",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `lime_green`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `lime_green`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "lime_green",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_lime_green():"
          ],
          "csharp": [
            "public static Color Color.LimeGreen { get }",
            "public static Color SplashKit.ColorLimeGreen();"
          ],
          "cpp": [
            "#define COLOR_LIME_GREEN",
            "color color_lime_green()"
          ],
          "pascal": [
            "function ColorLimeGreen(): Color"
          ]
        }
      },
      {
        "signature": "color color_linen();",
        "name": "color_linen",
        "method_name": null,
        "unique_global_name": "color_linen",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `linen`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `linen`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "linen",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_linen():"
          ],
          "csharp": [
            "public static Color Color.Linen { get }",
            "public static Color SplashKit.ColorLinen();"
          ],
          "cpp": [
            "#define COLOR_LINEN",
            "color color_linen()"
          ],
          "pascal": [
            "function ColorLinen(): Color"
          ]
        }
      },
      {
        "signature": "color color_magenta();",
        "name": "color_magenta",
        "method_name": null,
        "unique_global_name": "color_magenta",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `magenta`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `magenta`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "magenta",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_magenta():"
          ],
          "csharp": [
            "public static Color Color.Magenta { get }",
            "public static Color SplashKit.ColorMagenta();"
          ],
          "cpp": [
            "#define COLOR_MAGENTA",
            "color color_magenta()"
          ],
          "pascal": [
            "function ColorMagenta(): Color"
          ]
        }
      },
      {
        "signature": "color color_maroon();",
        "name": "color_maroon",
        "method_name": null,
        "unique_global_name": "color_maroon",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `maroon`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `maroon`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "maroon",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_maroon():"
          ],
          "csharp": [
            "public static Color Color.Maroon { get }",
            "public static Color SplashKit.ColorMaroon();"
          ],
          "cpp": [
            "#define COLOR_MAROON",
            "color color_maroon()"
          ],
          "pascal": [
            "function ColorMaroon(): Color"
          ]
        }
      },
      {
        "signature": "color color_medium_aquamarine();",
        "name": "color_medium_aquamarine",
        "method_name": null,
        "unique_global_name": "color_medium_aquamarine",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `medium_aquamarine`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `medium_aquamarine`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "medium_aquamarine",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_medium_aquamarine():"
          ],
          "csharp": [
            "public static Color Color.MediumAquamarine { get }",
            "public static Color SplashKit.ColorMediumAquamarine();"
          ],
          "cpp": [
            "#define COLOR_MEDIUM_AQUAMARINE",
            "color color_medium_aquamarine()"
          ],
          "pascal": [
            "function ColorMediumAquamarine(): Color"
          ]
        }
      },
      {
        "signature": "color color_medium_blue();",
        "name": "color_medium_blue",
        "method_name": null,
        "unique_global_name": "color_medium_blue",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `medium_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `medium_blue`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "medium_blue",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_medium_blue():"
          ],
          "csharp": [
            "public static Color Color.MediumBlue { get }",
            "public static Color SplashKit.ColorMediumBlue();"
          ],
          "cpp": [
            "#define COLOR_MEDIUM_BLUE",
            "color color_medium_blue()"
          ],
          "pascal": [
            "function ColorMediumBlue(): Color"
          ]
        }
      },
      {
        "signature": "color color_medium_orchid();",
        "name": "color_medium_orchid",
        "method_name": null,
        "unique_global_name": "color_medium_orchid",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `medium_orchid`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `medium_orchid`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "medium_orchid",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_medium_orchid():"
          ],
          "csharp": [
            "public static Color Color.MediumOrchid { get }",
            "public static Color SplashKit.ColorMediumOrchid();"
          ],
          "cpp": [
            "#define COLOR_MEDIUM_ORCHID",
            "color color_medium_orchid()"
          ],
          "pascal": [
            "function ColorMediumOrchid(): Color"
          ]
        }
      },
      {
        "signature": "color color_medium_purple();",
        "name": "color_medium_purple",
        "method_name": null,
        "unique_global_name": "color_medium_purple",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `medium_purple`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `medium_purple`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "medium_purple",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_medium_purple():"
          ],
          "csharp": [
            "public static Color Color.MediumPurple { get }",
            "public static Color SplashKit.ColorMediumPurple();"
          ],
          "cpp": [
            "#define COLOR_MEDIUM_PURPLE",
            "color color_medium_purple()"
          ],
          "pascal": [
            "function ColorMediumPurple(): Color"
          ]
        }
      },
      {
        "signature": "color color_medium_sea_green();",
        "name": "color_medium_sea_green",
        "method_name": null,
        "unique_global_name": "color_medium_sea_green",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `medium_sea_green`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `medium_sea_green`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "medium_sea_green",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_medium_sea_green():"
          ],
          "csharp": [
            "public static Color Color.MediumSeaGreen { get }",
            "public static Color SplashKit.ColorMediumSeaGreen();"
          ],
          "cpp": [
            "#define COLOR_MEDIUM_SEA_GREEN",
            "color color_medium_sea_green()"
          ],
          "pascal": [
            "function ColorMediumSeaGreen(): Color"
          ]
        }
      },
      {
        "signature": "color color_medium_slate_blue();",
        "name": "color_medium_slate_blue",
        "method_name": null,
        "unique_global_name": "color_medium_slate_blue",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `medium_slate_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `medium_slate_blue`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "medium_slate_blue",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_medium_slate_blue():"
          ],
          "csharp": [
            "public static Color Color.MediumSlateBlue { get }",
            "public static Color SplashKit.ColorMediumSlateBlue();"
          ],
          "cpp": [
            "#define COLOR_MEDIUM_SLATE_BLUE",
            "color color_medium_slate_blue()"
          ],
          "pascal": [
            "function ColorMediumSlateBlue(): Color"
          ]
        }
      },
      {
        "signature": "color color_medium_spring_green();",
        "name": "color_medium_spring_green",
        "method_name": null,
        "unique_global_name": "color_medium_spring_green",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `medium_spring_green`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `medium_spring_green`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "medium_spring_green",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_medium_spring_green():"
          ],
          "csharp": [
            "public static Color Color.MediumSpringGreen { get }",
            "public static Color SplashKit.ColorMediumSpringGreen();"
          ],
          "cpp": [
            "#define COLOR_MEDIUM_SPRING_GREEN",
            "color color_medium_spring_green()"
          ],
          "pascal": [
            "function ColorMediumSpringGreen(): Color"
          ]
        }
      },
      {
        "signature": "color color_medium_turquoise();",
        "name": "color_medium_turquoise",
        "method_name": null,
        "unique_global_name": "color_medium_turquoise",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `medium_turquoise`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `medium_turquoise`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "medium_turquoise",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_medium_turquoise():"
          ],
          "csharp": [
            "public static Color Color.MediumTurquoise { get }",
            "public static Color SplashKit.ColorMediumTurquoise();"
          ],
          "cpp": [
            "#define COLOR_MEDIUM_TURQUOISE",
            "color color_medium_turquoise()"
          ],
          "pascal": [
            "function ColorMediumTurquoise(): Color"
          ]
        }
      },
      {
        "signature": "color color_medium_violet_red();",
        "name": "color_medium_violet_red",
        "method_name": null,
        "unique_global_name": "color_medium_violet_red",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `medium_violet_red`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `medium_violet_red`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "medium_violet_red",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_medium_violet_red():"
          ],
          "csharp": [
            "public static Color Color.MediumVioletRed { get }",
            "public static Color SplashKit.ColorMediumVioletRed();"
          ],
          "cpp": [
            "#define COLOR_MEDIUM_VIOLET_RED",
            "color color_medium_violet_red()"
          ],
          "pascal": [
            "function ColorMediumVioletRed(): Color"
          ]
        }
      },
      {
        "signature": "color color_midnight_blue();",
        "name": "color_midnight_blue",
        "method_name": null,
        "unique_global_name": "color_midnight_blue",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `midnight_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `midnight_blue`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "midnight_blue",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_midnight_blue():"
          ],
          "csharp": [
            "public static Color Color.MidnightBlue { get }",
            "public static Color SplashKit.ColorMidnightBlue();"
          ],
          "cpp": [
            "#define COLOR_MIDNIGHT_BLUE",
            "color color_midnight_blue()"
          ],
          "pascal": [
            "function ColorMidnightBlue(): Color"
          ]
        }
      },
      {
        "signature": "color color_mint_cream();",
        "name": "color_mint_cream",
        "method_name": null,
        "unique_global_name": "color_mint_cream",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `mint_cream`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `mint_cream`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "mint_cream",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_mint_cream():"
          ],
          "csharp": [
            "public static Color Color.MintCream { get }",
            "public static Color SplashKit.ColorMintCream();"
          ],
          "cpp": [
            "#define COLOR_MINT_CREAM",
            "color color_mint_cream()"
          ],
          "pascal": [
            "function ColorMintCream(): Color"
          ]
        }
      },
      {
        "signature": "color color_misty_rose();",
        "name": "color_misty_rose",
        "method_name": null,
        "unique_global_name": "color_misty_rose",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `misty_rose`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `misty_rose`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "misty_rose",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_misty_rose():"
          ],
          "csharp": [
            "public static Color Color.MistyRose { get }",
            "public static Color SplashKit.ColorMistyRose();"
          ],
          "cpp": [
            "#define COLOR_MISTY_ROSE",
            "color color_misty_rose()"
          ],
          "pascal": [
            "function ColorMistyRose(): Color"
          ]
        }
      },
      {
        "signature": "color color_moccasin();",
        "name": "color_moccasin",
        "method_name": null,
        "unique_global_name": "color_moccasin",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `moccasin`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `moccasin`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "moccasin",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_moccasin():"
          ],
          "csharp": [
            "public static Color Color.Moccasin { get }",
            "public static Color SplashKit.ColorMoccasin();"
          ],
          "cpp": [
            "#define COLOR_MOCCASIN",
            "color color_moccasin()"
          ],
          "pascal": [
            "function ColorMoccasin(): Color"
          ]
        }
      },
      {
        "signature": "color color_navajo_white();",
        "name": "color_navajo_white",
        "method_name": null,
        "unique_global_name": "color_navajo_white",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `navajo_white`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `navajo_white`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "navajo_white",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_navajo_white():"
          ],
          "csharp": [
            "public static Color Color.NavajoWhite { get }",
            "public static Color SplashKit.ColorNavajoWhite();"
          ],
          "cpp": [
            "#define COLOR_NAVAJO_WHITE",
            "color color_navajo_white()"
          ],
          "pascal": [
            "function ColorNavajoWhite(): Color"
          ]
        }
      },
      {
        "signature": "color color_navy();",
        "name": "color_navy",
        "method_name": null,
        "unique_global_name": "color_navy",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `navy`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `navy`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "navy",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_navy():"
          ],
          "csharp": [
            "public static Color Color.Navy { get }",
            "public static Color SplashKit.ColorNavy();"
          ],
          "cpp": [
            "#define COLOR_NAVY",
            "color color_navy()"
          ],
          "pascal": [
            "function ColorNavy(): Color"
          ]
        }
      },
      {
        "signature": "color color_old_lace();",
        "name": "color_old_lace",
        "method_name": null,
        "unique_global_name": "color_old_lace",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `old_lace`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `old_lace`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "old_lace",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_old_lace():"
          ],
          "csharp": [
            "public static Color Color.OldLace { get }",
            "public static Color SplashKit.ColorOldLace();"
          ],
          "cpp": [
            "#define COLOR_OLD_LACE",
            "color color_old_lace()"
          ],
          "pascal": [
            "function ColorOldLace(): Color"
          ]
        }
      },
      {
        "signature": "color color_olive();",
        "name": "color_olive",
        "method_name": null,
        "unique_global_name": "color_olive",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `olive`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `olive`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "olive",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_olive():"
          ],
          "csharp": [
            "public static Color Color.Olive { get }",
            "public static Color SplashKit.ColorOlive();"
          ],
          "cpp": [
            "#define COLOR_OLIVE",
            "color color_olive()"
          ],
          "pascal": [
            "function ColorOlive(): Color"
          ]
        }
      },
      {
        "signature": "color color_olive_drab();",
        "name": "color_olive_drab",
        "method_name": null,
        "unique_global_name": "color_olive_drab",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `olive_drab`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `olive_drab`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "olive_drab",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_olive_drab():"
          ],
          "csharp": [
            "public static Color Color.OliveDrab { get }",
            "public static Color SplashKit.ColorOliveDrab();"
          ],
          "cpp": [
            "#define COLOR_OLIVE_DRAB",
            "color color_olive_drab()"
          ],
          "pascal": [
            "function ColorOliveDrab(): Color"
          ]
        }
      },
      {
        "signature": "color color_orange();",
        "name": "color_orange",
        "method_name": null,
        "unique_global_name": "color_orange",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `orange`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `orange`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "orange",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_orange():"
          ],
          "csharp": [
            "public static Color Color.Orange { get }",
            "public static Color SplashKit.ColorOrange();"
          ],
          "cpp": [
            "#define COLOR_ORANGE",
            "color color_orange()"
          ],
          "pascal": [
            "function ColorOrange(): Color"
          ]
        }
      },
      {
        "signature": "color color_orange_red();",
        "name": "color_orange_red",
        "method_name": null,
        "unique_global_name": "color_orange_red",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `orange_red`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `orange_red`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "orange_red",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_orange_red():"
          ],
          "csharp": [
            "public static Color Color.OrangeRed { get }",
            "public static Color SplashKit.ColorOrangeRed();"
          ],
          "cpp": [
            "#define COLOR_ORANGE_RED",
            "color color_orange_red()"
          ],
          "pascal": [
            "function ColorOrangeRed(): Color"
          ]
        }
      },
      {
        "signature": "color color_orchid();",
        "name": "color_orchid",
        "method_name": null,
        "unique_global_name": "color_orchid",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `orchid`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `orchid`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "orchid",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_orchid():"
          ],
          "csharp": [
            "public static Color Color.Orchid { get }",
            "public static Color SplashKit.ColorOrchid();"
          ],
          "cpp": [
            "#define COLOR_ORCHID",
            "color color_orchid()"
          ],
          "pascal": [
            "function ColorOrchid(): Color"
          ]
        }
      },
      {
        "signature": "color color_pale_goldenrod();",
        "name": "color_pale_goldenrod",
        "method_name": null,
        "unique_global_name": "color_pale_goldenrod",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `pale_goldenrod`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `pale_goldenrod`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "pale_goldenrod",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_pale_goldenrod():"
          ],
          "csharp": [
            "public static Color Color.PaleGoldenrod { get }",
            "public static Color SplashKit.ColorPaleGoldenrod();"
          ],
          "cpp": [
            "#define COLOR_PALE_GOLDENROD",
            "color color_pale_goldenrod()"
          ],
          "pascal": [
            "function ColorPaleGoldenrod(): Color"
          ]
        }
      },
      {
        "signature": "color color_pale_green();",
        "name": "color_pale_green",
        "method_name": null,
        "unique_global_name": "color_pale_green",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `pale_green`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `pale_green`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "pale_green",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_pale_green():"
          ],
          "csharp": [
            "public static Color Color.PaleGreen { get }",
            "public static Color SplashKit.ColorPaleGreen();"
          ],
          "cpp": [
            "#define COLOR_PALE_GREEN",
            "color color_pale_green()"
          ],
          "pascal": [
            "function ColorPaleGreen(): Color"
          ]
        }
      },
      {
        "signature": "color color_pale_turquoise();",
        "name": "color_pale_turquoise",
        "method_name": null,
        "unique_global_name": "color_pale_turquoise",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `pale_turquoise`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `pale_turquoise`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "pale_turquoise",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_pale_turquoise():"
          ],
          "csharp": [
            "public static Color Color.PaleTurquoise { get }",
            "public static Color SplashKit.ColorPaleTurquoise();"
          ],
          "cpp": [
            "#define COLOR_PALE_TURQUOISE",
            "color color_pale_turquoise()"
          ],
          "pascal": [
            "function ColorPaleTurquoise(): Color"
          ]
        }
      },
      {
        "signature": "color color_pale_violet_red();",
        "name": "color_pale_violet_red",
        "method_name": null,
        "unique_global_name": "color_pale_violet_red",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `pale_violet_red`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `pale_violet_red`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "pale_violet_red",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_pale_violet_red():"
          ],
          "csharp": [
            "public static Color Color.PaleVioletRed { get }",
            "public static Color SplashKit.ColorPaleVioletRed();"
          ],
          "cpp": [
            "#define COLOR_PALE_VIOLET_RED",
            "color color_pale_violet_red()"
          ],
          "pascal": [
            "function ColorPaleVioletRed(): Color"
          ]
        }
      },
      {
        "signature": "color color_papaya_whip();",
        "name": "color_papaya_whip",
        "method_name": null,
        "unique_global_name": "color_papaya_whip",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `papaya_whip`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `papaya_whip`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "papaya_whip",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_papaya_whip():"
          ],
          "csharp": [
            "public static Color Color.PapayaWhip { get }",
            "public static Color SplashKit.ColorPapayaWhip();"
          ],
          "cpp": [
            "#define COLOR_PAPAYA_WHIP",
            "color color_papaya_whip()"
          ],
          "pascal": [
            "function ColorPapayaWhip(): Color"
          ]
        }
      },
      {
        "signature": "color color_peach_puff();",
        "name": "color_peach_puff",
        "method_name": null,
        "unique_global_name": "color_peach_puff",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `peach_puff`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `peach_puff`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "peach_puff",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_peach_puff():"
          ],
          "csharp": [
            "public static Color Color.PeachPuff { get }",
            "public static Color SplashKit.ColorPeachPuff();"
          ],
          "cpp": [
            "#define COLOR_PEACH_PUFF",
            "color color_peach_puff()"
          ],
          "pascal": [
            "function ColorPeachPuff(): Color"
          ]
        }
      },
      {
        "signature": "color color_peru();",
        "name": "color_peru",
        "method_name": null,
        "unique_global_name": "color_peru",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `peru`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `peru`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "peru",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_peru():"
          ],
          "csharp": [
            "public static Color Color.Peru { get }",
            "public static Color SplashKit.ColorPeru();"
          ],
          "cpp": [
            "#define COLOR_PERU",
            "color color_peru()"
          ],
          "pascal": [
            "function ColorPeru(): Color"
          ]
        }
      },
      {
        "signature": "color color_pink();",
        "name": "color_pink",
        "method_name": null,
        "unique_global_name": "color_pink",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `pink`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `pink`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "pink",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_pink():"
          ],
          "csharp": [
            "public static Color Color.Pink { get }",
            "public static Color SplashKit.ColorPink();"
          ],
          "cpp": [
            "#define COLOR_PINK",
            "color color_pink()"
          ],
          "pascal": [
            "function ColorPink(): Color"
          ]
        }
      },
      {
        "signature": "color color_plum();",
        "name": "color_plum",
        "method_name": null,
        "unique_global_name": "color_plum",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `plum`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `plum`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "plum",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_plum():"
          ],
          "csharp": [
            "public static Color Color.Plum { get }",
            "public static Color SplashKit.ColorPlum();"
          ],
          "cpp": [
            "#define COLOR_PLUM",
            "color color_plum()"
          ],
          "pascal": [
            "function ColorPlum(): Color"
          ]
        }
      },
      {
        "signature": "color color_powder_blue();",
        "name": "color_powder_blue",
        "method_name": null,
        "unique_global_name": "color_powder_blue",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `powder_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `powder_blue`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "powder_blue",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_powder_blue():"
          ],
          "csharp": [
            "public static Color Color.PowderBlue { get }",
            "public static Color SplashKit.ColorPowderBlue();"
          ],
          "cpp": [
            "#define COLOR_POWDER_BLUE",
            "color color_powder_blue()"
          ],
          "pascal": [
            "function ColorPowderBlue(): Color"
          ]
        }
      },
      {
        "signature": "color color_purple();",
        "name": "color_purple",
        "method_name": null,
        "unique_global_name": "color_purple",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `purple`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `purple`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "purple",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_purple():"
          ],
          "csharp": [
            "public static Color Color.Purple { get }",
            "public static Color SplashKit.ColorPurple();"
          ],
          "cpp": [
            "#define COLOR_PURPLE",
            "color color_purple()"
          ],
          "pascal": [
            "function ColorPurple(): Color"
          ]
        }
      },
      {
        "signature": "color color_red();",
        "name": "color_red",
        "method_name": null,
        "unique_global_name": "color_red",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `red`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `red`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "red",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_red():"
          ],
          "csharp": [
            "public static Color Color.Red { get }",
            "public static Color SplashKit.ColorRed();"
          ],
          "cpp": [
            "#define COLOR_RED",
            "color color_red()"
          ],
          "pascal": [
            "function ColorRed(): Color"
          ]
        }
      },
      {
        "signature": "color color_rosy_brown();",
        "name": "color_rosy_brown",
        "method_name": null,
        "unique_global_name": "color_rosy_brown",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `rosy_brown`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `rosy_brown`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "rosy_brown",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_rosy_brown():"
          ],
          "csharp": [
            "public static Color Color.RosyBrown { get }",
            "public static Color SplashKit.ColorRosyBrown();"
          ],
          "cpp": [
            "#define COLOR_ROSY_BROWN",
            "color color_rosy_brown()"
          ],
          "pascal": [
            "function ColorRosyBrown(): Color"
          ]
        }
      },
      {
        "signature": "color color_royal_blue();",
        "name": "color_royal_blue",
        "method_name": null,
        "unique_global_name": "color_royal_blue",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `royal_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `royal_blue`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "royal_blue",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_royal_blue():"
          ],
          "csharp": [
            "public static Color Color.RoyalBlue { get }",
            "public static Color SplashKit.ColorRoyalBlue();"
          ],
          "cpp": [
            "#define COLOR_ROYAL_BLUE",
            "color color_royal_blue()"
          ],
          "pascal": [
            "function ColorRoyalBlue(): Color"
          ]
        }
      },
      {
        "signature": "color color_saddle_brown();",
        "name": "color_saddle_brown",
        "method_name": null,
        "unique_global_name": "color_saddle_brown",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `saddle_brown`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `saddle_brown`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "saddle_brown",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_saddle_brown():"
          ],
          "csharp": [
            "public static Color Color.SaddleBrown { get }",
            "public static Color SplashKit.ColorSaddleBrown();"
          ],
          "cpp": [
            "#define COLOR_SADDLE_BROWN",
            "color color_saddle_brown()"
          ],
          "pascal": [
            "function ColorSaddleBrown(): Color"
          ]
        }
      },
      {
        "signature": "color color_salmon();",
        "name": "color_salmon",
        "method_name": null,
        "unique_global_name": "color_salmon",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `salmon`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `salmon`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "salmon",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_salmon():"
          ],
          "csharp": [
            "public static Color Color.Salmon { get }",
            "public static Color SplashKit.ColorSalmon();"
          ],
          "cpp": [
            "#define COLOR_SALMON",
            "color color_salmon()"
          ],
          "pascal": [
            "function ColorSalmon(): Color"
          ]
        }
      },
      {
        "signature": "color color_sandy_brown();",
        "name": "color_sandy_brown",
        "method_name": null,
        "unique_global_name": "color_sandy_brown",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `sandy_brown`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `sandy_brown`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "sandy_brown",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_sandy_brown():"
          ],
          "csharp": [
            "public static Color Color.SandyBrown { get }",
            "public static Color SplashKit.ColorSandyBrown();"
          ],
          "cpp": [
            "#define COLOR_SANDY_BROWN",
            "color color_sandy_brown()"
          ],
          "pascal": [
            "function ColorSandyBrown(): Color"
          ]
        }
      },
      {
        "signature": "color color_sea_green();",
        "name": "color_sea_green",
        "method_name": null,
        "unique_global_name": "color_sea_green",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `sea_green`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `sea_green`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "sea_green",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_sea_green():"
          ],
          "csharp": [
            "public static Color Color.SeaGreen { get }",
            "public static Color SplashKit.ColorSeaGreen();"
          ],
          "cpp": [
            "#define COLOR_SEA_GREEN",
            "color color_sea_green()"
          ],
          "pascal": [
            "function ColorSeaGreen(): Color"
          ]
        }
      },
      {
        "signature": "color color_sea_shell();",
        "name": "color_sea_shell",
        "method_name": null,
        "unique_global_name": "color_sea_shell",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `sea_shell`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `sea_shell`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "sea_shell",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_sea_shell():"
          ],
          "csharp": [
            "public static Color Color.SeaShell { get }",
            "public static Color SplashKit.ColorSeaShell();"
          ],
          "cpp": [
            "#define COLOR_SEA_SHELL",
            "color color_sea_shell()"
          ],
          "pascal": [
            "function ColorSeaShell(): Color"
          ]
        }
      },
      {
        "signature": "color color_sienna();",
        "name": "color_sienna",
        "method_name": null,
        "unique_global_name": "color_sienna",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `sienna`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `sienna`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "sienna",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_sienna():"
          ],
          "csharp": [
            "public static Color Color.Sienna { get }",
            "public static Color SplashKit.ColorSienna();"
          ],
          "cpp": [
            "#define COLOR_SIENNA",
            "color color_sienna()"
          ],
          "pascal": [
            "function ColorSienna(): Color"
          ]
        }
      },
      {
        "signature": "color color_silver();",
        "name": "color_silver",
        "method_name": null,
        "unique_global_name": "color_silver",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `silver`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `silver`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "silver",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_silver():"
          ],
          "csharp": [
            "public static Color Color.Silver { get }",
            "public static Color SplashKit.ColorSilver();"
          ],
          "cpp": [
            "#define COLOR_SILVER",
            "color color_silver()"
          ],
          "pascal": [
            "function ColorSilver(): Color"
          ]
        }
      },
      {
        "signature": "color color_sky_blue();",
        "name": "color_sky_blue",
        "method_name": null,
        "unique_global_name": "color_sky_blue",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `sky_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `sky_blue`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "sky_blue",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_sky_blue():"
          ],
          "csharp": [
            "public static Color Color.SkyBlue { get }",
            "public static Color SplashKit.ColorSkyBlue();"
          ],
          "cpp": [
            "#define COLOR_SKY_BLUE",
            "color color_sky_blue()"
          ],
          "pascal": [
            "function ColorSkyBlue(): Color"
          ]
        }
      },
      {
        "signature": "color color_slate_blue();",
        "name": "color_slate_blue",
        "method_name": null,
        "unique_global_name": "color_slate_blue",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `slate_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `slate_blue`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "slate_blue",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_slate_blue():"
          ],
          "csharp": [
            "public static Color Color.SlateBlue { get }",
            "public static Color SplashKit.ColorSlateBlue();"
          ],
          "cpp": [
            "#define COLOR_SLATE_BLUE",
            "color color_slate_blue()"
          ],
          "pascal": [
            "function ColorSlateBlue(): Color"
          ]
        }
      },
      {
        "signature": "color color_slate_gray();",
        "name": "color_slate_gray",
        "method_name": null,
        "unique_global_name": "color_slate_gray",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `slate_gray`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `slate_gray`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "slate_gray",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_slate_gray():"
          ],
          "csharp": [
            "public static Color Color.SlateGray { get }",
            "public static Color SplashKit.ColorSlateGray();"
          ],
          "cpp": [
            "#define COLOR_SLATE_GRAY",
            "color color_slate_gray()"
          ],
          "pascal": [
            "function ColorSlateGray(): Color"
          ]
        }
      },
      {
        "signature": "color color_snow();",
        "name": "color_snow",
        "method_name": null,
        "unique_global_name": "color_snow",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `snow`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `snow`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "snow",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_snow():"
          ],
          "csharp": [
            "public static Color Color.Snow { get }",
            "public static Color SplashKit.ColorSnow();"
          ],
          "cpp": [
            "#define COLOR_SNOW",
            "color color_snow()"
          ],
          "pascal": [
            "function ColorSnow(): Color"
          ]
        }
      },
      {
        "signature": "color color_spring_green();",
        "name": "color_spring_green",
        "method_name": null,
        "unique_global_name": "color_spring_green",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `spring_green`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `spring_green`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "spring_green",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_spring_green():"
          ],
          "csharp": [
            "public static Color Color.SpringGreen { get }",
            "public static Color SplashKit.ColorSpringGreen();"
          ],
          "cpp": [
            "#define COLOR_SPRING_GREEN",
            "color color_spring_green()"
          ],
          "pascal": [
            "function ColorSpringGreen(): Color"
          ]
        }
      },
      {
        "signature": "color color_steel_blue();",
        "name": "color_steel_blue",
        "method_name": null,
        "unique_global_name": "color_steel_blue",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `steel_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `steel_blue`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "steel_blue",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_steel_blue():"
          ],
          "csharp": [
            "public static Color Color.SteelBlue { get }",
            "public static Color SplashKit.ColorSteelBlue();"
          ],
          "cpp": [
            "#define COLOR_STEEL_BLUE",
            "color color_steel_blue()"
          ],
          "pascal": [
            "function ColorSteelBlue(): Color"
          ]
        }
      },
      {
        "signature": "color color_swinburne_red();",
        "name": "color_swinburne_red",
        "method_name": null,
        "unique_global_name": "color_swinburne_red",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `swinburne_red`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `swinburne_red`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "swinburne_red",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_swinburne_red():"
          ],
          "csharp": [
            "public static Color Color.SwinburneRed { get }",
            "public static Color SplashKit.ColorSwinburneRed();"
          ],
          "cpp": [
            "#define COLOR_SWINBURNE_RED",
            "color color_swinburne_red()"
          ],
          "pascal": [
            "function ColorSwinburneRed(): Color"
          ]
        }
      },
      {
        "signature": "color color_tan();",
        "name": "color_tan",
        "method_name": null,
        "unique_global_name": "color_tan",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `tan`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `tan`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "tan",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_tan():"
          ],
          "csharp": [
            "public static Color Color.Tan { get }",
            "public static Color SplashKit.ColorTan();"
          ],
          "cpp": [
            "#define COLOR_TAN",
            "color color_tan()"
          ],
          "pascal": [
            "function ColorTan(): Color"
          ]
        }
      },
      {
        "signature": "color color_teal();",
        "name": "color_teal",
        "method_name": null,
        "unique_global_name": "color_teal",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `teal`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `teal`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "teal",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_teal():"
          ],
          "csharp": [
            "public static Color Color.Teal { get }",
            "public static Color SplashKit.ColorTeal();"
          ],
          "cpp": [
            "#define COLOR_TEAL",
            "color color_teal()"
          ],
          "pascal": [
            "function ColorTeal(): Color"
          ]
        }
      },
      {
        "signature": "color color_thistle();",
        "name": "color_thistle",
        "method_name": null,
        "unique_global_name": "color_thistle",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `thistle`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `thistle`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "thistle",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_thistle():"
          ],
          "csharp": [
            "public static Color Color.Thistle { get }",
            "public static Color SplashKit.ColorThistle();"
          ],
          "cpp": [
            "#define COLOR_THISTLE",
            "color color_thistle()"
          ],
          "pascal": [
            "function ColorThistle(): Color"
          ]
        }
      },
      {
        "signature": "string color_to_string(color c);",
        "name": "color_to_string",
        "method_name": null,
        "unique_global_name": "color_to_string",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a string representation of the color.\nFormat will be a hex string starting with a #,\nfollowed by the red, green, blue, and alpha\nvalues of the color.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "A hex string representing the color",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "c": {
            "type": "color",
            "description": "The color",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_to_string(c):"
          ],
          "csharp": [
            "public static string SplashKit.ColorToString(Color c);"
          ],
          "cpp": [
            "string color_to_string(color c)"
          ],
          "pascal": [
            "function ColorToString(c: Color): String"
          ]
        }
      },
      {
        "signature": "color color_tomato();",
        "name": "color_tomato",
        "method_name": null,
        "unique_global_name": "color_tomato",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `tomato`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `tomato`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "tomato",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_tomato():"
          ],
          "csharp": [
            "public static Color Color.Tomato { get }",
            "public static Color SplashKit.ColorTomato();"
          ],
          "cpp": [
            "#define COLOR_TOMATO",
            "color color_tomato()"
          ],
          "pascal": [
            "function ColorTomato(): Color"
          ]
        }
      },
      {
        "signature": "color color_transparent();",
        "name": "color_transparent",
        "method_name": null,
        "unique_global_name": "color_transparent",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `transparent`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A `transparent` color (i.e., a color with an `alpha` of 0).",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "transparent",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_transparent():"
          ],
          "csharp": [
            "public static Color Color.Transparent { get }",
            "public static Color SplashKit.ColorTransparent();"
          ],
          "cpp": [
            "#define COLOR_TRANSPARENT",
            "color color_transparent()"
          ],
          "pascal": [
            "function ColorTransparent(): Color"
          ]
        }
      },
      {
        "signature": "color color_turquoise();",
        "name": "color_turquoise",
        "method_name": null,
        "unique_global_name": "color_turquoise",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `turquoise`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `turquoise`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "turquoise",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_turquoise():"
          ],
          "csharp": [
            "public static Color Color.Turquoise { get }",
            "public static Color SplashKit.ColorTurquoise();"
          ],
          "cpp": [
            "#define COLOR_TURQUOISE",
            "color color_turquoise()"
          ],
          "pascal": [
            "function ColorTurquoise(): Color"
          ]
        }
      },
      {
        "signature": "color color_violet();",
        "name": "color_violet",
        "method_name": null,
        "unique_global_name": "color_violet",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `violet`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `violet`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "violet",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_violet():"
          ],
          "csharp": [
            "public static Color Color.Violet { get }",
            "public static Color SplashKit.ColorViolet();"
          ],
          "cpp": [
            "#define COLOR_VIOLET",
            "color color_violet()"
          ],
          "pascal": [
            "function ColorViolet(): Color"
          ]
        }
      },
      {
        "signature": "color color_wheat();",
        "name": "color_wheat",
        "method_name": null,
        "unique_global_name": "color_wheat",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `wheat`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `wheat`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "wheat",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_wheat():"
          ],
          "csharp": [
            "public static Color Color.Wheat { get }",
            "public static Color SplashKit.ColorWheat();"
          ],
          "cpp": [
            "#define COLOR_WHEAT",
            "color color_wheat()"
          ],
          "pascal": [
            "function ColorWheat(): Color"
          ]
        }
      },
      {
        "signature": "color color_white();",
        "name": "color_white",
        "method_name": null,
        "unique_global_name": "color_white",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `white`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `white`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "white",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_white():"
          ],
          "csharp": [
            "public static Color Color.White { get }",
            "public static Color SplashKit.ColorWhite();"
          ],
          "cpp": [
            "#define COLOR_WHITE",
            "color color_white()"
          ],
          "pascal": [
            "function ColorWhite(): Color"
          ]
        }
      },
      {
        "signature": "color color_white_smoke();",
        "name": "color_white_smoke",
        "method_name": null,
        "unique_global_name": "color_white_smoke",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `white_smoke`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `white_smoke`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "white_smoke",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_white_smoke():"
          ],
          "csharp": [
            "public static Color Color.WhiteSmoke { get }",
            "public static Color SplashKit.ColorWhiteSmoke();"
          ],
          "cpp": [
            "#define COLOR_WHITE_SMOKE",
            "color color_white_smoke()"
          ],
          "pascal": [
            "function ColorWhiteSmoke(): Color"
          ]
        }
      },
      {
        "signature": "color color_yellow();",
        "name": "color_yellow",
        "method_name": null,
        "unique_global_name": "color_yellow",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `yellow`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `yellow`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "yellow",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_yellow():"
          ],
          "csharp": [
            "public static Color Color.Yellow { get }",
            "public static Color SplashKit.ColorYellow();"
          ],
          "cpp": [
            "#define COLOR_YELLOW",
            "color color_yellow()"
          ],
          "pascal": [
            "function ColorYellow(): Color"
          ]
        }
      },
      {
        "signature": "color color_yellow_green();",
        "name": "color_yellow_green",
        "method_name": null,
        "unique_global_name": "color_yellow_green",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `yellow_green`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `yellow_green`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "yellow_green",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def color_yellow_green():"
          ],
          "csharp": [
            "public static Color Color.YellowGreen { get }",
            "public static Color SplashKit.ColorYellowGreen();"
          ],
          "cpp": [
            "#define COLOR_YELLOW_GREEN",
            "color color_yellow_green()"
          ],
          "pascal": [
            "function ColorYellowGreen(): Color"
          ]
        }
      },
      {
        "signature": "int green_of(color c);",
        "name": "green_of",
        "method_name": null,
        "unique_global_name": "green_of",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the green of the supplied color.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The green component of the color",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "c": {
            "type": "color",
            "description": "The color",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "python": [
            "def green_of(c):"
          ],
          "csharp": [
            "public static int SplashKit.GreenOf(Color c);"
          ],
          "cpp": [
            "int green_of(color c)"
          ],
          "pascal": [
            "function GreenOf(c: Color): Integer"
          ]
        }
      },
      {
        "signature": "color hsb_color(double hue,double saturation,double brightness);",
        "name": "hsb_color",
        "method_name": "hsb_color",
        "unique_global_name": "hsb_color",
        "unique_method_name": ".hsb_color",
        "suffix_name": null,
        "description": "Returs a color from a combination of hue, saturation, and brightness.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "The color from its hue, saturation and brightness.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "hue": {
            "type": "double",
            "description": "The hue of the color. Value must be between 0 and 1.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "saturation": {
            "type": "double",
            "description": "The saturation of that hue. Value must be between 0 and 1.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "brightness": {
            "type": "double",
            "description": "The brightness of the color. Value must be between 0 and 1.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "method": "hsb_color",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def hsb_color(hue, saturation, brightness):"
          ],
          "csharp": [
            "public static Color Color.HSBColor(double hue, double saturation, double brightness);",
            "public static Color SplashKit.HSBColor(double hue, double saturation, double brightness);"
          ],
          "cpp": [
            "color hsb_color(double hue, double saturation, double brightness)"
          ],
          "pascal": [
            "function HSBColor(hue: Double; saturation: Double; brightness: Double): Color"
          ]
        }
      },
      {
        "signature": "double hue_of(color c);",
        "name": "hue_of",
        "method_name": null,
        "unique_global_name": "hue_of",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the hue of the supplied color.",
        "brief": null,
        "return": {
          "type": "double",
          "description": "The hue component of the color",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "c": {
            "type": "color",
            "description": "The color",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "python": [
            "def hue_of(c):"
          ],
          "csharp": [
            "public static double SplashKit.HueOf(Color c);"
          ],
          "cpp": [
            "double hue_of(color c)"
          ],
          "pascal": [
            "function HueOf(c: Color): Double"
          ]
        }
      },
      {
        "signature": "color random_color();",
        "name": "random_color",
        "method_name": "random",
        "unique_global_name": "random_color",
        "unique_method_name": ".random",
        "suffix_name": null,
        "description": "Creates and returns a random color where the color and its opacity are\nrandom.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A random color",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "method": "random",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def random_color():"
          ],
          "csharp": [
            "public static Color Color.Random();",
            "public static Color SplashKit.RandomColor();"
          ],
          "cpp": [
            "color random_color()"
          ],
          "pascal": [
            "function RandomColor(): Color"
          ]
        }
      },
      {
        "signature": "color random_rgb_color(int alpha);",
        "name": "random_rgb_color",
        "method_name": "random_rgb",
        "unique_global_name": "random_rgb_color",
        "unique_method_name": ".random_rgb",
        "suffix_name": null,
        "description": "Creates and returns a random color where the color is random, but the\nopacity is set to the passed in value.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A random color with the set alpha",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "alpha": {
            "type": "int",
            "description": "The set alpha (opacity) value (between 0 and 255)",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "method": "random_rgb",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def random_rgb_color(alpha):"
          ],
          "csharp": [
            "public static Color Color.RandomRGB(int alpha);",
            "public static Color SplashKit.RandomRGBColor(int alpha);"
          ],
          "cpp": [
            "color random_rgb_color(int alpha)"
          ],
          "pascal": [
            "function RandomRGBColor(alpha: Integer): Color"
          ]
        }
      },
      {
        "signature": "int red_of(color c);",
        "name": "red_of",
        "method_name": null,
        "unique_global_name": "red_of",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the red of the supplied color.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The red component of the color",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "c": {
            "type": "color",
            "description": "The color",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "python": [
            "def red_of(c):"
          ],
          "csharp": [
            "public static int SplashKit.RedOf(Color c);"
          ],
          "cpp": [
            "int red_of(color c)"
          ],
          "pascal": [
            "function RedOf(c: Color): Integer"
          ]
        }
      },
      {
        "signature": "color rgb_color(double red,double green,double blue);",
        "name": "rgb_color",
        "method_name": "rgb_color",
        "unique_global_name": "rgb_color_from_double",
        "unique_method_name": ".rgb_color_from_double",
        "suffix_name": null,
        "description": "Gets a color given its RGB components. Each of the components has\na value between 0 and 1.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "The color from its different component",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "red": {
            "type": "double",
            "description": "The red component",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "green": {
            "type": "double",
            "description": "The green component",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "blue": {
            "type": "double",
            "description": "The blue component",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "method": "rgb_color",
          "static": "color",
          "suffix": "from_double",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def rgb_color_from_double(red, green, blue):"
          ],
          "csharp": [
            "public static Color Color.RGBColor(double red, double green, double blue);",
            "public static Color SplashKit.RGBColor(double red, double green, double blue);"
          ],
          "cpp": [
            "color rgb_color(double red, double green, double blue)"
          ],
          "pascal": [
            "function RGBColor(red: Double; green: Double; blue: Double): Color"
          ]
        }
      },
      {
        "signature": "color rgb_color(int red,int green,int blue);",
        "name": "rgb_color",
        "method_name": "rgb_color",
        "unique_global_name": "rgb_color",
        "unique_method_name": ".rgb_color",
        "suffix_name": null,
        "description": "Gets a color given its RGB components. Each of the components has\na value between 0 and 255.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "The color from its different component",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "red": {
            "type": "int",
            "description": "The red component",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "green": {
            "type": "int",
            "description": "The green component",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "blue": {
            "type": "int",
            "description": "The blue component",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "method": "rgb_color",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def rgb_color(red, green, blue):"
          ],
          "csharp": [
            "public static Color Color.RGBColor(int red, int green, int blue);",
            "public static Color SplashKit.RGBColor(int red, int green, int blue);"
          ],
          "cpp": [
            "color rgb_color(int red, int green, int blue)"
          ],
          "pascal": [
            "function RGBColor(red: Integer; green: Integer; blue: Integer): Color"
          ]
        }
      },
      {
        "signature": "color rgba_color(double red,double green,double blue,double alpha);",
        "name": "rgba_color",
        "method_name": "rgba_color",
        "unique_global_name": "rgba_color_from_double",
        "unique_method_name": ".rgba_color_from_double",
        "suffix_name": null,
        "description": "Gets a color given its color components. Each of the components has\na value between 0 and 1.0.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "The color from its different component",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "red": {
            "type": "double",
            "description": "The red component (between 0 and 1.0)",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "green": {
            "type": "double",
            "description": "The green component (between 0 and 1.0)",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "blue": {
            "type": "double",
            "description": "The blue component (between 0 and 1.0)",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "alpha": {
            "type": "double",
            "description": "The alpha (opacity) component (between 0 and 1.0)",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "method": "rgba_color",
          "static": "color",
          "suffix": "from_double",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def rgba_color_from_double(red, green, blue, alpha):"
          ],
          "csharp": [
            "public static Color Color.RGBAColor(double red, double green, double blue, double alpha);",
            "public static Color SplashKit.RGBAColor(double red, double green, double blue, double alpha);"
          ],
          "cpp": [
            "color rgba_color(double red, double green, double blue, double alpha)"
          ],
          "pascal": [
            "function RGBAColor(red: Double; green: Double; blue: Double; alpha: Double): Color"
          ]
        }
      },
      {
        "signature": "color rgba_color(int red,int green,int blue,int alpha);",
        "name": "rgba_color",
        "method_name": "rgba_color",
        "unique_global_name": "rgba_color",
        "unique_method_name": ".rgba_color",
        "suffix_name": null,
        "description": "Gets a color given its color components. Each of the components has\na value between 0 and 255.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "The color from its different component",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "red": {
            "type": "int",
            "description": "The red component (between 0 and 255)",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "green": {
            "type": "int",
            "description": "The green component (between 0 and 255)",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "blue": {
            "type": "int",
            "description": "The blue component (between 0 and 255)",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "alpha": {
            "type": "int",
            "description": "The alpha (opacity) component (between 0 and 255)",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "method": "rgba_color",
          "static": "color",
          "group": "color"
        },
        "signatures": {
          "python": [
            "def rgba_color(red, green, blue, alpha):"
          ],
          "csharp": [
            "public static Color Color.RGBAColor(int red, int green, int blue, int alpha);",
            "public static Color SplashKit.RGBAColor(int red, int green, int blue, int alpha);"
          ],
          "cpp": [
            "color rgba_color(int red, int green, int blue, int alpha)"
          ],
          "pascal": [
            "function RGBAColor(red: Integer; green: Integer; blue: Integer; alpha: Integer): Color"
          ]
        }
      },
      {
        "signature": "double saturation_of(color c);",
        "name": "saturation_of",
        "method_name": null,
        "unique_global_name": "saturation_of",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the saturation of the supplied color.",
        "brief": null,
        "return": {
          "type": "double",
          "description": "The saturation component of the color",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "c": {
            "type": "color",
            "description": "The color",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "python": [
            "def saturation_of(c):"
          ],
          "csharp": [
            "public static double SplashKit.SaturationOf(Color c);"
          ],
          "cpp": [
            "double saturation_of(color c)"
          ],
          "pascal": [
            "function SaturationOf(c: Color): Double"
          ]
        }
      },
      {
        "signature": "color string_to_color(string str);",
        "name": "string_to_color",
        "method_name": null,
        "unique_global_name": "string_to_color",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a color for the passed in color string.\nThe format must be #, followed by the hex values\nfor the red, green, blue, and alpha components\nof the color.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "The color represented in the string",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "str": {
            "type": "string",
            "description": "The hex string representing the color",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "python": [
            "def string_to_color(str):"
          ],
          "csharp": [
            "public static Color SplashKit.StringToColor(string str);"
          ],
          "cpp": [
            "color string_to_color(string str)"
          ],
          "pascal": [
            "function StringToColor(str: String): Color"
          ]
        }
      }
    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [
      {
        "name": "COLOR_ALICE_BLUE",
        "description": "A shorthand macro to the result of calling `color_alice_blue`.",
        "brief": null,
        "definition": "color_alice_blue()"
      },
      {
        "name": "COLOR_ANTIQUE_WHITE",
        "description": "A shorthand macro to the result of calling `color_antique_white`.",
        "brief": null,
        "definition": "color_antique_white()"
      },
      {
        "name": "COLOR_AQUA",
        "description": "A shorthand macro to the result of calling `color_aqua`.",
        "brief": null,
        "definition": "color_aqua()"
      },
      {
        "name": "COLOR_AQUAMARINE",
        "description": "A shorthand macro to the result of calling `color_aquamarine`.",
        "brief": null,
        "definition": "color_aquamarine()"
      },
      {
        "name": "COLOR_AZURE",
        "description": "A shorthand macro to the result of calling `color_azure`.",
        "brief": null,
        "definition": "color_azure()"
      },
      {
        "name": "COLOR_BEIGE",
        "description": "A shorthand macro to the result of calling `color_beige`.",
        "brief": null,
        "definition": "color_beige()"
      },
      {
        "name": "COLOR_BISQUE",
        "description": "A shorthand macro to the result of calling `color_bisque`.",
        "brief": null,
        "definition": "color_bisque()"
      },
      {
        "name": "COLOR_BLACK",
        "description": "A shorthand macro to the result of calling `color_black`.",
        "brief": null,
        "definition": "color_black()"
      },
      {
        "name": "COLOR_BLANCHED_ALMOND",
        "description": "A shorthand macro to the result of calling `color_blanched_almond`.",
        "brief": null,
        "definition": "color_blanched_almond()"
      },
      {
        "name": "COLOR_BLUE",
        "description": "A shorthand macro to the result of calling `color_blue`.",
        "brief": null,
        "definition": "color_blue()"
      },
      {
        "name": "COLOR_BLUE_VIOLET",
        "description": "A shorthand macro to the result of calling `color_blue_violet`.",
        "brief": null,
        "definition": "color_blue_violet()"
      },
      {
        "name": "COLOR_BRIGHT_GREEN",
        "description": "A shorthand macro to the result of calling `color_bright_green`.",
        "brief": null,
        "definition": "color_bright_green()"
      },
      {
        "name": "COLOR_BROWN",
        "description": "A shorthand macro to the result of calling `color_brown`.",
        "brief": null,
        "definition": "color_brown()"
      },
      {
        "name": "COLOR_BURLY_WOOD",
        "description": "A shorthand macro to the result of calling `color_burly_wood`.",
        "brief": null,
        "definition": "color_burly_wood()"
      },
      {
        "name": "COLOR_CADET_BLUE",
        "description": "A shorthand macro to the result of calling `color_cadet_blue`.",
        "brief": null,
        "definition": "color_cadet_blue()"
      },
      {
        "name": "COLOR_CHARTREUSE",
        "description": "A shorthand macro to the result of calling `color_chartreuse`.",
        "brief": null,
        "definition": "color_chartreuse()"
      },
      {
        "name": "COLOR_CHOCOLATE",
        "description": "A shorthand macro to the result of calling `color_chocolate`.",
        "brief": null,
        "definition": "color_chocolate()"
      },
      {
        "name": "COLOR_CORAL",
        "description": "A shorthand macro to the result of calling `color_coral`.",
        "brief": null,
        "definition": "color_coral()"
      },
      {
        "name": "COLOR_CORNFLOWER_BLUE",
        "description": "A shorthand macro to the result of calling `color_cornflower_blue`.",
        "brief": null,
        "definition": "color_cornflower_blue()"
      },
      {
        "name": "COLOR_CORNSILK",
        "description": "A shorthand macro to the result of calling `color_cornsilk`.",
        "brief": null,
        "definition": "color_cornsilk()"
      },
      {
        "name": "COLOR_CRIMSON",
        "description": "A shorthand macro to the result of calling `color_crimson`.",
        "brief": null,
        "definition": "color_crimson()"
      },
      {
        "name": "COLOR_CYAN",
        "description": "A shorthand macro to the result of calling `color_cyan`.",
        "brief": null,
        "definition": "color_cyan()"
      },
      {
        "name": "COLOR_DARK_BLUE",
        "description": "A shorthand macro to the result of calling `color_dark_blue`.",
        "brief": null,
        "definition": "color_dark_blue()"
      },
      {
        "name": "COLOR_DARK_CYAN",
        "description": "A shorthand macro to the result of calling `color_dark_cyan`.",
        "brief": null,
        "definition": "color_dark_cyan()"
      },
      {
        "name": "COLOR_DARK_GOLDENROD",
        "description": "A shorthand macro to the result of calling `color_dark_goldenrod`.",
        "brief": null,
        "definition": "color_dark_goldenrod()"
      },
      {
        "name": "COLOR_DARK_GRAY",
        "description": "A shorthand macro to the result of calling `color_dark_gray`.",
        "brief": null,
        "definition": "color_dark_gray()"
      },
      {
        "name": "COLOR_DARK_GREEN",
        "description": "A shorthand macro to the result of calling `color_dark_green`.",
        "brief": null,
        "definition": "color_dark_green()"
      },
      {
        "name": "COLOR_DARK_KHAKI",
        "description": "A shorthand macro to the result of calling `color_dark_khaki`.",
        "brief": null,
        "definition": "color_dark_khaki()"
      },
      {
        "name": "COLOR_DARK_MAGENTA",
        "description": "A shorthand macro to the result of calling `color_dark_magenta`.",
        "brief": null,
        "definition": "color_dark_magenta()"
      },
      {
        "name": "COLOR_DARK_OLIVE_GREEN",
        "description": "A shorthand macro to the result of calling `color_dark_olive_green`.",
        "brief": null,
        "definition": "color_dark_olive_green()"
      },
      {
        "name": "COLOR_DARK_ORANGE",
        "description": "A shorthand macro to the result of calling `color_dark_orange`.",
        "brief": null,
        "definition": "color_dark_orange()"
      },
      {
        "name": "COLOR_DARK_ORCHID",
        "description": "A shorthand macro to the result of calling `color_dark_orchid`.",
        "brief": null,
        "definition": "color_dark_orchid()"
      },
      {
        "name": "COLOR_DARK_RED",
        "description": "A shorthand macro to the result of calling `color_dark_red`.",
        "brief": null,
        "definition": "color_dark_red()"
      },
      {
        "name": "COLOR_DARK_SALMON",
        "description": "A shorthand macro to the result of calling `color_dark_salmon`.",
        "brief": null,
        "definition": "color_dark_salmon()"
      },
      {
        "name": "COLOR_DARK_SEA_GREEN",
        "description": "A shorthand macro to the result of calling `color_dark_sea_green`.",
        "brief": null,
        "definition": "color_dark_sea_green()"
      },
      {
        "name": "COLOR_DARK_SLATE_BLUE",
        "description": "A shorthand macro to the result of calling `color_dark_slate_blue`.",
        "brief": null,
        "definition": "color_dark_slate_blue()"
      },
      {
        "name": "COLOR_DARK_SLATE_GRAY",
        "description": "A shorthand macro to the result of calling `color_dark_slate_gray`.",
        "brief": null,
        "definition": "color_dark_slate_gray()"
      },
      {
        "name": "COLOR_DARK_TURQUOISE",
        "description": "A shorthand macro to the result of calling `color_dark_turquoise`.",
        "brief": null,
        "definition": "color_dark_turquoise()"
      },
      {
        "name": "COLOR_DARK_VIOLET",
        "description": "A shorthand macro to the result of calling `color_dark_violet`.",
        "brief": null,
        "definition": "color_dark_violet()"
      },
      {
        "name": "COLOR_DEEP_PINK",
        "description": "A shorthand macro to the result of calling `color_deep_pink`.",
        "brief": null,
        "definition": "color_deep_pink()"
      },
      {
        "name": "COLOR_DEEP_SKY_BLUE",
        "description": "A shorthand macro to the result of calling `color_deep_sky_blue`.",
        "brief": null,
        "definition": "color_deep_sky_blue()"
      },
      {
        "name": "COLOR_DIM_GRAY",
        "description": "A shorthand macro to the result of calling `color_dim_gray`.",
        "brief": null,
        "definition": "color_dim_gray()"
      },
      {
        "name": "COLOR_DODGER_BLUE",
        "description": "A shorthand macro to the result of calling `color_dodger_blue`.",
        "brief": null,
        "definition": "color_dodger_blue()"
      },
      {
        "name": "COLOR_FIREBRICK",
        "description": "A shorthand macro to the result of calling `color_firebrick`.",
        "brief": null,
        "definition": "color_firebrick()"
      },
      {
        "name": "COLOR_FLORAL_WHITE",
        "description": "A shorthand macro to the result of calling `color_floral_white`.",
        "brief": null,
        "definition": "color_floral_white()"
      },
      {
        "name": "COLOR_FOREST_GREEN",
        "description": "A shorthand macro to the result of calling `color_forest_green`.",
        "brief": null,
        "definition": "color_forest_green()"
      },
      {
        "name": "COLOR_FUCHSIA",
        "description": "A shorthand macro to the result of calling `color_fuchsia`.",
        "brief": null,
        "definition": "color_fuchsia()"
      },
      {
        "name": "COLOR_GAINSBORO",
        "description": "A shorthand macro to the result of calling `color_gainsboro`.",
        "brief": null,
        "definition": "color_gainsboro()"
      },
      {
        "name": "COLOR_GHOST_WHITE",
        "description": "A shorthand macro to the result of calling `color_ghost_white`.",
        "brief": null,
        "definition": "color_ghost_white()"
      },
      {
        "name": "COLOR_GOLD",
        "description": "A shorthand macro to the result of calling `color_gold`.",
        "brief": null,
        "definition": "color_gold()"
      },
      {
        "name": "COLOR_GOLDENROD",
        "description": "A shorthand macro to the result of calling `color_goldenrod`.",
        "brief": null,
        "definition": "color_goldenrod()"
      },
      {
        "name": "COLOR_GRAY",
        "description": "A shorthand macro to the result of calling `color_gray`.",
        "brief": null,
        "definition": "color_gray()"
      },
      {
        "name": "COLOR_GRAY",
        "description": "A shorthand macro to the result of calling `color_gray`.",
        "brief": null,
        "definition": "color_gray()"
      },
      {
        "name": "COLOR_GREEN",
        "description": "A shorthand macro to the result of calling `color_green`.",
        "brief": null,
        "definition": "color_green()"
      },
      {
        "name": "COLOR_GREEN_YELLOW",
        "description": "A shorthand macro to the result of calling `color_green_yellow`.",
        "brief": null,
        "definition": "color_green_yellow()"
      },
      {
        "name": "COLOR_HONEYDEW",
        "description": "A shorthand macro to the result of calling `color_honeydew`.",
        "brief": null,
        "definition": "color_honeydew()"
      },
      {
        "name": "COLOR_HOT_PINK",
        "description": "A shorthand macro to the result of calling `color_hot_pink`.",
        "brief": null,
        "definition": "color_hot_pink()"
      },
      {
        "name": "COLOR_INDIAN_RED",
        "description": "A shorthand macro to the result of calling `color_indian_red`.",
        "brief": null,
        "definition": "color_indian_red()"
      },
      {
        "name": "COLOR_INDIGO",
        "description": "A shorthand macro to the result of calling `color_indigo`.",
        "brief": null,
        "definition": "color_indigo()"
      },
      {
        "name": "COLOR_IVORY",
        "description": "A shorthand macro to the result of calling `color_ivory`.",
        "brief": null,
        "definition": "color_ivory()"
      },
      {
        "name": "COLOR_KHAKI",
        "description": "A shorthand macro to the result of calling `color_khaki`.",
        "brief": null,
        "definition": "color_khaki()"
      },
      {
        "name": "COLOR_LAVENDER",
        "description": "A shorthand macro to the result of calling `color_lavender`.",
        "brief": null,
        "definition": "color_lavender()"
      },
      {
        "name": "COLOR_LAVENDER_BLUSH",
        "description": "A shorthand macro to the result of calling `color_lavender_blush`.",
        "brief": null,
        "definition": "color_lavender_blush()"
      },
      {
        "name": "COLOR_LAWN_GREEN",
        "description": "A shorthand macro to the result of calling `color_lawn_green`.",
        "brief": null,
        "definition": "color_lawn_green()"
      },
      {
        "name": "COLOR_LEMON_CHIFFON",
        "description": "A shorthand macro to the result of calling `color_lemon_chiffon`.",
        "brief": null,
        "definition": "color_lemon_chiffon()"
      },
      {
        "name": "COLOR_LIGHT_BLUE",
        "description": "A shorthand macro to the result of calling `color_light_blue`.",
        "brief": null,
        "definition": "color_light_blue()"
      },
      {
        "name": "COLOR_LIGHT_CORAL",
        "description": "A shorthand macro to the result of calling `color_light_coral`.",
        "brief": null,
        "definition": "color_light_coral()"
      },
      {
        "name": "COLOR_LIGHT_CYAN",
        "description": "A shorthand macro to the result of calling `color_light_cyan`.",
        "brief": null,
        "definition": "color_light_cyan()"
      },
      {
        "name": "COLOR_LIGHT_GOLDENROD_YELLOW",
        "description": "A shorthand macro to the result of calling `color_light_goldenrod_yellow`.",
        "brief": null,
        "definition": "color_light_goldenrod_yellow()"
      },
      {
        "name": "COLOR_LIGHT_GRAY",
        "description": "A shorthand macro to the result of calling `color_light_gray`.",
        "brief": null,
        "definition": "color_light_gray()"
      },
      {
        "name": "COLOR_LIGHT_GRAY",
        "description": "A shorthand macro to the result of calling `color_light_gray`.",
        "brief": null,
        "definition": "color_light_gray()"
      },
      {
        "name": "COLOR_LIGHT_GREEN",
        "description": "A shorthand macro to the result of calling `color_light_green`.",
        "brief": null,
        "definition": "color_light_green()"
      },
      {
        "name": "COLOR_LIGHT_PINK",
        "description": "A shorthand macro to the result of calling `color_light_pink`.",
        "brief": null,
        "definition": "color_light_pink()"
      },
      {
        "name": "COLOR_LIGHT_SALMON",
        "description": "A shorthand macro to the result of calling `color_light_salmon`.",
        "brief": null,
        "definition": "color_light_salmon()"
      },
      {
        "name": "COLOR_LIGHT_SEA_GREEN",
        "description": "A shorthand macro to the result of calling `color_light_sea_green`.",
        "brief": null,
        "definition": "color_light_sea_green()"
      },
      {
        "name": "COLOR_LIGHT_SKY_BLUE",
        "description": "A shorthand macro to the result of calling `color_light_sky_blue`.",
        "brief": null,
        "definition": "color_light_sky_blue()"
      },
      {
        "name": "COLOR_LIGHT_SLATE_GRAY",
        "description": "A shorthand macro to the result of calling `color_light_slate_gray`.",
        "brief": null,
        "definition": "color_light_slate_gray()"
      },
      {
        "name": "COLOR_LIGHT_STEEL_BLUE",
        "description": "A shorthand macro to the result of calling `color_light_steel_blue`.",
        "brief": null,
        "definition": "color_light_steel_blue()"
      },
      {
        "name": "COLOR_LIGHT_YELLOW",
        "description": "A shorthand macro to the result of calling `color_light_yellow`.",
        "brief": null,
        "definition": "color_light_yellow()"
      },
      {
        "name": "COLOR_LIME",
        "description": "A shorthand macro to the result of calling `color_lime`.",
        "brief": null,
        "definition": "color_lime()"
      },
      {
        "name": "COLOR_LIME_GREEN",
        "description": "A shorthand macro to the result of calling `color_lime_green`.",
        "brief": null,
        "definition": "color_lime_green()"
      },
      {
        "name": "COLOR_LINEN",
        "description": "A shorthand macro to the result of calling `color_linen`.",
        "brief": null,
        "definition": "color_linen()"
      },
      {
        "name": "COLOR_MAGENTA",
        "description": "A shorthand macro to the result of calling `color_magenta`.",
        "brief": null,
        "definition": "color_magenta()"
      },
      {
        "name": "COLOR_MAROON",
        "description": "A shorthand macro to the result of calling `color_maroon`.",
        "brief": null,
        "definition": "color_maroon()"
      },
      {
        "name": "COLOR_MEDIUM_AQUAMARINE",
        "description": "A shorthand macro to the result of calling `color_medium_aquamarine`.",
        "brief": null,
        "definition": "color_medium_aquamarine()"
      },
      {
        "name": "COLOR_MEDIUM_BLUE",
        "description": "A shorthand macro to the result of calling `color_medium_blue`.",
        "brief": null,
        "definition": "color_medium_blue()"
      },
      {
        "name": "COLOR_MEDIUM_ORCHID",
        "description": "A shorthand macro to the result of calling `color_medium_orchid`.",
        "brief": null,
        "definition": "color_medium_orchid()"
      },
      {
        "name": "COLOR_MEDIUM_PURPLE",
        "description": "A shorthand macro to the result of calling `color_medium_purple`.",
        "brief": null,
        "definition": "color_medium_purple()"
      },
      {
        "name": "COLOR_MEDIUM_SEA_GREEN",
        "description": "A shorthand macro to the result of calling `color_medium_sea_green`.",
        "brief": null,
        "definition": "color_medium_sea_green()"
      },
      {
        "name": "COLOR_MEDIUM_SLATE_BLUE",
        "description": "A shorthand macro to the result of calling `color_medium_slate_blue`.",
        "brief": null,
        "definition": "color_medium_slate_blue()"
      },
      {
        "name": "COLOR_MEDIUM_SPRING_GREEN",
        "description": "A shorthand macro to the result of calling `color_medium_spring_green`.",
        "brief": null,
        "definition": "color_medium_spring_green()"
      },
      {
        "name": "COLOR_MEDIUM_TURQUOISE",
        "description": "A shorthand macro to the result of calling `color_medium_turquoise`.",
        "brief": null,
        "definition": "color_medium_turquoise()"
      },
      {
        "name": "COLOR_MEDIUM_VIOLET_RED",
        "description": "A shorthand macro to the result of calling `color_medium_violet_red`.",
        "brief": null,
        "definition": "color_medium_violet_red()"
      },
      {
        "name": "COLOR_MIDNIGHT_BLUE",
        "description": "A shorthand macro to the result of calling `color_midnight_blue`.",
        "brief": null,
        "definition": "color_midnight_blue()"
      },
      {
        "name": "COLOR_MINT_CREAM",
        "description": "A shorthand macro to the result of calling `color_mint_cream`.",
        "brief": null,
        "definition": "color_mint_cream()"
      },
      {
        "name": "COLOR_MISTY_ROSE",
        "description": "A shorthand macro to the result of calling `color_misty_rose`.",
        "brief": null,
        "definition": "color_misty_rose()"
      },
      {
        "name": "COLOR_MOCCASIN",
        "description": "A shorthand macro to the result of calling `color_moccasin`.",
        "brief": null,
        "definition": "color_moccasin()"
      },
      {
        "name": "COLOR_NAVAJO_WHITE",
        "description": "A shorthand macro to the result of calling `color_navajo_white`.",
        "brief": null,
        "definition": "color_navajo_white()"
      },
      {
        "name": "COLOR_NAVY",
        "description": "A shorthand macro to the result of calling `color_navy`.",
        "brief": null,
        "definition": "color_navy()"
      },
      {
        "name": "COLOR_OLD_LACE",
        "description": "A shorthand macro to the result of calling `color_old_lace`.",
        "brief": null,
        "definition": "color_old_lace()"
      },
      {
        "name": "COLOR_OLIVE",
        "description": "A shorthand macro to the result of calling `color_olive`.",
        "brief": null,
        "definition": "color_olive()"
      },
      {
        "name": "COLOR_OLIVE_DRAB",
        "description": "A shorthand macro to the result of calling `color_olive_drab`.",
        "brief": null,
        "definition": "color_olive_drab()"
      },
      {
        "name": "COLOR_ORANGE",
        "description": "A shorthand macro to the result of calling `color_orange`.",
        "brief": null,
        "definition": "color_orange()"
      },
      {
        "name": "COLOR_ORANGE_RED",
        "description": "A shorthand macro to the result of calling `color_orange_red`.",
        "brief": null,
        "definition": "color_orange_red()"
      },
      {
        "name": "COLOR_ORCHID",
        "description": "A shorthand macro to the result of calling `color_orchid`.",
        "brief": null,
        "definition": "color_orchid()"
      },
      {
        "name": "COLOR_PALE_GOLDENROD",
        "description": "A shorthand macro to the result of calling `color_pale_goldenrod`.",
        "brief": null,
        "definition": "color_pale_goldenrod()"
      },
      {
        "name": "COLOR_PALE_GREEN",
        "description": "A shorthand macro to the result of calling `color_pale_green`.",
        "brief": null,
        "definition": "color_pale_green()"
      },
      {
        "name": "COLOR_PALE_TURQUOISE",
        "description": "A shorthand macro to the result of calling `color_pale_turquoise`.",
        "brief": null,
        "definition": "color_pale_turquoise()"
      },
      {
        "name": "COLOR_PALE_VIOLET_RED",
        "description": "A shorthand macro to the result of calling `color_pale_violet_red`.",
        "brief": null,
        "definition": "color_pale_violet_red()"
      },
      {
        "name": "COLOR_PAPAYA_WHIP",
        "description": "A shorthand macro to the result of calling `color_papaya_whip`.",
        "brief": null,
        "definition": "color_papaya_whip()"
      },
      {
        "name": "COLOR_PEACH_PUFF",
        "description": "A shorthand macro to the result of calling `color_peach_puff`.",
        "brief": null,
        "definition": "color_peach_puff()"
      },
      {
        "name": "COLOR_PERU",
        "description": "A shorthand macro to the result of calling `color_peru`.",
        "brief": null,
        "definition": "color_peru()"
      },
      {
        "name": "COLOR_PINK",
        "description": "A shorthand macro to the result of calling `color_pink`.",
        "brief": null,
        "definition": "color_pink()"
      },
      {
        "name": "COLOR_PLUM",
        "description": "A shorthand macro to the result of calling `color_plum`.",
        "brief": null,
        "definition": "color_plum()"
      },
      {
        "name": "COLOR_POWDER_BLUE",
        "description": "A shorthand macro to the result of calling `color_powder_blue`.",
        "brief": null,
        "definition": "color_powder_blue()"
      },
      {
        "name": "COLOR_PURPLE",
        "description": "A shorthand macro to the result of calling `color_purple`.",
        "brief": null,
        "definition": "color_purple()"
      },
      {
        "name": "COLOR_RED",
        "description": "A shorthand macro to the result of calling `color_red`.",
        "brief": null,
        "definition": "color_red()"
      },
      {
        "name": "COLOR_ROSY_BROWN",
        "description": "A shorthand macro to the result of calling `color_rosy_brown`.",
        "brief": null,
        "definition": "color_rosy_brown()"
      },
      {
        "name": "COLOR_ROYAL_BLUE",
        "description": "A shorthand macro to the result of calling `color_royal_blue`.",
        "brief": null,
        "definition": "color_royal_blue()"
      },
      {
        "name": "COLOR_SADDLE_BROWN",
        "description": "A shorthand macro to the result of calling `color_saddle_brown`.",
        "brief": null,
        "definition": "color_saddle_brown()"
      },
      {
        "name": "COLOR_SALMON",
        "description": "A shorthand macro to the result of calling `color_salmon`.",
        "brief": null,
        "definition": "color_salmon()"
      },
      {
        "name": "COLOR_SANDY_BROWN",
        "description": "A shorthand macro to the result of calling `color_sandy_brown`.",
        "brief": null,
        "definition": "color_sandy_brown()"
      },
      {
        "name": "COLOR_SEA_GREEN",
        "description": "A shorthand macro to the result of calling `color_sea_green`.",
        "brief": null,
        "definition": "color_sea_green()"
      },
      {
        "name": "COLOR_SEA_SHELL",
        "description": "A shorthand macro to the result of calling `color_sea_shell`.",
        "brief": null,
        "definition": "color_sea_shell()"
      },
      {
        "name": "COLOR_SIENNA",
        "description": "A shorthand macro to the result of calling `color_sienna`.",
        "brief": null,
        "definition": "color_sienna()"
      },
      {
        "name": "COLOR_SILVER",
        "description": "A shorthand macro to the result of calling `color_silver`.",
        "brief": null,
        "definition": "color_silver()"
      },
      {
        "name": "COLOR_SKY_BLUE",
        "description": "A shorthand macro to the result of calling `color_sky_blue`.",
        "brief": null,
        "definition": "color_sky_blue()"
      },
      {
        "name": "COLOR_SLATE_BLUE",
        "description": "A shorthand macro to the result of calling `color_slate_blue`.",
        "brief": null,
        "definition": "color_slate_blue()"
      },
      {
        "name": "COLOR_SLATE_GRAY",
        "description": "A shorthand macro to the result of calling `color_slate_gray`.",
        "brief": null,
        "definition": "color_slate_gray()"
      },
      {
        "name": "COLOR_SNOW",
        "description": "A shorthand macro to the result of calling `color_snow`.",
        "brief": null,
        "definition": "color_snow()"
      },
      {
        "name": "COLOR_SPRING_GREEN",
        "description": "A shorthand macro to the result of calling `color_spring_green`.",
        "brief": null,
        "definition": "color_spring_green()"
      },
      {
        "name": "COLOR_STEEL_BLUE",
        "description": "A shorthand macro to the result of calling `color_steel_blue`.",
        "brief": null,
        "definition": "color_steel_blue()"
      },
      {
        "name": "COLOR_SWINBURNE_RED",
        "description": "A shorthand macro to the result of calling `color_swinburne_red`.",
        "brief": null,
        "definition": "color_swinburne_red()"
      },
      {
        "name": "COLOR_TAN",
        "description": "A shorthand macro to the result of calling `color_tan`.",
        "brief": null,
        "definition": "color_tan()"
      },
      {
        "name": "COLOR_TEAL",
        "description": "A shorthand macro to the result of calling `color_teal`.",
        "brief": null,
        "definition": "color_teal()"
      },
      {
        "name": "COLOR_THISTLE",
        "description": "A shorthand macro to the result of calling `color_thistle`.",
        "brief": null,
        "definition": "color_thistle()"
      },
      {
        "name": "COLOR_TOMATO",
        "description": "A shorthand macro to the result of calling `color_tomato`.",
        "brief": null,
        "definition": "color_tomato()"
      },
      {
        "name": "COLOR_TRANSPARENT",
        "description": "A shorthand macro to the result of calling `color_transparent`.",
        "brief": null,
        "definition": "color_transparent()"
      },
      {
        "name": "COLOR_TURQUOISE",
        "description": "A shorthand macro to the result of calling `color_turquoise`.",
        "brief": null,
        "definition": "color_turquoise()"
      },
      {
        "name": "COLOR_VIOLET",
        "description": "A shorthand macro to the result of calling `color_violet`.",
        "brief": null,
        "definition": "color_violet()"
      },
      {
        "name": "COLOR_WHEAT",
        "description": "A shorthand macro to the result of calling `color_wheat`.",
        "brief": null,
        "definition": "color_wheat()"
      },
      {
        "name": "COLOR_WHITE",
        "description": "A shorthand macro to the result of calling `color_white`.",
        "brief": null,
        "definition": "color_white()"
      },
      {
        "name": "COLOR_WHITE_SMOKE",
        "description": "A shorthand macro to the result of calling `color_white_smoke`.",
        "brief": null,
        "definition": "color_white_smoke()"
      },
      {
        "name": "COLOR_YELLOW",
        "description": "A shorthand macro to the result of calling `color_yellow`.",
        "brief": null,
        "definition": "color_yellow()"
      },
      {
        "name": "COLOR_YELLOW_GREEN",
        "description": "A shorthand macro to the result of calling `color_yellow_green`.",
        "brief": null,
        "definition": "color_yellow_green()"
      }
    ]
  },
  "geometry": {
    "brief": "SplashKit's geometry functions assist with geometry-related computations.",
    "description": "",
    "functions": [
      {
        "signature": "point_2d center_point(const circle &c);",
        "name": "center_point",
        "method_name": null,
        "unique_global_name": "center_point",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the center point of the circle.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "The center point of the circle",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "c": {
            "type": "circle",
            "description": "The circle to get the center point",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def center_point(c):"
          ],
          "csharp": [
            "public static Point2D SplashKit.CenterPoint(Circle c);"
          ],
          "cpp": [
            "point_2d center_point(const circle &c)"
          ],
          "pascal": [
            "function CenterPoint(const c: Circle): Point2D"
          ]
        }
      },
      {
        "signature": "circle circle_at(const point_2d &pt,double radius);",
        "name": "circle_at",
        "method_name": null,
        "unique_global_name": "circle_at",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a circle at the indicated point and radius.",
        "brief": null,
        "return": {
          "type": "circle",
          "description": "A circle at the indicatd point and radius",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "The location of the center of the circle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "radius": {
            "type": "double",
            "description": "The radius of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def circle_at(pt, radius):"
          ],
          "csharp": [
            "public static Circle SplashKit.CircleAt(Point2D pt, double radius);"
          ],
          "cpp": [
            "circle circle_at(const point_2d &pt, double radius)"
          ],
          "pascal": [
            "function CircleAt(const pt: Point2D; radius: Double): Circle"
          ]
        }
      },
      {
        "signature": "circle circle_at(double x,double y,double radius);",
        "name": "circle_at",
        "method_name": null,
        "unique_global_name": "circle_at_from_points",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a circle at the indicated point and radius.",
        "brief": null,
        "return": {
          "type": "circle",
          "description": "A circle at the indicatd point and radius",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "x": {
            "type": "double",
            "description": "The x location of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "radius": {
            "type": "double",
            "description": "The radius of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "from_points",
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def circle_at_from_points(x, y, radius):"
          ],
          "csharp": [
            "public static Circle SplashKit.CircleAt(double x, double y, double radius);"
          ],
          "cpp": [
            "circle circle_at(double x, double y, double radius)"
          ],
          "pascal": [
            "function CircleAt(x: Double; y: Double; radius: Double): Circle"
          ]
        }
      },
      {
        "signature": "float circle_radius(const circle c);",
        "name": "circle_radius",
        "method_name": null,
        "unique_global_name": "circle_radius",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the circle radius.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The radius of the circle",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "c": {
            "type": "circle",
            "description": "The circle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def circle_radius(c):"
          ],
          "csharp": [
            "public static float SplashKit.CircleRadius(Circle c);"
          ],
          "cpp": [
            "float circle_radius(const circle c)"
          ],
          "pascal": [
            "function CircleRadius(c: Circle): Single"
          ]
        }
      },
      {
        "signature": "bool circle_triangle_intersect(const circle &c,const triangle &tri);",
        "name": "circle_triangle_intersect",
        "method_name": null,
        "unique_global_name": "circle_triangle_intersect",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Detects if a circle intersects with a triangle.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the circle and triangle intersect",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "c": {
            "type": "circle",
            "description": "The circle to test",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "tri": {
            "type": "triangle",
            "description": "The triangle to test",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def circle_triangle_intersect(c, tri):"
          ],
          "csharp": [
            "public static bool SplashKit.CircleTriangleIntersect(Circle c, Triangle tri);"
          ],
          "cpp": [
            "bool circle_triangle_intersect(const circle &c, const triangle &tri)"
          ],
          "pascal": [
            "function CircleTriangleIntersect(const c: Circle; const tri: Triangle): Boolean"
          ]
        }
      },
      {
        "signature": "bool circle_triangle_intersect(const circle &c,const triangle &tri,point_2d &p);",
        "name": "circle_triangle_intersect",
        "method_name": null,
        "unique_global_name": "circle_triangle_intersect_get_closest_point",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Detects if a circle intersects with a triangle. The closest point on the\ntriangle to the circle is assigned to p, even if the circle and triangle do not\nintersect. If the centre of the circle is inside the triangle,\nthe point assigned to p is the centre of the circle.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the circle and triangle intersect",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "c": {
            "type": "circle",
            "description": "The circle to test",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "tri": {
            "type": "triangle",
            "description": "The triangle to test",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "p": {
            "type": "point_2d",
            "description": "The point to set to the closest point on the triangle to the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "get_closest_point",
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def circle_triangle_intersect_get_closest_point(c, tri, p):"
          ],
          "csharp": [
            "public static bool SplashKit.CircleTriangleIntersect(Circle c, Triangle tri, ref Point2D p);"
          ],
          "cpp": [
            "bool circle_triangle_intersect(const circle &c, const triangle &tri, point_2d &p)"
          ],
          "pascal": [
            "function CircleTriangleIntersect(const c: Circle; const tri: Triangle; var p: Point2D): Boolean"
          ]
        }
      },
      {
        "signature": "float circle_x(const circle &c);",
        "name": "circle_x",
        "method_name": null,
        "unique_global_name": "circle_x",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the circle x value.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The x location of the center of the circle",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "c": {
            "type": "circle",
            "description": "The circle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def circle_x(c):"
          ],
          "csharp": [
            "public static float SplashKit.CircleX(Circle c);"
          ],
          "cpp": [
            "float circle_x(const circle &c)"
          ],
          "pascal": [
            "function CircleX(const c: Circle): Single"
          ]
        }
      },
      {
        "signature": "float circle_y(const circle &c);",
        "name": "circle_y",
        "method_name": null,
        "unique_global_name": "circle_y",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the circle y value.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The y location of the center of the circle",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "c": {
            "type": "circle",
            "description": "The circle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def circle_y(c):"
          ],
          "csharp": [
            "public static float SplashKit.CircleY(Circle c);"
          ],
          "cpp": [
            "float circle_y(const circle &c)"
          ],
          "pascal": [
            "function CircleY(const c: Circle): Single"
          ]
        }
      },
      {
        "signature": "bool circles_intersect(circle c1,circle c2);",
        "name": "circles_intersect",
        "method_name": null,
        "unique_global_name": "circles_intersect",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Detects if two circles intersect. This can be used to detect collisions between\nbounding circles.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the two circles do intersect",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "c1": {
            "type": "circle",
            "description": "The circle to test if intersects with c2",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "c2": {
            "type": "circle",
            "description": "The circle to test if intersects with c1",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def circles_intersect(c1, c2):"
          ],
          "csharp": [
            "public static bool SplashKit.CirclesIntersect(Circle c1, Circle c2);"
          ],
          "cpp": [
            "bool circles_intersect(circle c1, circle c2)"
          ],
          "pascal": [
            "function CirclesIntersect(c1: Circle; c2: Circle): Boolean"
          ]
        }
      },
      {
        "signature": "bool circles_intersect(double c1_x,double c1_y,double c1_radius,double c2_x,double c2_y,double c2_radius);",
        "name": "circles_intersect",
        "method_name": null,
        "unique_global_name": "circles_intersect_using_values",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Detects if two circles intersect. This can be used to detect collisions between\nbounding circles. The circle data is passed in as individual values.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "true when the two circles intersect",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "c1_x": {
            "type": "double",
            "description": "the x location of the first circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "c1_y": {
            "type": "double",
            "description": "the y location of the first circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "c1_radius": {
            "type": "double",
            "description": "the radius of the first circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "c2_x": {
            "type": "double",
            "description": "the x location of the second circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "c2_y": {
            "type": "double",
            "description": "the y location of the second circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "c2_radius": {
            "type": "double",
            "description": "the radius of the second circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "using_values",
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def circles_intersect_using_values(c1_x, c1_y, c1_radius, c2_x, c2_y, c2_radius):"
          ],
          "csharp": [
            "public static bool SplashKit.CirclesIntersect(double c1X, double c1Y, double c1Radius, double c2X, double c2Y, double c2Radius);"
          ],
          "cpp": [
            "bool circles_intersect(double c1_x, double c1_y, double c1_radius, double c2_x, double c2_y, double c2_radius)"
          ],
          "pascal": [
            "function CirclesIntersect(c1X: Double; c1Y: Double; c1Radius: Double; c2X: Double; c2Y: Double; c2Radius: Double): Boolean"
          ]
        }
      },
      {
        "signature": "point_2d closest_point_on_circle(const point_2d &from_pt,const circle &c);",
        "name": "closest_point_on_circle",
        "method_name": null,
        "unique_global_name": "closest_point_on_circle",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The closest point on the circle to the given point.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "The point on c that is closest to the from point",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "from_pt": {
            "type": "point_2d",
            "description": "The point to test from",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "c": {
            "type": "circle",
            "description": "The circle you want to get a point on its circumference",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def closest_point_on_circle(from_pt, c):"
          ],
          "csharp": [
            "public static Point2D SplashKit.ClosestPointOnCircle(Point2D fromPt, Circle c);"
          ],
          "cpp": [
            "point_2d closest_point_on_circle(const point_2d &from_pt, const circle &c)"
          ],
          "pascal": [
            "function ClosestPointOnCircle(const fromPt: Point2D; const c: Circle): Point2D"
          ]
        }
      },
      {
        "signature": "point_2d closest_point_on_line_from_circle(const circle &c,const line &l);",
        "name": "closest_point_on_line_from_circle",
        "method_name": null,
        "unique_global_name": "closest_point_on_line_from_circle",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the closest point on a line to a circle.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "The point that is closest to `c` on `l`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "c": {
            "type": "circle",
            "description": "The circle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "l": {
            "type": "line",
            "description": "The line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def closest_point_on_line_from_circle(c, l):"
          ],
          "csharp": [
            "public static Point2D SplashKit.ClosestPointOnLineFromCircle(Circle c, Line l);"
          ],
          "cpp": [
            "point_2d closest_point_on_line_from_circle(const circle &c, const line &l)"
          ],
          "pascal": [
            "function ClosestPointOnLineFromCircle(const c: Circle; const l: Line): Point2D"
          ]
        }
      },
      {
        "signature": "point_2d closest_point_on_rect_from_circle(const circle &c,const rectangle &rect);",
        "name": "closest_point_on_rect_from_circle",
        "method_name": null,
        "unique_global_name": "closest_point_on_rect_from_circle",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the closest point on a rectangle to a circle.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "The point that is closest to `c` on `rect`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "c": {
            "type": "circle",
            "description": "The circle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def closest_point_on_rect_from_circle(c, rect):"
          ],
          "csharp": [
            "public static Point2D SplashKit.ClosestPointOnRectFromCircle(Circle c, Rectangle rect);"
          ],
          "cpp": [
            "point_2d closest_point_on_rect_from_circle(const circle &c, const rectangle &rect)"
          ],
          "pascal": [
            "function ClosestPointOnRectFromCircle(const c: Circle; const rect: Rectangle): Point2D"
          ]
        }
      },
      {
        "signature": "point_2d closest_point_on_triangle_from_circle(const circle &c,const triangle &tri);",
        "name": "closest_point_on_triangle_from_circle",
        "method_name": null,
        "unique_global_name": "closest_point_on_triangle_from_circle",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Calculates the closest point on a triangle to a circle. If the circle and\ntriangle do not intersect, the closest point on the triangle to the circle\nis returned. If the circle and triangle do intersect, the center of the\ncircle is returned.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "The closest point on the triangle to the circle",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "c": {
            "type": "circle",
            "description": "The circle to test",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "tri": {
            "type": "triangle",
            "description": "The triangle to test",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def closest_point_on_triangle_from_circle(c, tri):"
          ],
          "csharp": [
            "public static Point2D SplashKit.ClosestPointOnTriangleFromCircle(Circle c, Triangle tri);"
          ],
          "cpp": [
            "point_2d closest_point_on_triangle_from_circle(const circle &c, const triangle &tri)"
          ],
          "pascal": [
            "function ClosestPointOnTriangleFromCircle(const c: Circle; const tri: Triangle): Point2D"
          ]
        }
      },
      {
        "signature": "point_2d distant_point_on_circle(const point_2d &pt,const circle &c);",
        "name": "distant_point_on_circle",
        "method_name": null,
        "unique_global_name": "distant_point_on_circle",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The furthest point on the circle to the given point.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "The point on c that is furthest from `pt`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "The point to test from",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "c": {
            "type": "circle",
            "description": "The circle you want to get a point on its circumference",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def distant_point_on_circle(pt, c):"
          ],
          "csharp": [
            "public static Point2D SplashKit.DistantPointOnCircle(Point2D pt, Circle c);"
          ],
          "cpp": [
            "point_2d distant_point_on_circle(const point_2d &pt, const circle &c)"
          ],
          "pascal": [
            "function DistantPointOnCircle(const pt: Point2D; const c: Circle): Point2D"
          ]
        }
      },
      {
        "signature": "bool distant_point_on_circle_heading(const point_2d &pt,const circle &c,const vector_2d &heading,point_2d &opposite_pt);",
        "name": "distant_point_on_circle_heading",
        "method_name": null,
        "unique_global_name": "distant_point_on_circle_heading",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Determines the opposite side of a circle given a collision point and a\nheading.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True when the `opposite_pt` is calculated, false when\nthe point would not collide with the circle when\nheading as indicated.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "The point from which the test is being made",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "c": {
            "type": "circle",
            "description": "The circle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "heading": {
            "type": "vector_2d",
            "description": "The direction the point is heading",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opposite_pt": {
            "type": "point_2d",
            "description": "After the call, this is set to the point on the\nopposite side of the circle from pt when it is\nheading in the given direction.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def distant_point_on_circle_heading(pt, c, heading, opposite_pt):"
          ],
          "csharp": [
            "public static bool SplashKit.DistantPointOnCircleHeading(Point2D pt, Circle c, Vector2D heading, ref Point2D oppositePt);"
          ],
          "cpp": [
            "bool distant_point_on_circle_heading(const point_2d &pt, const circle &c, const vector_2d &heading, point_2d &opposite_pt)"
          ],
          "pascal": [
            "function DistantPointOnCircleHeading(const pt: Point2D; const c: Circle; const heading: Vector2D; var oppositePt: Point2D): Boolean"
          ]
        }
      },
      {
        "signature": "float ray_circle_intersect_distance(const point_2d &ray_origin,const vector_2d &ray_heading,const circle &c);",
        "name": "ray_circle_intersect_distance",
        "method_name": null,
        "unique_global_name": "ray_circle_intersect_distance",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Calculates the distance from a ray cast from a point to a given circle.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "-1 if the ray does not hit the circle, otherwise the\ndistance from the origin to the circle bounds.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "ray_origin": {
            "type": "point_2d",
            "description": "The origin of the ray",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "ray_heading": {
            "type": "vector_2d",
            "description": "The direction of the ray",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "c": {
            "type": "circle",
            "description": "The circle being tested",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def ray_circle_intersect_distance(ray_origin, ray_heading, c):"
          ],
          "csharp": [
            "public static float SplashKit.RayCircleIntersectDistance(Point2D rayOrigin, Vector2D rayHeading, Circle c);"
          ],
          "cpp": [
            "float ray_circle_intersect_distance(const point_2d &ray_origin, const vector_2d &ray_heading, const circle &c)"
          ],
          "pascal": [
            "function RayCircleIntersectDistance(const rayOrigin: Point2D; const rayHeading: Vector2D; const c: Circle): Single"
          ]
        }
      },
      {
        "signature": "bool tangent_points(const point_2d &from_pt,const circle &c,point_2d &p1,point_2d &p2);",
        "name": "tangent_points",
        "method_name": null,
        "unique_global_name": "tangent_points",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the two tangent points on the circle given the indicated point.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if `from_pt` is outside of the circle, and tangent\npoints are calculated",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "from_pt": {
            "type": "point_2d",
            "description": "The source point",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "c": {
            "type": "circle",
            "description": "The circle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "p1": {
            "type": "point_2d",
            "description": "If this returns true, then `p1` contains one of the points",
            "is_pointer": false,
            "is_const": false,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "p2": {
            "type": "point_2d",
            "description": "If this returns true, then `p2` contains one of the points",
            "is_pointer": false,
            "is_const": false,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def tangent_points(from_pt, c, p1, p2):"
          ],
          "csharp": [
            "public static bool SplashKit.TangentPoints(Point2D fromPt, Circle c, ref Point2D p1, ref Point2D p2);"
          ],
          "cpp": [
            "bool tangent_points(const point_2d &from_pt, const circle &c, point_2d &p1, point_2d &p2)"
          ],
          "pascal": [
            "function TangentPoints(const fromPt: Point2D; const c: Circle; var p1: Point2D; var p2: Point2D): Boolean"
          ]
        }
      },
      {
        "signature": "void widest_points(const circle &c,const vector_2d &along,point_2d &pt1,point_2d &pt2);",
        "name": "widest_points",
        "method_name": null,
        "unique_global_name": "widest_points",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Calculates the two points on a circles radius that lie along the given\nvector. This represents the points on the circle when the vector is\nplaced at the circle's center point.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "c": {
            "type": "circle",
            "description": "The circle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "along": {
            "type": "vector_2d",
            "description": "The vector representing the line along which the points lie.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt1": {
            "type": "point_2d",
            "description": "After the call, this is set to one of the widest points",
            "is_pointer": false,
            "is_const": false,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt2": {
            "type": "point_2d",
            "description": "After the call, this is set to one of the widest points",
            "is_pointer": false,
            "is_const": false,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def widest_points(c, along, pt1, pt2):"
          ],
          "csharp": [
            "public static void SplashKit.WidestPoints(Circle c, Vector2D along, ref Point2D pt1, ref Point2D pt2);"
          ],
          "cpp": [
            "void widest_points(const circle &c, const vector_2d &along, point_2d &pt1, point_2d &pt2)"
          ],
          "pascal": [
            "procedure WidestPoints(const c: Circle; const along: Vector2D; var pt1: Point2D; var pt2: Point2D)"
          ]
        }
      },
      {
        "signature": "float cosine(float degrees);",
        "name": "cosine",
        "method_name": null,
        "unique_global_name": "cosine",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the cosine of the supplied angle (in degrees).",
        "brief": null,
        "return": {
          "type": "float",
          "description": "the cosine of the supplied angle (in degrees).",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "degrees": {
            "type": "float",
            "description": "The angle in degrees",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def cosine(degrees):"
          ],
          "csharp": [
            "public static float SplashKit.Cosine(float degrees);"
          ],
          "cpp": [
            "float cosine(float degrees)"
          ],
          "pascal": [
            "function Cosine(degrees: Single): Single"
          ]
        }
      },
      {
        "signature": "float sine(float degrees);",
        "name": "sine",
        "method_name": null,
        "unique_global_name": "sine",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the sine of the supplied angle (in degrees).",
        "brief": null,
        "return": {
          "type": "float",
          "description": "the sine of the supplied angle (in degrees).",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "degrees": {
            "type": "float",
            "description": "The angle in degrees",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def sine(degrees):"
          ],
          "csharp": [
            "public static float SplashKit.Sine(float degrees);"
          ],
          "cpp": [
            "float sine(float degrees)"
          ],
          "pascal": [
            "function Sine(degrees: Single): Single"
          ]
        }
      },
      {
        "signature": "float tangent(float degrees);",
        "name": "tangent",
        "method_name": null,
        "unique_global_name": "tangent",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the tangent of the supplied angle (in degrees).",
        "brief": null,
        "return": {
          "type": "float",
          "description": "the tangent of the supplied angle (in degrees).",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "degrees": {
            "type": "float",
            "description": "The angle in degrees",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def tangent(degrees):"
          ],
          "csharp": [
            "public static float SplashKit.Tangent(float degrees);"
          ],
          "cpp": [
            "float tangent(float degrees)"
          ],
          "pascal": [
            "function Tangent(degrees: Single): Single"
          ]
        }
      },
      {
        "signature": "point_2d closest_point_on_line(const point_2d from_pt,const line &l);",
        "name": "closest_point_on_line",
        "method_name": null,
        "unique_global_name": "closest_point_on_line",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Gets the closest point on the line to a given point.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "The point on the line that is closest to `from_pt`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "from_pt": {
            "type": "point_2d",
            "description": "The point to test (usually somewhere near the line)",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "l": {
            "type": "line",
            "description": "The line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def closest_point_on_line(from_pt, l):"
          ],
          "csharp": [
            "public static Point2D SplashKit.ClosestPointOnLine(Point2D fromPt, Line l);"
          ],
          "cpp": [
            "point_2d closest_point_on_line(const point_2d from_pt, const line &l)"
          ],
          "pascal": [
            "function ClosestPointOnLine(fromPt: Point2D; const l: Line): Point2D"
          ]
        }
      },
      {
        "signature": "point_2d closest_point_on_lines(const point_2d from_pt,const vector<line> &lines,int &line_idx);",
        "name": "closest_point_on_lines",
        "method_name": null,
        "unique_global_name": "closest_point_on_lines",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Get the point closest to `from pt` that is on one of the supplied lines.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "The point on one of the lines that is the closest point\non these lines to the `from pt`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "from_pt": {
            "type": "point_2d",
            "description": "The point to test",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "lines": {
            "type": "vector",
            "description": "The lines to check",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": true,
            "type_parameter": "line"
          },
          "line_idx": {
            "type": "int",
            "description": "After the call this will store the index of the line that\nhad the matching point.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def closest_point_on_lines(from_pt, lines, line_idx):"
          ],
          "csharp": [
            "public static Point2D SplashKit.ClosestPointOnLines(Point2D fromPt, List<Line> lines, ref int lineIdx);"
          ],
          "cpp": [
            "point_2d closest_point_on_lines(const point_2d from_pt, const vector<line> &lines, int &line_idx)"
          ],
          "pascal": [
            "function ClosestPointOnLines(fromPt: Point2D; const lines: ArrayOfLine; var lineIdx: Integer): Point2D"
          ]
        }
      },
      {
        "signature": "line line_from(const point_2d &start,const point_2d &end_pt);",
        "name": "line_from",
        "method_name": null,
        "unique_global_name": "line_from_point_to_point",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Create a line from one point to another.",
        "brief": null,
        "return": {
          "type": "line",
          "description": "A line from the start to the end point",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "start": {
            "type": "point_2d",
            "description": "The start of the line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "end_pt": {
            "type": "point_2d",
            "description": "The end of the line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "point_to_point",
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def line_from_point_to_point(start, end_pt):"
          ],
          "csharp": [
            "public static Line SplashKit.LineFrom(Point2D start, Point2D endPt);"
          ],
          "cpp": [
            "line line_from(const point_2d &start, const point_2d &end_pt)"
          ],
          "pascal": [
            "function LineFrom(const start: Point2D; const endPt: Point2D): Line"
          ]
        }
      },
      {
        "signature": "line line_from(const point_2d &start,const vector_2d &offset);",
        "name": "line_from",
        "method_name": null,
        "unique_global_name": "line_from_start_with_offset",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a line that starts at a point, and follows a given vector.",
        "brief": null,
        "return": {
          "type": "line",
          "description": "A line from the start to end point",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "start": {
            "type": "point_2d",
            "description": "The start of the line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "offset": {
            "type": "vector_2d",
            "description": "The offset to the end of the line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "start_with_offset",
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def line_from_start_with_offset(start, offset):"
          ],
          "csharp": [
            "public static Line SplashKit.LineFrom(Point2D start, Vector2D offset);"
          ],
          "cpp": [
            "line line_from(const point_2d &start, const vector_2d &offset)"
          ],
          "pascal": [
            "function LineFrom(const start: Point2D; const offset: Vector2D): Line"
          ]
        }
      },
      {
        "signature": "line line_from(const vector_2d &v);",
        "name": "line_from",
        "method_name": null,
        "unique_global_name": "line_from_vector",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Gets a line that goes from the origin and ends at the end of the vector.",
        "brief": null,
        "return": {
          "type": "line",
          "description": "A line from the origin to the end point",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "v": {
            "type": "vector_2d",
            "description": "The offset from the origin for the end of the line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "vector",
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def line_from_vector(v):"
          ],
          "csharp": [
            "public static Line SplashKit.LineFrom(Vector2D v);"
          ],
          "cpp": [
            "line line_from(const vector_2d &v)"
          ],
          "pascal": [
            "function LineFrom(const v: Vector2D): Line"
          ]
        }
      },
      {
        "signature": "line line_from(double x1,double y1,double x2,double y2);",
        "name": "line_from",
        "method_name": null,
        "unique_global_name": "line_from",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Create a line from one point to another.",
        "brief": null,
        "return": {
          "type": "line",
          "description": "A line from the start to the end point",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "x1": {
            "type": "double",
            "description": "The x value of the start of the line",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y1": {
            "type": "double",
            "description": "The y value of the start of the line",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x2": {
            "type": "double",
            "description": "The x value of the end of the line",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y2": {
            "type": "double",
            "description": "The y value of the end of the line",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def line_from(x1, y1, x2, y2):"
          ],
          "csharp": [
            "public static Line SplashKit.LineFrom(double x1, double y1, double x2, double y2);"
          ],
          "cpp": [
            "line line_from(double x1, double y1, double x2, double y2)"
          ],
          "pascal": [
            "function LineFrom(x1: Double; y1: Double; x2: Double; y2: Double): Line"
          ]
        }
      },
      {
        "signature": "bool line_intersection_point(const line &line1,const line &line2,point_2d &pt);",
        "name": "line_intersection_point",
        "method_name": null,
        "unique_global_name": "line_intersection_point",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the point at which two lines would intersect. This point may lie\npast the end of one or both lines.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "[description]",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "line1": {
            "type": "line",
            "description": "The first line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "line2": {
            "type": "line",
            "description": "The other line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The resulting point where they intersect",
            "is_pointer": false,
            "is_const": false,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def line_intersection_point(line1, line2, pt):"
          ],
          "csharp": [
            "public static bool SplashKit.LineIntersectionPoint(Line line1, Line line2, ref Point2D pt);"
          ],
          "cpp": [
            "bool line_intersection_point(const line &line1, const line &line2, point_2d &pt)"
          ],
          "pascal": [
            "function LineIntersectionPoint(const line1: Line; const line2: Line; var pt: Point2D): Boolean"
          ]
        }
      },
      {
        "signature": "bool line_intersects_circle(const line &l,const circle &c);",
        "name": "line_intersects_circle",
        "method_name": null,
        "unique_global_name": "line_intersects_circle",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if the line intersects the circle.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the line `l` intersects the circle `c`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "l": {
            "type": "line",
            "description": "The line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "c": {
            "type": "circle",
            "description": "The circle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def line_intersects_circle(l, c):"
          ],
          "csharp": [
            "public static bool SplashKit.LineIntersectsCircle(Line l, Circle c);"
          ],
          "cpp": [
            "bool line_intersects_circle(const line &l, const circle &c)"
          ],
          "pascal": [
            "function LineIntersectsCircle(const l: Line; const c: Circle): Boolean"
          ]
        }
      },
      {
        "signature": "bool line_intersects_lines(const line &l,const vector<line> &lines);",
        "name": "line_intersects_lines",
        "method_name": null,
        "unique_global_name": "line_intersects_lines",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if the line intersects any of the lines.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if `line` intersects any of the lines in `lines`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "l": {
            "type": "line",
            "description": "The line to check",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "lines": {
            "type": "vector",
            "description": "The lines to check against",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": true,
            "type_parameter": "line"
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def line_intersects_lines(l, lines):"
          ],
          "csharp": [
            "public static bool SplashKit.LineIntersectsLines(Line l, List<Line> lines);"
          ],
          "cpp": [
            "bool line_intersects_lines(const line &l, const vector<line> &lines)"
          ],
          "pascal": [
            "function LineIntersectsLines(const l: Line; const lines: ArrayOfLine): Boolean"
          ]
        }
      },
      {
        "signature": "bool line_intersects_rect(const line &l,const rectangle &rect);",
        "name": "line_intersects_rect",
        "method_name": null,
        "unique_global_name": "line_intersects_rect",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if the line intersects the rectangle.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if `l` intersects `rect`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "l": {
            "type": "line",
            "description": "The line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def line_intersects_rect(l, rect):"
          ],
          "csharp": [
            "public static bool SplashKit.LineIntersectsRect(Line l, Rectangle rect);"
          ],
          "cpp": [
            "bool line_intersects_rect(const line &l, const rectangle &rect)"
          ],
          "pascal": [
            "function LineIntersectsRect(const l: Line; const rect: Rectangle): Boolean"
          ]
        }
      },
      {
        "signature": "float line_length(const line &l);",
        "name": "line_length",
        "method_name": null,
        "unique_global_name": "line_length",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the length of a line.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The length of the line",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "l": {
            "type": "line",
            "description": "The line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def line_length(l):"
          ],
          "csharp": [
            "public static float SplashKit.LineLength(Line l);"
          ],
          "cpp": [
            "float line_length(const line &l)"
          ],
          "pascal": [
            "function LineLength(const l: Line): Single"
          ]
        }
      },
      {
        "signature": "float line_length_squared(const line &l);",
        "name": "line_length_squared",
        "method_name": null,
        "unique_global_name": "line_length_squared",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the squared length of the line. You can also get the\n`line_length`.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The squared length of the line",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "l": {
            "type": "line",
            "description": "The line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def line_length_squared(l):"
          ],
          "csharp": [
            "public static float SplashKit.LineLengthSquared(Line l);"
          ],
          "cpp": [
            "float line_length_squared(const line &l)"
          ],
          "pascal": [
            "function LineLengthSquared(const l: Line): Single"
          ]
        }
      },
      {
        "signature": "point_2d line_mid_point(const line &l);",
        "name": "line_mid_point",
        "method_name": null,
        "unique_global_name": "line_mid_point",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the center point of the line.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "The point that is at the center of the line",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "l": {
            "type": "line",
            "description": "The line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def line_mid_point(l):"
          ],
          "csharp": [
            "public static Point2D SplashKit.LineMidPoint(Line l);"
          ],
          "cpp": [
            "point_2d line_mid_point(const line &l)"
          ],
          "pascal": [
            "function LineMidPoint(const l: Line): Point2D"
          ]
        }
      },
      {
        "signature": "vector_2d line_normal(const line &l);",
        "name": "line_normal",
        "method_name": null,
        "unique_global_name": "line_normal",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The line normal (a perpendicular vector).",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "The line's normal vector",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "l": {
            "type": "line",
            "description": "The line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def line_normal(l):"
          ],
          "csharp": [
            "public static Vector2D SplashKit.LineNormal(Line l);"
          ],
          "cpp": [
            "vector_2d line_normal(const line &l)"
          ],
          "pascal": [
            "function LineNormal(const l: Line): Vector2D"
          ]
        }
      },
      {
        "signature": "string line_to_string(const line &ln);",
        "name": "line_to_string",
        "method_name": null,
        "unique_global_name": "line_to_string",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a text description of the line.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "A text description of the line",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "ln": {
            "type": "line",
            "description": "The line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def line_to_string(ln):"
          ],
          "csharp": [
            "public static string SplashKit.LineToString(Line ln);"
          ],
          "cpp": [
            "string line_to_string(const line &ln)"
          ],
          "pascal": [
            "function LineToString(const ln: Line): String"
          ]
        }
      },
      {
        "signature": "vector<line> lines_from(const rectangle &rect);",
        "name": "lines_from",
        "method_name": null,
        "unique_global_name": "lines_from_rectangle",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns an array of lines from a supplied rectangle.",
        "brief": null,
        "return": {
          "type": "vector",
          "description": "An array containing 4 lines",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": true,
          "type_parameter": "line"
        },
        "parameters": {
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to get the lines from",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "rectangle",
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def lines_from_rectangle(rect):"
          ],
          "csharp": [
            "public static List<Line> SplashKit.LinesFrom(Rectangle rect);"
          ],
          "cpp": [
            "vector<line> lines_from(const rectangle &rect)"
          ],
          "pascal": [
            "function LinesFrom(const rect: Rectangle): ArrayOfLine"
          ]
        }
      },
      {
        "signature": "vector<line> lines_from(const triangle &t);",
        "name": "lines_from",
        "method_name": null,
        "unique_global_name": "lines_from_triangle",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns an array of lines from the details in the triangle.",
        "brief": null,
        "return": {
          "type": "vector",
          "description": "The lines from the triangle",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": true,
          "type_parameter": "line"
        },
        "parameters": {
          "t": {
            "type": "triangle",
            "description": "The triangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "triangle",
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def lines_from_triangle(t):"
          ],
          "csharp": [
            "public static List<Line> SplashKit.LinesFrom(Triangle t);"
          ],
          "cpp": [
            "vector<line> lines_from(const triangle &t)"
          ],
          "pascal": [
            "function LinesFrom(const t: Triangle): ArrayOfLine"
          ]
        }
      },
      {
        "signature": "bool lines_intersect(const line &l1,const line &l2);",
        "name": "lines_intersect",
        "method_name": null,
        "unique_global_name": "lines_intersect",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if the two lines intersect.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the two lines intersect (share a common point).",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "l1": {
            "type": "line",
            "description": "The first line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "l2": {
            "type": "line",
            "description": "The other line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def lines_intersect(l1, l2):"
          ],
          "csharp": [
            "public static bool SplashKit.LinesIntersect(Line l1, Line l2);"
          ],
          "cpp": [
            "bool lines_intersect(const line &l1, const line &l2)"
          ],
          "pascal": [
            "function LinesIntersect(const l1: Line; const l2: Line): Boolean"
          ]
        }
      },
      {
        "signature": "point_2d point_at(double x,double y);",
        "name": "point_at",
        "method_name": null,
        "unique_global_name": "point_at",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a point at the given location.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "A point at the given location",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "x": {
            "type": "double",
            "description": "The x value of the coordinate",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y value of the coordinate",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def point_at(x, y):"
          ],
          "csharp": [
            "public static Point2D SplashKit.PointAt(double x, double y);"
          ],
          "cpp": [
            "point_2d point_at(double x, double y)"
          ],
          "pascal": [
            "function PointAt(x: Double; y: Double): Point2D"
          ]
        }
      },
      {
        "signature": "point_2d point_at_origin();",
        "name": "point_at_origin",
        "method_name": null,
        "unique_global_name": "point_at_origin",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a point representing the origin.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "A point with x and y set to 0",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def point_at_origin():"
          ],
          "csharp": [
            "public static Point2D SplashKit.PointAtOrigin();"
          ],
          "cpp": [
            "point_2d point_at_origin()"
          ],
          "pascal": [
            "function PointAtOrigin(): Point2D"
          ]
        }
      },
      {
        "signature": "bool point_in_circle(const point_2d &pt,const circle &c);",
        "name": "point_in_circle",
        "method_name": null,
        "unique_global_name": "point_in_circle",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if the point `pt` is in the circle `c`.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the point is within the area of the circle",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "The point to test",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "c": {
            "type": "circle",
            "description": "The circle to check",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def point_in_circle(pt, c):"
          ],
          "csharp": [
            "public static bool SplashKit.PointInCircle(Point2D pt, Circle c);"
          ],
          "cpp": [
            "bool point_in_circle(const point_2d &pt, const circle &c)"
          ],
          "pascal": [
            "function PointInCircle(const pt: Point2D; const c: Circle): Boolean"
          ]
        }
      },
      {
        "signature": "bool point_in_circle(double ptx,double pty,double cx,double cy,double radius);",
        "name": "point_in_circle",
        "method_name": null,
        "unique_global_name": "point_in_circle_with_values",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Return true if the point is in the circle.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True when the point is in the circle, otherwise it returns false.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "ptx": {
            "type": "double",
            "description": "the x value of the point",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pty": {
            "type": "double",
            "description": "the y value of the point",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "cx": {
            "type": "double",
            "description": "the x value of the centre of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "cy": {
            "type": "double",
            "description": "the y value of the centre of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "radius": {
            "type": "double",
            "description": "the radius of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "with_values",
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def point_in_circle_with_values(ptx, pty, cx, cy, radius):"
          ],
          "csharp": [
            "public static bool SplashKit.PointInCircle(double ptx, double pty, double cx, double cy, double radius);"
          ],
          "cpp": [
            "bool point_in_circle(double ptx, double pty, double cx, double cy, double radius)"
          ],
          "pascal": [
            "function PointInCircle(ptx: Double; pty: Double; cx: Double; cy: Double; radius: Double): Boolean"
          ]
        }
      },
      {
        "signature": "bool point_in_quad(const point_2d &pt,const quad &q);",
        "name": "point_in_quad",
        "method_name": null,
        "unique_global_name": "point_in_quad",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Tests if a point is in a quad.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if pt lies within the area of q.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "The point to test.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "q": {
            "type": "quad",
            "description": "The quad to check if the point is within.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def point_in_quad(pt, q):"
          ],
          "csharp": [
            "public static bool SplashKit.PointInQuad(Point2D pt, Quad q);"
          ],
          "cpp": [
            "bool point_in_quad(const point_2d &pt, const quad &q)"
          ],
          "pascal": [
            "function PointInQuad(const pt: Point2D; const q: Quad): Boolean"
          ]
        }
      },
      {
        "signature": "bool point_in_rectangle(const point_2d &pt,const rectangle &rect);",
        "name": "point_in_rectangle",
        "method_name": null,
        "unique_global_name": "point_in_rectangle",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if point `pt` is in the Rectangle `rect`.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the point is within the rectangle",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "The point to test",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to check",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def point_in_rectangle(pt, rect):"
          ],
          "csharp": [
            "public static bool SplashKit.PointInRectangle(Point2D pt, Rectangle rect);"
          ],
          "cpp": [
            "bool point_in_rectangle(const point_2d &pt, const rectangle &rect)"
          ],
          "pascal": [
            "function PointInRectangle(const pt: Point2D; const rect: Rectangle): Boolean"
          ]
        }
      },
      {
        "signature": "bool point_in_rectangle(double ptx,double pty,double rect_x,double rect_y,double rect_width,double rect_height);",
        "name": "point_in_rectangle",
        "method_name": null,
        "unique_global_name": "point_in_rectangle_with_values",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if the point is within the bounds of a Rectangle.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "true when the point is in the rectangle, otherwise it returns false.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "ptx": {
            "type": "double",
            "description": "the x value of the point",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pty": {
            "type": "double",
            "description": "the y value of the point",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect_x": {
            "type": "double",
            "description": "x value of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect_y": {
            "type": "double",
            "description": "y value of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect_width": {
            "type": "double",
            "description": "width of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect_height": {
            "type": "double",
            "description": "height of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "with_values",
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def point_in_rectangle_with_values(ptx, pty, rect_x, rect_y, rect_width, rect_height):"
          ],
          "csharp": [
            "public static bool SplashKit.PointInRectangle(double ptx, double pty, double rectX, double rectY, double rectWidth, double rectHeight);"
          ],
          "cpp": [
            "bool point_in_rectangle(double ptx, double pty, double rect_x, double rect_y, double rect_width, double rect_height)"
          ],
          "pascal": [
            "function PointInRectangle(ptx: Double; pty: Double; rectX: Double; rectY: Double; rectWidth: Double; rectHeight: Double): Boolean"
          ]
        }
      },
      {
        "signature": "bool point_in_triangle(const point_2d &pt,const triangle &tri);",
        "name": "point_in_triangle",
        "method_name": null,
        "unique_global_name": "point_in_triangle",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if the point `pt` is in the Triangle `tri`.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the point is within the triangle",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "The point to test",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "tri": {
            "type": "triangle",
            "description": "The triangle to check",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def point_in_triangle(pt, tri):"
          ],
          "csharp": [
            "public static bool SplashKit.PointInTriangle(Point2D pt, Triangle tri);"
          ],
          "cpp": [
            "bool point_in_triangle(const point_2d &pt, const triangle &tri)"
          ],
          "pascal": [
            "function PointInTriangle(const pt: Point2D; const tri: Triangle): Boolean"
          ]
        }
      },
      {
        "signature": "float point_line_distance(const point_2d &pt,const line &l);",
        "name": "point_line_distance",
        "method_name": null,
        "unique_global_name": "point_line_distance",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the distance from a point to a line.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The distance from `pt` to `l`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "The point",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "l": {
            "type": "line",
            "description": "The line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def point_line_distance(pt, l):"
          ],
          "csharp": [
            "public static float SplashKit.PointLineDistance(Point2D pt, Line l);"
          ],
          "cpp": [
            "float point_line_distance(const point_2d &pt, const line &l)"
          ],
          "pascal": [
            "function PointLineDistance(const pt: Point2D; const l: Line): Single"
          ]
        }
      },
      {
        "signature": "point_2d point_offset_by(const point_2d &start_point,const vector_2d &offset);",
        "name": "point_offset_by",
        "method_name": null,
        "unique_global_name": "point_offset_by",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Calculate the `point_2d` that is offset from the `start_point` by the\n`offset`",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "A new point as a result of moving by the offset from\nthe starting point",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "start_point": {
            "type": "point_2d",
            "description": "The starting point",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "offset": {
            "type": "vector_2d",
            "description": "The distance and direction to move",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def point_offset_by(start_point, offset):"
          ],
          "csharp": [
            "public static Point2D SplashKit.PointOffsetBy(Point2D startPoint, Vector2D offset);"
          ],
          "cpp": [
            "point_2d point_offset_by(const point_2d &start_point, const vector_2d &offset)"
          ],
          "pascal": [
            "function PointOffsetBy(const startPoint: Point2D; const offset: Vector2D): Point2D"
          ]
        }
      },
      {
        "signature": "point_2d point_offset_from_origin(const vector_2d &offset);",
        "name": "point_offset_from_origin",
        "method_name": null,
        "unique_global_name": "point_offset_from_origin",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the point offset from the origin by the provided vector.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "A new point as a result of moving by the offset from\nthe starting point",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "offset": {
            "type": "vector_2d",
            "description": "The distance and direction to move",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def point_offset_from_origin(offset):"
          ],
          "csharp": [
            "public static Point2D SplashKit.PointOffsetFromOrigin(Vector2D offset);"
          ],
          "cpp": [
            "point_2d point_offset_from_origin(const vector_2d &offset)"
          ],
          "pascal": [
            "function PointOffsetFromOrigin(const offset: Vector2D): Point2D"
          ]
        }
      },
      {
        "signature": "bool point_on_line(const point_2d &pt,const line &l);",
        "name": "point_on_line",
        "method_name": null,
        "unique_global_name": "point_on_line",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if point `pt` is on the line `l`.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the point is on the line",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "The point to test",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "l": {
            "type": "line",
            "description": "The line to check",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def point_on_line(pt, l):"
          ],
          "csharp": [
            "public static bool SplashKit.PointOnLine(Point2D pt, Line l);"
          ],
          "cpp": [
            "bool point_on_line(const point_2d &pt, const line &l)"
          ],
          "pascal": [
            "function PointOnLine(const pt: Point2D; const l: Line): Boolean"
          ]
        }
      },
      {
        "signature": "bool point_on_line(const point_2d &pt,const line &l,float proximity);",
        "name": "point_on_line",
        "method_name": null,
        "unique_global_name": "point_on_line_with_proximity",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true when the point `pt` is on the line `l`. The\nproximity value is used to set the sensitivity -- higher values\neffectively make the line thicker.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the point is on the line",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "The point to test",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "l": {
            "type": "line",
            "description": "The line to check",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "proximity": {
            "type": "float",
            "description": "The sensitivity to allow close approximities",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "with_proximity",
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def point_on_line_with_proximity(pt, l, proximity):"
          ],
          "csharp": [
            "public static bool SplashKit.PointOnLine(Point2D pt, Line l, float proximity);"
          ],
          "cpp": [
            "bool point_on_line(const point_2d &pt, const line &l, float proximity)"
          ],
          "pascal": [
            "function PointOnLine(const pt: Point2D; const l: Line; proximity: Single): Boolean"
          ]
        }
      },
      {
        "signature": "float point_point_angle(const point_2d &pt1,const point_2d &pt2);",
        "name": "point_point_angle",
        "method_name": null,
        "unique_global_name": "point_point_angle",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the angle between two points in degrees.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The angle (in degrees) of the line between the points",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt1": {
            "type": "point_2d",
            "description": "The first point",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt2": {
            "type": "point_2d",
            "description": "The other point",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def point_point_angle(pt1, pt2):"
          ],
          "csharp": [
            "public static float SplashKit.PointPointAngle(Point2D pt1, Point2D pt2);"
          ],
          "cpp": [
            "float point_point_angle(const point_2d &pt1, const point_2d &pt2)"
          ],
          "pascal": [
            "function PointPointAngle(const pt1: Point2D; const pt2: Point2D): Single"
          ]
        }
      },
      {
        "signature": "double point_point_distance(const point_2d &pt1,const point_2d &pt2);",
        "name": "point_point_distance",
        "method_name": null,
        "unique_global_name": "point_point_distance",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the distance between two points.",
        "brief": null,
        "return": {
          "type": "double",
          "description": "The distance between the two points",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt1": {
            "type": "point_2d",
            "description": "The first point",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt2": {
            "type": "point_2d",
            "description": "The other point",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def point_point_distance(pt1, pt2):"
          ],
          "csharp": [
            "public static double SplashKit.PointPointDistance(Point2D pt1, Point2D pt2);"
          ],
          "cpp": [
            "double point_point_distance(const point_2d &pt1, const point_2d &pt2)"
          ],
          "pascal": [
            "function PointPointDistance(const pt1: Point2D; const pt2: Point2D): Double"
          ]
        }
      },
      {
        "signature": "string point_to_string(const point_2d &pt);",
        "name": "point_to_string",
        "method_name": null,
        "unique_global_name": "point_to_string",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Get a text description of the `point_2d`.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "A string representation of the point",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "The point details",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def point_to_string(pt):"
          ],
          "csharp": [
            "public static string SplashKit.PointToString(Point2D pt);"
          ],
          "cpp": [
            "string point_to_string(const point_2d &pt)"
          ],
          "pascal": [
            "function PointToString(const pt: Point2D): String"
          ]
        }
      },
      {
        "signature": "point_2d random_bitmap_point(bitmap bmp);",
        "name": "random_bitmap_point",
        "method_name": null,
        "unique_global_name": "random_bitmap_point",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a random point within the bounds of the bitmap.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "A point within the bounds of the bitmap",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def random_bitmap_point(bmp):"
          ],
          "csharp": [
            "public static Point2D SplashKit.RandomBitmapPoint(Bitmap bmp);"
          ],
          "cpp": [
            "point_2d random_bitmap_point(bitmap bmp)"
          ],
          "pascal": [
            "function RandomBitmapPoint(bmp: Bitmap): Point2D"
          ]
        }
      },
      {
        "signature": "point_2d random_screen_point();",
        "name": "random_screen_point",
        "method_name": null,
        "unique_global_name": "random_screen_point",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a random point on the current window.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "A point within the bounds of the current window",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def random_screen_point():"
          ],
          "csharp": [
            "public static Point2D SplashKit.RandomScreenPoint();"
          ],
          "cpp": [
            "point_2d random_screen_point()"
          ],
          "pascal": [
            "function RandomScreenPoint(): Point2D"
          ]
        }
      },
      {
        "signature": "point_2d random_window_point(window wind);",
        "name": "random_window_point",
        "method_name": null,
        "unique_global_name": "random_window_point",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a random point on the provided window.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "A point within the bounds of the window",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "The window",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def random_window_point(wind):"
          ],
          "csharp": [
            "public static Point2D SplashKit.RandomWindowPoint(Window wind);"
          ],
          "cpp": [
            "point_2d random_window_point(window wind)"
          ],
          "pascal": [
            "function RandomWindowPoint(wind: Window): Point2D"
          ]
        }
      },
      {
        "signature": "bool same_point(const point_2d &pt1,const point_2d &pt2);",
        "name": "same_point",
        "method_name": null,
        "unique_global_name": "same_point",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns True of `pt1` is at the same point as `pt2`. This checks at an\ninteger level, indicating the two points refer to the same pixel.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the two points are at the same location",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt1": {
            "type": "point_2d",
            "description": "The first point",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt2": {
            "type": "point_2d",
            "description": "The other point",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def same_point(pt1, pt2):"
          ],
          "csharp": [
            "public static bool SplashKit.SamePoint(Point2D pt1, Point2D pt2);"
          ],
          "cpp": [
            "bool same_point(const point_2d &pt1, const point_2d &pt2)"
          ],
          "pascal": [
            "function SamePoint(const pt1: Point2D; const pt2: Point2D): Boolean"
          ]
        }
      },
      {
        "signature": "quad quad_from(const point_2d& line_origin,const point_2d& line_end,double width);",
        "name": "quad_from",
        "method_name": null,
        "unique_global_name": "quad_from_from_line",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a quad from the passed in line and width.\nThe quad will be a rectangle with the line as the diagonal,\nand the width as the width of the rectangle.",
        "brief": null,
        "return": {
          "type": "quad",
          "description": "A quad that represents the line with the given width",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "line_origin": {
            "type": "point_2d",
            "description": "The origin of the line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "line_end": {
            "type": "point_2d",
            "description": "The end of the line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "double",
            "description": "The width of the quad",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "from_line",
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def quad_from_from_line(line_origin, line_end, width):"
          ],
          "csharp": [
            "public static Quad SplashKit.QuadFrom(Point2D lineOrigin, Point2D lineEnd, double width);"
          ],
          "cpp": [
            "quad quad_from(const point_2d &line_origin, const point_2d &line_end, double width)"
          ],
          "pascal": [
            "function QuadFrom(const lineOrigin: Point2D; const lineEnd: Point2D; width: Double): Quad"
          ]
        }
      },
      {
        "signature": "quad quad_from(const point_2d &p1,const point_2d &p2,const point_2d &p3,const point_2d &p4);",
        "name": "quad_from",
        "method_name": null,
        "unique_global_name": "quad_from_points",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a quad from the passed in points.",
        "brief": null,
        "return": {
          "type": "quad",
          "description": "A quad from the passed in points",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "p1": {
            "type": "point_2d",
            "description": "The top left of the quad.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "p2": {
            "type": "point_2d",
            "description": "The top right of the quad",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "p3": {
            "type": "point_2d",
            "description": "The bottom left of the quad",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "p4": {
            "type": "point_2d",
            "description": "The bottom right of the quad",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "points",
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def quad_from_points(p1, p2, p3, p4):"
          ],
          "csharp": [
            "public static Quad SplashKit.QuadFrom(Point2D p1, Point2D p2, Point2D p3, Point2D p4);"
          ],
          "cpp": [
            "quad quad_from(const point_2d &p1, const point_2d &p2, const point_2d &p3, const point_2d &p4)"
          ],
          "pascal": [
            "function QuadFrom(const p1: Point2D; const p2: Point2D; const p3: Point2D; const p4: Point2D): Quad"
          ]
        }
      },
      {
        "signature": "quad quad_from(const rectangle &rect);",
        "name": "quad_from",
        "method_name": null,
        "unique_global_name": "quad_from_rectangle",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a quad from the x-y points of a given recatangle",
        "brief": null,
        "return": {
          "type": "quad",
          "description": "A quad at the same location as the rectangle",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to convert to a quad",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "rectangle",
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def quad_from_rectangle(rect):"
          ],
          "csharp": [
            "public static Quad SplashKit.QuadFrom(Rectangle rect);"
          ],
          "cpp": [
            "quad quad_from(const rectangle &rect)"
          ],
          "pascal": [
            "function QuadFrom(const rect: Rectangle): Quad"
          ]
        }
      },
      {
        "signature": "quad quad_from(const rectangle &rect,const matrix_2d &transform);",
        "name": "quad_from",
        "method_name": null,
        "unique_global_name": "quad_from_rectangle_with_transformation",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a quad from the rectangle, then applies the transformation to\nthe quads points.",
        "brief": null,
        "return": {
          "type": "quad",
          "description": "A quad that represents the rectangle after the transformation.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to transform to a quad.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "transform": {
            "type": "matrix_2d",
            "description": "A transform to apply to the resulting quad.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "rectangle_with_transformation",
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def quad_from_rectangle_with_transformation(rect, transform):"
          ],
          "csharp": [
            "public static Quad SplashKit.QuadFrom(Rectangle rect, Matrix2D transform);"
          ],
          "cpp": [
            "quad quad_from(const rectangle &rect, const matrix_2d &transform)"
          ],
          "pascal": [
            "function QuadFrom(const rect: Rectangle; const transform: Matrix2D): Quad"
          ]
        }
      },
      {
        "signature": "quad quad_from(double x_top_left,double y_top_left,double x_top_right,double y_top_right,double x_bottom_left,double y_bottom_left,double x_bottom_right,double y_bottom_right );",
        "name": "quad_from",
        "method_name": null,
        "unique_global_name": "quad_from",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a quad for the passed in x & y points.",
        "brief": null,
        "return": {
          "type": "quad",
          "description": "A quad with the indicated points",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "x_top_left": {
            "type": "double",
            "description": "X coordinate of the top left of the quad",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y_top_left": {
            "type": "double",
            "description": "Y coordinate of the top left of the quad",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x_top_right": {
            "type": "double",
            "description": "X coordinate of the top right of the quad",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y_top_right": {
            "type": "double",
            "description": "Y coordinate of the top right of the quad",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x_bottom_left": {
            "type": "double",
            "description": "X coordinate of the bottom left of the quad",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y_bottom_left": {
            "type": "double",
            "description": "Y coordinate of the bottom left of the quad",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x_bottom_right": {
            "type": "double",
            "description": "X coordinate of the bottom right of the quad",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y_bottom_right": {
            "type": "double",
            "description": "Y coordinate of the bottom right of the quad",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def quad_from(x_top_left, y_top_left, x_top_right, y_top_right, x_bottom_left, y_bottom_left, x_bottom_right, y_bottom_right):"
          ],
          "csharp": [
            "public static Quad SplashKit.QuadFrom(double xTopLeft, double yTopLeft, double xTopRight, double yTopRight, double xBottomLeft, double yBottomLeft, double xBottomRight, double yBottomRight);"
          ],
          "cpp": [
            "quad quad_from(double x_top_left, double y_top_left, double x_top_right, double y_top_right, double x_bottom_left, double y_bottom_left, double x_bottom_right, double y_bottom_right)"
          ],
          "pascal": [
            "function QuadFrom(xTopLeft: Double; yTopLeft: Double; xTopRight: Double; yTopRight: Double; xBottomLeft: Double; yBottomLeft: Double; xBottomRight: Double; yBottomRight: Double): Quad"
          ]
        }
      },
      {
        "signature": "bool quads_intersect(const quad &q1,const quad &q2);",
        "name": "quads_intersect",
        "method_name": null,
        "unique_global_name": "quads_intersect",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if two quads intersect.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the two quads intersect.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "q1": {
            "type": "quad",
            "description": "The first quad",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "q2": {
            "type": "quad",
            "description": "The second quad",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def quads_intersect(q1, q2):"
          ],
          "csharp": [
            "public static bool SplashKit.QuadsIntersect(Quad q1, Quad q2);"
          ],
          "cpp": [
            "bool quads_intersect(const quad &q1, const quad &q2)"
          ],
          "pascal": [
            "function QuadsIntersect(const q1: Quad; const q2: Quad): Boolean"
          ]
        }
      },
      {
        "signature": "void set_quad_point(quad &q,int idx,const point_2d &value);",
        "name": "set_quad_point",
        "method_name": null,
        "unique_global_name": "set_quad_point",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Change a point in a quad.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "q": {
            "type": "quad",
            "description": "The quad to change",
            "is_pointer": false,
            "is_const": false,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "idx": {
            "type": "int",
            "description": "The index of the point: 0 is top left, 1 is top right, 2 is\nbottom left, and 3 is bottom right",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "point_2d",
            "description": "The new value for that point in the quad",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def set_quad_point(q, idx, value):"
          ],
          "csharp": [
            "public static void SplashKit.SetQuadPoint(ref Quad q, int idx, Point2D value);"
          ],
          "cpp": [
            "void set_quad_point(quad &q, int idx, const point_2d &value)"
          ],
          "pascal": [
            "procedure SetQuadPoint(var q: Quad; idx: Integer; const value: Point2D)"
          ]
        }
      },
      {
        "signature": "vector<triangle> triangles_from(const quad &q);",
        "name": "triangles_from",
        "method_name": null,
        "unique_global_name": "triangles_from",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the two triangles that make up a quad in a vector.",
        "brief": null,
        "return": {
          "type": "vector",
          "description": "A vector with the two triangles from the quad.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": true,
          "type_parameter": "triangle"
        },
        "parameters": {
          "q": {
            "type": "quad",
            "description": "The quad",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def triangles_from(q):"
          ],
          "csharp": [
            "public static List<Triangle> SplashKit.TrianglesFrom(Quad q);"
          ],
          "cpp": [
            "vector<triangle> triangles_from(const quad &q)"
          ],
          "pascal": [
            "function TrianglesFrom(const q: Quad): ArrayOfTriangle"
          ]
        }
      },
      {
        "signature": "rectangle inset_rectangle(const rectangle &rect,float inset_amount);",
        "name": "inset_rectangle",
        "method_name": null,
        "unique_global_name": "inset_rectangle",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Return a rectangle that is inset an amount from a given rectangle.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "A new rectangle created inset from `rect`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to inset",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "inset_amount": {
            "type": "float",
            "description": "The amount to inset the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def inset_rectangle(rect, inset_amount):"
          ],
          "csharp": [
            "public static Rectangle SplashKit.InsetRectangle(Rectangle rect, float insetAmount);"
          ],
          "cpp": [
            "rectangle inset_rectangle(const rectangle &rect, float inset_amount)"
          ],
          "pascal": [
            "function InsetRectangle(const rect: Rectangle; insetAmount: Single): Rectangle"
          ]
        }
      },
      {
        "signature": "rectangle intersection(const rectangle &rect1,const rectangle &rect2);",
        "name": "intersection",
        "method_name": null,
        "unique_global_name": "intersection",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a rectangle that represents the intersection of two rectangles.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "The intersection of rect1 and rect2.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "rect1": {
            "type": "rectangle",
            "description": "The first rectangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect2": {
            "type": "rectangle",
            "description": "The second rectangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def intersection(rect1, rect2):"
          ],
          "csharp": [
            "public static Rectangle SplashKit.Intersection(Rectangle rect1, Rectangle rect2);"
          ],
          "cpp": [
            "rectangle intersection(const rectangle &rect1, const rectangle &rect2)"
          ],
          "pascal": [
            "function Intersection(const rect1: Rectangle; const rect2: Rectangle): Rectangle"
          ]
        }
      },
      {
        "signature": "rectangle rectangle_around(const circle &c);",
        "name": "rectangle_around",
        "method_name": null,
        "unique_global_name": "rectangle_around_circle",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a rectangle that surrounds a given circle",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "A rectangle that will surround the circle",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "c": {
            "type": "circle",
            "description": "The circle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "circle",
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def rectangle_around_circle(c):"
          ],
          "csharp": [
            "public static Rectangle SplashKit.RectangleAround(Circle c);"
          ],
          "cpp": [
            "rectangle rectangle_around(const circle &c)"
          ],
          "pascal": [
            "function RectangleAround(const c: Circle): Rectangle"
          ]
        }
      },
      {
        "signature": "rectangle rectangle_around(const line &l);",
        "name": "rectangle_around",
        "method_name": null,
        "unique_global_name": "rectangle_around_line",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a rectangle that surrounds a given line segment",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "A rectangle that will surround the line",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "l": {
            "type": "line",
            "description": "The line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "line",
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def rectangle_around_line(l):"
          ],
          "csharp": [
            "public static Rectangle SplashKit.RectangleAround(Line l);"
          ],
          "cpp": [
            "rectangle rectangle_around(const line &l)"
          ],
          "pascal": [
            "function RectangleAround(const l: Line): Rectangle"
          ]
        }
      },
      {
        "signature": "rectangle rectangle_around(const quad &q);",
        "name": "rectangle_around",
        "method_name": null,
        "unique_global_name": "rectangle_around_quad",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a rectangle that surrounds a given quad.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "A rectangle that will surround the quad",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "q": {
            "type": "quad",
            "description": "The quad",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "quad",
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def rectangle_around_quad(q):"
          ],
          "csharp": [
            "public static Rectangle SplashKit.RectangleAround(Quad q);"
          ],
          "cpp": [
            "rectangle rectangle_around(const quad &q)"
          ],
          "pascal": [
            "function RectangleAround(const q: Quad): Rectangle"
          ]
        }
      },
      {
        "signature": "rectangle rectangle_around(const triangle &t);",
        "name": "rectangle_around",
        "method_name": null,
        "unique_global_name": "rectangle_around_triangle",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a rectangle that surrounds a given triangle",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "A rectangle that will surround the triangle",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "t": {
            "type": "triangle",
            "description": "The triangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "triangle",
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def rectangle_around_triangle(t):"
          ],
          "csharp": [
            "public static Rectangle SplashKit.RectangleAround(Triangle t);"
          ],
          "cpp": [
            "rectangle rectangle_around(const triangle &t)"
          ],
          "pascal": [
            "function RectangleAround(const t: Triangle): Rectangle"
          ]
        }
      },
      {
        "signature": "float rectangle_bottom(const rectangle &rect);",
        "name": "rectangle_bottom",
        "method_name": null,
        "unique_global_name": "rectangle_bottom",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The location of the bottom of the rectangle.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The distance from the top of the screen to the bottom of\nthe rectangle.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "rect": {
            "type": "rectangle",
            "description": "The rectangle.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def rectangle_bottom(rect):"
          ],
          "csharp": [
            "public static float SplashKit.RectangleBottom(Rectangle rect);"
          ],
          "cpp": [
            "float rectangle_bottom(const rectangle &rect)"
          ],
          "pascal": [
            "function RectangleBottom(const rect: Rectangle): Single"
          ]
        }
      },
      {
        "signature": "point_2d rectangle_center(const rectangle &rect);",
        "name": "rectangle_center",
        "method_name": null,
        "unique_global_name": "rectangle_center",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the center point of a given rectangle",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "The center point of the vector",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "rect": {
            "type": "rectangle",
            "description": "The rectangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def rectangle_center(rect):"
          ],
          "csharp": [
            "public static Point2D SplashKit.RectangleCenter(Rectangle rect);"
          ],
          "cpp": [
            "point_2d rectangle_center(const rectangle &rect)"
          ],
          "pascal": [
            "function RectangleCenter(const rect: Rectangle): Point2D"
          ]
        }
      },
      {
        "signature": "rectangle rectangle_from(const point_2d pt,const double width,const double height);",
        "name": "rectangle_from",
        "method_name": null,
        "unique_global_name": "rectangle_from_point_and_size",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a rectangle at the specified point with a given width and height",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "A rectangle with the specified dimensions and location",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "The origin for the rectangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "double",
            "description": "Its width",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "double",
            "description": "Its height",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "point_and_size",
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def rectangle_from_point_and_size(pt, width, height):"
          ],
          "csharp": [
            "public static Rectangle SplashKit.RectangleFrom(Point2D pt, double width, double height);"
          ],
          "cpp": [
            "rectangle rectangle_from(const point_2d pt, const double width, const double height)"
          ],
          "pascal": [
            "function RectangleFrom(pt: Point2D; width: Double; height: Double): Rectangle"
          ]
        }
      },
      {
        "signature": "rectangle rectangle_from(const point_2d pt1,const point_2d pt2);",
        "name": "rectangle_from",
        "method_name": null,
        "unique_global_name": "rectangle_from_points",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a rectangle with pt1 and pt2 defining the two distant edge points.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "A rectangle enclosing the two points.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt1": {
            "type": "point_2d",
            "description": "The first point",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt2": {
            "type": "point_2d",
            "description": "The second point",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "points",
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def rectangle_from_points(pt1, pt2):"
          ],
          "csharp": [
            "public static Rectangle SplashKit.RectangleFrom(Point2D pt1, Point2D pt2);"
          ],
          "cpp": [
            "rectangle rectangle_from(const point_2d pt1, const point_2d pt2)"
          ],
          "pascal": [
            "function RectangleFrom(pt1: Point2D; pt2: Point2D): Rectangle"
          ]
        }
      },
      {
        "signature": "rectangle rectangle_from(double x,double y,double width,double height);",
        "name": "rectangle_from",
        "method_name": null,
        "unique_global_name": "rectangle_from",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a rectangle from a given x,y location with the specified width\nand height.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "A rectangle with the specified dimensions and location.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "x": {
            "type": "double",
            "description": "The x coordinate of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y coordinate of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "double",
            "description": "The width of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "double",
            "description": "The height of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def rectangle_from(x, y, width, height):"
          ],
          "csharp": [
            "public static Rectangle SplashKit.RectangleFrom(double x, double y, double width, double height);"
          ],
          "cpp": [
            "rectangle rectangle_from(double x, double y, double width, double height)"
          ],
          "pascal": [
            "function RectangleFrom(x: Double; y: Double; width: Double; height: Double): Rectangle"
          ]
        }
      },
      {
        "signature": "float rectangle_left(const rectangle &rect);",
        "name": "rectangle_left",
        "method_name": null,
        "unique_global_name": "rectangle_left",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The location of the left edge of the rectangle.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The distance from the left of the screen to the left side of\nthe rectangle.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "rect": {
            "type": "rectangle",
            "description": "The rectangle.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def rectangle_left(rect):"
          ],
          "csharp": [
            "public static float SplashKit.RectangleLeft(Rectangle rect);"
          ],
          "cpp": [
            "float rectangle_left(const rectangle &rect)"
          ],
          "pascal": [
            "function RectangleLeft(const rect: Rectangle): Single"
          ]
        }
      },
      {
        "signature": "rectangle rectangle_offset_by(const rectangle &rect,const vector_2d &offset);",
        "name": "rectangle_offset_by",
        "method_name": null,
        "unique_global_name": "rectangle_offset_by",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a rectangle that is moved by the provided vector.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "A new rectangle that represents the original rectangle\nafter being moved by the offset vector.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "rect": {
            "type": "rectangle",
            "description": "The original rectangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "offset": {
            "type": "vector_2d",
            "description": "The amount and direction for the rectangle to move",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def rectangle_offset_by(rect, offset):"
          ],
          "csharp": [
            "public static Rectangle SplashKit.RectangleOffsetBy(Rectangle rect, Vector2D offset);"
          ],
          "cpp": [
            "rectangle rectangle_offset_by(const rectangle &rect, const vector_2d &offset)"
          ],
          "pascal": [
            "function RectangleOffsetBy(const rect: Rectangle; const offset: Vector2D): Rectangle"
          ]
        }
      },
      {
        "signature": "float rectangle_right(const rectangle &rect);",
        "name": "rectangle_right",
        "method_name": null,
        "unique_global_name": "rectangle_right",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The location of the right edge of the rectangle.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The distance from the left of the screen to the right side\nof the rectangle.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "rect": {
            "type": "rectangle",
            "description": "The rectangle.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def rectangle_right(rect):"
          ],
          "csharp": [
            "public static float SplashKit.RectangleRight(Rectangle rect);"
          ],
          "cpp": [
            "float rectangle_right(const rectangle &rect)"
          ],
          "pascal": [
            "function RectangleRight(const rect: Rectangle): Single"
          ]
        }
      },
      {
        "signature": "string rectangle_to_string(const rectangle &rect);",
        "name": "rectangle_to_string",
        "method_name": null,
        "unique_global_name": "rectangle_to_string",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Get a text representation of the passed in rectangle.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "A string representation of the rectangle.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "rect": {
            "type": "rectangle",
            "description": "The rectangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def rectangle_to_string(rect):"
          ],
          "csharp": [
            "public static string SplashKit.RectangleToString(Rectangle rect);"
          ],
          "cpp": [
            "string rectangle_to_string(const rectangle &rect)"
          ],
          "pascal": [
            "function RectangleToString(const rect: Rectangle): String"
          ]
        }
      },
      {
        "signature": "float rectangle_top(const rectangle &rect);",
        "name": "rectangle_top",
        "method_name": null,
        "unique_global_name": "rectangle_top",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The top of the rectangle.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "Its distance from the top of the screen.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "rect": {
            "type": "rectangle",
            "description": "The rectangle.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def rectangle_top(rect):"
          ],
          "csharp": [
            "public static float SplashKit.RectangleTop(Rectangle rect);"
          ],
          "cpp": [
            "float rectangle_top(const rectangle &rect)"
          ],
          "pascal": [
            "function RectangleTop(const rect: Rectangle): Single"
          ]
        }
      },
      {
        "signature": "bool rectangles_intersect(const rectangle &rect1,const rectangle &rect2);",
        "name": "rectangles_intersect",
        "method_name": null,
        "unique_global_name": "rectangles_intersect",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if the two rectangles intersect.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True when rect1 and rect2 intersect.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "rect1": {
            "type": "rectangle",
            "description": "The first rectangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect2": {
            "type": "rectangle",
            "description": "The second rectangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def rectangles_intersect(rect1, rect2):"
          ],
          "csharp": [
            "public static bool SplashKit.RectanglesIntersect(Rectangle rect1, Rectangle rect2);"
          ],
          "cpp": [
            "bool rectangles_intersect(const rectangle &rect1, const rectangle &rect2)"
          ],
          "pascal": [
            "function RectanglesIntersect(const rect1: Rectangle; const rect2: Rectangle): Boolean"
          ]
        }
      },
      {
        "signature": "point_2d triangle_barycenter(const triangle &tri);",
        "name": "triangle_barycenter",
        "method_name": null,
        "unique_global_name": "triangle_barycenter",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Return the barycenter of the triangle. This is one way of calculating the\ncenter point of a triangle.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "The point that is the barycenter of `tri`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "tri": {
            "type": "triangle",
            "description": "The triangle to get the center of",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def triangle_barycenter(tri):"
          ],
          "csharp": [
            "public static Point2D SplashKit.TriangleBarycenter(Triangle tri);"
          ],
          "cpp": [
            "point_2d triangle_barycenter(const triangle &tri)"
          ],
          "pascal": [
            "function TriangleBarycenter(const tri: Triangle): Point2D"
          ]
        }
      },
      {
        "signature": "triangle triangle_from(const point_2d &p1,const point_2d &p2,const point_2d &p3);",
        "name": "triangle_from",
        "method_name": null,
        "unique_global_name": "triangle_from",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generate a triangle from a set of points.",
        "brief": null,
        "return": {
          "type": "triangle",
          "description": "A triangle with the indicated points",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "p1": {
            "type": "point_2d",
            "description": "The first point of the triangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "p2": {
            "type": "point_2d",
            "description": "The second point of the triangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "p3": {
            "type": "point_2d",
            "description": "The third point of the triangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def triangle_from(p1, p2, p3):"
          ],
          "csharp": [
            "public static Triangle SplashKit.TriangleFrom(Point2D p1, Point2D p2, Point2D p3);"
          ],
          "cpp": [
            "triangle triangle_from(const point_2d &p1, const point_2d &p2, const point_2d &p3)"
          ],
          "pascal": [
            "function TriangleFrom(const p1: Point2D; const p2: Point2D; const p3: Point2D): Triangle"
          ]
        }
      },
      {
        "signature": "triangle triangle_from(double x1,double y1,double x2,double y2,double x3,double y3);",
        "name": "triangle_from",
        "method_name": null,
        "unique_global_name": "triangle_from_coordinates",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generate a triangle from a set of points.",
        "brief": null,
        "return": {
          "type": "triangle",
          "description": "A triangle at the indicated points",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "x1": {
            "type": "double",
            "description": "The x coordinate for the first point",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y1": {
            "type": "double",
            "description": "The y coordinate for the first point",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x2": {
            "type": "double",
            "description": "The x coordinate for the second point",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y2": {
            "type": "double",
            "description": "The y coordinate for the second point",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x3": {
            "type": "double",
            "description": "The x coordinate for the third point",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y3": {
            "type": "double",
            "description": "The y coordinate for the third point",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "coordinates",
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def triangle_from_coordinates(x1, y1, x2, y2, x3, y3):"
          ],
          "csharp": [
            "public static Triangle SplashKit.TriangleFrom(double x1, double y1, double x2, double y2, double x3, double y3);"
          ],
          "cpp": [
            "triangle triangle_from(double x1, double y1, double x2, double y2, double x3, double y3)"
          ],
          "pascal": [
            "function TriangleFrom(x1: Double; y1: Double; x2: Double; y2: Double; x3: Double; y3: Double): Triangle"
          ]
        }
      },
      {
        "signature": "bool triangle_rectangle_intersect(const triangle &tri,const rectangle &rect);",
        "name": "triangle_rectangle_intersect",
        "method_name": null,
        "unique_global_name": "triangle_rectangle_intersect",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if the triangle intersects with the rectangle.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the triangle and rect intersect",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "tri": {
            "type": "triangle",
            "description": "The triangle to test",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to test",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def triangle_rectangle_intersect(tri, rect):"
          ],
          "csharp": [
            "public static bool SplashKit.TriangleRectangleIntersect(Triangle tri, Rectangle rect);"
          ],
          "cpp": [
            "bool triangle_rectangle_intersect(const triangle &tri, const rectangle &rect)"
          ],
          "pascal": [
            "function TriangleRectangleIntersect(const tri: Triangle; const rect: Rectangle): Boolean"
          ]
        }
      },
      {
        "signature": "string triangle_to_string(const triangle &tri);",
        "name": "triangle_to_string",
        "method_name": null,
        "unique_global_name": "triangle_to_string",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a text description of the triangle.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "A text description of the triangle.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "tri": {
            "type": "triangle",
            "description": "The triangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def triangle_to_string(tri):"
          ],
          "csharp": [
            "public static string SplashKit.TriangleToString(Triangle tri);"
          ],
          "cpp": [
            "string triangle_to_string(const triangle &tri)"
          ],
          "pascal": [
            "function TriangleToString(const tri: Triangle): String"
          ]
        }
      },
      {
        "signature": "bool triangles_intersect(const triangle &t1,const triangle &t2);",
        "name": "triangles_intersect",
        "method_name": null,
        "unique_global_name": "triangles_intersect",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if the two triangles intersect.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the two triangles intersect",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "t1": {
            "type": "triangle",
            "description": "The first triangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "t2": {
            "type": "triangle",
            "description": "The other triangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "python": [
            "def triangles_intersect(t1, t2):"
          ],
          "csharp": [
            "public static bool SplashKit.TrianglesIntersect(Triangle t1, Triangle t2);"
          ],
          "cpp": [
            "bool triangles_intersect(const triangle &t1, const triangle &t2)"
          ],
          "pascal": [
            "function TrianglesIntersect(const t1: Triangle; const t2: Triangle): Boolean"
          ]
        }
      }
    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "graphics": {
    "brief": "SplashKit Images allow drawing of bitmaps and sprites to graphic windows.SplashKit Text allows for drawing text in a variety of ways to\ngraphic windows.",
    "description": "",
    "functions": [
      {
        "signature": "void draw_circle(color clr,const circle &c);",
        "name": "draw_circle",
        "method_name": "draw",
        "unique_global_name": "draw_circle_record",
        "unique_method_name": "circle.draw_record",
        "suffix_name": null,
        "description": "Draw a circle on the current window. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "c": {
            "type": "circle",
            "description": "The circle being drawn",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "circle",
          "method": "draw",
          "self": "c",
          "suffix": "record",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def draw_circle_record(clr, c):"
          ],
          "csharp": [
            "public void Circle.Draw(Color clr);",
            "public static void SplashKit.DrawCircle(Color clr, Circle c);"
          ],
          "cpp": [
            "void draw_circle(color clr, const circle &c)"
          ],
          "pascal": [
            "procedure DrawCircle(clr: Color; const c: Circle)"
          ]
        }
      },
      {
        "signature": "void draw_circle(color clr,const circle &c,drawing_options opts);",
        "name": "draw_circle",
        "method_name": "draw",
        "unique_global_name": "draw_circle_record_with_options",
        "unique_method_name": "circle.draw_record_with_options",
        "suffix_name": null,
        "description": "Draw a circle with the provided drawing options, which may include options related to\nthe drawing destination.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "c": {
            "type": "circle",
            "description": "The circle being drawn",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "Drawing options to configure the drawing operation",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "circle",
          "method": "draw",
          "self": "c",
          "suffix": "record_with_options",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def draw_circle_record_with_options(clr, c, opts):"
          ],
          "csharp": [
            "public void Circle.Draw(Color clr, DrawingOptions opts);",
            "public static void SplashKit.DrawCircle(Color clr, Circle c, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_circle(color clr, const circle &c, drawing_options opts)"
          ],
          "pascal": [
            "procedure DrawCircle(clr: Color; const c: Circle; opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_circle(color clr,double x,double y,double radius);",
        "name": "draw_circle",
        "method_name": null,
        "unique_global_name": "draw_circle",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draw a circle onto the current window. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x location of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "radius": {
            "type": "double",
            "description": "The radius of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def draw_circle(clr, x, y, radius):"
          ],
          "csharp": [
            "public static void SplashKit.DrawCircle(Color clr, double x, double y, double radius);"
          ],
          "cpp": [
            "void draw_circle(color clr, double x, double y, double radius)"
          ],
          "pascal": [
            "procedure DrawCircle(clr: Color; x: Double; y: Double; radius: Double)"
          ]
        }
      },
      {
        "signature": "void draw_circle(color clr,double x,double y,double radius,drawing_options opts);",
        "name": "draw_circle",
        "method_name": null,
        "unique_global_name": "draw_circle_with_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draw a circle using the supplied drawing options. The circle is centred on its x, y\ncoordinates, and has the provided radius. This will use `drawing_options` to determine\nthe destination.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x location of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "radius": {
            "type": "double",
            "description": "The radius of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "Drawing options to configure the drawing operation",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "with_options",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def draw_circle_with_options(clr, x, y, radius, opts):"
          ],
          "csharp": [
            "public static void SplashKit.DrawCircle(Color clr, double x, double y, double radius, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_circle(color clr, double x, double y, double radius, drawing_options opts)"
          ],
          "pascal": [
            "procedure DrawCircle(clr: Color; x: Double; y: Double; radius: Double; opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_circle_on_bitmap(bitmap destination,color clr,double x,double y,double radius);",
        "name": "draw_circle_on_bitmap",
        "method_name": "draw_circle",
        "unique_global_name": "draw_circle_on_bitmap",
        "unique_method_name": "bitmap.draw_circle",
        "suffix_name": null,
        "description": "Draw a circle onto the destination bitmap. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "bitmap",
            "description": "The destination bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x location of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "radius": {
            "type": "double",
            "description": "The radius of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "draw_circle",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_circle_on_bitmap(destination, clr, x, y, radius):"
          ],
          "csharp": [
            "public void Bitmap.DrawCircle(Color clr, double x, double y, double radius);",
            "public static void SplashKit.DrawCircleOnBitmap(Bitmap destination, Color clr, double x, double y, double radius);"
          ],
          "cpp": [
            "void draw_circle_on_bitmap(bitmap destination, color clr, double x, double y, double radius)"
          ],
          "pascal": [
            "procedure DrawCircleOnBitmap(destination: Bitmap; clr: Color; x: Double; y: Double; radius: Double)"
          ]
        }
      },
      {
        "signature": "void draw_circle_on_bitmap(bitmap destination,color clr,double x,double y,double radius,drawing_options opts);",
        "name": "draw_circle_on_bitmap",
        "method_name": "draw_circle",
        "unique_global_name": "draw_circle_on_bitmap_with_options",
        "unique_method_name": "bitmap.draw_circle_with_options",
        "suffix_name": null,
        "description": "Draw a circle to the bitmap using the supplied drawing options. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "bitmap",
            "description": "The destination bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x location of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "radius": {
            "type": "double",
            "description": "The radius of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "Drawing options to configure the drawing operation",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "draw_circle",
          "suffix": "with_options",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_circle_on_bitmap_with_options(destination, clr, x, y, radius, opts):"
          ],
          "csharp": [
            "public void Bitmap.DrawCircle(Color clr, double x, double y, double radius, DrawingOptions opts);",
            "public static void SplashKit.DrawCircleOnBitmap(Bitmap destination, Color clr, double x, double y, double radius, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_circle_on_bitmap(bitmap destination, color clr, double x, double y, double radius, drawing_options opts)"
          ],
          "pascal": [
            "procedure DrawCircleOnBitmap(destination: Bitmap; clr: Color; x: Double; y: Double; radius: Double; opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_circle_on_window(window destination,color clr,double x,double y,double radius);",
        "name": "draw_circle_on_window",
        "method_name": "draw_circle",
        "unique_global_name": "draw_circle_on_window",
        "unique_method_name": "window.draw_circle",
        "suffix_name": null,
        "description": "Draw a circle onto the destination window. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "window",
            "description": "The destination window",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x location of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "radius": {
            "type": "double",
            "description": "The radius of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "draw_circle",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_circle_on_window(destination, clr, x, y, radius):"
          ],
          "csharp": [
            "public void Window.DrawCircle(Color clr, double x, double y, double radius);",
            "public static void SplashKit.DrawCircleOnWindow(Window destination, Color clr, double x, double y, double radius);"
          ],
          "cpp": [
            "void draw_circle_on_window(window destination, color clr, double x, double y, double radius)"
          ],
          "pascal": [
            "procedure DrawCircleOnWindow(destination: Window; clr: Color; x: Double; y: Double; radius: Double)"
          ]
        }
      },
      {
        "signature": "void draw_circle_on_window(window destination,color clr,double x,double y,double radius,drawing_options opts);",
        "name": "draw_circle_on_window",
        "method_name": "draw_circle",
        "unique_global_name": "draw_circle_on_window_with_options",
        "unique_method_name": "window.draw_circle_with_options",
        "suffix_name": null,
        "description": "Draw a circle to the window using the supplied drawing options. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "window",
            "description": "The destination window",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x location of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "radius": {
            "type": "double",
            "description": "The radius of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "Drawing options to configure the drawing operation",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "draw_circle",
          "suffix": "with_options",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_circle_on_window_with_options(destination, clr, x, y, radius, opts):"
          ],
          "csharp": [
            "public void Window.DrawCircle(Color clr, double x, double y, double radius, DrawingOptions opts);",
            "public static void SplashKit.DrawCircleOnWindow(Window destination, Color clr, double x, double y, double radius, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_circle_on_window(window destination, color clr, double x, double y, double radius, drawing_options opts)"
          ],
          "pascal": [
            "procedure DrawCircleOnWindow(destination: Window; clr: Color; x: Double; y: Double; radius: Double; opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void fill_circle(color clr,const circle &c);",
        "name": "fill_circle",
        "method_name": "fill",
        "unique_global_name": "fill_circle_record",
        "unique_method_name": "circle.fill_record",
        "suffix_name": null,
        "description": "Draw a circle on the current window. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "c": {
            "type": "circle",
            "description": "The circle being drawn",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "circle",
          "method": "fill",
          "self": "c",
          "suffix": "record",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def fill_circle_record(clr, c):"
          ],
          "csharp": [
            "public void Circle.Fill(Color clr);",
            "public static void SplashKit.FillCircle(Color clr, Circle c);"
          ],
          "cpp": [
            "void fill_circle(color clr, const circle &c)"
          ],
          "pascal": [
            "procedure FillCircle(clr: Color; const c: Circle)"
          ]
        }
      },
      {
        "signature": "void fill_circle(color clr,const circle &c,drawing_options opts);",
        "name": "fill_circle",
        "method_name": "fill",
        "unique_global_name": "fill_circle_record_with_options",
        "unique_method_name": "circle.fill_record_with_options",
        "suffix_name": null,
        "description": "Fill a circle with the provided drawing options, which may include options related to\nthe drawing destination.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "c": {
            "type": "circle",
            "description": "The circle being drawn",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "Drawing options to configure the drawing operation",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "circle",
          "method": "fill",
          "self": "c",
          "suffix": "record_with_options",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def fill_circle_record_with_options(clr, c, opts):"
          ],
          "csharp": [
            "public void Circle.Fill(Color clr, DrawingOptions opts);",
            "public static void SplashKit.FillCircle(Color clr, Circle c, DrawingOptions opts);"
          ],
          "cpp": [
            "void fill_circle(color clr, const circle &c, drawing_options opts)"
          ],
          "pascal": [
            "procedure FillCircle(clr: Color; const c: Circle; opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void fill_circle(color clr,double x,double y,double radius);",
        "name": "fill_circle",
        "method_name": null,
        "unique_global_name": "fill_circle",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fill a circle onto the current window. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x location of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "radius": {
            "type": "double",
            "description": "The radius of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def fill_circle(clr, x, y, radius):"
          ],
          "csharp": [
            "public static void SplashKit.FillCircle(Color clr, double x, double y, double radius);"
          ],
          "cpp": [
            "void fill_circle(color clr, double x, double y, double radius)"
          ],
          "pascal": [
            "procedure FillCircle(clr: Color; x: Double; y: Double; radius: Double)"
          ]
        }
      },
      {
        "signature": "void fill_circle(color clr,double x,double y,double radius,drawing_options opts);",
        "name": "fill_circle",
        "method_name": null,
        "unique_global_name": "fill_circle_with_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fill a circle using the supplied drawing options. The circle is centred on its x, y\ncoordinates, and has the provided radius. This will use `drawing_options` to determine\nthe destination.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x location of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "radius": {
            "type": "double",
            "description": "The radius of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "Drawing options to configure the drawing operation",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "with_options",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def fill_circle_with_options(clr, x, y, radius, opts):"
          ],
          "csharp": [
            "public static void SplashKit.FillCircle(Color clr, double x, double y, double radius, DrawingOptions opts);"
          ],
          "cpp": [
            "void fill_circle(color clr, double x, double y, double radius, drawing_options opts)"
          ],
          "pascal": [
            "procedure FillCircle(clr: Color; x: Double; y: Double; radius: Double; opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void fill_circle_on_bitmap(bitmap destination,color clr,double x,double y,double radius);",
        "name": "fill_circle_on_bitmap",
        "method_name": "fill_circle",
        "unique_global_name": "fill_circle_on_bitmap",
        "unique_method_name": "bitmap.fill_circle",
        "suffix_name": null,
        "description": "Fill a circle onto the destination bitmap. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "bitmap",
            "description": "The destination bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x location of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "radius": {
            "type": "double",
            "description": "The radius of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "fill_circle",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def fill_circle_on_bitmap(destination, clr, x, y, radius):"
          ],
          "csharp": [
            "public void Bitmap.FillCircle(Color clr, double x, double y, double radius);",
            "public static void SplashKit.FillCircleOnBitmap(Bitmap destination, Color clr, double x, double y, double radius);"
          ],
          "cpp": [
            "void fill_circle_on_bitmap(bitmap destination, color clr, double x, double y, double radius)"
          ],
          "pascal": [
            "procedure FillCircleOnBitmap(destination: Bitmap; clr: Color; x: Double; y: Double; radius: Double)"
          ]
        }
      },
      {
        "signature": "void fill_circle_on_bitmap(bitmap destination,color clr,double x,double y,double radius,drawing_options opts);",
        "name": "fill_circle_on_bitmap",
        "method_name": "fill_circle",
        "unique_global_name": "fill_circle_on_bitmap_with_options",
        "unique_method_name": "bitmap.fill_circle_with_options",
        "suffix_name": null,
        "description": "Fill a circle to the bitmap using the supplied drawing options. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "bitmap",
            "description": "The destination bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x location of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "radius": {
            "type": "double",
            "description": "The radius of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "Drawing options to configure the drawing operation",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "fill_circle",
          "suffix": "with_options",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def fill_circle_on_bitmap_with_options(destination, clr, x, y, radius, opts):"
          ],
          "csharp": [
            "public void Bitmap.FillCircle(Color clr, double x, double y, double radius, DrawingOptions opts);",
            "public static void SplashKit.FillCircleOnBitmap(Bitmap destination, Color clr, double x, double y, double radius, DrawingOptions opts);"
          ],
          "cpp": [
            "void fill_circle_on_bitmap(bitmap destination, color clr, double x, double y, double radius, drawing_options opts)"
          ],
          "pascal": [
            "procedure FillCircleOnBitmap(destination: Bitmap; clr: Color; x: Double; y: Double; radius: Double; opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void fill_circle_on_window(window destination,color clr,double x,double y,double radius);",
        "name": "fill_circle_on_window",
        "method_name": "fill_circle",
        "unique_global_name": "fill_circle_on_window",
        "unique_method_name": "window.fill_circle",
        "suffix_name": null,
        "description": "Fill a circle onto the destination window. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "window",
            "description": "The destination window",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x location of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "radius": {
            "type": "double",
            "description": "The radius of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "fill_circle",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def fill_circle_on_window(destination, clr, x, y, radius):"
          ],
          "csharp": [
            "public void Window.FillCircle(Color clr, double x, double y, double radius);",
            "public static void SplashKit.FillCircleOnWindow(Window destination, Color clr, double x, double y, double radius);"
          ],
          "cpp": [
            "void fill_circle_on_window(window destination, color clr, double x, double y, double radius)"
          ],
          "pascal": [
            "procedure FillCircleOnWindow(destination: Window; clr: Color; x: Double; y: Double; radius: Double)"
          ]
        }
      },
      {
        "signature": "void fill_circle_on_window(window destination,color clr,double x,double y,double radius,drawing_options opts);",
        "name": "fill_circle_on_window",
        "method_name": "fill_circle",
        "unique_global_name": "fill_circle_on_window_with_options",
        "unique_method_name": "window.fill_circle_with_options",
        "suffix_name": null,
        "description": "Fill a circle to the window using the supplied drawing options. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "window",
            "description": "The destination window",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x location of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "radius": {
            "type": "double",
            "description": "The radius of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "Drawing options to configure the drawing operation",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "fill_circle",
          "suffix": "with_options",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def fill_circle_on_window_with_options(destination, clr, x, y, radius, opts):"
          ],
          "csharp": [
            "public void Window.FillCircle(Color clr, double x, double y, double radius, DrawingOptions opts);",
            "public static void SplashKit.FillCircleOnWindow(Window destination, Color clr, double x, double y, double radius, DrawingOptions opts);"
          ],
          "cpp": [
            "void fill_circle_on_window(window destination, color clr, double x, double y, double radius, drawing_options opts)"
          ],
          "pascal": [
            "procedure FillCircleOnWindow(destination: Window; clr: Color; x: Double; y: Double; radius: Double; opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "rectangle current_clip();",
        "name": "current_clip",
        "method_name": null,
        "unique_global_name": "current_clip",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the rectangle of the current clip area for the current window",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "The current clipping rectangle for the current window",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def current_clip():"
          ],
          "csharp": [
            "public static Rectangle SplashKit.CurrentClip();"
          ],
          "cpp": [
            "rectangle current_clip()"
          ],
          "pascal": [
            "function CurrentClip(): Rectangle"
          ]
        }
      },
      {
        "signature": "rectangle current_clip(bitmap bmp);",
        "name": "current_clip",
        "method_name": null,
        "unique_global_name": "current_clip_for_bitmap",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the rectangle of the current clip area for a bitmap",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "The current clipping rectangle for the bitmap",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to get the clipping rectangle from",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "for_bitmap",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def current_clip_for_bitmap(bmp):"
          ],
          "csharp": [
            "public static Rectangle SplashKit.CurrentClip(Bitmap bmp);"
          ],
          "cpp": [
            "rectangle current_clip(bitmap bmp)"
          ],
          "pascal": [
            "function CurrentClip(bmp: Bitmap): Rectangle"
          ]
        }
      },
      {
        "signature": "rectangle current_clip(window wnd);",
        "name": "current_clip",
        "method_name": null,
        "unique_global_name": "current_clip_for_window",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the rectangle of the current clip area for a window",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "The current clipping rectangle for the window",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wnd": {
            "type": "window",
            "description": "The window to get the clipping rectangle from",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "for_window",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def current_clip_for_window(wnd):"
          ],
          "csharp": [
            "public static Rectangle SplashKit.CurrentClip(Window wnd);"
          ],
          "cpp": [
            "rectangle current_clip(window wnd)"
          ],
          "pascal": [
            "function CurrentClip(wnd: Window): Rectangle"
          ]
        }
      },
      {
        "signature": "void pop_clip(window wnd);",
        "name": "pop_clip",
        "method_name": null,
        "unique_global_name": "pop_clip_for_window",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Remove the last clipping rectangle pushed to the window. This\nwill then apply the previously pushed clipping rectangle.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wnd": {
            "type": "window",
            "description": "The window to change",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "for_window",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def pop_clip_for_window(wnd):"
          ],
          "csharp": [
            "public static void SplashKit.PopClip(Window wnd);"
          ],
          "cpp": [
            "void pop_clip(window wnd)"
          ],
          "pascal": [
            "procedure PopClip(wnd: Window)"
          ]
        }
      },
      {
        "signature": "void pop_clip();",
        "name": "pop_clip",
        "method_name": null,
        "unique_global_name": "pop_clip",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Remove the last clipping rectangle pushed to the current window. This\nwill then apply the previously pushed clipping rectangle.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def pop_clip():"
          ],
          "csharp": [
            "public static void SplashKit.PopClip();"
          ],
          "cpp": [
            "void pop_clip()"
          ],
          "pascal": [
            "procedure PopClip()"
          ]
        }
      },
      {
        "signature": "void pop_clip(bitmap bmp);",
        "name": "pop_clip",
        "method_name": null,
        "unique_global_name": "pop_clip_for_bitmap",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Remove the last clipping rectangle pushed to the bitmap. This\nwill then apply the previously pushed clipping rectangle.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to change",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "for_bitmap",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def pop_clip_for_bitmap(bmp):"
          ],
          "csharp": [
            "public static void SplashKit.PopClip(Bitmap bmp);"
          ],
          "cpp": [
            "void pop_clip(bitmap bmp)"
          ],
          "pascal": [
            "procedure PopClip(bmp: Bitmap)"
          ]
        }
      },
      {
        "signature": "void push_clip(window wnd,const rectangle &r);",
        "name": "push_clip",
        "method_name": null,
        "unique_global_name": "push_clip_for_window",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Add the clipping rectangle of a window and uses the intersect between\nthe new rectangle and previous clip.\n\nWhen a clipping rectangle is provided, drawing operations will only\naffect the area specified in the current clipping rectangle.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wnd": {
            "type": "window",
            "description": "The window to add clipping to",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "r": {
            "type": "rectangle",
            "description": "The new clipping rectangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "for_window",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def push_clip_for_window(wnd, r):"
          ],
          "csharp": [
            "public static void SplashKit.PushClip(Window wnd, Rectangle r);"
          ],
          "cpp": [
            "void push_clip(window wnd, const rectangle &r)"
          ],
          "pascal": [
            "procedure PushClip(wnd: Window; const r: Rectangle)"
          ]
        }
      },
      {
        "signature": "void push_clip(bitmap bmp,const rectangle &r);",
        "name": "push_clip",
        "method_name": null,
        "unique_global_name": "push_clip_for_bitmap",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Add the clipping rectangle of a bitmap and uses the intersect between\nthe new rectangle and previous clip.\n\nWhen a clipping rectangle is provided, drawing operations will only\naffect the area specified in the current clipping rectangle.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to add clipping to",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "r": {
            "type": "rectangle",
            "description": "The new clipping rectangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "for_bitmap",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def push_clip_for_bitmap(bmp, r):"
          ],
          "csharp": [
            "public static void SplashKit.PushClip(Bitmap bmp, Rectangle r);"
          ],
          "cpp": [
            "void push_clip(bitmap bmp, const rectangle &r)"
          ],
          "pascal": [
            "procedure PushClip(bmp: Bitmap; const r: Rectangle)"
          ]
        }
      },
      {
        "signature": "void push_clip(const rectangle &r);",
        "name": "push_clip",
        "method_name": null,
        "unique_global_name": "push_clip",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Push a clip rectangle to the current window. The resulting clipping\nrectangle will be the intersection of the existing clipping rectangle\nwith the new rectangle provided in this call. This can be undone using\n`pop_clip`.\n\nWhen a clipping rectangle is provided, drawing operations will only\naffect the area specified in the current clipping rectangle.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "r": {
            "type": "rectangle",
            "description": "The new clipping rectangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def push_clip(r):"
          ],
          "csharp": [
            "public static void SplashKit.PushClip(Rectangle r);"
          ],
          "cpp": [
            "void push_clip(const rectangle &r)"
          ],
          "pascal": [
            "procedure PushClip(const r: Rectangle)"
          ]
        }
      },
      {
        "signature": "void reset_clip(bitmap bmp);",
        "name": "reset_clip",
        "method_name": null,
        "unique_global_name": "reset_clip_for_bitmap",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Reset the clipping rectangle on a bitmap. This will clear all\nof the clipping rectangles pushed to the bitmap.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to clear the clipping rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "for_bitmap",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def reset_clip_for_bitmap(bmp):"
          ],
          "csharp": [
            "public static void SplashKit.ResetClip(Bitmap bmp);"
          ],
          "cpp": [
            "void reset_clip(bitmap bmp)"
          ],
          "pascal": [
            "procedure ResetClip(bmp: Bitmap)"
          ]
        }
      },
      {
        "signature": "void reset_clip();",
        "name": "reset_clip",
        "method_name": null,
        "unique_global_name": "reset_clip",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Reset the clipping rectangle of the current window. This will clear all\nof the clipping rectangles pushed to the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def reset_clip():"
          ],
          "csharp": [
            "public static void SplashKit.ResetClip();"
          ],
          "cpp": [
            "void reset_clip()"
          ],
          "pascal": [
            "procedure ResetClip()"
          ]
        }
      },
      {
        "signature": "void reset_clip(window wnd);",
        "name": "reset_clip",
        "method_name": null,
        "unique_global_name": "reset_clip_for_window",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Reset the clipping rectangle on a window. This will clear all\nof the clipping rectangles pushed to the window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wnd": {
            "type": "window",
            "description": "The window to clear the clipping rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "for_window",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def reset_clip_for_window(wnd):"
          ],
          "csharp": [
            "public static void SplashKit.ResetClip(Window wnd);"
          ],
          "cpp": [
            "void reset_clip(window wnd)"
          ],
          "pascal": [
            "procedure ResetClip(wnd: Window)"
          ]
        }
      },
      {
        "signature": "void set_clip(const rectangle &r);",
        "name": "set_clip",
        "method_name": null,
        "unique_global_name": "set_clip",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Set the clip rectangle of the current window. This will clear any\nexisting clipping rectangles pushed to the current window, and use the\nsupplied rectangle for clipping.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "r": {
            "type": "rectangle",
            "description": "The new clipping rectangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def set_clip(r):"
          ],
          "csharp": [
            "public static void SplashKit.SetClip(Rectangle r);"
          ],
          "cpp": [
            "void set_clip(const rectangle &r)"
          ],
          "pascal": [
            "procedure SetClip(const r: Rectangle)"
          ]
        }
      },
      {
        "signature": "void set_clip(bitmap bmp,const rectangle &r);",
        "name": "set_clip",
        "method_name": null,
        "unique_global_name": "set_clip_for_bitmap",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Set the clip rectangle of the bitmap. This will clear any existing\nclipping rectangles pushed to the bitmap, and use the supplied rectangle\nfor clipping.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to change",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "r": {
            "type": "rectangle",
            "description": "The new clipping rectangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "for_bitmap",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def set_clip_for_bitmap(bmp, r):"
          ],
          "csharp": [
            "public static void SplashKit.SetClip(Bitmap bmp, Rectangle r);"
          ],
          "cpp": [
            "void set_clip(bitmap bmp, const rectangle &r)"
          ],
          "pascal": [
            "procedure SetClip(bmp: Bitmap; const r: Rectangle)"
          ]
        }
      },
      {
        "signature": "void set_clip(window wnd,const rectangle &r);",
        "name": "set_clip",
        "method_name": null,
        "unique_global_name": "set_clip_for_window",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Set the clip rectangle of the window. This will clear any existing\nclipping rectangles pushed to the window, and use the supplied rectangle\nfor clipping.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wnd": {
            "type": "window",
            "description": "The window to change",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "r": {
            "type": "rectangle",
            "description": "The new clipping rectangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "for_window",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def set_clip_for_window(wnd, r):"
          ],
          "csharp": [
            "public static void SplashKit.SetClip(Window wnd, Rectangle r);"
          ],
          "cpp": [
            "void set_clip(window wnd, const rectangle &r)"
          ],
          "pascal": [
            "procedure SetClip(wnd: Window; const r: Rectangle)"
          ]
        }
      },
      {
        "signature": "drawing_options option_defaults();",
        "name": "option_defaults",
        "method_name": null,
        "unique_global_name": "option_defaults",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a `drawing_options` with default values.\nThis will draw to the current window, with default scale of 1, no\nrotation or offset, not flipped, drawing whole images, with default\ncamera mechanisms and line width.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "A default drawing options.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def option_defaults():"
          ],
          "csharp": [
            "public static DrawingOptions SplashKit.OptionDefaults();"
          ],
          "cpp": [
            "drawing_options option_defaults()"
          ],
          "pascal": [
            "function OptionDefaults(): DrawingOptions"
          ]
        }
      },
      {
        "signature": "drawing_options option_draw_to(bitmap dest);",
        "name": "option_draw_to",
        "method_name": null,
        "unique_global_name": "option_draw_to_bitmap",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to draw to a Bitmap. Pass dest the Bitmap you want to draw on.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Drawing options that will draw onto a bitmap.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "dest": {
            "type": "bitmap",
            "description": "The bitmap to draw to.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "bitmap",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def option_draw_to_bitmap(dest):"
          ],
          "csharp": [
            "public static DrawingOptions SplashKit.OptionDrawTo(Bitmap dest);"
          ],
          "cpp": [
            "drawing_options option_draw_to(bitmap dest)"
          ],
          "pascal": [
            "function OptionDrawTo(dest: Bitmap): DrawingOptions"
          ]
        }
      },
      {
        "signature": "drawing_options option_draw_to(bitmap dest,drawing_options opts);",
        "name": "option_draw_to",
        "method_name": null,
        "unique_global_name": "option_draw_to_bitmap_with_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to draw to a Bitmap. Pass dest the Bitmap you want to draw on.\nPass opts the other options you want use.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Drawing options that will draw onto a bitmap.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "dest": {
            "type": "bitmap",
            "description": "The bitmap to draw to.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "Values for the other options.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "bitmap_with_options",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def option_draw_to_bitmap_with_options(dest, opts):"
          ],
          "csharp": [
            "public static DrawingOptions SplashKit.OptionDrawTo(Bitmap dest, DrawingOptions opts);"
          ],
          "cpp": [
            "drawing_options option_draw_to(bitmap dest, drawing_options opts)"
          ],
          "pascal": [
            "function OptionDrawTo(dest: Bitmap; opts: DrawingOptions): DrawingOptions"
          ]
        }
      },
      {
        "signature": "drawing_options option_draw_to(window dest);",
        "name": "option_draw_to",
        "method_name": null,
        "unique_global_name": "option_draw_to_window",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to draw to a specified Window. Pass dest the Window you want to draw on.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "A drawing option that will draw to the indicated window.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "dest": {
            "type": "window",
            "description": "The window to draw onto.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "window",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def option_draw_to_window(dest):"
          ],
          "csharp": [
            "public static DrawingOptions SplashKit.OptionDrawTo(Window dest);"
          ],
          "cpp": [
            "drawing_options option_draw_to(window dest)"
          ],
          "pascal": [
            "function OptionDrawTo(dest: Window): DrawingOptions"
          ]
        }
      },
      {
        "signature": "drawing_options option_draw_to(window dest,drawing_options opts);",
        "name": "option_draw_to",
        "method_name": null,
        "unique_global_name": "option_draw_to_window_with_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to draw to a Bitmap. Pass dest the Bitmap you want to draw on to.\nPass opts the other options you want use.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "A drawing option that will draw to the indicated window.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "dest": {
            "type": "window",
            "description": "The window to draw onto.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "Values for the other options.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "window_with_options",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def option_draw_to_window_with_options(dest, opts):"
          ],
          "csharp": [
            "public static DrawingOptions SplashKit.OptionDrawTo(Window dest, DrawingOptions opts);"
          ],
          "cpp": [
            "drawing_options option_draw_to(window dest, drawing_options opts)"
          ],
          "pascal": [
            "function OptionDrawTo(dest: Window; opts: DrawingOptions): DrawingOptions"
          ]
        }
      },
      {
        "signature": "drawing_options option_flip_x();",
        "name": "option_flip_x",
        "method_name": null,
        "unique_global_name": "option_flip_x",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to flip an image along its X axis.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Options that will flip bitmaps horizontally.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def option_flip_x():"
          ],
          "csharp": [
            "public static DrawingOptions SplashKit.OptionFlipX();"
          ],
          "cpp": [
            "drawing_options option_flip_x()"
          ],
          "pascal": [
            "function OptionFlipX(): DrawingOptions"
          ]
        }
      },
      {
        "signature": "drawing_options option_flip_x(drawing_options opts);",
        "name": "option_flip_x",
        "method_name": null,
        "unique_global_name": "option_flip_x_with_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to flip an image along its X axis.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Options that will flip bitmaps horizontally.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "opts": {
            "type": "drawing_options",
            "description": "Values for the other options.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "with_options",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def option_flip_x_with_options(opts):"
          ],
          "csharp": [
            "public static DrawingOptions SplashKit.OptionFlipX(DrawingOptions opts);"
          ],
          "cpp": [
            "drawing_options option_flip_x(drawing_options opts)"
          ],
          "pascal": [
            "function OptionFlipX(opts: DrawingOptions): DrawingOptions"
          ]
        }
      },
      {
        "signature": "drawing_options option_flip_xy();",
        "name": "option_flip_xy",
        "method_name": null,
        "unique_global_name": "option_flip_xy",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to flip the drawing of an image along both X and Y axis.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Options that flip bitmap drawing both vertically and\nhorizontally.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def option_flip_xy():"
          ],
          "csharp": [
            "public static DrawingOptions SplashKit.OptionFlipXy();"
          ],
          "cpp": [
            "drawing_options option_flip_xy()"
          ],
          "pascal": [
            "function OptionFlipXy(): DrawingOptions"
          ]
        }
      },
      {
        "signature": "drawing_options option_flip_xy(drawing_options opts);",
        "name": "option_flip_xy",
        "method_name": null,
        "unique_global_name": "option_flip_xy_with_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to flip the drawing of an image along both X and Y axis.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Options that flip bitmap drawing both vertically and\nhorizontally.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "opts": {
            "type": "drawing_options",
            "description": "Values for the other options.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "with_options",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def option_flip_xy_with_options(opts):"
          ],
          "csharp": [
            "public static DrawingOptions SplashKit.OptionFlipXy(DrawingOptions opts);"
          ],
          "cpp": [
            "drawing_options option_flip_xy(drawing_options opts)"
          ],
          "pascal": [
            "function OptionFlipXy(opts: DrawingOptions): DrawingOptions"
          ]
        }
      },
      {
        "signature": "drawing_options option_flip_y();",
        "name": "option_flip_y",
        "method_name": null,
        "unique_global_name": "option_flip_y",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to flip the drawing of an image along its Y axis.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Options that will flip bitmaps vertically.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def option_flip_y():"
          ],
          "csharp": [
            "public static DrawingOptions SplashKit.OptionFlipY();"
          ],
          "cpp": [
            "drawing_options option_flip_y()"
          ],
          "pascal": [
            "function OptionFlipY(): DrawingOptions"
          ]
        }
      },
      {
        "signature": "drawing_options option_flip_y(drawing_options opts);",
        "name": "option_flip_y",
        "method_name": null,
        "unique_global_name": "option_flip_y_with_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to flip the drawing of an image along its Y axis.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Options that will flip bitmaps vertically.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "opts": {
            "type": "drawing_options",
            "description": "Values for the other options.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "with_options",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def option_flip_y_with_options(opts):"
          ],
          "csharp": [
            "public static DrawingOptions SplashKit.OptionFlipY(DrawingOptions opts);"
          ],
          "cpp": [
            "drawing_options option_flip_y(drawing_options opts)"
          ],
          "pascal": [
            "function OptionFlipY(opts: DrawingOptions): DrawingOptions"
          ]
        }
      },
      {
        "signature": "drawing_options option_line_width(int width);",
        "name": "option_line_width",
        "method_name": null,
        "unique_global_name": "option_line_width",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to change the width of line drawings.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Options to draw lines with the indicated width.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "width": {
            "type": "int",
            "description": "The new line width for line drawing.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def option_line_width(width):"
          ],
          "csharp": [
            "public static DrawingOptions SplashKit.OptionLineWidth(int width);"
          ],
          "cpp": [
            "drawing_options option_line_width(int width)"
          ],
          "pascal": [
            "function OptionLineWidth(width: Integer): DrawingOptions"
          ]
        }
      },
      {
        "signature": "drawing_options option_line_width(int width,drawing_options opts);",
        "name": "option_line_width",
        "method_name": null,
        "unique_global_name": "option_line_width_with_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to change the width of line drawings.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Options to draw lines with the indicated width.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "width": {
            "type": "int",
            "description": "The new line width for line drawing.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "Values for the other options.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "with_options",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def option_line_width_with_options(width, opts):"
          ],
          "csharp": [
            "public static DrawingOptions SplashKit.OptionLineWidth(int width, DrawingOptions opts);"
          ],
          "cpp": [
            "drawing_options option_line_width(int width, drawing_options opts)"
          ],
          "pascal": [
            "function OptionLineWidth(width: Integer; opts: DrawingOptions): DrawingOptions"
          ]
        }
      },
      {
        "signature": "drawing_options option_part_bmp(double x,double y,double w,double h);",
        "name": "option_part_bmp",
        "method_name": null,
        "unique_global_name": "option_part_bmp",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to draw only a part of a bitmap.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Options to draw parts of a bitmap.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "x": {
            "type": "double",
            "description": "The x coordinate of the part within the bitmap.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y coordinate of the part within the bitmap.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "w": {
            "type": "double",
            "description": "The width of the part within the bitmap.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "h": {
            "type": "double",
            "description": "The height of the part within the bitmap.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def option_part_bmp(x, y, w, h):"
          ],
          "csharp": [
            "public static DrawingOptions SplashKit.OptionPartBmp(double x, double y, double w, double h);"
          ],
          "cpp": [
            "drawing_options option_part_bmp(double x, double y, double w, double h)"
          ],
          "pascal": [
            "function OptionPartBmp(x: Double; y: Double; w: Double; h: Double): DrawingOptions"
          ]
        }
      },
      {
        "signature": "drawing_options option_part_bmp(double x,double y,double w,double h,drawing_options opts);",
        "name": "option_part_bmp",
        "method_name": null,
        "unique_global_name": "option_part_bmp_with_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to draw only a part of a bitmap.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Options to draw parts of a bitmap.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "x": {
            "type": "double",
            "description": "The x coordinate of the part within the bitmap.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y coordinate of the part within the bitmap.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "w": {
            "type": "double",
            "description": "The width of the part within the bitmap.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "h": {
            "type": "double",
            "description": "The height of the part within the bitmap.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "Values for the other options.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "with_options",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def option_part_bmp_with_options(x, y, w, h, opts):"
          ],
          "csharp": [
            "public static DrawingOptions SplashKit.OptionPartBmp(double x, double y, double w, double h, DrawingOptions opts);"
          ],
          "cpp": [
            "drawing_options option_part_bmp(double x, double y, double w, double h, drawing_options opts)"
          ],
          "pascal": [
            "function OptionPartBmp(x: Double; y: Double; w: Double; h: Double; opts: DrawingOptions): DrawingOptions"
          ]
        }
      },
      {
        "signature": "drawing_options option_part_bmp(rectangle part);",
        "name": "option_part_bmp",
        "method_name": null,
        "unique_global_name": "option_part_bmp_from_rectangle",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to draw only part of a bitmap.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Options to draw parts of a bitmap.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "part": {
            "type": "rectangle",
            "description": "The rectangle of the part of the bitmap to draw.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "from_rectangle",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def option_part_bmp_from_rectangle(part):"
          ],
          "csharp": [
            "public static DrawingOptions SplashKit.OptionPartBmp(Rectangle part);"
          ],
          "cpp": [
            "drawing_options option_part_bmp(rectangle part)"
          ],
          "pascal": [
            "function OptionPartBmp(part: Rectangle): DrawingOptions"
          ]
        }
      },
      {
        "signature": "drawing_options option_part_bmp(rectangle part,drawing_options opts);",
        "name": "option_part_bmp",
        "method_name": null,
        "unique_global_name": "option_part_bmp_from_rectangle_with_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to draw only part of a bitmap.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Options to draw parts of a bitmap.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "part": {
            "type": "rectangle",
            "description": "The rectangle of the part of the bitmap to draw.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "Values for the other options.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "from_rectangle_with_options",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def option_part_bmp_from_rectangle_with_options(part, opts):"
          ],
          "csharp": [
            "public static DrawingOptions SplashKit.OptionPartBmp(Rectangle part, DrawingOptions opts);"
          ],
          "cpp": [
            "drawing_options option_part_bmp(rectangle part, drawing_options opts)"
          ],
          "pascal": [
            "function OptionPartBmp(part: Rectangle; opts: DrawingOptions): DrawingOptions"
          ]
        }
      },
      {
        "signature": "drawing_options option_rotate_bmp(double angle);",
        "name": "option_rotate_bmp",
        "method_name": null,
        "unique_global_name": "option_rotate_bmp",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to rotate a bitmap around its centre point.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Options that will rotate bitmaps around its center point.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "angle": {
            "type": "double",
            "description": "The angle to rotate bitmaps.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def option_rotate_bmp(angle):"
          ],
          "csharp": [
            "public static DrawingOptions SplashKit.OptionRotateBmp(double angle);"
          ],
          "cpp": [
            "drawing_options option_rotate_bmp(double angle)"
          ],
          "pascal": [
            "function OptionRotateBmp(angle: Double): DrawingOptions"
          ]
        }
      },
      {
        "signature": "drawing_options option_rotate_bmp(double angle,double anchor_x,double anchor_y);",
        "name": "option_rotate_bmp",
        "method_name": null,
        "unique_global_name": "option_rotate_bmp_with_anchor",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to rotate the drawing of a bitmap. This allows you to set the\nanchor point and rotate around that by a number of degrees.\nPass opts the other options you want use.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Options that will rotate bitmaps around an anchor point.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "angle": {
            "type": "double",
            "description": "The angle to rotate bitmaps.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "anchor_x": {
            "type": "double",
            "description": "The x location of the anchor within the bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "anchor_y": {
            "type": "double",
            "description": "The y location of the anchor within the bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "with_anchor",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def option_rotate_bmp_with_anchor(angle, anchor_x, anchor_y):"
          ],
          "csharp": [
            "public static DrawingOptions SplashKit.OptionRotateBmp(double angle, double anchorX, double anchorY);"
          ],
          "cpp": [
            "drawing_options option_rotate_bmp(double angle, double anchor_x, double anchor_y)"
          ],
          "pascal": [
            "function OptionRotateBmp(angle: Double; anchorX: Double; anchorY: Double): DrawingOptions"
          ]
        }
      },
      {
        "signature": "drawing_options option_rotate_bmp(double angle,double anchor_x,double anchor_y,drawing_options opts);",
        "name": "option_rotate_bmp",
        "method_name": null,
        "unique_global_name": "option_rotate_bmp_with_anchor_and_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to rotate the drawing of a bitmap. This allows you to set the\nanchor point and rotate around that by a number of degrees.\nPass opts the other options you want use.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Options that will rotate bitmaps around an anchor point.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "angle": {
            "type": "double",
            "description": "The angle to rotate bitmaps.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "anchor_x": {
            "type": "double",
            "description": "The x location of the anchor within the bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "anchor_y": {
            "type": "double",
            "description": "The y location of the anchor within the bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "Values for the other options.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "with_anchor_and_options",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def option_rotate_bmp_with_anchor_and_options(angle, anchor_x, anchor_y, opts):"
          ],
          "csharp": [
            "public static DrawingOptions SplashKit.OptionRotateBmp(double angle, double anchorX, double anchorY, DrawingOptions opts);"
          ],
          "cpp": [
            "drawing_options option_rotate_bmp(double angle, double anchor_x, double anchor_y, drawing_options opts)"
          ],
          "pascal": [
            "function OptionRotateBmp(angle: Double; anchorX: Double; anchorY: Double; opts: DrawingOptions): DrawingOptions"
          ]
        }
      },
      {
        "signature": "drawing_options option_rotate_bmp(double angle,drawing_options opts);",
        "name": "option_rotate_bmp",
        "method_name": null,
        "unique_global_name": "option_rotate_bmp_with_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to rotate a bitmap around its centre point.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Options that will rotate bitmaps around its center point.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "angle": {
            "type": "double",
            "description": "The angle to rotate bitmaps.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "Values for the other options.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "with_options",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def option_rotate_bmp_with_options(angle, opts):"
          ],
          "csharp": [
            "public static DrawingOptions SplashKit.OptionRotateBmp(double angle, DrawingOptions opts);"
          ],
          "cpp": [
            "drawing_options option_rotate_bmp(double angle, drawing_options opts)"
          ],
          "pascal": [
            "function OptionRotateBmp(angle: Double; opts: DrawingOptions): DrawingOptions"
          ]
        }
      },
      {
        "signature": "drawing_options option_scale_bmp(double scale_x,double scale_y);",
        "name": "option_scale_bmp",
        "method_name": null,
        "unique_global_name": "option_scale_bmp",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to scale the drawing of bitmaps. You can scale x and y separately.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Options that will scale bitmaps along the x,y axis.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "scale_x": {
            "type": "double",
            "description": "The amount to scale bitmaps aalong the x axis",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "scale_y": {
            "type": "double",
            "description": "The amount to scale bitmaps aalong the y axis",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def option_scale_bmp(scale_x, scale_y):"
          ],
          "csharp": [
            "public static DrawingOptions SplashKit.OptionScaleBmp(double scaleX, double scaleY);"
          ],
          "cpp": [
            "drawing_options option_scale_bmp(double scale_x, double scale_y)"
          ],
          "pascal": [
            "function OptionScaleBmp(scaleX: Double; scaleY: Double): DrawingOptions"
          ]
        }
      },
      {
        "signature": "drawing_options option_scale_bmp(double scale_x,double scale_y,drawing_options opts);",
        "name": "option_scale_bmp",
        "method_name": null,
        "unique_global_name": "option_scale_bmp_with_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to scale the drawing of bitmaps. You can scale x and y separately.\nPass opts the other options you want use.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Options that will scale bitmaps along the x,y axis.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "scale_x": {
            "type": "double",
            "description": "The amount to scale bitmaps aalong the x axis",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "scale_y": {
            "type": "double",
            "description": "The amount to scale bitmaps aalong the y axis",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "Values for the other options.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "with_options",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def option_scale_bmp_with_options(scale_x, scale_y, opts):"
          ],
          "csharp": [
            "public static DrawingOptions SplashKit.OptionScaleBmp(double scaleX, double scaleY, DrawingOptions opts);"
          ],
          "cpp": [
            "drawing_options option_scale_bmp(double scale_x, double scale_y, drawing_options opts)"
          ],
          "pascal": [
            "function OptionScaleBmp(scaleX: Double; scaleY: Double; opts: DrawingOptions): DrawingOptions"
          ]
        }
      },
      {
        "signature": "drawing_options option_to_screen();",
        "name": "option_to_screen",
        "method_name": null,
        "unique_global_name": "option_to_screen",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to draw to the screen, ignoring the positon of the\ncamera.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Options that will draw to the surface without camera effects.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def option_to_screen():"
          ],
          "csharp": [
            "public static DrawingOptions SplashKit.OptionToScreen();"
          ],
          "cpp": [
            "drawing_options option_to_screen()"
          ],
          "pascal": [
            "function OptionToScreen(): DrawingOptions"
          ]
        }
      },
      {
        "signature": "drawing_options option_to_screen(drawing_options opts);",
        "name": "option_to_screen",
        "method_name": null,
        "unique_global_name": "option_to_screen_with_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to draw to the screen, ignoring the positon of the\ncamera.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Options that will draw to the surface without camera effects.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "opts": {
            "type": "drawing_options",
            "description": "Values for the other options.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "with_options",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def option_to_screen_with_options(opts):"
          ],
          "csharp": [
            "public static DrawingOptions SplashKit.OptionToScreen(DrawingOptions opts);"
          ],
          "cpp": [
            "drawing_options option_to_screen(drawing_options opts)"
          ],
          "pascal": [
            "function OptionToScreen(opts: DrawingOptions): DrawingOptions"
          ]
        }
      },
      {
        "signature": "drawing_options option_to_world();",
        "name": "option_to_world",
        "method_name": null,
        "unique_global_name": "option_to_world",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to draw in World coordinates -- these are affected by\nthe movement of the camera.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Options that will draw with camera effects.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def option_to_world():"
          ],
          "csharp": [
            "public static DrawingOptions SplashKit.OptionToWorld();"
          ],
          "cpp": [
            "drawing_options option_to_world()"
          ],
          "pascal": [
            "function OptionToWorld(): DrawingOptions"
          ]
        }
      },
      {
        "signature": "drawing_options option_to_world(drawing_options opts);",
        "name": "option_to_world",
        "method_name": null,
        "unique_global_name": "option_to_world_with_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to draw in World coordinates -- these are affected by\nthe movement of the camera.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Options that will draw with camera effects.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "opts": {
            "type": "drawing_options",
            "description": "Values for the other options.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "with_options",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def option_to_world_with_options(opts):"
          ],
          "csharp": [
            "public static DrawingOptions SplashKit.OptionToWorld(DrawingOptions opts);"
          ],
          "cpp": [
            "drawing_options option_to_world(drawing_options opts)"
          ],
          "pascal": [
            "function OptionToWorld(opts: DrawingOptions): DrawingOptions"
          ]
        }
      },
      {
        "signature": "drawing_options option_with_animation(animation anim);",
        "name": "option_with_animation",
        "method_name": null,
        "unique_global_name": "option_with_animation",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use details from the animation to select an appropriate cell from the\nbitmaps being drawn.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "A drawing option that will draw the current cell from the\nanimation.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "The animation with the cell details to be used.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def option_with_animation(anim):"
          ],
          "csharp": [
            "public static DrawingOptions SplashKit.OptionWithAnimation(Animation anim);"
          ],
          "cpp": [
            "drawing_options option_with_animation(animation anim)"
          ],
          "pascal": [
            "function OptionWithAnimation(anim: Animation): DrawingOptions"
          ]
        }
      },
      {
        "signature": "drawing_options option_with_animation(animation anim,drawing_options opts);",
        "name": "option_with_animation",
        "method_name": null,
        "unique_global_name": "option_with_animation_with_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use details from the animation to select an appropriate cell from the\nbitmaps being drawn. This extends the passed in drawing options with\nthe animation details.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "A drawing option that will draw the current cell from the\nanimation.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "The animation with the cell details to be used.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The existing options to extend.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "with_options",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def option_with_animation_with_options(anim, opts):"
          ],
          "csharp": [
            "public static DrawingOptions SplashKit.OptionWithAnimation(Animation anim, DrawingOptions opts);"
          ],
          "cpp": [
            "drawing_options option_with_animation(animation anim, drawing_options opts)"
          ],
          "pascal": [
            "function OptionWithAnimation(anim: Animation; opts: DrawingOptions): DrawingOptions"
          ]
        }
      },
      {
        "signature": "drawing_options option_with_bitmap_cell(int cell);",
        "name": "option_with_bitmap_cell",
        "method_name": null,
        "unique_global_name": "option_with_bitmap_cell",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "When drawing the bitmap this will only draw the cell. To use this the bitmap\nneeds to have been provided with its cell details (see `bitmap_set_cell_details`).\nThis option overrides the animation or part drawing options.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "A drawing option that will draw the selected cell.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "cell": {
            "type": "int",
            "description": "The cell to draw from the bitmap (-1 for entire bitmap)",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def option_with_bitmap_cell(cell):"
          ],
          "csharp": [
            "public static DrawingOptions SplashKit.OptionWithBitmapCell(int cell);"
          ],
          "cpp": [
            "drawing_options option_with_bitmap_cell(int cell)"
          ],
          "pascal": [
            "function OptionWithBitmapCell(cell: Integer): DrawingOptions"
          ]
        }
      },
      {
        "signature": "drawing_options option_with_bitmap_cell(int cell,drawing_options opts);",
        "name": "option_with_bitmap_cell",
        "method_name": null,
        "unique_global_name": "option_with_bitmap_cell_with_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "When drawing the bitmap this will only draw the cell. To use this the bitmap\nneeds to have been provided with its cell details (see `bitmap_set_cell_details`).\nThis option overrides the animation or part drawing options. This extends\nthe passed in drawing options with the cell details.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "A drawing option that will draw the selected cell.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "cell": {
            "type": "int",
            "description": "The cell to draw from the bitmap (-1 for entire bitmap)",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The existing options to extend.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "with_options",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def option_with_bitmap_cell_with_options(cell, opts):"
          ],
          "csharp": [
            "public static DrawingOptions SplashKit.OptionWithBitmapCell(int cell, DrawingOptions opts);"
          ],
          "cpp": [
            "drawing_options option_with_bitmap_cell(int cell, drawing_options opts)"
          ],
          "pascal": [
            "function OptionWithBitmapCell(cell: Integer; opts: DrawingOptions): DrawingOptions"
          ]
        }
      },
      {
        "signature": "void draw_ellipse(color clr,const rectangle rect);",
        "name": "draw_ellipse",
        "method_name": null,
        "unique_global_name": "draw_ellipse_within_rectangle",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draws an ellipse using the provided location, and size.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "Indicates the location and size of the ellipse",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "within_rectangle",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def draw_ellipse_within_rectangle(clr, rect):"
          ],
          "csharp": [
            "public static void SplashKit.DrawEllipse(Color clr, Rectangle rect);"
          ],
          "cpp": [
            "void draw_ellipse(color clr, const rectangle rect)"
          ],
          "pascal": [
            "procedure DrawEllipse(clr: Color; rect: Rectangle)"
          ]
        }
      },
      {
        "signature": "void draw_ellipse(color clr,const rectangle rect,drawing_options opts);",
        "name": "draw_ellipse",
        "method_name": null,
        "unique_global_name": "draw_ellipse_within_rectangle_with_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draws an ellipse using the provided location, size, and drawing options.\n\nAt this stage ellipse drawing is not affected by line width from the\ndrawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "Indicates the location and size of the ellipse",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "within_rectangle_with_options",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def draw_ellipse_within_rectangle_with_options(clr, rect, opts):"
          ],
          "csharp": [
            "public static void SplashKit.DrawEllipse(Color clr, Rectangle rect, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_ellipse(color clr, const rectangle rect, drawing_options opts)"
          ],
          "pascal": [
            "procedure DrawEllipse(clr: Color; rect: Rectangle; opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_ellipse(color clr,double x,double y,double width,double height);",
        "name": "draw_ellipse",
        "method_name": null,
        "unique_global_name": "draw_ellipse",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draws an ellipse using the provided location, and size.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The distance from the left of the bitmap or window to the\nleft edge of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The distance from the top of the bitmap or window to the\ntop edge of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "double",
            "description": "The width of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "double",
            "description": "The height of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def draw_ellipse(clr, x, y, width, height):"
          ],
          "csharp": [
            "public static void SplashKit.DrawEllipse(Color clr, double x, double y, double width, double height);"
          ],
          "cpp": [
            "void draw_ellipse(color clr, double x, double y, double width, double height)"
          ],
          "pascal": [
            "procedure DrawEllipse(clr: Color; x: Double; y: Double; width: Double; height: Double)"
          ]
        }
      },
      {
        "signature": "void draw_ellipse(color clr,double x,double y,double width,double height,drawing_options opts);",
        "name": "draw_ellipse",
        "method_name": null,
        "unique_global_name": "draw_ellipse_with_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draws an ellipse using the provided location, size, and drawing options.\n\nAt this stage ellipse drawing is not affected by line width from the\ndrawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The distance from the left of the bitmap or window to the\nleft edge of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The distance from the top of the bitmap or window to the\ntop edge of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "double",
            "description": "The width of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "double",
            "description": "The height of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "with_options",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def draw_ellipse_with_options(clr, x, y, width, height, opts):"
          ],
          "csharp": [
            "public static void SplashKit.DrawEllipse(Color clr, double x, double y, double width, double height, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_ellipse(color clr, double x, double y, double width, double height, drawing_options opts)"
          ],
          "pascal": [
            "procedure DrawEllipse(clr: Color; x: Double; y: Double; width: Double; height: Double; opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_ellipse_on_bitmap(bitmap destination,color clr,const rectangle rect);",
        "name": "draw_ellipse_on_bitmap",
        "method_name": "draw_ellipse",
        "unique_global_name": "draw_ellipse_on_bitmap_within_rectangle",
        "unique_method_name": "bitmap.draw_ellipse_within_rectangle",
        "suffix_name": null,
        "description": "Draws an ellipse on the given bitmap, using the provided location, and size.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "bitmap",
            "description": "the bitmap to draw the ellipse on",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "Indicates the location and size of the ellipse",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "draw_ellipse",
          "suffix": "within_rectangle",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_ellipse_on_bitmap_within_rectangle(destination, clr, rect):"
          ],
          "csharp": [
            "public void Bitmap.DrawEllipse(Color clr, Rectangle rect);",
            "public static void SplashKit.DrawEllipseOnBitmap(Bitmap destination, Color clr, Rectangle rect);"
          ],
          "cpp": [
            "void draw_ellipse_on_bitmap(bitmap destination, color clr, const rectangle rect)"
          ],
          "pascal": [
            "procedure DrawEllipseOnBitmap(destination: Bitmap; clr: Color; rect: Rectangle)"
          ]
        }
      },
      {
        "signature": "void draw_ellipse_on_bitmap(bitmap destination,color clr,const rectangle rect,drawing_options opts);",
        "name": "draw_ellipse_on_bitmap",
        "method_name": "draw_ellipse",
        "unique_global_name": "draw_ellipse_on_bitmap_within_rectangle_with_options",
        "unique_method_name": "bitmap.draw_ellipse_within_rectangle_with_options",
        "suffix_name": null,
        "description": "Draws an ellipse on the given bitmap, using the provided location, size, and drawing options.\n\nAt this stage ellipse drawing is not affected by line width from the\ndrawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "bitmap",
            "description": "the bitmap to draw the ellipse on",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "Indicates the location and size of the ellipse",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "draw_ellipse",
          "suffix": "within_rectangle_with_options",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_ellipse_on_bitmap_within_rectangle_with_options(destination, clr, rect, opts):"
          ],
          "csharp": [
            "public void Bitmap.DrawEllipse(Color clr, Rectangle rect, DrawingOptions opts);",
            "public static void SplashKit.DrawEllipseOnBitmap(Bitmap destination, Color clr, Rectangle rect, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_ellipse_on_bitmap(bitmap destination, color clr, const rectangle rect, drawing_options opts)"
          ],
          "pascal": [
            "procedure DrawEllipseOnBitmap(destination: Bitmap; clr: Color; rect: Rectangle; opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_ellipse_on_bitmap(bitmap destination,color clr,double x,double y,double width,double height);",
        "name": "draw_ellipse_on_bitmap",
        "method_name": "draw_ellipse",
        "unique_global_name": "draw_ellipse_on_bitmap",
        "unique_method_name": "bitmap.draw_ellipse",
        "suffix_name": null,
        "description": "Draws an ellipse on the given bitmap, using the provided location, and size.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "bitmap",
            "description": "the bitmap to draw the ellipse on",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The distance from the left of the bitmap or bitmap to the\nleft edge of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The distance from the top of the bitmap or bitmap to the\ntop edge of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "double",
            "description": "The width of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "double",
            "description": "The height of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "draw_ellipse",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_ellipse_on_bitmap(destination, clr, x, y, width, height):"
          ],
          "csharp": [
            "public void Bitmap.DrawEllipse(Color clr, double x, double y, double width, double height);",
            "public static void SplashKit.DrawEllipseOnBitmap(Bitmap destination, Color clr, double x, double y, double width, double height);"
          ],
          "cpp": [
            "void draw_ellipse_on_bitmap(bitmap destination, color clr, double x, double y, double width, double height)"
          ],
          "pascal": [
            "procedure DrawEllipseOnBitmap(destination: Bitmap; clr: Color; x: Double; y: Double; width: Double; height: Double)"
          ]
        }
      },
      {
        "signature": "void draw_ellipse_on_bitmap(bitmap destination,color clr,double x,double y,double width,double height,drawing_options opts);",
        "name": "draw_ellipse_on_bitmap",
        "method_name": "draw_ellipse",
        "unique_global_name": "draw_ellipse_on_bitmap_with_options",
        "unique_method_name": "bitmap.draw_ellipse_with_options",
        "suffix_name": null,
        "description": "Draws an ellipse to the bitmap, using the provided location, size, and drawing options.\n\nAt this stage ellipse drawing is not affected by line width from the\ndrawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "bitmap",
            "description": "the bitmap to draw the ellipse on",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The distance from the left of the bitmap or bitmap to the\nleft edge of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The distance from the top of the bitmap or bitmap to the\ntop edge of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "double",
            "description": "The width of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "double",
            "description": "The height of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "draw_ellipse",
          "suffix": "with_options",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_ellipse_on_bitmap_with_options(destination, clr, x, y, width, height, opts):"
          ],
          "csharp": [
            "public void Bitmap.DrawEllipse(Color clr, double x, double y, double width, double height, DrawingOptions opts);",
            "public static void SplashKit.DrawEllipseOnBitmap(Bitmap destination, Color clr, double x, double y, double width, double height, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_ellipse_on_bitmap(bitmap destination, color clr, double x, double y, double width, double height, drawing_options opts)"
          ],
          "pascal": [
            "procedure DrawEllipseOnBitmap(destination: Bitmap; clr: Color; x: Double; y: Double; width: Double; height: Double; opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_ellipse_on_window(window destination,color clr,const rectangle rect);",
        "name": "draw_ellipse_on_window",
        "method_name": "draw_ellipse",
        "unique_global_name": "draw_ellipse_on_window_within_rectangle",
        "unique_method_name": "window.draw_ellipse_within_rectangle",
        "suffix_name": null,
        "description": "Draws an ellipse on the given window, using the provided location, and size.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "window",
            "description": "the window to draw the ellipse on",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "Indicates the location and size of the ellipse",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "draw_ellipse",
          "suffix": "within_rectangle",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_ellipse_on_window_within_rectangle(destination, clr, rect):"
          ],
          "csharp": [
            "public void Window.DrawEllipse(Color clr, Rectangle rect);",
            "public static void SplashKit.DrawEllipseOnWindow(Window destination, Color clr, Rectangle rect);"
          ],
          "cpp": [
            "void draw_ellipse_on_window(window destination, color clr, const rectangle rect)"
          ],
          "pascal": [
            "procedure DrawEllipseOnWindow(destination: Window; clr: Color; rect: Rectangle)"
          ]
        }
      },
      {
        "signature": "void draw_ellipse_on_window(window destination,color clr,const rectangle rect,drawing_options opts);",
        "name": "draw_ellipse_on_window",
        "method_name": "draw_ellipse",
        "unique_global_name": "draw_ellipse_on_window_within_rectangle_with_options",
        "unique_method_name": "window.draw_ellipse_within_rectangle_with_options",
        "suffix_name": null,
        "description": "Draws an ellipse on the given window, using the provided location, size, and drawing options.\n\nAt this stage ellipse drawing is not affected by line width from the\ndrawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "window",
            "description": "the window to draw the ellipse on",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "Indicates the location and size of the ellipse",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "draw_ellipse",
          "suffix": "within_rectangle_with_options",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_ellipse_on_window_within_rectangle_with_options(destination, clr, rect, opts):"
          ],
          "csharp": [
            "public void Window.DrawEllipse(Color clr, Rectangle rect, DrawingOptions opts);",
            "public static void SplashKit.DrawEllipseOnWindow(Window destination, Color clr, Rectangle rect, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_ellipse_on_window(window destination, color clr, const rectangle rect, drawing_options opts)"
          ],
          "pascal": [
            "procedure DrawEllipseOnWindow(destination: Window; clr: Color; rect: Rectangle; opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_ellipse_on_window(window destination,color clr,double x,double y,double width,double height);",
        "name": "draw_ellipse_on_window",
        "method_name": "draw_ellipse",
        "unique_global_name": "draw_ellipse_on_window",
        "unique_method_name": "window.draw_ellipse",
        "suffix_name": null,
        "description": "Draws an ellipse on the given window, using the provided location, and size.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "window",
            "description": "the window to draw the ellipse on",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The distance from the left of the bitmap or window to the\nleft edge of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The distance from the top of the bitmap or window to the\ntop edge of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "double",
            "description": "The width of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "double",
            "description": "The height of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "draw_ellipse",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_ellipse_on_window(destination, clr, x, y, width, height):"
          ],
          "csharp": [
            "public void Window.DrawEllipse(Color clr, double x, double y, double width, double height);",
            "public static void SplashKit.DrawEllipseOnWindow(Window destination, Color clr, double x, double y, double width, double height);"
          ],
          "cpp": [
            "void draw_ellipse_on_window(window destination, color clr, double x, double y, double width, double height)"
          ],
          "pascal": [
            "procedure DrawEllipseOnWindow(destination: Window; clr: Color; x: Double; y: Double; width: Double; height: Double)"
          ]
        }
      },
      {
        "signature": "void draw_ellipse_on_window(window destination,color clr,double x,double y,double width,double height,drawing_options opts);",
        "name": "draw_ellipse_on_window",
        "method_name": "draw_ellipse",
        "unique_global_name": "draw_ellipse_on_window_with_options",
        "unique_method_name": "window.draw_ellipse_with_options",
        "suffix_name": null,
        "description": "Draws an ellipse to the window, using the provided location, size, and drawing options.\n\nAt this stage ellipse drawing is not affected by line width from the\ndrawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "window",
            "description": "the window to draw the ellipse on",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The distance from the left of the bitmap or window to the\nleft edge of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The distance from the top of the bitmap or window to the\ntop edge of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "double",
            "description": "The width of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "double",
            "description": "The height of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "draw_ellipse",
          "suffix": "with_options",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_ellipse_on_window_with_options(destination, clr, x, y, width, height, opts):"
          ],
          "csharp": [
            "public void Window.DrawEllipse(Color clr, double x, double y, double width, double height, DrawingOptions opts);",
            "public static void SplashKit.DrawEllipseOnWindow(Window destination, Color clr, double x, double y, double width, double height, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_ellipse_on_window(window destination, color clr, double x, double y, double width, double height, drawing_options opts)"
          ],
          "pascal": [
            "procedure DrawEllipseOnWindow(destination: Window; clr: Color; x: Double; y: Double; width: Double; height: Double; opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void fill_ellipse(color clr,const rectangle rect);",
        "name": "fill_ellipse",
        "method_name": null,
        "unique_global_name": "fill_ellipse_within_rectangle",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fill an ellipse using the provided location, and size.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "Indicates the location and size of the ellipse",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "within_rectangle",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def fill_ellipse_within_rectangle(clr, rect):"
          ],
          "csharp": [
            "public static void SplashKit.FillEllipse(Color clr, Rectangle rect);"
          ],
          "cpp": [
            "void fill_ellipse(color clr, const rectangle rect)"
          ],
          "pascal": [
            "procedure FillEllipse(clr: Color; rect: Rectangle)"
          ]
        }
      },
      {
        "signature": "void fill_ellipse(color clr,const rectangle rect,drawing_options opts);",
        "name": "fill_ellipse",
        "method_name": null,
        "unique_global_name": "fill_ellipse_within_rectangle_with_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fills an ellipse using the provided location, size, and drawing options.\n\nAt this stage ellipse drawing is not affected by line width from the\ndrawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "Indicates the location and size of the ellipse",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "within_rectangle_with_options",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def fill_ellipse_within_rectangle_with_options(clr, rect, opts):"
          ],
          "csharp": [
            "public static void SplashKit.FillEllipse(Color clr, Rectangle rect, DrawingOptions opts);"
          ],
          "cpp": [
            "void fill_ellipse(color clr, const rectangle rect, drawing_options opts)"
          ],
          "pascal": [
            "procedure FillEllipse(clr: Color; rect: Rectangle; opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void fill_ellipse(color clr,double x,double y,double width,double height);",
        "name": "fill_ellipse",
        "method_name": null,
        "unique_global_name": "fill_ellipse",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fills an ellipse using the provided location, and size.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The distance from the left of the bitmap or window to the\nleft edge of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The distance from the top of the bitmap or window to the\ntop edge of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "double",
            "description": "The width of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "double",
            "description": "The height of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def fill_ellipse(clr, x, y, width, height):"
          ],
          "csharp": [
            "public static void SplashKit.FillEllipse(Color clr, double x, double y, double width, double height);"
          ],
          "cpp": [
            "void fill_ellipse(color clr, double x, double y, double width, double height)"
          ],
          "pascal": [
            "procedure FillEllipse(clr: Color; x: Double; y: Double; width: Double; height: Double)"
          ]
        }
      },
      {
        "signature": "void fill_ellipse(color clr,double x,double y,double width,double height,drawing_options opts);",
        "name": "fill_ellipse",
        "method_name": null,
        "unique_global_name": "fill_ellipse_with_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fills an ellipse using the provided location, size, and drawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The distance from the left of the bitmap or window to the\nleft edge of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The distance from the top of the bitmap or window to the\ntop edge of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "double",
            "description": "The width of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "double",
            "description": "The height of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "with_options",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def fill_ellipse_with_options(clr, x, y, width, height, opts):"
          ],
          "csharp": [
            "public static void SplashKit.FillEllipse(Color clr, double x, double y, double width, double height, DrawingOptions opts);"
          ],
          "cpp": [
            "void fill_ellipse(color clr, double x, double y, double width, double height, drawing_options opts)"
          ],
          "pascal": [
            "procedure FillEllipse(clr: Color; x: Double; y: Double; width: Double; height: Double; opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void fill_ellipse_on_bitmap(bitmap destination,color clr,const rectangle rect);",
        "name": "fill_ellipse_on_bitmap",
        "method_name": "fill_ellipse",
        "unique_global_name": "fill_ellipse_on_bitmap_within_rectangle",
        "unique_method_name": "bitmap.fill_ellipse_within_rectangle",
        "suffix_name": null,
        "description": "Fill an ellipse on the given bitmap, using the provided location, and size.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "bitmap",
            "description": "the bitmap to draw the ellipse on",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "Indicates the location and size of the ellipse",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "fill_ellipse",
          "suffix": "within_rectangle",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def fill_ellipse_on_bitmap_within_rectangle(destination, clr, rect):"
          ],
          "csharp": [
            "public void Bitmap.FillEllipse(Color clr, Rectangle rect);",
            "public static void SplashKit.FillEllipseOnBitmap(Bitmap destination, Color clr, Rectangle rect);"
          ],
          "cpp": [
            "void fill_ellipse_on_bitmap(bitmap destination, color clr, const rectangle rect)"
          ],
          "pascal": [
            "procedure FillEllipseOnBitmap(destination: Bitmap; clr: Color; rect: Rectangle)"
          ]
        }
      },
      {
        "signature": "void fill_ellipse_on_bitmap(bitmap destination,color clr,const rectangle rect,drawing_options opts);",
        "name": "fill_ellipse_on_bitmap",
        "method_name": "fill_ellipse",
        "unique_global_name": "fill_ellipse_on_bitmap_within_rectangle_with_options",
        "unique_method_name": "bitmap.fill_ellipse_within_rectangle_with_options",
        "suffix_name": null,
        "description": "Fills an ellipse on the given bitmap, using the provided location, size, and drawing options.\n\nAt this stage ellipse drawing is not affected by line width from the\ndrawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "bitmap",
            "description": "the bitmap to draw the ellipse on",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "Indicates the location and size of the ellipse",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "fill_ellipse",
          "suffix": "within_rectangle_with_options",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def fill_ellipse_on_bitmap_within_rectangle_with_options(destination, clr, rect, opts):"
          ],
          "csharp": [
            "public void Bitmap.FillEllipse(Color clr, Rectangle rect, DrawingOptions opts);",
            "public static void SplashKit.FillEllipseOnBitmap(Bitmap destination, Color clr, Rectangle rect, DrawingOptions opts);"
          ],
          "cpp": [
            "void fill_ellipse_on_bitmap(bitmap destination, color clr, const rectangle rect, drawing_options opts)"
          ],
          "pascal": [
            "procedure FillEllipseOnBitmap(destination: Bitmap; clr: Color; rect: Rectangle; opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void fill_ellipse_on_bitmap(bitmap destination,color clr,double x,double y,double width,double height);",
        "name": "fill_ellipse_on_bitmap",
        "method_name": "fill_ellipse",
        "unique_global_name": "fill_ellipse_on_bitmap",
        "unique_method_name": "bitmap.fill_ellipse",
        "suffix_name": null,
        "description": "Fills an ellipse on the given bitmap, using the provided location, and size.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "bitmap",
            "description": "the bitmap to draw the ellipse on",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The distance from the left of the bitmap or bitmap to the\nleft edge of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The distance from the top of the bitmap or bitmap to the\ntop edge of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "double",
            "description": "The width of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "double",
            "description": "The height of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "fill_ellipse",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def fill_ellipse_on_bitmap(destination, clr, x, y, width, height):"
          ],
          "csharp": [
            "public void Bitmap.FillEllipse(Color clr, double x, double y, double width, double height);",
            "public static void SplashKit.FillEllipseOnBitmap(Bitmap destination, Color clr, double x, double y, double width, double height);"
          ],
          "cpp": [
            "void fill_ellipse_on_bitmap(bitmap destination, color clr, double x, double y, double width, double height)"
          ],
          "pascal": [
            "procedure FillEllipseOnBitmap(destination: Bitmap; clr: Color; x: Double; y: Double; width: Double; height: Double)"
          ]
        }
      },
      {
        "signature": "void fill_ellipse_on_bitmap(bitmap destination,color clr,double x,double y,double width,double height,drawing_options opts);",
        "name": "fill_ellipse_on_bitmap",
        "method_name": "fill_ellipse",
        "unique_global_name": "fill_ellipse_on_bitmap_with_options",
        "unique_method_name": "bitmap.fill_ellipse_with_options",
        "suffix_name": null,
        "description": "Fills an ellipse on the given bitmap, using the provided location, size, and drawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "bitmap",
            "description": "the bitmap to draw the ellipse on",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The distance from the left of the bitmap or bitmap to the\nleft edge of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The distance from the top of the bitmap or bitmap to the\ntop edge of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "double",
            "description": "The width of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "double",
            "description": "The height of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "fill_ellipse",
          "suffix": "with_options",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def fill_ellipse_on_bitmap_with_options(destination, clr, x, y, width, height, opts):"
          ],
          "csharp": [
            "public void Bitmap.FillEllipse(Color clr, double x, double y, double width, double height, DrawingOptions opts);",
            "public static void SplashKit.FillEllipseOnBitmap(Bitmap destination, Color clr, double x, double y, double width, double height, DrawingOptions opts);"
          ],
          "cpp": [
            "void fill_ellipse_on_bitmap(bitmap destination, color clr, double x, double y, double width, double height, drawing_options opts)"
          ],
          "pascal": [
            "procedure FillEllipseOnBitmap(destination: Bitmap; clr: Color; x: Double; y: Double; width: Double; height: Double; opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void fill_ellipse_on_window(window destination,color clr,const rectangle rect);",
        "name": "fill_ellipse_on_window",
        "method_name": "fill_ellipse",
        "unique_global_name": "fill_ellipse_on_window_within_rectangle",
        "unique_method_name": "window.fill_ellipse_within_rectangle",
        "suffix_name": null,
        "description": "Fill an ellipse on the given window, using the provided location, and size.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "window",
            "description": "the window to draw the ellipse on",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "Indicates the location and size of the ellipse",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "fill_ellipse",
          "suffix": "within_rectangle",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def fill_ellipse_on_window_within_rectangle(destination, clr, rect):"
          ],
          "csharp": [
            "public void Window.FillEllipse(Color clr, Rectangle rect);",
            "public static void SplashKit.FillEllipseOnWindow(Window destination, Color clr, Rectangle rect);"
          ],
          "cpp": [
            "void fill_ellipse_on_window(window destination, color clr, const rectangle rect)"
          ],
          "pascal": [
            "procedure FillEllipseOnWindow(destination: Window; clr: Color; rect: Rectangle)"
          ]
        }
      },
      {
        "signature": "void fill_ellipse_on_window(window destination,color clr,const rectangle rect,drawing_options opts);",
        "name": "fill_ellipse_on_window",
        "method_name": "fill_ellipse",
        "unique_global_name": "fill_ellipse_on_window_within_rectangle_with_options",
        "unique_method_name": "window.fill_ellipse_within_rectangle_with_options",
        "suffix_name": null,
        "description": "Fills an ellipse on the given window, using the provided location, size, and drawing options.\n\nAt this stage ellipse drawing is not affected by line width from the\ndrawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "window",
            "description": "the window to draw the ellipse on",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "Indicates the location and size of the ellipse",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "fill_ellipse",
          "suffix": "within_rectangle_with_options",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def fill_ellipse_on_window_within_rectangle_with_options(destination, clr, rect, opts):"
          ],
          "csharp": [
            "public void Window.FillEllipse(Color clr, Rectangle rect, DrawingOptions opts);",
            "public static void SplashKit.FillEllipseOnWindow(Window destination, Color clr, Rectangle rect, DrawingOptions opts);"
          ],
          "cpp": [
            "void fill_ellipse_on_window(window destination, color clr, const rectangle rect, drawing_options opts)"
          ],
          "pascal": [
            "procedure FillEllipseOnWindow(destination: Window; clr: Color; rect: Rectangle; opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void fill_ellipse_on_window(window destination,color clr,double x,double y,double width,double height);",
        "name": "fill_ellipse_on_window",
        "method_name": "fill_ellipse",
        "unique_global_name": "fill_ellipse_on_window",
        "unique_method_name": "window.fill_ellipse",
        "suffix_name": null,
        "description": "Fills an ellipse on the given window, using the provided location, and size.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "window",
            "description": "the window to draw the ellipse on",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The distance from the left of the bitmap or window to the\nleft edge of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The distance from the top of the bitmap or window to the\ntop edge of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "double",
            "description": "The width of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "double",
            "description": "The height of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "fill_ellipse",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def fill_ellipse_on_window(destination, clr, x, y, width, height):"
          ],
          "csharp": [
            "public void Window.FillEllipse(Color clr, double x, double y, double width, double height);",
            "public static void SplashKit.FillEllipseOnWindow(Window destination, Color clr, double x, double y, double width, double height);"
          ],
          "cpp": [
            "void fill_ellipse_on_window(window destination, color clr, double x, double y, double width, double height)"
          ],
          "pascal": [
            "procedure FillEllipseOnWindow(destination: Window; clr: Color; x: Double; y: Double; width: Double; height: Double)"
          ]
        }
      },
      {
        "signature": "void fill_ellipse_on_window(window destination,color clr,double x,double y,double width,double height,drawing_options opts);",
        "name": "fill_ellipse_on_window",
        "method_name": "fill_ellipse",
        "unique_global_name": "fill_ellipse_on_window_with_options",
        "unique_method_name": "window.fill_ellipse_with_options",
        "suffix_name": null,
        "description": "Fills an ellipse on the given window, using the provided location, size, and drawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "window",
            "description": "the window to draw the ellipse on",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The distance from the left of the bitmap or window to the\nleft edge of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The distance from the top of the bitmap or window to the\ntop edge of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "double",
            "description": "The width of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "double",
            "description": "The height of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "fill_ellipse",
          "suffix": "with_options",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def fill_ellipse_on_window_with_options(destination, clr, x, y, width, height, opts):"
          ],
          "csharp": [
            "public void Window.FillEllipse(Color clr, double x, double y, double width, double height, DrawingOptions opts);",
            "public static void SplashKit.FillEllipseOnWindow(Window destination, Color clr, double x, double y, double width, double height, DrawingOptions opts);"
          ],
          "cpp": [
            "void fill_ellipse_on_window(window destination, color clr, double x, double y, double width, double height, drawing_options opts)"
          ],
          "pascal": [
            "procedure FillEllipseOnWindow(destination: Window; clr: Color; x: Double; y: Double; width: Double; height: Double; opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void clear_screen();",
        "name": "clear_screen",
        "method_name": null,
        "unique_global_name": "clear_screen_to_white",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Clears the current screen to color white.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "suffix": "to_white",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def clear_screen_to_white():"
          ],
          "csharp": [
            "public static void SplashKit.ClearScreen();"
          ],
          "cpp": [
            "void clear_screen()"
          ],
          "pascal": [
            "procedure ClearScreen()"
          ]
        }
      },
      {
        "signature": "void clear_screen(color clr);",
        "name": "clear_screen",
        "method_name": null,
        "unique_global_name": "clear_screen",
        "unique_method_name": null,
        "suffix_name": null,
        "description": null,
        "brief": "Clears all open windows to the `clr` provided.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color to clear the screen's background color to.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def clear_screen(clr):"
          ],
          "csharp": [
            "public static void SplashKit.ClearScreen(Color clr);"
          ],
          "cpp": [
            "void clear_screen(color clr)"
          ],
          "pascal": [
            "procedure ClearScreen(clr: Color)"
          ]
        }
      },
      {
        "signature": "display display_details(unsigned int index);",
        "name": "display_details",
        "method_name": null,
        "unique_global_name": "display_details",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the details about one of the displays attached to the computer.",
        "brief": null,
        "return": {
          "type": "display",
          "description": "The details of this display",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "index": {
            "type": "unsigned int",
            "description": "The display number (from 0 to `number_of_displays` - 1)",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def display_details(index):"
          ],
          "csharp": [
            "public static Display SplashKit.DisplayDetails(uint index);"
          ],
          "cpp": [
            "display display_details(unsigned int index)"
          ],
          "pascal": [
            "function DisplayDetails(index: Cardinal): Display"
          ]
        }
      },
      {
        "signature": "int display_height(display disp);",
        "name": "display_height",
        "method_name": null,
        "unique_global_name": "display_height",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Return the height of the display in pixels, read from the system details.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The height of the display",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "disp": {
            "type": "display",
            "description": "The display details",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "display",
          "getter": "height",
          "group": "graphics",
          "self": "disp"
        },
        "signatures": {
          "python": [
            "def display_height(disp):"
          ],
          "csharp": [
            "public int Display.Height { get }",
            "public static int SplashKit.DisplayHeight(Display disp);"
          ],
          "cpp": [
            "int display_height(display disp)"
          ],
          "pascal": [
            "function DisplayHeight(disp: Display): Integer"
          ]
        }
      },
      {
        "signature": "string display_name(display disp);",
        "name": "display_name",
        "method_name": null,
        "unique_global_name": "display_name",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Return the name of the display, read from the system details.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "The name of the display",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "disp": {
            "type": "display",
            "description": "The display details",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "display",
          "getter": "name",
          "group": "graphics",
          "self": "disp"
        },
        "signatures": {
          "python": [
            "def display_name(disp):"
          ],
          "csharp": [
            "public string Display.Name { get }",
            "public static string SplashKit.DisplayName(Display disp);"
          ],
          "cpp": [
            "string display_name(display disp)"
          ],
          "pascal": [
            "function DisplayName(disp: Display): String"
          ]
        }
      },
      {
        "signature": "int display_width(display disp);",
        "name": "display_width",
        "method_name": null,
        "unique_global_name": "display_width",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Return the width of the display in pixels, read from the system details.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The width of the display",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "disp": {
            "type": "display",
            "description": "The display details",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "display",
          "getter": "width",
          "group": "graphics",
          "self": "disp"
        },
        "signatures": {
          "python": [
            "def display_width(disp):"
          ],
          "csharp": [
            "public int Display.Width { get }",
            "public static int SplashKit.DisplayWidth(Display disp);"
          ],
          "cpp": [
            "int display_width(display disp)"
          ],
          "pascal": [
            "function DisplayWidth(disp: Display): Integer"
          ]
        }
      },
      {
        "signature": "int display_x(display disp);",
        "name": "display_x",
        "method_name": null,
        "unique_global_name": "display_x",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Return a relative x location for the display in pixels, read from the\nsystem details. This can be used to work out the arrangement of displays.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The x location of the display",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "disp": {
            "type": "display",
            "description": "The display details",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "display",
          "getter": "x",
          "group": "graphics",
          "self": "disp"
        },
        "signatures": {
          "python": [
            "def display_x(disp):"
          ],
          "csharp": [
            "public int Display.X { get }",
            "public static int SplashKit.DisplayX(Display disp);"
          ],
          "cpp": [
            "int display_x(display disp)"
          ],
          "pascal": [
            "function DisplayX(disp: Display): Integer"
          ]
        }
      },
      {
        "signature": "int display_y(display disp);",
        "name": "display_y",
        "method_name": null,
        "unique_global_name": "display_y",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Return a relative y location for the display in pixels, read from the\nsystem details. This can be used to work out the arrangement of displays.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The y location of the display",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "disp": {
            "type": "display",
            "description": "The display details",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "display",
          "getter": "y",
          "group": "graphics",
          "self": "disp"
        },
        "signatures": {
          "python": [
            "def display_y(disp):"
          ],
          "csharp": [
            "public int Display.Y { get }",
            "public static int SplashKit.DisplayY(Display disp);"
          ],
          "cpp": [
            "int display_y(display disp)"
          ],
          "pascal": [
            "function DisplayY(disp: Display): Integer"
          ]
        }
      },
      {
        "signature": "int number_of_displays();",
        "name": "number_of_displays",
        "method_name": null,
        "unique_global_name": "number_of_displays",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the number of physical displays attached to the computer.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The number of displays attached to the computer",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def number_of_displays():"
          ],
          "csharp": [
            "public static int SplashKit.NumberOfDisplays();"
          ],
          "cpp": [
            "int number_of_displays()"
          ],
          "pascal": [
            "function NumberOfDisplays(): Integer"
          ]
        }
      },
      {
        "signature": "void refresh_screen();",
        "name": "refresh_screen",
        "method_name": null,
        "unique_global_name": "refresh_screen",
        "unique_method_name": null,
        "suffix_name": null,
        "description": null,
        "brief": "Refreshes the current drawing on all open windows.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def refresh_screen():"
          ],
          "csharp": [
            "public static void SplashKit.RefreshScreen();"
          ],
          "cpp": [
            "void refresh_screen()"
          ],
          "pascal": [
            "procedure RefreshScreen()"
          ]
        }
      },
      {
        "signature": "void refresh_screen(unsigned int target_fps);",
        "name": "refresh_screen",
        "method_name": null,
        "unique_global_name": "refresh_screen_with_target_fps",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Refreshes all open windows with a target FPS (frames per second). This will\ndelay a period of time that will approximately meet the targeted frames per\nsecond.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "target_fps": {
            "type": "unsigned int",
            "description": "The targeted frames per second to refresh the screen at.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "with_target_fps",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def refresh_screen_with_target_fps(target_fps):"
          ],
          "csharp": [
            "public static void SplashKit.RefreshScreen(uint targetFps);"
          ],
          "cpp": [
            "void refresh_screen(unsigned int target_fps)"
          ],
          "pascal": [
            "procedure RefreshScreen(targetFps: Cardinal)"
          ]
        }
      },
      {
        "signature": "void save_bitmap(bitmap bmp,const string &basename);",
        "name": "save_bitmap",
        "method_name": null,
        "unique_global_name": "save_bitmap",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Save the bitmap to the user's desktop.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to save",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "basename": {
            "type": "string",
            "description": "The base of the filename. If there is a file of this name\nalready, then the name will be changed to generate a\nunique filename.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def save_bitmap(bmp, basename):"
          ],
          "csharp": [
            "public static void SplashKit.SaveBitmap(Bitmap bmp, string basename);"
          ],
          "cpp": [
            "void save_bitmap(bitmap bmp, const string &basename)"
          ],
          "pascal": [
            "procedure SaveBitmap(bmp: Bitmap; const basename: String)"
          ]
        }
      },
      {
        "signature": "int screen_height();",
        "name": "screen_height",
        "method_name": null,
        "unique_global_name": "screen_height",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the height of the current window.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The height of the current window.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def screen_height():"
          ],
          "csharp": [
            "public static int SplashKit.ScreenHeight();"
          ],
          "cpp": [
            "int screen_height()"
          ],
          "pascal": [
            "function ScreenHeight(): Integer"
          ]
        }
      },
      {
        "signature": "int screen_width();",
        "name": "screen_width",
        "method_name": null,
        "unique_global_name": "screen_width",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the width of the current window.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The width of the current window.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def screen_width():"
          ],
          "csharp": [
            "public static int SplashKit.ScreenWidth();"
          ],
          "cpp": [
            "int screen_width()"
          ],
          "pascal": [
            "function ScreenWidth(): Integer"
          ]
        }
      },
      {
        "signature": "void take_screenshot(const string &basename);",
        "name": "take_screenshot",
        "method_name": null,
        "unique_global_name": "take_screenshot",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Saves a screenshot of the current window to a bitmap file. The file will\nbe saved onto the user's desktop.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "basename": {
            "type": "string",
            "description": "The base of the filename. If there is a file of this name\nalready, then the name will be changed to generate a\nunique filename.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def take_screenshot(basename):"
          ],
          "csharp": [
            "public static void SplashKit.TakeScreenshot(string basename);"
          ],
          "cpp": [
            "void take_screenshot(const string &basename)"
          ],
          "pascal": [
            "procedure TakeScreenshot(const basename: String)"
          ]
        }
      },
      {
        "signature": "void take_screenshot(window wind,const string &basename);",
        "name": "take_screenshot",
        "method_name": null,
        "unique_global_name": "take_screenshot_of_window",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Saves a screenshot of the current window to a bitmap file. The file will\nbe saved onto the user's desktop.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "The window to capture in the screenshot",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "basename": {
            "type": "string",
            "description": "The base of the filename. If there is a file of this name\nalready, then the name will be changed to generate a\nunique filename.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "of_window",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def take_screenshot_of_window(wind, basename):"
          ],
          "csharp": [
            "public static void SplashKit.TakeScreenshot(Window wind, string basename);"
          ],
          "cpp": [
            "void take_screenshot(window wind, const string &basename)"
          ],
          "pascal": [
            "procedure TakeScreenshot(wind: Window; const basename: String)"
          ]
        }
      },
      {
        "signature": "circle bitmap_bounding_circle(bitmap bmp,const point_2d &pt);",
        "name": "bitmap_bounding_circle",
        "method_name": "bounding_circle",
        "unique_global_name": "bitmap_bounding_circle",
        "unique_method_name": "bitmap.bounding_circle",
        "suffix_name": null,
        "description": "Returns a circle that will encompass the entire bitamp.",
        "brief": null,
        "return": {
          "type": "circle",
          "description": "A circle that surrounds the bitmap.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to encompass.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The point where the bitmap is located.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "bounding_circle",
          "group": "graphics",
          "static": "images",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def bitmap_bounding_circle(bmp, pt):"
          ],
          "csharp": [
            "public Circle Bitmap.BoundingCircle(Point2D pt);",
            "public static Circle SplashKit.BitmapBoundingCircle(Bitmap bmp, Point2D pt);"
          ],
          "cpp": [
            "circle bitmap_bounding_circle(bitmap bmp, const point_2d &pt)"
          ],
          "pascal": [
            "function BitmapBoundingCircle(bmp: Bitmap; const pt: Point2D): Circle"
          ]
        }
      },
      {
        "signature": "rectangle bitmap_bounding_rectangle(bitmap bmp);",
        "name": "bitmap_bounding_rectangle",
        "method_name": "bounding_rectangle",
        "unique_global_name": "bitmap_bounding_rectangle",
        "unique_method_name": "bitmap.bounding_rectangle",
        "suffix_name": null,
        "description": "Returns a rectangle that is the same size as a bitmap (the whole bitmap).",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "A rectangle with the same size as the bitmap.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "bounding_rectangle",
          "group": "graphics",
          "static": "images",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def bitmap_bounding_rectangle(bmp):"
          ],
          "csharp": [
            "public Rectangle Bitmap.BoundingRectangle();",
            "public static Rectangle SplashKit.BitmapBoundingRectangle(Bitmap bmp);"
          ],
          "cpp": [
            "rectangle bitmap_bounding_rectangle(bitmap bmp)"
          ],
          "pascal": [
            "function BitmapBoundingRectangle(bmp: Bitmap): Rectangle"
          ]
        }
      },
      {
        "signature": "rectangle bitmap_bounding_rectangle(bitmap bmp,double x,double y);",
        "name": "bitmap_bounding_rectangle",
        "method_name": "bounding_rectangle",
        "unique_global_name": "bitmap_bounding_rectangle_at_location",
        "unique_method_name": "bitmap.bounding_rectangle_at_location",
        "suffix_name": null,
        "description": "Returns a rectangle that is the same size as the bitmap and is located at\nthe indicated position.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "A rectangle with the same size as the bitmap, at the\nindicated location.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x location of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "bounding_rectangle",
          "suffix": "at_location",
          "group": "graphics",
          "static": "images",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def bitmap_bounding_rectangle_at_location(bmp, x, y):"
          ],
          "csharp": [
            "public Rectangle Bitmap.BoundingRectangle(double x, double y);",
            "public static Rectangle SplashKit.BitmapBoundingRectangle(Bitmap bmp, double x, double y);"
          ],
          "cpp": [
            "rectangle bitmap_bounding_rectangle(bitmap bmp, double x, double y)"
          ],
          "pascal": [
            "function BitmapBoundingRectangle(bmp: Bitmap; x: Double; y: Double): Rectangle"
          ]
        }
      },
      {
        "signature": "point_2d bitmap_cell_center(bitmap bmp);",
        "name": "bitmap_cell_center",
        "method_name": null,
        "unique_global_name": "bitmap_cell_center",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "This returns a point that represents the center of a cell from this\nbitmap in local space.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "A point in the center of a cell for this bitmap.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to get the center of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "getter": "cell_center",
          "group": "graphics",
          "static": "images",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def bitmap_cell_center(bmp):"
          ],
          "csharp": [
            "public Point2D Bitmap.CellCenter { get }",
            "public static Point2D SplashKit.BitmapCellCenter(Bitmap bmp);"
          ],
          "cpp": [
            "point_2d bitmap_cell_center(bitmap bmp)"
          ],
          "pascal": [
            "function BitmapCellCenter(bmp: Bitmap): Point2D"
          ]
        }
      },
      {
        "signature": "circle bitmap_cell_circle(bitmap bmp,double x,double y);",
        "name": "bitmap_cell_circle",
        "method_name": "cell_circle",
        "unique_global_name": "bitmap_cell_circle",
        "unique_method_name": "bitmap.cell_circle",
        "suffix_name": null,
        "description": "Returns a circle that will encompass the bitmap cell if it were drawn\nat the indicated point.",
        "brief": null,
        "return": {
          "type": "circle",
          "description": "A circle that will encompass the bitmap cell.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The the x location of the bitmap.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The the y location of the bitmap.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "cell_circle",
          "group": "graphics",
          "static": "images",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def bitmap_cell_circle(bmp, x, y):"
          ],
          "csharp": [
            "public Circle Bitmap.CellCircle(double x, double y);",
            "public static Circle SplashKit.BitmapCellCircle(Bitmap bmp, double x, double y);"
          ],
          "cpp": [
            "circle bitmap_cell_circle(bitmap bmp, double x, double y)"
          ],
          "pascal": [
            "function BitmapCellCircle(bmp: Bitmap; x: Double; y: Double): Circle"
          ]
        }
      },
      {
        "signature": "circle bitmap_cell_circle(bitmap bmp,const point_2d pt);",
        "name": "bitmap_cell_circle",
        "method_name": "cell_circle",
        "unique_global_name": "bitmap_cell_circle_at_point",
        "unique_method_name": "bitmap.cell_circle_at_point",
        "suffix_name": null,
        "description": "Returns a circle that will encompass the bitmap cell if it were drawn\nat the indicated point.",
        "brief": null,
        "return": {
          "type": "circle",
          "description": "A circle that will encompass the bitmap cell.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The point indicating the location of the bitmap.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "cell_circle",
          "suffix": "at_point",
          "group": "graphics",
          "static": "images",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def bitmap_cell_circle_at_point(bmp, pt):"
          ],
          "csharp": [
            "public Circle Bitmap.CellCircle(Point2D pt);",
            "public static Circle SplashKit.BitmapCellCircle(Bitmap bmp, Point2D pt);"
          ],
          "cpp": [
            "circle bitmap_cell_circle(bitmap bmp, const point_2d pt)"
          ],
          "pascal": [
            "function BitmapCellCircle(bmp: Bitmap; pt: Point2D): Circle"
          ]
        }
      },
      {
        "signature": "circle bitmap_cell_circle(bitmap bmp,const point_2d pt,double scale);",
        "name": "bitmap_cell_circle",
        "method_name": "cell_circle",
        "unique_global_name": "bitmap_cell_circle_at_point_with_scale",
        "unique_method_name": "bitmap.cell_circle_at_point_with_scale",
        "suffix_name": null,
        "description": "Returns a circle that will encompass the bitmap cell if it were drawn\nat the indicated point, with the provided scale.",
        "brief": null,
        "return": {
          "type": "circle",
          "description": "A circle that will encompass the bitmap cell.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The point indicating the location of the bitmap.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "scale": {
            "type": "double",
            "description": "The scaling factor for the bitmap drawing.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "cell_circle",
          "suffix": "at_point_with_scale",
          "group": "graphics",
          "static": "images",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def bitmap_cell_circle_at_point_with_scale(bmp, pt, scale):"
          ],
          "csharp": [
            "public Circle Bitmap.CellCircle(Point2D pt, double scale);",
            "public static Circle SplashKit.BitmapCellCircle(Bitmap bmp, Point2D pt, double scale);"
          ],
          "cpp": [
            "circle bitmap_cell_circle(bitmap bmp, const point_2d pt, double scale)"
          ],
          "pascal": [
            "function BitmapCellCircle(bmp: Bitmap; pt: Point2D; scale: Double): Circle"
          ]
        }
      },
      {
        "signature": "int bitmap_cell_columns(bitmap bmp);",
        "name": "bitmap_cell_columns",
        "method_name": null,
        "unique_global_name": "bitmap_cell_columns",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the number of cell columns in the bitmap.\nThis is setup using `bitmap_set_cell_details`",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The number of cell columns",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "getter": "cell_columns",
          "group": "graphics",
          "static": "images",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def bitmap_cell_columns(bmp):"
          ],
          "csharp": [
            "public int Bitmap.CellColumns { get }",
            "public static int SplashKit.BitmapCellColumns(Bitmap bmp);"
          ],
          "cpp": [
            "int bitmap_cell_columns(bitmap bmp)"
          ],
          "pascal": [
            "function BitmapCellColumns(bmp: Bitmap): Integer"
          ]
        }
      },
      {
        "signature": "int bitmap_cell_count(bitmap bmp);",
        "name": "bitmap_cell_count",
        "method_name": null,
        "unique_global_name": "bitmap_cell_count",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the number of cells within the bitmap.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The number of individual cells within the bitmap.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to check.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "getter": "cell_count",
          "group": "graphics",
          "static": "images",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def bitmap_cell_count(bmp):"
          ],
          "csharp": [
            "public int Bitmap.CellCount { get }",
            "public static int SplashKit.BitmapCellCount(Bitmap bmp);"
          ],
          "cpp": [
            "int bitmap_cell_count(bitmap bmp)"
          ],
          "pascal": [
            "function BitmapCellCount(bmp: Bitmap): Integer"
          ]
        }
      },
      {
        "signature": "int bitmap_cell_height(bitmap bmp);",
        "name": "bitmap_cell_height",
        "method_name": null,
        "unique_global_name": "bitmap_cell_height",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the height of each cell in this bitmap.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The height of each cells in bmp",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "getter": "cell_height",
          "group": "graphics",
          "static": "images",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def bitmap_cell_height(bmp):"
          ],
          "csharp": [
            "public int Bitmap.CellHeight { get }",
            "public static int SplashKit.BitmapCellHeight(Bitmap bmp);"
          ],
          "cpp": [
            "int bitmap_cell_height(bitmap bmp)"
          ],
          "pascal": [
            "function BitmapCellHeight(bmp: Bitmap): Integer"
          ]
        }
      },
      {
        "signature": "vector_2d bitmap_cell_offset(bitmap src,int cell);",
        "name": "bitmap_cell_offset",
        "method_name": "cell_offset",
        "unique_global_name": "bitmap_cell_offset",
        "unique_method_name": "bitmap.cell_offset",
        "suffix_name": null,
        "description": "Returns a vector that represents the movement needed to get to a given\ncell within a bitmap.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "The offset needed to get to the cell from the top left of the bitmap.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "src": {
            "type": "bitmap",
            "description": "The bitmap with the cell details.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "cell": {
            "type": "int",
            "description": "The index of the cell",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "cell_offset",
          "group": "graphics",
          "static": "images",
          "self": "src"
        },
        "signatures": {
          "python": [
            "def bitmap_cell_offset(src, cell):"
          ],
          "csharp": [
            "public Vector2D Bitmap.CellOffset(int cell);",
            "public static Vector2D SplashKit.BitmapCellOffset(Bitmap src, int cell);"
          ],
          "cpp": [
            "vector_2d bitmap_cell_offset(bitmap src, int cell)"
          ],
          "pascal": [
            "function BitmapCellOffset(src: Bitmap; cell: Integer): Vector2D"
          ]
        }
      },
      {
        "signature": "rectangle bitmap_cell_rectangle(bitmap src);",
        "name": "bitmap_cell_rectangle",
        "method_name": "cell_rectangle",
        "unique_global_name": "bitmap_cell_rectangle",
        "unique_method_name": "bitmap.cell_rectangle",
        "suffix_name": null,
        "description": "Returns a rectangle that will encompass a cell of the bitmap.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "A rectangle with width and height from the bitmap's cell details.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "src": {
            "type": "bitmap",
            "description": "The bitmap to get the details from",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "cell_rectangle",
          "group": "graphics",
          "static": "images",
          "self": "src"
        },
        "signatures": {
          "python": [
            "def bitmap_cell_rectangle(src):"
          ],
          "csharp": [
            "public Rectangle Bitmap.CellRectangle();",
            "public static Rectangle SplashKit.BitmapCellRectangle(Bitmap src);"
          ],
          "cpp": [
            "rectangle bitmap_cell_rectangle(bitmap src)"
          ],
          "pascal": [
            "function BitmapCellRectangle(src: Bitmap): Rectangle"
          ]
        }
      },
      {
        "signature": "rectangle bitmap_cell_rectangle(bitmap src,const point_2d &pt);",
        "name": "bitmap_cell_rectangle",
        "method_name": "cell_rectangle",
        "unique_global_name": "bitmap_cell_rectangle_at_point",
        "unique_method_name": "bitmap.cell_rectangle_at_point",
        "suffix_name": null,
        "description": "Returns a rectangle that will encompass the bitmap cell if it were drawn\nat the indicated point.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "A rectangle at pt, with width and height from the bitmap's cell details.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "src": {
            "type": "bitmap",
            "description": "The bitmap to get the details from",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The point details for the rectangle.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "cell_rectangle",
          "suffix": "at_point",
          "group": "graphics",
          "static": "images",
          "self": "src"
        },
        "signatures": {
          "python": [
            "def bitmap_cell_rectangle_at_point(src, pt):"
          ],
          "csharp": [
            "public Rectangle Bitmap.CellRectangle(Point2D pt);",
            "public static Rectangle SplashKit.BitmapCellRectangle(Bitmap src, Point2D pt);"
          ],
          "cpp": [
            "rectangle bitmap_cell_rectangle(bitmap src, const point_2d &pt)"
          ],
          "pascal": [
            "function BitmapCellRectangle(src: Bitmap; const pt: Point2D): Rectangle"
          ]
        }
      },
      {
        "signature": "int bitmap_cell_rows(bitmap bmp);",
        "name": "bitmap_cell_rows",
        "method_name": null,
        "unique_global_name": "bitmap_cell_rows",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the number of rows of cells in the bitmap. These details are set in\n`bitmap_set_cell_details`.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The number of rows of cells in the bitmap.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "getter": "cell_rows",
          "group": "graphics",
          "static": "images",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def bitmap_cell_rows(bmp):"
          ],
          "csharp": [
            "public int Bitmap.CellRows { get }",
            "public static int SplashKit.BitmapCellRows(Bitmap bmp);"
          ],
          "cpp": [
            "int bitmap_cell_rows(bitmap bmp)"
          ],
          "pascal": [
            "function BitmapCellRows(bmp: Bitmap): Integer"
          ]
        }
      },
      {
        "signature": "int bitmap_cell_width(bitmap bmp);",
        "name": "bitmap_cell_width",
        "method_name": null,
        "unique_global_name": "bitmap_cell_width",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the width of each cell in this bitmap.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The width of each cells in bmp",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "getter": "cell_width",
          "group": "graphics",
          "static": "images",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def bitmap_cell_width(bmp):"
          ],
          "csharp": [
            "public int Bitmap.CellWidth { get }",
            "public static int SplashKit.BitmapCellWidth(Bitmap bmp);"
          ],
          "cpp": [
            "int bitmap_cell_width(bitmap bmp)"
          ],
          "pascal": [
            "function BitmapCellWidth(bmp: Bitmap): Integer"
          ]
        }
      },
      {
        "signature": "point_2d bitmap_center(bitmap bmp);",
        "name": "bitmap_center",
        "method_name": null,
        "unique_global_name": "bitmap_center",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "This returns a point that represents the center of the bitmap in local\nspace.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "A point in the center of the bitmap.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to get the center of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "getter": "center",
          "group": "graphics",
          "static": "images",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def bitmap_center(bmp):"
          ],
          "csharp": [
            "public Point2D Bitmap.Center { get }",
            "public static Point2D SplashKit.BitmapCenter(Bitmap bmp);"
          ],
          "cpp": [
            "point_2d bitmap_center(bitmap bmp)"
          ],
          "pascal": [
            "function BitmapCenter(bmp: Bitmap): Point2D"
          ]
        }
      },
      {
        "signature": "string bitmap_filename(bitmap bmp);",
        "name": "bitmap_filename",
        "method_name": null,
        "unique_global_name": "bitmap_filename",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the filename from which the bitmap was loaded. This will be an empty\nstring for created bitmaps.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "The file name of the bitmap.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to get the filename from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "getter": "filename",
          "group": "graphics",
          "static": "images",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def bitmap_filename(bmp):"
          ],
          "csharp": [
            "public string Bitmap.Filename { get }",
            "public static string SplashKit.BitmapFilename(Bitmap bmp);"
          ],
          "cpp": [
            "string bitmap_filename(bitmap bmp)"
          ],
          "pascal": [
            "function BitmapFilename(bmp: Bitmap): String"
          ]
        }
      },
      {
        "signature": "int bitmap_height(bitmap bmp);",
        "name": "bitmap_height",
        "method_name": null,
        "unique_global_name": "bitmap_height",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the total height of the bitmap. If the bitmap contains cells, you ca\nget the height of a cell using `bitmap_cell_height`.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The height of the bitmap.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "getter": "height",
          "group": "graphics",
          "static": "images",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def bitmap_height(bmp):"
          ],
          "csharp": [
            "public int Bitmap.Height { get }",
            "public static int SplashKit.BitmapHeight(Bitmap bmp);"
          ],
          "cpp": [
            "int bitmap_height(bitmap bmp)"
          ],
          "pascal": [
            "function BitmapHeight(bmp: Bitmap): Integer"
          ]
        }
      },
      {
        "signature": "int bitmap_height(string name);",
        "name": "bitmap_height",
        "method_name": null,
        "unique_global_name": "bitmap_height_of_bitmap_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the total height of the bitmap. If the bitmap contains cells, you ca\nget the height of a cell using `bitmap_cell_height`.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The height of the bitmap.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the bitmap to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "of_bitmap_named",
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "python": [
            "def bitmap_height_of_bitmap_named(name):"
          ],
          "csharp": [
            "public static int SplashKit.BitmapHeight(string name);"
          ],
          "cpp": [
            "int bitmap_height(string name)"
          ],
          "pascal": [
            "function BitmapHeight(name: String): Integer"
          ]
        }
      },
      {
        "signature": "string bitmap_name(bitmap bmp);",
        "name": "bitmap_name",
        "method_name": null,
        "unique_global_name": "bitmap_name",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the name of the bitmap was loaded. This is the name you can use to\naccess this bitmap.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "The name of the bitmap.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to get the name from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "getter": "name",
          "group": "graphics",
          "static": "images",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def bitmap_name(bmp):"
          ],
          "csharp": [
            "public string Bitmap.Name { get }",
            "public static string SplashKit.BitmapName(Bitmap bmp);"
          ],
          "cpp": [
            "string bitmap_name(bitmap bmp)"
          ],
          "pascal": [
            "function BitmapName(bmp: Bitmap): String"
          ]
        }
      },
      {
        "signature": "bitmap bitmap_named(string name);",
        "name": "bitmap_named",
        "method_name": null,
        "unique_global_name": "bitmap_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the `bitmap` that has been loaded with the specified name,\nsee `load_bitmap`. This will attempt to load the bitmap if it has not\nbeen loaded.",
        "brief": null,
        "return": {
          "type": "bitmap",
          "description": "The bitmap with the name specified, which may refer to nothing\nif the bitmap has not been loaded.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the bitmap to check.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "python": [
            "def bitmap_named(name):"
          ],
          "csharp": [
            "public static Bitmap SplashKit.BitmapNamed(string name);"
          ],
          "cpp": [
            "bitmap bitmap_named(string name)"
          ],
          "pascal": [
            "function BitmapNamed(name: String): Bitmap"
          ]
        }
      },
      {
        "signature": "rectangle bitmap_rectangle_of_cell(bitmap src,int cell);",
        "name": "bitmap_rectangle_of_cell",
        "method_name": "rectangle_of_cell",
        "unique_global_name": "bitmap_rectangle_of_cell",
        "unique_method_name": "bitmap.rectangle_of_cell",
        "suffix_name": null,
        "description": "Returns a rectangle that can be used to access the part of a bitmap\nrelated to an individual cell.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "The area of the cell within the bitmap",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "src": {
            "type": "bitmap",
            "description": "The bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "cell": {
            "type": "int",
            "description": "The cell",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "rectangle_of_cell",
          "group": "graphics",
          "static": "images",
          "self": "src"
        },
        "signatures": {
          "python": [
            "def bitmap_rectangle_of_cell(src, cell):"
          ],
          "csharp": [
            "public Rectangle Bitmap.RectangleOfCell(int cell);",
            "public static Rectangle SplashKit.BitmapRectangleOfCell(Bitmap src, int cell);"
          ],
          "cpp": [
            "rectangle bitmap_rectangle_of_cell(bitmap src, int cell)"
          ],
          "pascal": [
            "function BitmapRectangleOfCell(src: Bitmap; cell: Integer): Rectangle"
          ]
        }
      },
      {
        "signature": "void bitmap_set_cell_details(bitmap bmp,int width,int height,int columns,int rows,int count);",
        "name": "bitmap_set_cell_details",
        "method_name": "set_cell_details",
        "unique_global_name": "bitmap_set_cell_details",
        "unique_method_name": "bitmap.set_cell_details",
        "suffix_name": null,
        "description": "Initialise the bitmap cell details. This allows parts of the bitmap to be\ndrawn as individual cells.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "int",
            "description": "The width of each cell",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "int",
            "description": "The height of each cell",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "columns": {
            "type": "int",
            "description": "The number of cell columns within the bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rows": {
            "type": "int",
            "description": "The number of cell rows within the bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "count": {
            "type": "int",
            "description": "The total number of cells, may be fewer than columns *\nrows",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "set_cell_details",
          "group": "graphics",
          "static": "images",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def bitmap_set_cell_details(bmp, width, height, columns, rows, count):"
          ],
          "csharp": [
            "public void Bitmap.SetCellDetails(int width, int height, int columns, int rows, int count);",
            "public static void SplashKit.BitmapSetCellDetails(Bitmap bmp, int width, int height, int columns, int rows, int count);"
          ],
          "cpp": [
            "void bitmap_set_cell_details(bitmap bmp, int width, int height, int columns, int rows, int count)"
          ],
          "pascal": [
            "procedure BitmapSetCellDetails(bmp: Bitmap; width: Integer; height: Integer; columns: Integer; rows: Integer; count: Integer)"
          ]
        }
      },
      {
        "signature": "bool bitmap_valid(bitmap bmp);",
        "name": "bitmap_valid",
        "method_name": null,
        "unique_global_name": "bitmap_valid",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Lets you test if bitmap value is valid. This will return true when it is a valid bitmap.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "true when the bitmap is valid.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "the bitmap to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "python": [
            "def bitmap_valid(bmp):"
          ],
          "csharp": [
            "public static bool SplashKit.BitmapValid(Bitmap bmp);"
          ],
          "cpp": [
            "bool bitmap_valid(bitmap bmp)"
          ],
          "pascal": [
            "function BitmapValid(bmp: Bitmap): Boolean"
          ]
        }
      },
      {
        "signature": "int bitmap_width(bitmap bmp);",
        "name": "bitmap_width",
        "method_name": null,
        "unique_global_name": "bitmap_width",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the width of the bitmap.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The width of the bitmap",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "getter": "width",
          "group": "graphics",
          "static": "images",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def bitmap_width(bmp):"
          ],
          "csharp": [
            "public int Bitmap.Width { get }",
            "public static int SplashKit.BitmapWidth(Bitmap bmp);"
          ],
          "cpp": [
            "int bitmap_width(bitmap bmp)"
          ],
          "pascal": [
            "function BitmapWidth(bmp: Bitmap): Integer"
          ]
        }
      },
      {
        "signature": "int bitmap_width(string name);",
        "name": "bitmap_width",
        "method_name": null,
        "unique_global_name": "bitmap_width_of_bitmap_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the width of the bitmap.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The width of the bitmap",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "of_bitmap_named",
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "python": [
            "def bitmap_width_of_bitmap_named(name):"
          ],
          "csharp": [
            "public static int SplashKit.BitmapWidth(string name);"
          ],
          "cpp": [
            "int bitmap_width(string name)"
          ],
          "pascal": [
            "function BitmapWidth(name: String): Integer"
          ]
        }
      },
      {
        "signature": "void clear_bitmap(bitmap bmp,color clr);",
        "name": "clear_bitmap",
        "method_name": "clear",
        "unique_global_name": "clear_bitmap",
        "unique_method_name": "bitmap.clear",
        "suffix_name": null,
        "description": "Clear the bitmap to the indicated color. This will ensure the entire\nsurface of the bitmap is set to that color.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The new color for the surface of the bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "clear",
          "group": "graphics",
          "static": "images",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def clear_bitmap(bmp, clr):"
          ],
          "csharp": [
            "public void Bitmap.Clear(Color clr);",
            "public static void SplashKit.ClearBitmap(Bitmap bmp, Color clr);"
          ],
          "cpp": [
            "void clear_bitmap(bitmap bmp, color clr)"
          ],
          "pascal": [
            "procedure ClearBitmap(bmp: Bitmap; clr: Color)"
          ]
        }
      },
      {
        "signature": "void clear_bitmap(string name,color clr);",
        "name": "clear_bitmap",
        "method_name": null,
        "unique_global_name": "clear_bitmap_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Clear the bitmap to the indicated color. This will ensure the entire\nsurface of the bitmap is set to that color.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The new color for the surface of the bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "named",
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "python": [
            "def clear_bitmap_named(name, clr):"
          ],
          "csharp": [
            "public static void SplashKit.ClearBitmap(string name, Color clr);"
          ],
          "cpp": [
            "void clear_bitmap(string name, color clr)"
          ],
          "pascal": [
            "procedure ClearBitmap(name: String; clr: Color)"
          ]
        }
      },
      {
        "signature": "bitmap create_bitmap(string name,int width,int height);",
        "name": "create_bitmap",
        "method_name": null,
        "unique_global_name": "create_bitmap",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a new bitmap that you can draw to. Initially the bitmap will\nbe transparent.",
        "brief": null,
        "return": {
          "type": "bitmap",
          "description": "A new transparent bitmap",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the bitmap resource to be created. If this\nalready exists SplashKit will alter the name to make it\nunique.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "int",
            "description": "The width of the created bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "int",
            "description": "The height of the created bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "constructor": true,
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "python": [
            "def create_bitmap(name, width, height):"
          ],
          "csharp": [
            "public static Bitmap SplashKit.CreateBitmap(string name, int width, int height);",
            "public Bitmap(string name, int width, int height);"
          ],
          "cpp": [
            "bitmap create_bitmap(string name, int width, int height)"
          ],
          "pascal": [
            "function CreateBitmap(name: String; width: Integer; height: Integer): Bitmap"
          ]
        }
      },
      {
        "signature": "void draw_bitmap(bitmap bmp,double x,double y);",
        "name": "draw_bitmap",
        "method_name": "draw",
        "unique_global_name": "draw_bitmap",
        "unique_method_name": "bitmap.draw",
        "suffix_name": null,
        "description": "Draws the bitmap supplied into `bmp` to the current window.\nat `x` and `y`.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "the bitmap which will be drawn to the screen",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "the x location which represents where the bitmap\nwill be drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "the y location which represents where the bitmap\nwill be drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "draw",
          "self": "bmp",
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "python": [
            "def draw_bitmap(bmp, x, y):"
          ],
          "csharp": [
            "public void Bitmap.Draw(double x, double y);",
            "public static void SplashKit.DrawBitmap(Bitmap bmp, double x, double y);"
          ],
          "cpp": [
            "void draw_bitmap(bitmap bmp, double x, double y)"
          ],
          "pascal": [
            "procedure DrawBitmap(bmp: Bitmap; x: Double; y: Double)"
          ]
        }
      },
      {
        "signature": "void draw_bitmap(bitmap bmp,double x,double y,drawing_options opts);",
        "name": "draw_bitmap",
        "method_name": "draw",
        "unique_global_name": "draw_bitmap_with_options",
        "unique_method_name": "bitmap.draw_with_options",
        "suffix_name": null,
        "description": "Draws the bitmap supplied into `bmp` to the current window.\nwith extra drawing options supplied in `opts` at `x` and `y`.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "the bitmap which will be drawn to the screen",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "the x location which represents where the bitmap\nwill be drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "the y location which represents where the bitmap\nwill be drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "the `drawing_options` which provide extra information\nfor how to draw the `bitmap`",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "draw",
          "self": "bmp",
          "suffix": "with_options",
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "python": [
            "def draw_bitmap_with_options(bmp, x, y, opts):"
          ],
          "csharp": [
            "public void Bitmap.Draw(double x, double y, DrawingOptions opts);",
            "public static void SplashKit.DrawBitmap(Bitmap bmp, double x, double y, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_bitmap(bitmap bmp, double x, double y, drawing_options opts)"
          ],
          "pascal": [
            "procedure DrawBitmap(bmp: Bitmap; x: Double; y: Double; opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_bitmap(string name,double x,double y);",
        "name": "draw_bitmap",
        "method_name": null,
        "unique_global_name": "draw_bitmap_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Searches and draws a bitmap with name `name` to the current window.\nwith extra drawing options supplied in `opts` at `x` and `y`.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "the name of the bitmap which will be drawn to the screen",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "the x location which represents where the bitmap\nwill be drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "the y location which represents where the bitmap\nwill be drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "named",
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "python": [
            "def draw_bitmap_named(name, x, y):"
          ],
          "csharp": [
            "public static void SplashKit.DrawBitmap(string name, double x, double y);"
          ],
          "cpp": [
            "void draw_bitmap(string name, double x, double y)"
          ],
          "pascal": [
            "procedure DrawBitmap(name: String; x: Double; y: Double)"
          ]
        }
      },
      {
        "signature": "void draw_bitmap(string name,double x,double y,drawing_options opts);",
        "name": "draw_bitmap",
        "method_name": null,
        "unique_global_name": "draw_bitmap_named_with_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Searches and draws a bitmap with name `name` to the current window.\nwith extra drawing options supplied in `opts` at `x` and `y`.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "the name of the bitmap which will be drawn to the screen",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "the x location which represents where the bitmap\nwill be drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "the y location which represents where the bitmap\nwill be drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "the `drawing_options` which provide extra information\nfor how to draw the `bitmap`",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "named_with_options",
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "python": [
            "def draw_bitmap_named_with_options(name, x, y, opts):"
          ],
          "csharp": [
            "public static void SplashKit.DrawBitmap(string name, double x, double y, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_bitmap(string name, double x, double y, drawing_options opts)"
          ],
          "pascal": [
            "procedure DrawBitmap(name: String; x: Double; y: Double; opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_bitmap_on_bitmap(bitmap destination,bitmap bmp,double x,double y);",
        "name": "draw_bitmap_on_bitmap",
        "method_name": "draw_bitmap",
        "unique_global_name": "draw_bitmap_on_bitmap_on_bitmap",
        "unique_method_name": "bitmap.draw_bitmap_on_bitmap",
        "suffix_name": null,
        "description": "Draws the bitmap supplied into `bmp` to the given bitmap.\nat `x` and `y`.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "bitmap",
            "description": "the bitmap to draw the bitmap to",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "bmp": {
            "type": "bitmap",
            "description": "the bitmap which will be drawn to the screen",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "the x location which represents where the bitmap\nwill be drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "the y location which represents where the bitmap\nwill be drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "draw_bitmap",
          "self": "bmp",
          "suffix": "on_bitmap",
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "python": [
            "def draw_bitmap_on_bitmap_on_bitmap(destination, bmp, x, y):"
          ],
          "csharp": [
            "public void Bitmap.DrawBitmap(Bitmap destination, double x, double y);",
            "public static void SplashKit.DrawBitmapOnBitmap(Bitmap destination, Bitmap bmp, double x, double y);"
          ],
          "cpp": [
            "void draw_bitmap_on_bitmap(bitmap destination, bitmap bmp, double x, double y)"
          ],
          "pascal": [
            "procedure DrawBitmapOnBitmap(destination: Bitmap; bmp: Bitmap; x: Double; y: Double)"
          ]
        }
      },
      {
        "signature": "void draw_bitmap_on_bitmap(bitmap destination,bitmap bmp,double x,double y,drawing_options opts);",
        "name": "draw_bitmap_on_bitmap",
        "method_name": "draw_bitmap",
        "unique_global_name": "draw_bitmap_on_bitmap_on_bitmap_with_options",
        "unique_method_name": "bitmap.draw_bitmap_on_bitmap_with_options",
        "suffix_name": null,
        "description": "Draws the bitmap supplied into `bmp` to the given bitmap.\nwith extra drawing options supplied in `opts` at `x` and `y`.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "bitmap",
            "description": "the bitmap to draw the bitmap to",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "bmp": {
            "type": "bitmap",
            "description": "the bitmap which will be drawn to the screen",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "the x location which represents where the bitmap\nwill be drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "the y location which represents where the bitmap\nwill be drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "the `drawing_options` which provide extra information\nfor how to draw the `bitmap`",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "draw_bitmap",
          "self": "bmp",
          "suffix": "on_bitmap_with_options",
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "python": [
            "def draw_bitmap_on_bitmap_on_bitmap_with_options(destination, bmp, x, y, opts):"
          ],
          "csharp": [
            "public void Bitmap.DrawBitmap(Bitmap destination, double x, double y, DrawingOptions opts);",
            "public static void SplashKit.DrawBitmapOnBitmap(Bitmap destination, Bitmap bmp, double x, double y, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_bitmap_on_bitmap(bitmap destination, bitmap bmp, double x, double y, drawing_options opts)"
          ],
          "pascal": [
            "procedure DrawBitmapOnBitmap(destination: Bitmap; bmp: Bitmap; x: Double; y: Double; opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_bitmap_on_window(window destination,bitmap bmp,double x,double y);",
        "name": "draw_bitmap_on_window",
        "method_name": "draw_bitmap",
        "unique_global_name": "draw_bitmap_on_window",
        "unique_method_name": "window.draw_bitmap",
        "suffix_name": null,
        "description": "Draws the bitmap supplied into `bmp` to the given window.\nat `x` and `y`.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "window",
            "description": "the window to draw the bitmap to",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "bmp": {
            "type": "bitmap",
            "description": "the bitmap which will be drawn to the screen",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "the x location which represents where the bitmap\nwill be drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "the y location which represents where the bitmap\nwill be drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "draw_bitmap",
          "self": "destination",
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "python": [
            "def draw_bitmap_on_window(destination, bmp, x, y):"
          ],
          "csharp": [
            "public void Window.DrawBitmap(Bitmap bmp, double x, double y);",
            "public static void SplashKit.DrawBitmapOnWindow(Window destination, Bitmap bmp, double x, double y);"
          ],
          "cpp": [
            "void draw_bitmap_on_window(window destination, bitmap bmp, double x, double y)"
          ],
          "pascal": [
            "procedure DrawBitmapOnWindow(destination: Window; bmp: Bitmap; x: Double; y: Double)"
          ]
        }
      },
      {
        "signature": "void draw_bitmap_on_window(window destination,bitmap bmp,double x,double y,drawing_options opts);",
        "name": "draw_bitmap_on_window",
        "method_name": "draw_bitmap",
        "unique_global_name": "draw_bitmap_on_window_with_options",
        "unique_method_name": "window.draw_bitmap_with_options",
        "suffix_name": null,
        "description": "Draws the bitmap supplied into `bmp` to the given window.\nwith extra drawing options supplied in `opts` at `x` and `y`.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "window",
            "description": "the window to draw the bitmap to",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "bmp": {
            "type": "bitmap",
            "description": "the bitmap which will be drawn to the screen",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "the x location which represents where the bitmap\nwill be drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "the y location which represents where the bitmap\nwill be drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "the `drawing_options` which provide extra information\nfor how to draw the `bitmap`",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "draw_bitmap",
          "self": "destination",
          "suffix": "with_options",
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "python": [
            "def draw_bitmap_on_window_with_options(destination, bmp, x, y, opts):"
          ],
          "csharp": [
            "public void Window.DrawBitmap(Bitmap bmp, double x, double y, DrawingOptions opts);",
            "public static void SplashKit.DrawBitmapOnWindow(Window destination, Bitmap bmp, double x, double y, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_bitmap_on_window(window destination, bitmap bmp, double x, double y, drawing_options opts)"
          ],
          "pascal": [
            "procedure DrawBitmapOnWindow(destination: Window; bmp: Bitmap; x: Double; y: Double; opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void free_all_bitmaps();",
        "name": "free_all_bitmaps",
        "method_name": null,
        "unique_global_name": "free_all_bitmaps",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Free all of the loaded bitmap resources.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "python": [
            "def free_all_bitmaps():"
          ],
          "csharp": [
            "public static void SplashKit.FreeAllBitmaps();"
          ],
          "cpp": [
            "void free_all_bitmaps()"
          ],
          "pascal": [
            "procedure FreeAllBitmaps()"
          ]
        }
      },
      {
        "signature": "void free_bitmap(bitmap to_delete);",
        "name": "free_bitmap",
        "method_name": "free",
        "unique_global_name": "free_bitmap",
        "unique_method_name": "bitmap.free",
        "suffix_name": null,
        "description": "Frees the bitmap resource.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "to_delete": {
            "type": "bitmap",
            "description": "The bitmap to be freed.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "destructor": true,
          "method": "free",
          "group": "graphics",
          "static": "images",
          "self": "to_delete"
        },
        "signatures": {
          "python": [
            "def free_bitmap(to_delete):"
          ],
          "csharp": [
            "public void Bitmap.Free();",
            "public static void SplashKit.FreeBitmap(Bitmap toDelete);"
          ],
          "cpp": [
            "void free_bitmap(bitmap to_delete)"
          ],
          "pascal": [
            "procedure FreeBitmap(toDelete: Bitmap)"
          ]
        }
      },
      {
        "signature": "bool has_bitmap(string name);",
        "name": "has_bitmap",
        "method_name": null,
        "unique_global_name": "has_bitmap",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Determines if SplashKit has a bitmap loaded for the supplied name.\nThis checks against all bitmaps loaded.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if SplashKit has a bitmap with that name",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "python": [
            "def has_bitmap(name):"
          ],
          "csharp": [
            "public static bool SplashKit.HasBitmap(string name);"
          ],
          "cpp": [
            "bool has_bitmap(string name)"
          ],
          "pascal": [
            "function HasBitmap(name: String): Boolean"
          ]
        }
      },
      {
        "signature": "bitmap load_bitmap(string name,string filename);",
        "name": "load_bitmap",
        "method_name": null,
        "unique_global_name": "load_bitmap",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Loads and returns a bitmap. The supplied `filename` is used to\nlocate the Bitmap to load. The supplied `name` indicates the\nname to use to refer to this Bitmap in SplashKit. The `bitmap` can then\nbe retrieved by passing this `name` to the `bitmap_named` function.",
        "brief": null,
        "return": {
          "type": "bitmap",
          "description": "The loaded bitmap",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the bitmap resource in SplashKit",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "filename": {
            "type": "string",
            "description": "The filename to load",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "constructor": true,
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "python": [
            "def load_bitmap(name, filename):"
          ],
          "csharp": [
            "public static Bitmap SplashKit.LoadBitmap(string name, string filename);",
            "public Bitmap(string name, string filename);"
          ],
          "cpp": [
            "bitmap load_bitmap(string name, string filename)"
          ],
          "pascal": [
            "function LoadBitmap(name: String; filename: String): Bitmap"
          ]
        }
      },
      {
        "signature": "bool pixel_drawn_at_point(bitmap bmp,const point_2d &pt);",
        "name": "pixel_drawn_at_point",
        "method_name": "pixel_drawn_at_point",
        "unique_global_name": "pixel_drawn_at_point_pt",
        "unique_method_name": "bitmap.pixel_drawn_at_point_pt",
        "suffix_name": null,
        "description": "Check if the bitmap has a pixel drawn at the indicated point.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the pixel at that point in the bitmap is drawn.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to check.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The point within the bitmap to check.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "pixel_drawn_at_point",
          "suffix": "pt",
          "group": "graphics",
          "static": "images",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def pixel_drawn_at_point_pt(bmp, pt):"
          ],
          "csharp": [
            "public bool Bitmap.PixelDrawnAtPoint(Point2D pt);",
            "public static bool SplashKit.PixelDrawnAtPoint(Bitmap bmp, Point2D pt);"
          ],
          "cpp": [
            "bool pixel_drawn_at_point(bitmap bmp, const point_2d &pt)"
          ],
          "pascal": [
            "function PixelDrawnAtPoint(bmp: Bitmap; const pt: Point2D): Boolean"
          ]
        }
      },
      {
        "signature": "bool pixel_drawn_at_point(bitmap bmp,double x,double y);",
        "name": "pixel_drawn_at_point",
        "method_name": "pixel_drawn_at_point",
        "unique_global_name": "pixel_drawn_at_point",
        "unique_method_name": "bitmap.pixel_drawn_at_point",
        "suffix_name": null,
        "description": "Check if the bitmap has a pixel drawn at the indicated point.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the pixel at that point in the bitmap is drawn.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to check.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x coordinate within the bitmap to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y coordinate within the bitmap to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "pixel_drawn_at_point",
          "group": "graphics",
          "static": "images",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def pixel_drawn_at_point(bmp, x, y):"
          ],
          "csharp": [
            "public bool Bitmap.PixelDrawnAtPoint(double x, double y);",
            "public static bool SplashKit.PixelDrawnAtPoint(Bitmap bmp, double x, double y);"
          ],
          "cpp": [
            "bool pixel_drawn_at_point(bitmap bmp, double x, double y)"
          ],
          "pascal": [
            "function PixelDrawnAtPoint(bmp: Bitmap; x: Double; y: Double): Boolean"
          ]
        }
      },
      {
        "signature": "bool pixel_drawn_at_point(bitmap bmp,int cell,const point_2d &pt);",
        "name": "pixel_drawn_at_point",
        "method_name": "pixel_drawn_at_point_in_cell",
        "unique_global_name": "pixel_drawn_at_point_in_cell_pt",
        "unique_method_name": "bitmap.pixel_drawn_at_point_in_cell_in_cell_pt",
        "suffix_name": null,
        "description": "Check if the bitmap has a pixel drawn at the indicated point in the cell.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the pixel at that point in the bitmap's cell is\ndrawn.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to check.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "cell": {
            "type": "int",
            "description": "The bitmap cell to check.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The point within the bitmap to check.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "pixel_drawn_at_point_in_cell",
          "suffix": "in_cell_pt",
          "group": "graphics",
          "static": "images",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def pixel_drawn_at_point_in_cell_pt(bmp, cell, pt):"
          ],
          "csharp": [
            "public bool Bitmap.PixelDrawnAtPointInCell(int cell, Point2D pt);",
            "public static bool SplashKit.PixelDrawnAtPoint(Bitmap bmp, int cell, Point2D pt);"
          ],
          "cpp": [
            "bool pixel_drawn_at_point(bitmap bmp, int cell, const point_2d &pt)"
          ],
          "pascal": [
            "function PixelDrawnAtPoint(bmp: Bitmap; cell: Integer; const pt: Point2D): Boolean"
          ]
        }
      },
      {
        "signature": "bool pixel_drawn_at_point(bitmap bmp,int cell,double x,double y);",
        "name": "pixel_drawn_at_point",
        "method_name": "pixel_drawn_at_point",
        "unique_global_name": "pixel_drawn_at_point_in_cell",
        "unique_method_name": "bitmap.pixel_drawn_at_point_in_cell",
        "suffix_name": null,
        "description": "Check if the bitmap has a pixel drawn at the indicated point in the cell.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the pixel at that point in the bitmap's cell is\ndrawn.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to check.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "cell": {
            "type": "int",
            "description": "The bitmap cell to check.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x coordinate within the bitmap to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y coordinate within the bitmap to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "pixel_drawn_at_point",
          "suffix": "in_cell",
          "group": "graphics",
          "static": "images",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def pixel_drawn_at_point_in_cell(bmp, cell, x, y):"
          ],
          "csharp": [
            "public bool Bitmap.PixelDrawnAtPoint(int cell, double x, double y);",
            "public static bool SplashKit.PixelDrawnAtPoint(Bitmap bmp, int cell, double x, double y);"
          ],
          "cpp": [
            "bool pixel_drawn_at_point(bitmap bmp, int cell, double x, double y)"
          ],
          "pascal": [
            "function PixelDrawnAtPoint(bmp: Bitmap; cell: Integer; x: Double; y: Double): Boolean"
          ]
        }
      },
      {
        "signature": "void setup_collision_mask(bitmap bmp);",
        "name": "setup_collision_mask",
        "method_name": "setup_collision_mask",
        "unique_global_name": "setup_collision_mask",
        "unique_method_name": "bitmap.setup_collision_mask",
        "suffix_name": null,
        "description": "Sets up the collision mask for a bitmap. This enables collision detection between\nthis bitmap and other bitmaps or shapes.\n\nThis is automatically called when a bitmap is loaded, and only needs to be \ncalled on bitmaps created using `create_bitmap`, and when a bitmap is\nchanged by drawing onto the bitmap.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "the bitmap to setup",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "setup_collision_mask",
          "group": "graphics",
          "static": "images",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def setup_collision_mask(bmp):"
          ],
          "csharp": [
            "public void Bitmap.SetupCollisionMask();",
            "public static void SplashKit.SetupCollisionMask(Bitmap bmp);"
          ],
          "cpp": [
            "void setup_collision_mask(bitmap bmp)"
          ],
          "pascal": [
            "procedure SetupCollisionMask(bmp: Bitmap)"
          ]
        }
      },
      {
        "signature": "void draw_line(color clr,const line &l);",
        "name": "draw_line",
        "method_name": null,
        "unique_global_name": "draw_line_record",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draws a line onto the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the line",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "l": {
            "type": "line",
            "description": "The line's details",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "record",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def draw_line_record(clr, l):"
          ],
          "csharp": [
            "public static void SplashKit.DrawLine(Color clr, Line l);"
          ],
          "cpp": [
            "void draw_line(color clr, const line &l)"
          ],
          "pascal": [
            "procedure DrawLine(clr: Color; const l: Line)"
          ]
        }
      },
      {
        "signature": "void draw_line(color clr,const line &l,drawing_options opts);",
        "name": "draw_line",
        "method_name": null,
        "unique_global_name": "draw_line_record_with_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draws a line.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the line",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "l": {
            "type": "line",
            "description": "The line's details",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "record_with_options",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def draw_line_record_with_options(clr, l, opts):"
          ],
          "csharp": [
            "public static void SplashKit.DrawLine(Color clr, Line l, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_line(color clr, const line &l, drawing_options opts)"
          ],
          "pascal": [
            "procedure DrawLine(clr: Color; const l: Line; opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_line(color clr,const point_2d &from_pt,const point_2d &to_pt);",
        "name": "draw_line",
        "method_name": null,
        "unique_global_name": "draw_line_point_to_point",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draw a line from one point to another on the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the line",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "from_pt": {
            "type": "point_2d",
            "description": "The start of the line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "to_pt": {
            "type": "point_2d",
            "description": "The end of the line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "point_to_point",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def draw_line_point_to_point(clr, from_pt, to_pt):"
          ],
          "csharp": [
            "public static void SplashKit.DrawLine(Color clr, Point2D fromPt, Point2D toPt);"
          ],
          "cpp": [
            "void draw_line(color clr, const point_2d &from_pt, const point_2d &to_pt)"
          ],
          "pascal": [
            "procedure DrawLine(clr: Color; const fromPt: Point2D; const toPt: Point2D)"
          ]
        }
      },
      {
        "signature": "void draw_line(color clr,const point_2d &from_pt,const point_2d &to_pt,const drawing_options &opts);",
        "name": "draw_line",
        "method_name": null,
        "unique_global_name": "draw_line_point_to_point_with_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draw a line from one point to another on the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the line",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "from_pt": {
            "type": "point_2d",
            "description": "The start of the line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "to_pt": {
            "type": "point_2d",
            "description": "The end of the line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "point_to_point_with_options",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def draw_line_point_to_point_with_options(clr, from_pt, to_pt, opts):"
          ],
          "csharp": [
            "public static void SplashKit.DrawLine(Color clr, Point2D fromPt, Point2D toPt, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_line(color clr, const point_2d &from_pt, const point_2d &to_pt, const drawing_options &opts)"
          ],
          "pascal": [
            "procedure DrawLine(clr: Color; const fromPt: Point2D; const toPt: Point2D; const opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_line(color clr,double x1,double y1,double x2,double y2);",
        "name": "draw_line",
        "method_name": null,
        "unique_global_name": "draw_line",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draw a line from one point to another on the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the line",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x1": {
            "type": "double",
            "description": "The distance from the left of the window/bitmap to the first\npoint",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y1": {
            "type": "double",
            "description": "The distance from the top of the window/bitmap to the first\npoint",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x2": {
            "type": "double",
            "description": "The distance from the left of the window/bitmap to the second\npoint",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y2": {
            "type": "double",
            "description": "The distance from the top of the window/bitmap to the second\npoint",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def draw_line(clr, x1, y1, x2, y2):"
          ],
          "csharp": [
            "public static void SplashKit.DrawLine(Color clr, double x1, double y1, double x2, double y2);"
          ],
          "cpp": [
            "void draw_line(color clr, double x1, double y1, double x2, double y2)"
          ],
          "pascal": [
            "procedure DrawLine(clr: Color; x1: Double; y1: Double; x2: Double; y2: Double)"
          ]
        }
      },
      {
        "signature": "void draw_line(color clr,double x1,double y1,double x2,double y2,const drawing_options &opts);",
        "name": "draw_line",
        "method_name": null,
        "unique_global_name": "draw_line_with_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draw a line from one point to another",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the line",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x1": {
            "type": "double",
            "description": "The distance from the left of the window/bitmap to the first\npoint",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y1": {
            "type": "double",
            "description": "The distance from the top of the window/bitmap to the first\npoint",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x2": {
            "type": "double",
            "description": "The distance from the left of the window/bitmap to the second\npoint",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y2": {
            "type": "double",
            "description": "The distance from the top of the window/bitmap to the second\npoint",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "with_options",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def draw_line_with_options(clr, x1, y1, x2, y2, opts):"
          ],
          "csharp": [
            "public static void SplashKit.DrawLine(Color clr, double x1, double y1, double x2, double y2, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_line(color clr, double x1, double y1, double x2, double y2, const drawing_options &opts)"
          ],
          "pascal": [
            "procedure DrawLine(clr: Color; x1: Double; y1: Double; x2: Double; y2: Double; const opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_line_on_bitmap(bitmap destination,color clr,const line &l);",
        "name": "draw_line_on_bitmap",
        "method_name": "draw_line",
        "unique_global_name": "draw_line_on_bitmap_record",
        "unique_method_name": "bitmap.draw_line_record",
        "suffix_name": null,
        "description": "Draws a line onto the given bitmap.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "bitmap",
            "description": "The destination bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the line",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "l": {
            "type": "line",
            "description": "The line's details",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "draw_line",
          "suffix": "record",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_line_on_bitmap_record(destination, clr, l):"
          ],
          "csharp": [
            "public void Bitmap.DrawLine(Color clr, Line l);",
            "public static void SplashKit.DrawLineOnBitmap(Bitmap destination, Color clr, Line l);"
          ],
          "cpp": [
            "void draw_line_on_bitmap(bitmap destination, color clr, const line &l)"
          ],
          "pascal": [
            "procedure DrawLineOnBitmap(destination: Bitmap; clr: Color; const l: Line)"
          ]
        }
      },
      {
        "signature": "void draw_line_on_bitmap(bitmap destination,color clr,const line &l,drawing_options opts);",
        "name": "draw_line_on_bitmap",
        "method_name": "draw_line",
        "unique_global_name": "draw_line_on_bitmap_record_with_options",
        "unique_method_name": "bitmap.draw_line_record_with_options",
        "suffix_name": null,
        "description": "Draws a line on the given bitmap.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "bitmap",
            "description": "The destination bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the line",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "l": {
            "type": "line",
            "description": "The line's details",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "draw_line",
          "suffix": "record_with_options",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_line_on_bitmap_record_with_options(destination, clr, l, opts):"
          ],
          "csharp": [
            "public void Bitmap.DrawLine(Color clr, Line l, DrawingOptions opts);",
            "public static void SplashKit.DrawLineOnBitmap(Bitmap destination, Color clr, Line l, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_line_on_bitmap(bitmap destination, color clr, const line &l, drawing_options opts)"
          ],
          "pascal": [
            "procedure DrawLineOnBitmap(destination: Bitmap; clr: Color; const l: Line; opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_line_on_bitmap(bitmap destination,color clr,const point_2d &from_pt,const point_2d &to_pt);",
        "name": "draw_line_on_bitmap",
        "method_name": "draw_line",
        "unique_global_name": "draw_line_on_bitmap_point_to_point",
        "unique_method_name": "bitmap.draw_line_point_to_point",
        "suffix_name": null,
        "description": "Draw a line from one point to another on the given bitmap.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "bitmap",
            "description": "The destination bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the line",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "from_pt": {
            "type": "point_2d",
            "description": "The start of the line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "to_pt": {
            "type": "point_2d",
            "description": "The end of the line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "draw_line",
          "suffix": "point_to_point",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_line_on_bitmap_point_to_point(destination, clr, from_pt, to_pt):"
          ],
          "csharp": [
            "public void Bitmap.DrawLine(Color clr, Point2D fromPt, Point2D toPt);",
            "public static void SplashKit.DrawLineOnBitmap(Bitmap destination, Color clr, Point2D fromPt, Point2D toPt);"
          ],
          "cpp": [
            "void draw_line_on_bitmap(bitmap destination, color clr, const point_2d &from_pt, const point_2d &to_pt)"
          ],
          "pascal": [
            "procedure DrawLineOnBitmap(destination: Bitmap; clr: Color; const fromPt: Point2D; const toPt: Point2D)"
          ]
        }
      },
      {
        "signature": "void draw_line_on_bitmap(bitmap destination,color clr,const point_2d &from_pt,const point_2d &to_pt,const drawing_options &opts);",
        "name": "draw_line_on_bitmap",
        "method_name": "draw_line",
        "unique_global_name": "draw_line_on_bitmap_point_to_point_with_options",
        "unique_method_name": "bitmap.draw_line_point_to_point_with_options",
        "suffix_name": null,
        "description": "Draw a line from one point to another on the given bitmap.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "bitmap",
            "description": "The destination bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the line",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "from_pt": {
            "type": "point_2d",
            "description": "The start of the line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "to_pt": {
            "type": "point_2d",
            "description": "The end of the line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "draw_line",
          "suffix": "point_to_point_with_options",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_line_on_bitmap_point_to_point_with_options(destination, clr, from_pt, to_pt, opts):"
          ],
          "csharp": [
            "public void Bitmap.DrawLine(Color clr, Point2D fromPt, Point2D toPt, DrawingOptions opts);",
            "public static void SplashKit.DrawLineOnBitmap(Bitmap destination, Color clr, Point2D fromPt, Point2D toPt, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_line_on_bitmap(bitmap destination, color clr, const point_2d &from_pt, const point_2d &to_pt, const drawing_options &opts)"
          ],
          "pascal": [
            "procedure DrawLineOnBitmap(destination: Bitmap; clr: Color; const fromPt: Point2D; const toPt: Point2D; const opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_line_on_bitmap(bitmap destination,color clr,double x1,double y1,double x2,double y2);",
        "name": "draw_line_on_bitmap",
        "method_name": "draw_line",
        "unique_global_name": "draw_line_on_bitmap",
        "unique_method_name": "bitmap.draw_line",
        "suffix_name": null,
        "description": "Draw a line from one point to another on the given bitmap.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "bitmap",
            "description": "The destination bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the line",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x1": {
            "type": "double",
            "description": "The distance from the left of the bitmap/bitmap to the first\npoint",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y1": {
            "type": "double",
            "description": "The distance from the top of the bitmap/bitmap to the first\npoint",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x2": {
            "type": "double",
            "description": "The distance from the left of the bitmap/bitmap to the second\npoint",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y2": {
            "type": "double",
            "description": "The distance from the top of the bitmap/bitmap to the second\npoint",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "draw_line",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_line_on_bitmap(destination, clr, x1, y1, x2, y2):"
          ],
          "csharp": [
            "public void Bitmap.DrawLine(Color clr, double x1, double y1, double x2, double y2);",
            "public static void SplashKit.DrawLineOnBitmap(Bitmap destination, Color clr, double x1, double y1, double x2, double y2);"
          ],
          "cpp": [
            "void draw_line_on_bitmap(bitmap destination, color clr, double x1, double y1, double x2, double y2)"
          ],
          "pascal": [
            "procedure DrawLineOnBitmap(destination: Bitmap; clr: Color; x1: Double; y1: Double; x2: Double; y2: Double)"
          ]
        }
      },
      {
        "signature": "void draw_line_on_bitmap(bitmap destination,color clr,double x1,double y1,double x2,double y2,const drawing_options &opts);",
        "name": "draw_line_on_bitmap",
        "method_name": "draw_line",
        "unique_global_name": "draw_line_on_bitmap_with_options",
        "unique_method_name": "bitmap.draw_line_with_options",
        "suffix_name": null,
        "description": "Draw a line from one point to another",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "bitmap",
            "description": "The destination bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the line",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x1": {
            "type": "double",
            "description": "The distance from the left of the bitmap/bitmap to the first\npoint",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y1": {
            "type": "double",
            "description": "The distance from the top of the bitmap/bitmap to the first\npoint",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x2": {
            "type": "double",
            "description": "The distance from the left of the bitmap/bitmap to the second\npoint",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y2": {
            "type": "double",
            "description": "The distance from the top of the bitmap/bitmap to the second\npoint",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "draw_line",
          "suffix": "with_options",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_line_on_bitmap_with_options(destination, clr, x1, y1, x2, y2, opts):"
          ],
          "csharp": [
            "public void Bitmap.DrawLine(Color clr, double x1, double y1, double x2, double y2, DrawingOptions opts);",
            "public static void SplashKit.DrawLineOnBitmap(Bitmap destination, Color clr, double x1, double y1, double x2, double y2, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_line_on_bitmap(bitmap destination, color clr, double x1, double y1, double x2, double y2, const drawing_options &opts)"
          ],
          "pascal": [
            "procedure DrawLineOnBitmap(destination: Bitmap; clr: Color; x1: Double; y1: Double; x2: Double; y2: Double; const opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_line_on_window(window destination,color clr,const line &l);",
        "name": "draw_line_on_window",
        "method_name": "draw_line",
        "unique_global_name": "draw_line_on_window_record",
        "unique_method_name": "window.draw_line_record",
        "suffix_name": null,
        "description": "Draws a line onto the given window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "window",
            "description": "The destination bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the line",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "l": {
            "type": "line",
            "description": "The line's details",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "draw_line",
          "suffix": "record",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_line_on_window_record(destination, clr, l):"
          ],
          "csharp": [
            "public void Window.DrawLine(Color clr, Line l);",
            "public static void SplashKit.DrawLineOnWindow(Window destination, Color clr, Line l);"
          ],
          "cpp": [
            "void draw_line_on_window(window destination, color clr, const line &l)"
          ],
          "pascal": [
            "procedure DrawLineOnWindow(destination: Window; clr: Color; const l: Line)"
          ]
        }
      },
      {
        "signature": "void draw_line_on_window(window destination,color clr,const line &l,drawing_options opts);",
        "name": "draw_line_on_window",
        "method_name": "draw_line",
        "unique_global_name": "draw_line_on_window_record_with_options",
        "unique_method_name": "window.draw_line_record_with_options",
        "suffix_name": null,
        "description": "Draws a line on the given window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "window",
            "description": "The destination bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the line",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "l": {
            "type": "line",
            "description": "The line's details",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "draw_line",
          "suffix": "record_with_options",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_line_on_window_record_with_options(destination, clr, l, opts):"
          ],
          "csharp": [
            "public void Window.DrawLine(Color clr, Line l, DrawingOptions opts);",
            "public static void SplashKit.DrawLineOnWindow(Window destination, Color clr, Line l, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_line_on_window(window destination, color clr, const line &l, drawing_options opts)"
          ],
          "pascal": [
            "procedure DrawLineOnWindow(destination: Window; clr: Color; const l: Line; opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_line_on_window(window destination,color clr,const point_2d &from_pt,const point_2d &to_pt);",
        "name": "draw_line_on_window",
        "method_name": "draw_line",
        "unique_global_name": "draw_line_on_window_point_to_point",
        "unique_method_name": "window.draw_line_point_to_point",
        "suffix_name": null,
        "description": "Draw a line from one point to another on the given window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "window",
            "description": "The destination bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the line",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "from_pt": {
            "type": "point_2d",
            "description": "The start of the line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "to_pt": {
            "type": "point_2d",
            "description": "The end of the line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "draw_line",
          "suffix": "point_to_point",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_line_on_window_point_to_point(destination, clr, from_pt, to_pt):"
          ],
          "csharp": [
            "public void Window.DrawLine(Color clr, Point2D fromPt, Point2D toPt);",
            "public static void SplashKit.DrawLineOnWindow(Window destination, Color clr, Point2D fromPt, Point2D toPt);"
          ],
          "cpp": [
            "void draw_line_on_window(window destination, color clr, const point_2d &from_pt, const point_2d &to_pt)"
          ],
          "pascal": [
            "procedure DrawLineOnWindow(destination: Window; clr: Color; const fromPt: Point2D; const toPt: Point2D)"
          ]
        }
      },
      {
        "signature": "void draw_line_on_window(window destination,color clr,const point_2d &from_pt,const point_2d &to_pt,const drawing_options &opts);",
        "name": "draw_line_on_window",
        "method_name": "draw_line",
        "unique_global_name": "draw_line_on_window_point_to_point_with_options",
        "unique_method_name": "window.draw_line_point_to_point_with_options",
        "suffix_name": null,
        "description": "Draw a line from one point to another on the given window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "window",
            "description": "The destination bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the line",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "from_pt": {
            "type": "point_2d",
            "description": "The start of the line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "to_pt": {
            "type": "point_2d",
            "description": "The end of the line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "draw_line",
          "suffix": "point_to_point_with_options",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_line_on_window_point_to_point_with_options(destination, clr, from_pt, to_pt, opts):"
          ],
          "csharp": [
            "public void Window.DrawLine(Color clr, Point2D fromPt, Point2D toPt, DrawingOptions opts);",
            "public static void SplashKit.DrawLineOnWindow(Window destination, Color clr, Point2D fromPt, Point2D toPt, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_line_on_window(window destination, color clr, const point_2d &from_pt, const point_2d &to_pt, const drawing_options &opts)"
          ],
          "pascal": [
            "procedure DrawLineOnWindow(destination: Window; clr: Color; const fromPt: Point2D; const toPt: Point2D; const opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_line_on_window(window destination,color clr,double x1,double y1,double x2,double y2);",
        "name": "draw_line_on_window",
        "method_name": "draw_line",
        "unique_global_name": "draw_line_on_window",
        "unique_method_name": "window.draw_line",
        "suffix_name": null,
        "description": "Draw a line from one point to another on the given window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "window",
            "description": "The destination bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the line",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x1": {
            "type": "double",
            "description": "The distance from the left of the window/bitmap to the first\npoint",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y1": {
            "type": "double",
            "description": "The distance from the top of the window/bitmap to the first\npoint",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x2": {
            "type": "double",
            "description": "The distance from the left of the window/bitmap to the second\npoint",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y2": {
            "type": "double",
            "description": "The distance from the top of the window/bitmap to the second\npoint",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "draw_line",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_line_on_window(destination, clr, x1, y1, x2, y2):"
          ],
          "csharp": [
            "public void Window.DrawLine(Color clr, double x1, double y1, double x2, double y2);",
            "public static void SplashKit.DrawLineOnWindow(Window destination, Color clr, double x1, double y1, double x2, double y2);"
          ],
          "cpp": [
            "void draw_line_on_window(window destination, color clr, double x1, double y1, double x2, double y2)"
          ],
          "pascal": [
            "procedure DrawLineOnWindow(destination: Window; clr: Color; x1: Double; y1: Double; x2: Double; y2: Double)"
          ]
        }
      },
      {
        "signature": "void draw_line_on_window(window destination,color clr,double x1,double y1,double x2,double y2,const drawing_options &opts);",
        "name": "draw_line_on_window",
        "method_name": "draw_line",
        "unique_global_name": "draw_line_on_window_with_options",
        "unique_method_name": "window.draw_line_with_options",
        "suffix_name": null,
        "description": "Draw a line from one point to another",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "window",
            "description": "The destination bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the line",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x1": {
            "type": "double",
            "description": "The distance from the left of the window/bitmap to the first\npoint",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y1": {
            "type": "double",
            "description": "The distance from the top of the window/bitmap to the first\npoint",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x2": {
            "type": "double",
            "description": "The distance from the left of the window/bitmap to the second\npoint",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y2": {
            "type": "double",
            "description": "The distance from the top of the window/bitmap to the second\npoint",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "draw_line",
          "suffix": "with_options",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_line_on_window_with_options(destination, clr, x1, y1, x2, y2, opts):"
          ],
          "csharp": [
            "public void Window.DrawLine(Color clr, double x1, double y1, double x2, double y2, DrawingOptions opts);",
            "public static void SplashKit.DrawLineOnWindow(Window destination, Color clr, double x1, double y1, double x2, double y2, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_line_on_window(window destination, color clr, double x1, double y1, double x2, double y2, const drawing_options &opts)"
          ],
          "pascal": [
            "procedure DrawLineOnWindow(destination: Window; clr: Color; x1: Double; y1: Double; x2: Double; y2: Double; const opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_pixel(color clr,const point_2d &pt);",
        "name": "draw_pixel",
        "method_name": null,
        "unique_global_name": "draw_pixel_at_point",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draws an individual pixel to the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the pixel",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The location of the pixel to draw",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "at_point",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def draw_pixel_at_point(clr, pt):"
          ],
          "csharp": [
            "public static void SplashKit.DrawPixel(Color clr, Point2D pt);"
          ],
          "cpp": [
            "void draw_pixel(color clr, const point_2d &pt)"
          ],
          "pascal": [
            "procedure DrawPixel(clr: Color; const pt: Point2D)"
          ]
        }
      },
      {
        "signature": "void draw_pixel(color clr,const point_2d &pt,drawing_options opts);",
        "name": "draw_pixel",
        "method_name": null,
        "unique_global_name": "draw_pixel_at_point_with_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draws an individual pixel with the supplied options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the pixel",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The location of the pixel to draw",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "at_point_with_options",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def draw_pixel_at_point_with_options(clr, pt, opts):"
          ],
          "csharp": [
            "public static void SplashKit.DrawPixel(Color clr, Point2D pt, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_pixel(color clr, const point_2d &pt, drawing_options opts)"
          ],
          "pascal": [
            "procedure DrawPixel(clr: Color; const pt: Point2D; opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_pixel(color clr,double x,double y);",
        "name": "draw_pixel",
        "method_name": null,
        "unique_global_name": "draw_pixel",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draws an individual pixel to the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the pixel",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The distance from the left edge of the window to the\npixel",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The distance from the top edge of the window to the\npixel",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def draw_pixel(clr, x, y):"
          ],
          "csharp": [
            "public static void SplashKit.DrawPixel(Color clr, double x, double y);"
          ],
          "cpp": [
            "void draw_pixel(color clr, double x, double y)"
          ],
          "pascal": [
            "procedure DrawPixel(clr: Color; x: Double; y: Double)"
          ]
        }
      },
      {
        "signature": "void draw_pixel(color clr,double x,double y,drawing_options opts);",
        "name": "draw_pixel",
        "method_name": null,
        "unique_global_name": "draw_pixel_with_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draws an individual pixel with the supplied options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the pixel",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The distance from the left edge of the window/bitmap to the\npixel",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The distance from the top edge of the window/bitmap to the\npixel",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "with_options",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def draw_pixel_with_options(clr, x, y, opts):"
          ],
          "csharp": [
            "public static void SplashKit.DrawPixel(Color clr, double x, double y, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_pixel(color clr, double x, double y, drawing_options opts)"
          ],
          "pascal": [
            "procedure DrawPixel(clr: Color; x: Double; y: Double; opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_pixel_on_bitmap(bitmap destination,color clr,const point_2d &pt);",
        "name": "draw_pixel_on_bitmap",
        "method_name": "draw_pixel",
        "unique_global_name": "draw_pixel_on_bitmap_at_point",
        "unique_method_name": "bitmap.draw_pixel_at_point",
        "suffix_name": null,
        "description": "Draws an individual pixel to the given bitmap.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "bitmap",
            "description": "the bitmap to draw the pixel on",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the pixel",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The location of the pixel to draw",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "draw_pixel",
          "suffix": "at_point",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_pixel_on_bitmap_at_point(destination, clr, pt):"
          ],
          "csharp": [
            "public void Bitmap.DrawPixel(Color clr, Point2D pt);",
            "public static void SplashKit.DrawPixelOnBitmap(Bitmap destination, Color clr, Point2D pt);"
          ],
          "cpp": [
            "void draw_pixel_on_bitmap(bitmap destination, color clr, const point_2d &pt)"
          ],
          "pascal": [
            "procedure DrawPixelOnBitmap(destination: Bitmap; clr: Color; const pt: Point2D)"
          ]
        }
      },
      {
        "signature": "void draw_pixel_on_bitmap(bitmap destination,color clr,const point_2d &pt,drawing_options opts);",
        "name": "draw_pixel_on_bitmap",
        "method_name": "draw_pixel",
        "unique_global_name": "draw_pixel_on_bitmap_at_point_with_options",
        "unique_method_name": "bitmap.draw_pixel_at_point_with_options",
        "suffix_name": null,
        "description": "Draws an individual pixel to the given bitmap with the given drawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "bitmap",
            "description": "the bitmap to draw the pixel on",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the pixel",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The location of the pixel to draw",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "draw_pixel",
          "suffix": "at_point_with_options",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_pixel_on_bitmap_at_point_with_options(destination, clr, pt, opts):"
          ],
          "csharp": [
            "public void Bitmap.DrawPixel(Color clr, Point2D pt, DrawingOptions opts);",
            "public static void SplashKit.DrawPixelOnBitmap(Bitmap destination, Color clr, Point2D pt, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_pixel_on_bitmap(bitmap destination, color clr, const point_2d &pt, drawing_options opts)"
          ],
          "pascal": [
            "procedure DrawPixelOnBitmap(destination: Bitmap; clr: Color; const pt: Point2D; opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_pixel_on_bitmap(bitmap destination,color clr,double x,double y);",
        "name": "draw_pixel_on_bitmap",
        "method_name": "draw_pixel",
        "unique_global_name": "draw_pixel_on_bitmap",
        "unique_method_name": "bitmap.draw_pixel",
        "suffix_name": null,
        "description": "Draws an individual pixel to the given bitmap.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "bitmap",
            "description": "the bitmap to draw the pixel on",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the pixel",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The distance from the left edge of the bitmap to the\npixel",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The distance from the top edge of the bitmap to the\npixel",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "draw_pixel",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_pixel_on_bitmap(destination, clr, x, y):"
          ],
          "csharp": [
            "public void Bitmap.DrawPixel(Color clr, double x, double y);",
            "public static void SplashKit.DrawPixelOnBitmap(Bitmap destination, Color clr, double x, double y);"
          ],
          "cpp": [
            "void draw_pixel_on_bitmap(bitmap destination, color clr, double x, double y)"
          ],
          "pascal": [
            "procedure DrawPixelOnBitmap(destination: Bitmap; clr: Color; x: Double; y: Double)"
          ]
        }
      },
      {
        "signature": "void draw_pixel_on_bitmap(bitmap destination,color clr,double x,double y,drawing_options opts);",
        "name": "draw_pixel_on_bitmap",
        "method_name": "draw_pixel",
        "unique_global_name": "draw_pixel_on_bitmap_with_options",
        "unique_method_name": "bitmap.draw_pixel_with_options",
        "suffix_name": null,
        "description": "Draws an individual pixel to the given bitmap with the given drawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "bitmap",
            "description": "the bitmap to draw the pixel on",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the pixel",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The distance from the left edge of the bitmap to the\npixel",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The distance from the top edge of the bitmap to the\npixel",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "draw_pixel",
          "suffix": "with_options",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_pixel_on_bitmap_with_options(destination, clr, x, y, opts):"
          ],
          "csharp": [
            "public void Bitmap.DrawPixel(Color clr, double x, double y, DrawingOptions opts);",
            "public static void SplashKit.DrawPixelOnBitmap(Bitmap destination, Color clr, double x, double y, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_pixel_on_bitmap(bitmap destination, color clr, double x, double y, drawing_options opts)"
          ],
          "pascal": [
            "procedure DrawPixelOnBitmap(destination: Bitmap; clr: Color; x: Double; y: Double; opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_pixel_on_window(window destination,color clr,const point_2d &pt);",
        "name": "draw_pixel_on_window",
        "method_name": null,
        "unique_global_name": "draw_pixel_on_window_at_point",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draws an individual pixel to the given window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "window",
            "description": "The window to draw the pixel on",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the pixel",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The location of the pixel to draw",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "suffix": "at_point",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def draw_pixel_on_window_at_point(destination, clr, pt):"
          ],
          "csharp": [
            "public static void SplashKit.DrawPixelOnWindow(Window destination, Color clr, Point2D pt);"
          ],
          "cpp": [
            "void draw_pixel_on_window(window destination, color clr, const point_2d &pt)"
          ],
          "pascal": [
            "procedure DrawPixelOnWindow(destination: Window; clr: Color; const pt: Point2D)"
          ]
        }
      },
      {
        "signature": "void draw_pixel_on_window(window destination,color clr,const point_2d &pt,drawing_options opts);",
        "name": "draw_pixel_on_window",
        "method_name": null,
        "unique_global_name": "draw_pixel_on_window_at_point_with_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draws an individual pixel to the given window with the given drawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "window",
            "description": "The window to draw the pixel on",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the pixel",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The location of the pixel to draw",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "suffix": "at_point_with_options",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def draw_pixel_on_window_at_point_with_options(destination, clr, pt, opts):"
          ],
          "csharp": [
            "public static void SplashKit.DrawPixelOnWindow(Window destination, Color clr, Point2D pt, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_pixel_on_window(window destination, color clr, const point_2d &pt, drawing_options opts)"
          ],
          "pascal": [
            "procedure DrawPixelOnWindow(destination: Window; clr: Color; const pt: Point2D; opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_pixel_on_window(window destination,color clr,double x,double y);",
        "name": "draw_pixel_on_window",
        "method_name": null,
        "unique_global_name": "draw_pixel_on_window",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draws an individual pixel to the given window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "window",
            "description": "the window to draw the pixel on",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the pixel",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The distance from the left edge of the window to the\npixel",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The distance from the top edge of the window to the\npixel",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def draw_pixel_on_window(destination, clr, x, y):"
          ],
          "csharp": [
            "public static void SplashKit.DrawPixelOnWindow(Window destination, Color clr, double x, double y);"
          ],
          "cpp": [
            "void draw_pixel_on_window(window destination, color clr, double x, double y)"
          ],
          "pascal": [
            "procedure DrawPixelOnWindow(destination: Window; clr: Color; x: Double; y: Double)"
          ]
        }
      },
      {
        "signature": "void draw_pixel_on_window(window destination,color clr,double x,double y,drawing_options opts);",
        "name": "draw_pixel_on_window",
        "method_name": null,
        "unique_global_name": "draw_pixel_on_window_with_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draws an individual pixel to the given window with the given drawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "window",
            "description": "The window to draw the pixel on",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the pixel",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The distance from the left edge of the window to the\npixel",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The distance from the top edge of the window to the\npixel",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "suffix": "with_options",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def draw_pixel_on_window_with_options(destination, clr, x, y, opts):"
          ],
          "csharp": [
            "public static void SplashKit.DrawPixelOnWindow(Window destination, Color clr, double x, double y, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_pixel_on_window(window destination, color clr, double x, double y, drawing_options opts)"
          ],
          "pascal": [
            "procedure DrawPixelOnWindow(destination: Window; clr: Color; x: Double; y: Double; opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "color get_pixel(bitmap bmp,const point_2d &pt);",
        "name": "get_pixel",
        "method_name": null,
        "unique_global_name": "get_pixel_from_bitmap_at_point",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the color of the pixel at the location on the supplied\nbitmap.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "The color of the pixel at the supplied location",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to get the color from",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The position of the pixel",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "from_bitmap_at_point",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def get_pixel_from_bitmap_at_point(bmp, pt):"
          ],
          "csharp": [
            "public static Color SplashKit.GetPixel(Bitmap bmp, Point2D pt);"
          ],
          "cpp": [
            "color get_pixel(bitmap bmp, const point_2d &pt)"
          ],
          "pascal": [
            "function GetPixel(bmp: Bitmap; const pt: Point2D): Color"
          ]
        }
      },
      {
        "signature": "color get_pixel(bitmap bmp,double x,double y);",
        "name": "get_pixel",
        "method_name": null,
        "unique_global_name": "get_pixel_from_bitmap",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the color of the pixel at the x,y location on the supplied\nbitmap.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "The color of the pixel at the supplied location",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to get the color from",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The distance from the left edge of the bitmap to the pixel\nto read",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The distance from the top of the bitmap to the pixel to read",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "from_bitmap",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def get_pixel_from_bitmap(bmp, x, y):"
          ],
          "csharp": [
            "public static Color SplashKit.GetPixel(Bitmap bmp, double x, double y);"
          ],
          "cpp": [
            "color get_pixel(bitmap bmp, double x, double y)"
          ],
          "pascal": [
            "function GetPixel(bmp: Bitmap; x: Double; y: Double): Color"
          ]
        }
      },
      {
        "signature": "color get_pixel(const point_2d &pt);",
        "name": "get_pixel",
        "method_name": null,
        "unique_global_name": "get_pixel_at_point",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the color of the pixel at the x,y location on the current\nwindow.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "The color of the pixel at the supplied location",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "The position of the pixel",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "at_point",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def get_pixel_at_point(pt):"
          ],
          "csharp": [
            "public static Color SplashKit.GetPixel(Point2D pt);"
          ],
          "cpp": [
            "color get_pixel(const point_2d &pt)"
          ],
          "pascal": [
            "function GetPixel(const pt: Point2D): Color"
          ]
        }
      },
      {
        "signature": "color get_pixel(double x,double y);",
        "name": "get_pixel",
        "method_name": null,
        "unique_global_name": "get_pixel",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the color of the pixel at the x,y location on the current\nwindow.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "The color of the pixel at the supplied location",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "x": {
            "type": "double",
            "description": "The distance from the left edge of the window to the pixel\nto read",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The distance from the top of the window to the pixel to read",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def get_pixel(x, y):"
          ],
          "csharp": [
            "public static Color SplashKit.GetPixel(double x, double y);"
          ],
          "cpp": [
            "color get_pixel(double x, double y)"
          ],
          "pascal": [
            "function GetPixel(x: Double; y: Double): Color"
          ]
        }
      },
      {
        "signature": "color get_pixel(window wnd,const point_2d &pt);",
        "name": "get_pixel",
        "method_name": null,
        "unique_global_name": "get_pixel_from_window_at_point",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the color of the pixel at the location on the supplied\nwindow.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "The color of the pixel at the supplied location",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wnd": {
            "type": "window",
            "description": "The window to get the color from",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The position of the pixel",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "from_window_at_point",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def get_pixel_from_window_at_point(wnd, pt):"
          ],
          "csharp": [
            "public static Color SplashKit.GetPixel(Window wnd, Point2D pt);"
          ],
          "cpp": [
            "color get_pixel(window wnd, const point_2d &pt)"
          ],
          "pascal": [
            "function GetPixel(wnd: Window; const pt: Point2D): Color"
          ]
        }
      },
      {
        "signature": "color get_pixel(window wnd,double x,double y);",
        "name": "get_pixel",
        "method_name": null,
        "unique_global_name": "get_pixel_from_window",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the color of the pixel at the x,y location on the supplied\nwindow.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "The color of the pixel at the supplied location",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wnd": {
            "type": "window",
            "description": "The window to get the color from",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The distance from the left edge of the window to the pixel\nto read",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The distance from the top of the window to the pixel to read",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "from_window",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def get_pixel_from_window(wnd, x, y):"
          ],
          "csharp": [
            "public static Color SplashKit.GetPixel(Window wnd, double x, double y);"
          ],
          "cpp": [
            "color get_pixel(window wnd, double x, double y)"
          ],
          "pascal": [
            "function GetPixel(wnd: Window; x: Double; y: Double): Color"
          ]
        }
      },
      {
        "signature": "color get_pixel_from_window(window destination,const point_2d &pt);",
        "name": "get_pixel_from_window",
        "method_name": null,
        "unique_global_name": "get_pixel_from_window_at_point_from_window",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the color of the pixel at the x,y location on the given\nwindow.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "The color of the pixel at the supplied location",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "window",
            "description": "The window to draw the pixel on",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The position of the pixel",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "at_point_from_window",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def get_pixel_from_window_at_point_from_window(destination, pt):"
          ],
          "csharp": [
            "public static Color SplashKit.GetPixelFromWindow(Window destination, Point2D pt);"
          ],
          "cpp": [
            "color get_pixel_from_window(window destination, const point_2d &pt)"
          ],
          "pascal": [
            "function GetPixelFromWindow(destination: Window; const pt: Point2D): Color"
          ]
        }
      },
      {
        "signature": "color get_pixel_from_window(window destination,double x,double y);",
        "name": "get_pixel_from_window",
        "method_name": null,
        "unique_global_name": "get_pixel_from_window_from_window",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the color of the pixel at the x,y location on the given\nwindow.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "The color of the pixel at the supplied location",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "window",
            "description": "The window to draw the pixel on",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The distance from the left edge of the window to the pixel\nto read",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The distance from the top of the window to the pixel to read",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "suffix": "from_window",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def get_pixel_from_window_from_window(destination, x, y):"
          ],
          "csharp": [
            "public static Color SplashKit.GetPixelFromWindow(Window destination, double x, double y);"
          ],
          "cpp": [
            "color get_pixel_from_window(window destination, double x, double y)"
          ],
          "pascal": [
            "function GetPixelFromWindow(destination: Window; x: Double; y: Double): Color"
          ]
        }
      },
      {
        "signature": "void draw_quad(color clr,const quad &q);",
        "name": "draw_quad",
        "method_name": null,
        "unique_global_name": "draw_quad",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draw a quad to the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color for the quad",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "q": {
            "type": "quad",
            "description": "The details of the quad",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def draw_quad(clr, q):"
          ],
          "csharp": [
            "public static void SplashKit.DrawQuad(Color clr, Quad q);"
          ],
          "cpp": [
            "void draw_quad(color clr, const quad &q)"
          ],
          "pascal": [
            "procedure DrawQuad(clr: Color; const q: Quad)"
          ]
        }
      },
      {
        "signature": "void draw_quad(color clr,const quad &q,const drawing_options &opts);",
        "name": "draw_quad",
        "method_name": null,
        "unique_global_name": "draw_quad_with_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draw a quad using the supplied drawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color for the quad",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "q": {
            "type": "quad",
            "description": "The details of the quad",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "with_options",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def draw_quad_with_options(clr, q, opts):"
          ],
          "csharp": [
            "public static void SplashKit.DrawQuad(Color clr, Quad q, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_quad(color clr, const quad &q, const drawing_options &opts)"
          ],
          "pascal": [
            "procedure DrawQuad(clr: Color; const q: Quad; const opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_quad_on_bitmap(bitmap destination,color clr,const quad &q);",
        "name": "draw_quad_on_bitmap",
        "method_name": "draw_quad",
        "unique_global_name": "draw_quad_on_bitmap",
        "unique_method_name": "bitmap.draw_quad",
        "suffix_name": null,
        "description": "Draw a quad on the supplied bitmap to the current bitmap.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "bitmap",
            "description": "The destination bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color for the quad",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "q": {
            "type": "quad",
            "description": "The details of the quad",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "draw_quad",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_quad_on_bitmap(destination, clr, q):"
          ],
          "csharp": [
            "public void Bitmap.DrawQuad(Color clr, Quad q);",
            "public static void SplashKit.DrawQuadOnBitmap(Bitmap destination, Color clr, Quad q);"
          ],
          "cpp": [
            "void draw_quad_on_bitmap(bitmap destination, color clr, const quad &q)"
          ],
          "pascal": [
            "procedure DrawQuadOnBitmap(destination: Bitmap; clr: Color; const q: Quad)"
          ]
        }
      },
      {
        "signature": "void draw_quad_on_bitmap(bitmap destination,color clr,const quad &q,const drawing_options &opts);",
        "name": "draw_quad_on_bitmap",
        "method_name": "draw_quad",
        "unique_global_name": "draw_quad_on_bitmap_with_options",
        "unique_method_name": "bitmap.draw_quad_with_options",
        "suffix_name": null,
        "description": "Draw a quad on the supplied bitmap using the supplied drawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "bitmap",
            "description": "The destination bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color for the quad",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "q": {
            "type": "quad",
            "description": "The details of the quad",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "draw_quad",
          "suffix": "with_options",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_quad_on_bitmap_with_options(destination, clr, q, opts):"
          ],
          "csharp": [
            "public void Bitmap.DrawQuad(Color clr, Quad q, DrawingOptions opts);",
            "public static void SplashKit.DrawQuadOnBitmap(Bitmap destination, Color clr, Quad q, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_quad_on_bitmap(bitmap destination, color clr, const quad &q, const drawing_options &opts)"
          ],
          "pascal": [
            "procedure DrawQuadOnBitmap(destination: Bitmap; clr: Color; const q: Quad; const opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_quad_on_window(window destination,color clr,const quad &q);",
        "name": "draw_quad_on_window",
        "method_name": "draw_quad",
        "unique_global_name": "draw_quad_on_window",
        "unique_method_name": "window.draw_quad",
        "suffix_name": null,
        "description": "Draw a quad on the supplied window to the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "window",
            "description": "The destination window",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color for the quad",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "q": {
            "type": "quad",
            "description": "The details of the quad",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "draw_quad",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_quad_on_window(destination, clr, q):"
          ],
          "csharp": [
            "public void Window.DrawQuad(Color clr, Quad q);",
            "public static void SplashKit.DrawQuadOnWindow(Window destination, Color clr, Quad q);"
          ],
          "cpp": [
            "void draw_quad_on_window(window destination, color clr, const quad &q)"
          ],
          "pascal": [
            "procedure DrawQuadOnWindow(destination: Window; clr: Color; const q: Quad)"
          ]
        }
      },
      {
        "signature": "void draw_quad_on_window(window destination,color clr,const quad &q,const drawing_options &opts);",
        "name": "draw_quad_on_window",
        "method_name": "draw_quad",
        "unique_global_name": "draw_quad_on_window_with_options",
        "unique_method_name": "window.draw_quad_with_options",
        "suffix_name": null,
        "description": "Draw a quad on the supplied window using the supplied drawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "window",
            "description": "The destination window",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color for the quad",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "q": {
            "type": "quad",
            "description": "The details of the quad",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "draw_quad",
          "suffix": "with_options",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_quad_on_window_with_options(destination, clr, q, opts):"
          ],
          "csharp": [
            "public void Window.DrawQuad(Color clr, Quad q, DrawingOptions opts);",
            "public static void SplashKit.DrawQuadOnWindow(Window destination, Color clr, Quad q, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_quad_on_window(window destination, color clr, const quad &q, const drawing_options &opts)"
          ],
          "pascal": [
            "procedure DrawQuadOnWindow(destination: Window; clr: Color; const q: Quad; const opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_rectangle(color clr,const rectangle &rect);",
        "name": "draw_rectangle",
        "method_name": null,
        "unique_global_name": "draw_rectangle_record",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draw a rectangle onto the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to draw",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "record",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def draw_rectangle_record(clr, rect):"
          ],
          "csharp": [
            "public static void SplashKit.DrawRectangle(Color clr, Rectangle rect);"
          ],
          "cpp": [
            "void draw_rectangle(color clr, const rectangle &rect)"
          ],
          "pascal": [
            "procedure DrawRectangle(clr: Color; const rect: Rectangle)"
          ]
        }
      },
      {
        "signature": "void draw_rectangle(color clr,const rectangle &rect,const drawing_options &opts);",
        "name": "draw_rectangle",
        "method_name": null,
        "unique_global_name": "draw_rectangle_record_with_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draw a rectangle using the supplied drawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to draw",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "record_with_options",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def draw_rectangle_record_with_options(clr, rect, opts):"
          ],
          "csharp": [
            "public static void SplashKit.DrawRectangle(Color clr, Rectangle rect, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_rectangle(color clr, const rectangle &rect, const drawing_options &opts)"
          ],
          "pascal": [
            "procedure DrawRectangle(clr: Color; const rect: Rectangle; const opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_rectangle(color clr,double x,double y,double width,double height);",
        "name": "draw_rectangle",
        "method_name": null,
        "unique_global_name": "draw_rectangle",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draw a rectangle to the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The distance from the left of the window/bitmap to the\nrectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The distance from the top of the window/bitmap to the\nrectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "double",
            "description": "The width of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "double",
            "description": "The height of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def draw_rectangle(clr, x, y, width, height):"
          ],
          "csharp": [
            "public static void SplashKit.DrawRectangle(Color clr, double x, double y, double width, double height);"
          ],
          "cpp": [
            "void draw_rectangle(color clr, double x, double y, double width, double height)"
          ],
          "pascal": [
            "procedure DrawRectangle(clr: Color; x: Double; y: Double; width: Double; height: Double)"
          ]
        }
      },
      {
        "signature": "void draw_rectangle(color clr,double x,double y,double width,double height,const drawing_options &opts);",
        "name": "draw_rectangle",
        "method_name": null,
        "unique_global_name": "draw_rectangle_with_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draw a rectangle using the supplied drawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The distance from the left of the window/bitmap to the\nrectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The distance from the top of the window/bitmap to the\nrectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "double",
            "description": "The width of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "double",
            "description": "The height of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "with_options",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def draw_rectangle_with_options(clr, x, y, width, height, opts):"
          ],
          "csharp": [
            "public static void SplashKit.DrawRectangle(Color clr, double x, double y, double width, double height, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_rectangle(color clr, double x, double y, double width, double height, const drawing_options &opts)"
          ],
          "pascal": [
            "procedure DrawRectangle(clr: Color; x: Double; y: Double; width: Double; height: Double; const opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_rectangle_on_bitmap(bitmap destination,color clr,const rectangle &rect);",
        "name": "draw_rectangle_on_bitmap",
        "method_name": "draw_rectangle",
        "unique_global_name": "draw_rectangle_on_bitmap_record",
        "unique_method_name": "bitmap.draw_rectangle_record",
        "suffix_name": null,
        "description": "Draw a rectangle to the bitmap using the supplied rect. The rectangle is centred on its x, y\ncoordinates, and has the provided width and height.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "bitmap",
            "description": "The destination bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "the rectangle to be drawn to the bitmap",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "draw_rectangle",
          "suffix": "record",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_rectangle_on_bitmap_record(destination, clr, rect):"
          ],
          "csharp": [
            "public void Bitmap.DrawRectangle(Color clr, Rectangle rect);",
            "public static void SplashKit.DrawRectangleOnBitmap(Bitmap destination, Color clr, Rectangle rect);"
          ],
          "cpp": [
            "void draw_rectangle_on_bitmap(bitmap destination, color clr, const rectangle &rect)"
          ],
          "pascal": [
            "procedure DrawRectangleOnBitmap(destination: Bitmap; clr: Color; const rect: Rectangle)"
          ]
        }
      },
      {
        "signature": "void draw_rectangle_on_bitmap(bitmap destination,color clr,const rectangle &rect,const drawing_options &opts);",
        "name": "draw_rectangle_on_bitmap",
        "method_name": "draw_rectangle",
        "unique_global_name": "draw_rectangle_on_bitmap_record_with_options",
        "unique_method_name": "bitmap.draw_rectangle_record_with_options",
        "suffix_name": null,
        "description": "Draw a rectangle to the bitmap using the supplied rect and drawing options. The rectangle is centred on its x, y\ncoordinates, and has the provided width and height.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "bitmap",
            "description": "The destination bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "the rectangle to be drawn to the bitmap",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "Drawing options to configure the drawing operation",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "draw_rectangle",
          "suffix": "record_with_options",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_rectangle_on_bitmap_record_with_options(destination, clr, rect, opts):"
          ],
          "csharp": [
            "public void Bitmap.DrawRectangle(Color clr, Rectangle rect, DrawingOptions opts);",
            "public static void SplashKit.DrawRectangleOnBitmap(Bitmap destination, Color clr, Rectangle rect, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_rectangle_on_bitmap(bitmap destination, color clr, const rectangle &rect, const drawing_options &opts)"
          ],
          "pascal": [
            "procedure DrawRectangleOnBitmap(destination: Bitmap; clr: Color; const rect: Rectangle; const opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_rectangle_on_bitmap(bitmap destination,color clr,double x,double y,double width,double height);",
        "name": "draw_rectangle_on_bitmap",
        "method_name": "draw_rectangle",
        "unique_global_name": "draw_rectangle_on_bitmap",
        "unique_method_name": "bitmap.draw_rectangle",
        "suffix_name": null,
        "description": "Draw a rectangle to the bitmap using. The rectangle is centred on its x, y\ncoordinates, and has the provided width and height.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "bitmap",
            "description": "The destination bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x location of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "double",
            "description": "The width of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "double",
            "description": "The height of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "draw_rectangle",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_rectangle_on_bitmap(destination, clr, x, y, width, height):"
          ],
          "csharp": [
            "public void Bitmap.DrawRectangle(Color clr, double x, double y, double width, double height);",
            "public static void SplashKit.DrawRectangleOnBitmap(Bitmap destination, Color clr, double x, double y, double width, double height);"
          ],
          "cpp": [
            "void draw_rectangle_on_bitmap(bitmap destination, color clr, double x, double y, double width, double height)"
          ],
          "pascal": [
            "procedure DrawRectangleOnBitmap(destination: Bitmap; clr: Color; x: Double; y: Double; width: Double; height: Double)"
          ]
        }
      },
      {
        "signature": "void draw_rectangle_on_bitmap(bitmap destination,color clr,double x,double y,double width,double height,drawing_options opts);",
        "name": "draw_rectangle_on_bitmap",
        "method_name": "draw_rectangle",
        "unique_global_name": "draw_rectangle_on_bitmap_with_options",
        "unique_method_name": "bitmap.draw_rectangle_with_options",
        "suffix_name": null,
        "description": "Draw a rectangle to the bitmap using the supplied drawing options. The rectangle is centred on its x, y\ncoordinates, and has the provided width and height.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "bitmap",
            "description": "The destination bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x location of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "double",
            "description": "The width of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "double",
            "description": "The height of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "Drawing options to configure the drawing operation",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "draw_rectangle",
          "suffix": "with_options",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_rectangle_on_bitmap_with_options(destination, clr, x, y, width, height, opts):"
          ],
          "csharp": [
            "public void Bitmap.DrawRectangle(Color clr, double x, double y, double width, double height, DrawingOptions opts);",
            "public static void SplashKit.DrawRectangleOnBitmap(Bitmap destination, Color clr, double x, double y, double width, double height, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_rectangle_on_bitmap(bitmap destination, color clr, double x, double y, double width, double height, drawing_options opts)"
          ],
          "pascal": [
            "procedure DrawRectangleOnBitmap(destination: Bitmap; clr: Color; x: Double; y: Double; width: Double; height: Double; opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_rectangle_on_window(window destination,color clr,const rectangle &rect);",
        "name": "draw_rectangle_on_window",
        "method_name": "draw_rectangle",
        "unique_global_name": "draw_rectangle_on_window_record",
        "unique_method_name": "window.draw_rectangle_record",
        "suffix_name": null,
        "description": "Draw a rectangle to the window using the supplied rect. The rectangle is centred on its x, y\ncoordinates, and has the provided width and height.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "window",
            "description": "The destination window",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "the rectangle to be drawn to the window",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "draw_rectangle",
          "suffix": "record",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_rectangle_on_window_record(destination, clr, rect):"
          ],
          "csharp": [
            "public void Window.DrawRectangle(Color clr, Rectangle rect);",
            "public static void SplashKit.DrawRectangleOnWindow(Window destination, Color clr, Rectangle rect);"
          ],
          "cpp": [
            "void draw_rectangle_on_window(window destination, color clr, const rectangle &rect)"
          ],
          "pascal": [
            "procedure DrawRectangleOnWindow(destination: Window; clr: Color; const rect: Rectangle)"
          ]
        }
      },
      {
        "signature": "void draw_rectangle_on_window(window destination,color clr,const rectangle &rect,const drawing_options &opts);",
        "name": "draw_rectangle_on_window",
        "method_name": "draw_rectangle",
        "unique_global_name": "draw_rectangle_on_window_record_with_options",
        "unique_method_name": "window.draw_rectangle_record_with_options",
        "suffix_name": null,
        "description": "Draw a rectangle to the window using the supplied rect and drawing options. The rectangle is centred on its x, y\ncoordinates, and has the provided width and height.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "window",
            "description": "The destination window",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "the rectangle to be drawn to the window",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "Drawing options to configure the drawing operation",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "draw_rectangle",
          "suffix": "record_with_options",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_rectangle_on_window_record_with_options(destination, clr, rect, opts):"
          ],
          "csharp": [
            "public void Window.DrawRectangle(Color clr, Rectangle rect, DrawingOptions opts);",
            "public static void SplashKit.DrawRectangleOnWindow(Window destination, Color clr, Rectangle rect, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_rectangle_on_window(window destination, color clr, const rectangle &rect, const drawing_options &opts)"
          ],
          "pascal": [
            "procedure DrawRectangleOnWindow(destination: Window; clr: Color; const rect: Rectangle; const opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_rectangle_on_window(window destination,color clr,double x,double y,double width,double height);",
        "name": "draw_rectangle_on_window",
        "method_name": "draw_rectangle",
        "unique_global_name": "draw_rectangle_on_window",
        "unique_method_name": "window.draw_rectangle",
        "suffix_name": null,
        "description": "Draw a rectangle to the window using. The rectangle is centred on its x, y\ncoordinates, and has the provided width and height.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "window",
            "description": "The destination window",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x location of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "double",
            "description": "The width of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "double",
            "description": "The height of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "draw_rectangle",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_rectangle_on_window(destination, clr, x, y, width, height):"
          ],
          "csharp": [
            "public void Window.DrawRectangle(Color clr, double x, double y, double width, double height);",
            "public static void SplashKit.DrawRectangleOnWindow(Window destination, Color clr, double x, double y, double width, double height);"
          ],
          "cpp": [
            "void draw_rectangle_on_window(window destination, color clr, double x, double y, double width, double height)"
          ],
          "pascal": [
            "procedure DrawRectangleOnWindow(destination: Window; clr: Color; x: Double; y: Double; width: Double; height: Double)"
          ]
        }
      },
      {
        "signature": "void draw_rectangle_on_window(window destination,color clr,double x,double y,double width,double height,drawing_options opts);",
        "name": "draw_rectangle_on_window",
        "method_name": "draw_rectangle",
        "unique_global_name": "draw_rectangle_on_window_with_options",
        "unique_method_name": "window.draw_rectangle_with_options",
        "suffix_name": null,
        "description": "Draw a rectangle to the window using the supplied drawing options. The rectangle is centred on its x, y\ncoordinates, and has the provided width and height.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "window",
            "description": "The destination window",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x location of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "double",
            "description": "The width of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "double",
            "description": "The height of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "Drawing options to configure the drawing operation",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "draw_rectangle",
          "suffix": "with_options",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_rectangle_on_window_with_options(destination, clr, x, y, width, height, opts):"
          ],
          "csharp": [
            "public void Window.DrawRectangle(Color clr, double x, double y, double width, double height, DrawingOptions opts);",
            "public static void SplashKit.DrawRectangleOnWindow(Window destination, Color clr, double x, double y, double width, double height, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_rectangle_on_window(window destination, color clr, double x, double y, double width, double height, drawing_options opts)"
          ],
          "pascal": [
            "procedure DrawRectangleOnWindow(destination: Window; clr: Color; x: Double; y: Double; width: Double; height: Double; opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void fill_quad(color clr,const quad &q);",
        "name": "fill_quad",
        "method_name": null,
        "unique_global_name": "fill_quad",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fill a quad on the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color for the quad",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "q": {
            "type": "quad",
            "description": "The details of the quad",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def fill_quad(clr, q):"
          ],
          "csharp": [
            "public static void SplashKit.FillQuad(Color clr, Quad q);"
          ],
          "cpp": [
            "void fill_quad(color clr, const quad &q)"
          ],
          "pascal": [
            "procedure FillQuad(clr: Color; const q: Quad)"
          ]
        }
      },
      {
        "signature": "void fill_quad(color clr,const quad &q,const drawing_options &opts);",
        "name": "fill_quad",
        "method_name": null,
        "unique_global_name": "fill_quad_with_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fill a quad using the supplied drawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color for the quad",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "q": {
            "type": "quad",
            "description": "The details of the quad",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "with_options",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def fill_quad_with_options(clr, q, opts):"
          ],
          "csharp": [
            "public static void SplashKit.FillQuad(Color clr, Quad q, DrawingOptions opts);"
          ],
          "cpp": [
            "void fill_quad(color clr, const quad &q, const drawing_options &opts)"
          ],
          "pascal": [
            "procedure FillQuad(clr: Color; const q: Quad; const opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void fill_quad_on_bitmap(bitmap destination,color clr,const quad &q);",
        "name": "fill_quad_on_bitmap",
        "method_name": "fill_quad",
        "unique_global_name": "fill_quad_on_bitmap",
        "unique_method_name": "bitmap.fill_quad",
        "suffix_name": null,
        "description": "Fill a quad on the supplied bitmap on the current bitmap.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "bitmap",
            "description": "The destination bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color for the quad",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "q": {
            "type": "quad",
            "description": "The details of the quad",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "fill_quad",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def fill_quad_on_bitmap(destination, clr, q):"
          ],
          "csharp": [
            "public void Bitmap.FillQuad(Color clr, Quad q);",
            "public static void SplashKit.FillQuadOnBitmap(Bitmap destination, Color clr, Quad q);"
          ],
          "cpp": [
            "void fill_quad_on_bitmap(bitmap destination, color clr, const quad &q)"
          ],
          "pascal": [
            "procedure FillQuadOnBitmap(destination: Bitmap; clr: Color; const q: Quad)"
          ]
        }
      },
      {
        "signature": "void fill_quad_on_bitmap(bitmap destination,color clr,const quad &q,const drawing_options &opts);",
        "name": "fill_quad_on_bitmap",
        "method_name": "fill_quad",
        "unique_global_name": "fill_quad_on_bitmap_with_options",
        "unique_method_name": "bitmap.fill_quad_with_options",
        "suffix_name": null,
        "description": "Fill a quad on the supplied bitmap using the supplied drawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "bitmap",
            "description": "The destination bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color for the quad",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "q": {
            "type": "quad",
            "description": "The details of the quad",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "fill_quad",
          "suffix": "with_options",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def fill_quad_on_bitmap_with_options(destination, clr, q, opts):"
          ],
          "csharp": [
            "public void Bitmap.FillQuad(Color clr, Quad q, DrawingOptions opts);",
            "public static void SplashKit.FillQuadOnBitmap(Bitmap destination, Color clr, Quad q, DrawingOptions opts);"
          ],
          "cpp": [
            "void fill_quad_on_bitmap(bitmap destination, color clr, const quad &q, const drawing_options &opts)"
          ],
          "pascal": [
            "procedure FillQuadOnBitmap(destination: Bitmap; clr: Color; const q: Quad; const opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void fill_quad_on_window(window destination,color clr,const quad &q);",
        "name": "fill_quad_on_window",
        "method_name": "fill_quad",
        "unique_global_name": "fill_quad_on_window",
        "unique_method_name": "window.fill_quad",
        "suffix_name": null,
        "description": "Fill a quad on the supplied window on the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "window",
            "description": "The destination window",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color for the quad",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "q": {
            "type": "quad",
            "description": "The details of the quad",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "fill_quad",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def fill_quad_on_window(destination, clr, q):"
          ],
          "csharp": [
            "public void Window.FillQuad(Color clr, Quad q);",
            "public static void SplashKit.FillQuadOnWindow(Window destination, Color clr, Quad q);"
          ],
          "cpp": [
            "void fill_quad_on_window(window destination, color clr, const quad &q)"
          ],
          "pascal": [
            "procedure FillQuadOnWindow(destination: Window; clr: Color; const q: Quad)"
          ]
        }
      },
      {
        "signature": "void fill_quad_on_window(window destination,color clr,const quad &q,const drawing_options &opts);",
        "name": "fill_quad_on_window",
        "method_name": null,
        "unique_global_name": "fill_quad_on_window_with_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fill a quad on the supplied window using the supplied drawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "window",
            "description": "The destination window",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color for the quad",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "q": {
            "type": "quad",
            "description": "The details of the quad",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "suffix": "with_options",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def fill_quad_on_window_with_options(destination, clr, q, opts):"
          ],
          "csharp": [
            "public static void SplashKit.FillQuadOnWindow(Window destination, Color clr, Quad q, DrawingOptions opts);"
          ],
          "cpp": [
            "void fill_quad_on_window(window destination, color clr, const quad &q, const drawing_options &opts)"
          ],
          "pascal": [
            "procedure FillQuadOnWindow(destination: Window; clr: Color; const q: Quad; const opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void fill_rectangle(color clr,const rectangle &rect);",
        "name": "fill_rectangle",
        "method_name": null,
        "unique_global_name": "fill_rectangle_record",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fill a rectangle onto the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to draw",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "record",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def fill_rectangle_record(clr, rect):"
          ],
          "csharp": [
            "public static void SplashKit.FillRectangle(Color clr, Rectangle rect);"
          ],
          "cpp": [
            "void fill_rectangle(color clr, const rectangle &rect)"
          ],
          "pascal": [
            "procedure FillRectangle(clr: Color; const rect: Rectangle)"
          ]
        }
      },
      {
        "signature": "void fill_rectangle(color clr,const rectangle &rect,const drawing_options &opts);",
        "name": "fill_rectangle",
        "method_name": null,
        "unique_global_name": "fill_rectangle_record_with_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fills a rectangle using the supplied drawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to draw",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "record_with_options",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def fill_rectangle_record_with_options(clr, rect, opts):"
          ],
          "csharp": [
            "public static void SplashKit.FillRectangle(Color clr, Rectangle rect, DrawingOptions opts);"
          ],
          "cpp": [
            "void fill_rectangle(color clr, const rectangle &rect, const drawing_options &opts)"
          ],
          "pascal": [
            "procedure FillRectangle(clr: Color; const rect: Rectangle; const opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void fill_rectangle(color clr,double x,double y,double width,double height);",
        "name": "fill_rectangle",
        "method_name": null,
        "unique_global_name": "fill_rectangle",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fills a rectangle to the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The distance from the left of the window/bitmap to the\nrectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The distance from the top of the window/bitmap to the\nrectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "double",
            "description": "The width of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "double",
            "description": "The height of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def fill_rectangle(clr, x, y, width, height):"
          ],
          "csharp": [
            "public static void SplashKit.FillRectangle(Color clr, double x, double y, double width, double height);"
          ],
          "cpp": [
            "void fill_rectangle(color clr, double x, double y, double width, double height)"
          ],
          "pascal": [
            "procedure FillRectangle(clr: Color; x: Double; y: Double; width: Double; height: Double)"
          ]
        }
      },
      {
        "signature": "void fill_rectangle(color clr,double x,double y,double width,double height,const drawing_options &opts);",
        "name": "fill_rectangle",
        "method_name": null,
        "unique_global_name": "fill_rectangle_with_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fills a rectangle using the supplied drawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The distance from the left of the window/bitmap to the\nrectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The distance from the top of the window/bitmap to the\nrectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "double",
            "description": "The width of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "double",
            "description": "The height of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "with_options",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def fill_rectangle_with_options(clr, x, y, width, height, opts):"
          ],
          "csharp": [
            "public static void SplashKit.FillRectangle(Color clr, double x, double y, double width, double height, DrawingOptions opts);"
          ],
          "cpp": [
            "void fill_rectangle(color clr, double x, double y, double width, double height, const drawing_options &opts)"
          ],
          "pascal": [
            "procedure FillRectangle(clr: Color; x: Double; y: Double; width: Double; height: Double; const opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void fill_rectangle_on_bitmap(bitmap destination,color clr,const rectangle &rect);",
        "name": "fill_rectangle_on_bitmap",
        "method_name": "fill_rectangle",
        "unique_global_name": "fill_rectangle_on_bitmap_record",
        "unique_method_name": "bitmap.fill_rectangle_record",
        "suffix_name": null,
        "description": "Fill a rectangle on the supplied bitmap onto the current bitmap.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "bitmap",
            "description": "The destination bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to draw",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "fill_rectangle",
          "suffix": "record",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def fill_rectangle_on_bitmap_record(destination, clr, rect):"
          ],
          "csharp": [
            "public void Bitmap.FillRectangle(Color clr, Rectangle rect);",
            "public static void SplashKit.FillRectangleOnBitmap(Bitmap destination, Color clr, Rectangle rect);"
          ],
          "cpp": [
            "void fill_rectangle_on_bitmap(bitmap destination, color clr, const rectangle &rect)"
          ],
          "pascal": [
            "procedure FillRectangleOnBitmap(destination: Bitmap; clr: Color; const rect: Rectangle)"
          ]
        }
      },
      {
        "signature": "void fill_rectangle_on_bitmap(bitmap destination,color clr,const rectangle &rect,const drawing_options &opts);",
        "name": "fill_rectangle_on_bitmap",
        "method_name": "fill_rectangle",
        "unique_global_name": "fill_rectangle_on_bitmap_record_with_options",
        "unique_method_name": "bitmap.fill_rectangle_record_with_options",
        "suffix_name": null,
        "description": "Fills a rectangle on the supplied bitmap using the supplied drawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "bitmap",
            "description": "The destination bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to draw",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "fill_rectangle",
          "suffix": "record_with_options",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def fill_rectangle_on_bitmap_record_with_options(destination, clr, rect, opts):"
          ],
          "csharp": [
            "public void Bitmap.FillRectangle(Color clr, Rectangle rect, DrawingOptions opts);",
            "public static void SplashKit.FillRectangleOnBitmap(Bitmap destination, Color clr, Rectangle rect, DrawingOptions opts);"
          ],
          "cpp": [
            "void fill_rectangle_on_bitmap(bitmap destination, color clr, const rectangle &rect, const drawing_options &opts)"
          ],
          "pascal": [
            "procedure FillRectangleOnBitmap(destination: Bitmap; clr: Color; const rect: Rectangle; const opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void fill_rectangle_on_bitmap(bitmap destination,color clr,double x,double y,double width,double height);",
        "name": "fill_rectangle_on_bitmap",
        "method_name": "fill_rectangle",
        "unique_global_name": "fill_rectangle_on_bitmap",
        "unique_method_name": "bitmap.fill_rectangle",
        "suffix_name": null,
        "description": "Fills a rectangle on the supplied bitmap to the current bitmap.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "bitmap",
            "description": "The destination bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The distance from the left of the bitmap/bitmap to the\nrectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The distance from the top of the bitmap/bitmap to the\nrectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "double",
            "description": "The width of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "double",
            "description": "The height of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "fill_rectangle",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def fill_rectangle_on_bitmap(destination, clr, x, y, width, height):"
          ],
          "csharp": [
            "public void Bitmap.FillRectangle(Color clr, double x, double y, double width, double height);",
            "public static void SplashKit.FillRectangleOnBitmap(Bitmap destination, Color clr, double x, double y, double width, double height);"
          ],
          "cpp": [
            "void fill_rectangle_on_bitmap(bitmap destination, color clr, double x, double y, double width, double height)"
          ],
          "pascal": [
            "procedure FillRectangleOnBitmap(destination: Bitmap; clr: Color; x: Double; y: Double; width: Double; height: Double)"
          ]
        }
      },
      {
        "signature": "void fill_rectangle_on_bitmap(bitmap destination,color clr,double x,double y,double width,double height,const drawing_options &opts);",
        "name": "fill_rectangle_on_bitmap",
        "method_name": "fill_rectangle",
        "unique_global_name": "fill_rectangle_on_bitmap_with_options",
        "unique_method_name": "bitmap.fill_rectangle_with_options",
        "suffix_name": null,
        "description": "Fills a rectangle on the supplied bitmap, using the supplied drawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "bitmap",
            "description": "The destination bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The distance from the left of the bitmap/bitmap to the\nrectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The distance from the top of the bitmap/bitmap to the\nrectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "double",
            "description": "The width of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "double",
            "description": "The height of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "fill_rectangle",
          "suffix": "with_options",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def fill_rectangle_on_bitmap_with_options(destination, clr, x, y, width, height, opts):"
          ],
          "csharp": [
            "public void Bitmap.FillRectangle(Color clr, double x, double y, double width, double height, DrawingOptions opts);",
            "public static void SplashKit.FillRectangleOnBitmap(Bitmap destination, Color clr, double x, double y, double width, double height, DrawingOptions opts);"
          ],
          "cpp": [
            "void fill_rectangle_on_bitmap(bitmap destination, color clr, double x, double y, double width, double height, const drawing_options &opts)"
          ],
          "pascal": [
            "procedure FillRectangleOnBitmap(destination: Bitmap; clr: Color; x: Double; y: Double; width: Double; height: Double; const opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void fill_rectangle_on_window(window destination,color clr,const rectangle &rect);",
        "name": "fill_rectangle_on_window",
        "method_name": "fill_rectangle",
        "unique_global_name": "fill_rectangle_on_window_record",
        "unique_method_name": "window.fill_rectangle_record",
        "suffix_name": null,
        "description": "Fill a rectangle on the supplied window onto the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "window",
            "description": "The destination window",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to draw",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "fill_rectangle",
          "suffix": "record",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def fill_rectangle_on_window_record(destination, clr, rect):"
          ],
          "csharp": [
            "public void Window.FillRectangle(Color clr, Rectangle rect);",
            "public static void SplashKit.FillRectangleOnWindow(Window destination, Color clr, Rectangle rect);"
          ],
          "cpp": [
            "void fill_rectangle_on_window(window destination, color clr, const rectangle &rect)"
          ],
          "pascal": [
            "procedure FillRectangleOnWindow(destination: Window; clr: Color; const rect: Rectangle)"
          ]
        }
      },
      {
        "signature": "void fill_rectangle_on_window(window destination,color clr,const rectangle &rect,const drawing_options &opts);",
        "name": "fill_rectangle_on_window",
        "method_name": "fill_rectangle",
        "unique_global_name": "fill_rectangle_on_window_record_with_options",
        "unique_method_name": "window.fill_rectangle_record_with_options",
        "suffix_name": null,
        "description": "Fills a rectangle on the supplied window using the supplied drawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "window",
            "description": "The destination window",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to draw",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "fill_rectangle",
          "suffix": "record_with_options",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def fill_rectangle_on_window_record_with_options(destination, clr, rect, opts):"
          ],
          "csharp": [
            "public void Window.FillRectangle(Color clr, Rectangle rect, DrawingOptions opts);",
            "public static void SplashKit.FillRectangleOnWindow(Window destination, Color clr, Rectangle rect, DrawingOptions opts);"
          ],
          "cpp": [
            "void fill_rectangle_on_window(window destination, color clr, const rectangle &rect, const drawing_options &opts)"
          ],
          "pascal": [
            "procedure FillRectangleOnWindow(destination: Window; clr: Color; const rect: Rectangle; const opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void fill_rectangle_on_window(window destination,color clr,double x,double y,double width,double height);",
        "name": "fill_rectangle_on_window",
        "method_name": "fill_rectangle",
        "unique_global_name": "fill_rectangle_on_window",
        "unique_method_name": "window.fill_rectangle",
        "suffix_name": null,
        "description": "Fills a rectangle on the supplied window to the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "window",
            "description": "The destination window",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The distance from the left of the window/bitmap to the\nrectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The distance from the top of the window/bitmap to the\nrectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "double",
            "description": "The width of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "double",
            "description": "The height of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "fill_rectangle",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def fill_rectangle_on_window(destination, clr, x, y, width, height):"
          ],
          "csharp": [
            "public void Window.FillRectangle(Color clr, double x, double y, double width, double height);",
            "public static void SplashKit.FillRectangleOnWindow(Window destination, Color clr, double x, double y, double width, double height);"
          ],
          "cpp": [
            "void fill_rectangle_on_window(window destination, color clr, double x, double y, double width, double height)"
          ],
          "pascal": [
            "procedure FillRectangleOnWindow(destination: Window; clr: Color; x: Double; y: Double; width: Double; height: Double)"
          ]
        }
      },
      {
        "signature": "void fill_rectangle_on_window(window destination,color clr,double x,double y,double width,double height,const drawing_options &opts);",
        "name": "fill_rectangle_on_window",
        "method_name": "fill_rectangle",
        "unique_global_name": "fill_rectangle_on_window_with_options",
        "unique_method_name": "window.fill_rectangle_with_options",
        "suffix_name": null,
        "description": "Fills a rectangle on the supplied window, using the supplied drawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "window",
            "description": "The destination window",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The distance from the left of the window/bitmap to the\nrectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The distance from the top of the window/bitmap to the\nrectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "double",
            "description": "The width of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "double",
            "description": "The height of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "fill_rectangle",
          "suffix": "with_options",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def fill_rectangle_on_window_with_options(destination, clr, x, y, width, height, opts):"
          ],
          "csharp": [
            "public void Window.FillRectangle(Color clr, double x, double y, double width, double height, DrawingOptions opts);",
            "public static void SplashKit.FillRectangleOnWindow(Window destination, Color clr, double x, double y, double width, double height, DrawingOptions opts);"
          ],
          "cpp": [
            "void fill_rectangle_on_window(window destination, color clr, double x, double y, double width, double height, const drawing_options &opts)"
          ],
          "pascal": [
            "procedure FillRectangleOnWindow(destination: Window; clr: Color; x: Double; y: Double; width: Double; height: Double; const opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_text(const string &text,const color &clr,const string &fnt,int font_size,double x,double y);",
        "name": "draw_text",
        "method_name": null,
        "unique_global_name": "draw_text_font_as_string",
        "unique_method_name": null,
        "suffix_name": null,
        "description": null,
        "brief": "Draws the text string provided to the screen with the supplied color, font and size at x and y to the current window.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "text": {
            "type": "string",
            "description": "The text string to be written to the window.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The desired `color` of the text to be written.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "fnt": {
            "type": "string",
            "description": "The name of the `font` which will be used to draw the text",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "font_size": {
            "type": "int",
            "description": "The size of the font which will be drawn.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "font_as_string",
          "group": "graphics",
          "static": "text"
        },
        "signatures": {
          "python": [
            "def draw_text_font_as_string(text, clr, fnt, font_size, x, y):"
          ],
          "csharp": [
            "public static void SplashKit.DrawText(string text, Color clr, string fnt, int fontSize, double x, double y);"
          ],
          "cpp": [
            "void draw_text(const string &text, const color &clr, const string &fnt, int font_size, double x, double y)"
          ],
          "pascal": [
            "procedure DrawText(const text: String; const clr: Color; const fnt: String; fontSize: Integer; x: Double; y: Double)"
          ]
        }
      },
      {
        "signature": "void draw_text(const string &text,const color &clr,const string &fnt,int font_size,double x,double y,const drawing_options &opts);",
        "name": "draw_text",
        "method_name": null,
        "unique_global_name": "draw_text_with_options_font_as_string",
        "unique_method_name": null,
        "suffix_name": null,
        "description": null,
        "brief": "Draws the text string provided to the screen with the supplied color, font and size at x and y to the current window.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "text": {
            "type": "string",
            "description": "The text string to be written to the window.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The desired `color` of the text to be written.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "fnt": {
            "type": "string",
            "description": "The name of the `font` which will be used to draw the text",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "font_size": {
            "type": "int",
            "description": "The size of the font which will be drawn.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The `drawing_options` which provide extra information for how to draw the text.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "with_options_font_as_string",
          "group": "graphics",
          "static": "text"
        },
        "signatures": {
          "python": [
            "def draw_text_with_options_font_as_string(text, clr, fnt, font_size, x, y, opts):"
          ],
          "csharp": [
            "public static void SplashKit.DrawText(string text, Color clr, string fnt, int fontSize, double x, double y, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_text(const string &text, const color &clr, const string &fnt, int font_size, double x, double y, const drawing_options &opts)"
          ],
          "pascal": [
            "procedure DrawText(const text: String; const clr: Color; const fnt: String; fontSize: Integer; x: Double; y: Double; const opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_text(const string &text,const color &clr,double x,double y);",
        "name": "draw_text",
        "method_name": null,
        "unique_global_name": "draw_text_no_font_no_size",
        "unique_method_name": null,
        "suffix_name": null,
        "description": null,
        "brief": "Draws the text string provided to the screen with the supplied color at x and y to the current window.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "text": {
            "type": "string",
            "description": "The text string to be written to the window.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The desired `color` of the text to be written.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "no_font_no_size",
          "group": "graphics",
          "static": "text"
        },
        "signatures": {
          "python": [
            "def draw_text_no_font_no_size(text, clr, x, y):"
          ],
          "csharp": [
            "public static void SplashKit.DrawText(string text, Color clr, double x, double y);"
          ],
          "cpp": [
            "void draw_text(const string &text, const color &clr, double x, double y)"
          ],
          "pascal": [
            "procedure DrawText(const text: String; const clr: Color; x: Double; y: Double)"
          ]
        }
      },
      {
        "signature": "void draw_text(const string &text,const color &clr,double x,double y,const drawing_options &opts);",
        "name": "draw_text",
        "method_name": null,
        "unique_global_name": "draw_text_no_font_no_size_with_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": null,
        "brief": "Draws the text string provided to the screen with the supplied color at x and y to the current window.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "text": {
            "type": "string",
            "description": "The text string to be written to the window.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The desired `color` of the text to be written.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The `drawing_options` which provide extra information for how to draw the text.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "no_font_no_size_with_options",
          "group": "graphics",
          "static": "text"
        },
        "signatures": {
          "python": [
            "def draw_text_no_font_no_size_with_options(text, clr, x, y, opts):"
          ],
          "csharp": [
            "public static void SplashKit.DrawText(string text, Color clr, double x, double y, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_text(const string &text, const color &clr, double x, double y, const drawing_options &opts)"
          ],
          "pascal": [
            "procedure DrawText(const text: String; const clr: Color; x: Double; y: Double; const opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_text(const string &text,const color &clr,font fnt,int font_size,double x,double y);",
        "name": "draw_text",
        "method_name": null,
        "unique_global_name": "draw_text",
        "unique_method_name": null,
        "suffix_name": null,
        "description": null,
        "brief": "Draws the text string provided to the screen with the supplied color, font, size at x and y to the current window.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "text": {
            "type": "string",
            "description": "The text string to be written to the window.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The desired `color` of the text to be written.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "fnt": {
            "type": "font",
            "description": "The `font` to be used to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "font_size": {
            "type": "int",
            "description": "The size of the font which will be drawn.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "text"
        },
        "signatures": {
          "python": [
            "def draw_text(text, clr, fnt, font_size, x, y):"
          ],
          "csharp": [
            "public static void SplashKit.DrawText(string text, Color clr, Font fnt, int fontSize, double x, double y);"
          ],
          "cpp": [
            "void draw_text(const string &text, const color &clr, font fnt, int font_size, double x, double y)"
          ],
          "pascal": [
            "procedure DrawText(const text: String; const clr: Color; fnt: Font; fontSize: Integer; x: Double; y: Double)"
          ]
        }
      },
      {
        "signature": "void draw_text(const string &text,const color &clr,font fnt,int font_size,double x,double y,const drawing_options &opts);",
        "name": "draw_text",
        "method_name": null,
        "unique_global_name": "draw_text_with_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": null,
        "brief": "Draws the text string provided to the screen with the supplied color, font, size at x and y to the current window.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "text": {
            "type": "string",
            "description": "The text string to be written to the window.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The desired `color` of the text to be written.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "fnt": {
            "type": "font",
            "description": "The `font` to be used to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "font_size": {
            "type": "int",
            "description": "The desired size of the font.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The `drawing_options` which provide extra information for how to draw the text.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "with_options",
          "group": "graphics",
          "static": "text"
        },
        "signatures": {
          "python": [
            "def draw_text_with_options(text, clr, fnt, font_size, x, y, opts):"
          ],
          "csharp": [
            "public static void SplashKit.DrawText(string text, Color clr, Font fnt, int fontSize, double x, double y, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_text(const string &text, const color &clr, font fnt, int font_size, double x, double y, const drawing_options &opts)"
          ],
          "pascal": [
            "procedure DrawText(const text: String; const clr: Color; fnt: Font; fontSize: Integer; x: Double; y: Double; const opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_text_on_bitmap(bitmap bmp,const string &text,const color &clr,const string &fnt,int font_size,double x,double y);",
        "name": "draw_text_on_bitmap",
        "method_name": "draw_text",
        "unique_global_name": "draw_text_on_bitmap_font_as_string",
        "unique_method_name": "bitmap.draw_text_font_as_string",
        "suffix_name": null,
        "description": null,
        "brief": "Draws the text string provided to the screen with the supplied color, font and size at x and y to the current bitmap.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to draw to",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "text": {
            "type": "string",
            "description": "The text string to be written to the bitmap.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The desired `color` of the text to be written.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "fnt": {
            "type": "string",
            "description": "The name of the `font` which will be used to draw the text",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "font_size": {
            "type": "int",
            "description": "The size of the font which will be drawn.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "draw_text",
          "suffix": "font_as_string",
          "group": "graphics",
          "static": "text",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def draw_text_on_bitmap_font_as_string(bmp, text, clr, fnt, font_size, x, y):"
          ],
          "csharp": [
            "public void Bitmap.DrawText(string text, Color clr, string fnt, int fontSize, double x, double y);",
            "public static void SplashKit.DrawTextOnBitmap(Bitmap bmp, string text, Color clr, string fnt, int fontSize, double x, double y);"
          ],
          "cpp": [
            "void draw_text_on_bitmap(bitmap bmp, const string &text, const color &clr, const string &fnt, int font_size, double x, double y)"
          ],
          "pascal": [
            "procedure DrawTextOnBitmap(bmp: Bitmap; const text: String; const clr: Color; const fnt: String; fontSize: Integer; x: Double; y: Double)"
          ]
        }
      },
      {
        "signature": "void draw_text_on_bitmap(bitmap bmp,const string &text,const color &clr,const string &fnt,int font_size,double x,double y,const drawing_options &opts);",
        "name": "draw_text_on_bitmap",
        "method_name": "draw_text",
        "unique_global_name": "draw_text_on_bitmap_with_options_font_as_string",
        "unique_method_name": "bitmap.draw_text_with_options_font_as_string",
        "suffix_name": null,
        "description": null,
        "brief": "Draws the text string provided to the bitmap with the supplied color, font and size at x and y.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to draw to",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "text": {
            "type": "string",
            "description": "The text string to be written to the bitmap.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The desired `color` of the text to be written.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "fnt": {
            "type": "string",
            "description": "The name of the `font` which will be used to draw the text",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "font_size": {
            "type": "int",
            "description": "The size of the font which will be drawn.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The `drawing_options` which provide extra information for how to draw the text.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "draw_text",
          "suffix": "with_options_font_as_string",
          "group": "graphics",
          "static": "text",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def draw_text_on_bitmap_with_options_font_as_string(bmp, text, clr, fnt, font_size, x, y, opts):"
          ],
          "csharp": [
            "public void Bitmap.DrawText(string text, Color clr, string fnt, int fontSize, double x, double y, DrawingOptions opts);",
            "public static void SplashKit.DrawTextOnBitmap(Bitmap bmp, string text, Color clr, string fnt, int fontSize, double x, double y, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_text_on_bitmap(bitmap bmp, const string &text, const color &clr, const string &fnt, int font_size, double x, double y, const drawing_options &opts)"
          ],
          "pascal": [
            "procedure DrawTextOnBitmap(bmp: Bitmap; const text: String; const clr: Color; const fnt: String; fontSize: Integer; x: Double; y: Double; const opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_text_on_bitmap(bitmap bmp,const string &text,const color &clr,double x,double y);",
        "name": "draw_text_on_bitmap",
        "method_name": "draw_text",
        "unique_global_name": "draw_text_on_bitmap_no_font_no_size",
        "unique_method_name": "bitmap.draw_text_no_font_no_size",
        "suffix_name": null,
        "description": null,
        "brief": "Draws the text string provided to the screen with the supplied color at x and y.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to draw to",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "text": {
            "type": "string",
            "description": "The text string to be written to the bitmap.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The desired `color` of the text to be written.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "draw_text",
          "suffix": "no_font_no_size",
          "group": "graphics",
          "static": "text",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def draw_text_on_bitmap_no_font_no_size(bmp, text, clr, x, y):"
          ],
          "csharp": [
            "public void Bitmap.DrawText(string text, Color clr, double x, double y);",
            "public static void SplashKit.DrawTextOnBitmap(Bitmap bmp, string text, Color clr, double x, double y);"
          ],
          "cpp": [
            "void draw_text_on_bitmap(bitmap bmp, const string &text, const color &clr, double x, double y)"
          ],
          "pascal": [
            "procedure DrawTextOnBitmap(bmp: Bitmap; const text: String; const clr: Color; x: Double; y: Double)"
          ]
        }
      },
      {
        "signature": "void draw_text_on_bitmap(bitmap bmp,const string &text,const color &clr,double x,double y,const drawing_options &opts);",
        "name": "draw_text_on_bitmap",
        "method_name": "draw_text",
        "unique_global_name": "draw_text_on_bitmap_no_font_no_size_with_options",
        "unique_method_name": "bitmap.draw_text_no_font_no_size_with_options",
        "suffix_name": null,
        "description": null,
        "brief": "Draws the text string provided to the bitmap with the supplied color at x and y.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to draw to",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "text": {
            "type": "string",
            "description": "The text string to be written to the bitmap.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The desired `color` of the text to be written.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The `drawing_options` which provide extra information for how to draw the text.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "draw_text",
          "suffix": "no_font_no_size_with_options",
          "group": "graphics",
          "static": "text",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def draw_text_on_bitmap_no_font_no_size_with_options(bmp, text, clr, x, y, opts):"
          ],
          "csharp": [
            "public void Bitmap.DrawText(string text, Color clr, double x, double y, DrawingOptions opts);",
            "public static void SplashKit.DrawTextOnBitmap(Bitmap bmp, string text, Color clr, double x, double y, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_text_on_bitmap(bitmap bmp, const string &text, const color &clr, double x, double y, const drawing_options &opts)"
          ],
          "pascal": [
            "procedure DrawTextOnBitmap(bmp: Bitmap; const text: String; const clr: Color; x: Double; y: Double; const opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_text_on_bitmap(bitmap bmp,const string &text,const color &clr,font fnt,int font_size,double x,double y);",
        "name": "draw_text_on_bitmap",
        "method_name": "draw_text",
        "unique_global_name": "draw_text_on_bitmap",
        "unique_method_name": "bitmap.draw_text",
        "suffix_name": null,
        "description": null,
        "brief": "Draws the text string provided to the bitmap with the supplied color, font, size at x and y.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to draw to",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "text": {
            "type": "string",
            "description": "The text string to be written to the bitmap.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The desired `color` of the text to be written.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "fnt": {
            "type": "font",
            "description": "The `font` to be used to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "font_size": {
            "type": "int",
            "description": "The size of the font which will be drawn.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "draw_text",
          "group": "graphics",
          "static": "text",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def draw_text_on_bitmap(bmp, text, clr, fnt, font_size, x, y):"
          ],
          "csharp": [
            "public void Bitmap.DrawText(string text, Color clr, Font fnt, int fontSize, double x, double y);",
            "public static void SplashKit.DrawTextOnBitmap(Bitmap bmp, string text, Color clr, Font fnt, int fontSize, double x, double y);"
          ],
          "cpp": [
            "void draw_text_on_bitmap(bitmap bmp, const string &text, const color &clr, font fnt, int font_size, double x, double y)"
          ],
          "pascal": [
            "procedure DrawTextOnBitmap(bmp: Bitmap; const text: String; const clr: Color; fnt: Font; fontSize: Integer; x: Double; y: Double)"
          ]
        }
      },
      {
        "signature": "void draw_text_on_bitmap(bitmap bmp,const string &text,const color &clr,font fnt,int font_size,double x,double y,const drawing_options &opts);",
        "name": "draw_text_on_bitmap",
        "method_name": "draw_text",
        "unique_global_name": "draw_text_on_bitmap_with_options",
        "unique_method_name": "bitmap.draw_text_with_options",
        "suffix_name": null,
        "description": null,
        "brief": "Draws the text string provided to the bitmap with the supplied color, font, size at x and y.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to draw to",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "text": {
            "type": "string",
            "description": "The text string to be written to the bitmap.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The desired `color` of the text to be written.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "fnt": {
            "type": "font",
            "description": "The `font` to be used to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "font_size": {
            "type": "int",
            "description": "The desired size of the font.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The `drawing_options` which provide extra information for how to draw the text.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "draw_text",
          "suffix": "with_options",
          "group": "graphics",
          "static": "text",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def draw_text_on_bitmap_with_options(bmp, text, clr, fnt, font_size, x, y, opts):"
          ],
          "csharp": [
            "public void Bitmap.DrawText(string text, Color clr, Font fnt, int fontSize, double x, double y, DrawingOptions opts);",
            "public static void SplashKit.DrawTextOnBitmap(Bitmap bmp, string text, Color clr, Font fnt, int fontSize, double x, double y, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_text_on_bitmap(bitmap bmp, const string &text, const color &clr, font fnt, int font_size, double x, double y, const drawing_options &opts)"
          ],
          "pascal": [
            "procedure DrawTextOnBitmap(bmp: Bitmap; const text: String; const clr: Color; fnt: Font; fontSize: Integer; x: Double; y: Double; const opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_text_on_window(window wnd,const string &text,const color &clr,const string &fnt,int font_size,double x,double y);",
        "name": "draw_text_on_window",
        "method_name": "draw_text",
        "unique_global_name": "draw_text_on_window_font_as_string",
        "unique_method_name": "window.draw_text_font_as_string",
        "suffix_name": null,
        "description": null,
        "brief": "Draws the text string provided to the screen with the supplied color, font and size at x and y to the current window.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wnd": {
            "type": "window",
            "description": "The window to draw to",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "text": {
            "type": "string",
            "description": "The text string to be written to the window.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The desired `color` of the text to be written.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "fnt": {
            "type": "string",
            "description": "The name of the `font` which will be used to draw the text",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "font_size": {
            "type": "int",
            "description": "The size of the font which will be drawn.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "draw_text",
          "suffix": "font_as_string",
          "group": "graphics",
          "static": "text",
          "self": "wnd"
        },
        "signatures": {
          "python": [
            "def draw_text_on_window_font_as_string(wnd, text, clr, fnt, font_size, x, y):"
          ],
          "csharp": [
            "public void Window.DrawText(string text, Color clr, string fnt, int fontSize, double x, double y);",
            "public static void SplashKit.DrawTextOnWindow(Window wnd, string text, Color clr, string fnt, int fontSize, double x, double y);"
          ],
          "cpp": [
            "void draw_text_on_window(window wnd, const string &text, const color &clr, const string &fnt, int font_size, double x, double y)"
          ],
          "pascal": [
            "procedure DrawTextOnWindow(wnd: Window; const text: String; const clr: Color; const fnt: String; fontSize: Integer; x: Double; y: Double)"
          ]
        }
      },
      {
        "signature": "void draw_text_on_window(window wnd,const string &text,const color &clr,const string &fnt,int font_size,double x,double y,const drawing_options &opts);",
        "name": "draw_text_on_window",
        "method_name": "draw_text",
        "unique_global_name": "draw_text_on_window_with_options_font_as_string",
        "unique_method_name": "window.draw_text_with_options_font_as_string",
        "suffix_name": null,
        "description": null,
        "brief": "Draws the text string provided to the window with the supplied color, font and size at x and y.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wnd": {
            "type": "window",
            "description": "The window to draw to",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "text": {
            "type": "string",
            "description": "The text string to be written to the window.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The desired `color` of the text to be written.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "fnt": {
            "type": "string",
            "description": "The name of the `font` which will be used to draw the text",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "font_size": {
            "type": "int",
            "description": "The size of the font which will be drawn.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The `drawing_options` which provide extra information for how to draw the text.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "draw_text",
          "suffix": "with_options_font_as_string",
          "group": "graphics",
          "static": "text",
          "self": "wnd"
        },
        "signatures": {
          "python": [
            "def draw_text_on_window_with_options_font_as_string(wnd, text, clr, fnt, font_size, x, y, opts):"
          ],
          "csharp": [
            "public void Window.DrawText(string text, Color clr, string fnt, int fontSize, double x, double y, DrawingOptions opts);",
            "public static void SplashKit.DrawTextOnWindow(Window wnd, string text, Color clr, string fnt, int fontSize, double x, double y, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_text_on_window(window wnd, const string &text, const color &clr, const string &fnt, int font_size, double x, double y, const drawing_options &opts)"
          ],
          "pascal": [
            "procedure DrawTextOnWindow(wnd: Window; const text: String; const clr: Color; const fnt: String; fontSize: Integer; x: Double; y: Double; const opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_text_on_window(window wnd,const string &text,const color &clr,double x,double y);",
        "name": "draw_text_on_window",
        "method_name": "draw_text",
        "unique_global_name": "draw_text_on_window_no_font_no_size",
        "unique_method_name": "window.draw_text_no_font_no_size",
        "suffix_name": null,
        "description": null,
        "brief": "Draws the text string provided to the screen with the supplied color at x and y to the current window.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wnd": {
            "type": "window",
            "description": "The window to draw to",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "text": {
            "type": "string",
            "description": "The text string to be written to the window.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The desired `color` of the text to be written.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "draw_text",
          "suffix": "no_font_no_size",
          "group": "graphics",
          "static": "text",
          "self": "wnd"
        },
        "signatures": {
          "python": [
            "def draw_text_on_window_no_font_no_size(wnd, text, clr, x, y):"
          ],
          "csharp": [
            "public void Window.DrawText(string text, Color clr, double x, double y);",
            "public static void SplashKit.DrawTextOnWindow(Window wnd, string text, Color clr, double x, double y);"
          ],
          "cpp": [
            "void draw_text_on_window(window wnd, const string &text, const color &clr, double x, double y)"
          ],
          "pascal": [
            "procedure DrawTextOnWindow(wnd: Window; const text: String; const clr: Color; x: Double; y: Double)"
          ]
        }
      },
      {
        "signature": "void draw_text_on_window(window wnd,const string &text,const color &clr,double x,double y,const drawing_options &opts);",
        "name": "draw_text_on_window",
        "method_name": "draw_text",
        "unique_global_name": "draw_text_on_window_no_font_no_size_with_options",
        "unique_method_name": "window.draw_text_no_font_no_size_with_options",
        "suffix_name": null,
        "description": null,
        "brief": "Draws the text string provided to the window with the supplied color at x and y.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wnd": {
            "type": "window",
            "description": "The window to draw to",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "text": {
            "type": "string",
            "description": "The text string to be written to the window.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The desired `color` of the text to be written.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The `drawing_options` which provide extra information for how to draw the text.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "draw_text",
          "suffix": "no_font_no_size_with_options",
          "group": "graphics",
          "static": "text",
          "self": "wnd"
        },
        "signatures": {
          "python": [
            "def draw_text_on_window_no_font_no_size_with_options(wnd, text, clr, x, y, opts):"
          ],
          "csharp": [
            "public void Window.DrawText(string text, Color clr, double x, double y, DrawingOptions opts);",
            "public static void SplashKit.DrawTextOnWindow(Window wnd, string text, Color clr, double x, double y, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_text_on_window(window wnd, const string &text, const color &clr, double x, double y, const drawing_options &opts)"
          ],
          "pascal": [
            "procedure DrawTextOnWindow(wnd: Window; const text: String; const clr: Color; x: Double; y: Double; const opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_text_on_window(window wnd,const string &text,const color &clr,font fnt,int font_size,double x,double y);",
        "name": "draw_text_on_window",
        "method_name": "draw_text",
        "unique_global_name": "draw_text_on_window",
        "unique_method_name": "window.draw_text",
        "suffix_name": null,
        "description": null,
        "brief": "Draws the text string provided to the window with the supplied color, font, size at x and y.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wnd": {
            "type": "window",
            "description": "The window to draw to",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "text": {
            "type": "string",
            "description": "The text string to be written to the window.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The desired `color` of the text to be written.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "fnt": {
            "type": "font",
            "description": "The `font` to be used to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "font_size": {
            "type": "int",
            "description": "The size of the font which will be drawn.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "draw_text",
          "group": "graphics",
          "static": "text",
          "self": "wnd"
        },
        "signatures": {
          "python": [
            "def draw_text_on_window(wnd, text, clr, fnt, font_size, x, y):"
          ],
          "csharp": [
            "public void Window.DrawText(string text, Color clr, Font fnt, int fontSize, double x, double y);",
            "public static void SplashKit.DrawTextOnWindow(Window wnd, string text, Color clr, Font fnt, int fontSize, double x, double y);"
          ],
          "cpp": [
            "void draw_text_on_window(window wnd, const string &text, const color &clr, font fnt, int font_size, double x, double y)"
          ],
          "pascal": [
            "procedure DrawTextOnWindow(wnd: Window; const text: String; const clr: Color; fnt: Font; fontSize: Integer; x: Double; y: Double)"
          ]
        }
      },
      {
        "signature": "void draw_text_on_window(window wnd,const string &text,const color &clr,font fnt,int font_size,double x,double y,const drawing_options &opts);",
        "name": "draw_text_on_window",
        "method_name": "draw_text",
        "unique_global_name": "draw_text_on_window_with_options",
        "unique_method_name": "window.draw_text_with_options",
        "suffix_name": null,
        "description": null,
        "brief": "Draws the text string provided to the window with the supplied color, font, size at x and y.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wnd": {
            "type": "window",
            "description": "The window to draw to",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "text": {
            "type": "string",
            "description": "The text string to be written to the window.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The desired `color` of the text to be written.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "fnt": {
            "type": "font",
            "description": "The `font` to be used to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "font_size": {
            "type": "int",
            "description": "The desired size of the font.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The `drawing_options` which provide extra information for how to draw the text.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "draw_text",
          "suffix": "with_options",
          "group": "graphics",
          "static": "text",
          "self": "wnd"
        },
        "signatures": {
          "python": [
            "def draw_text_on_window_with_options(wnd, text, clr, fnt, font_size, x, y, opts):"
          ],
          "csharp": [
            "public void Window.DrawText(string text, Color clr, Font fnt, int fontSize, double x, double y, DrawingOptions opts);",
            "public static void SplashKit.DrawTextOnWindow(Window wnd, string text, Color clr, Font fnt, int fontSize, double x, double y, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_text_on_window(window wnd, const string &text, const color &clr, font fnt, int font_size, double x, double y, const drawing_options &opts)"
          ],
          "pascal": [
            "procedure DrawTextOnWindow(wnd: Window; const text: String; const clr: Color; fnt: Font; fontSize: Integer; x: Double; y: Double; const opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "bool font_has_size(const string &name,int font_size);",
        "name": "font_has_size",
        "method_name": null,
        "unique_global_name": "font_has_size_name_as_string",
        "unique_method_name": null,
        "suffix_name": null,
        "description": null,
        "brief": "Checks if the supplied `font` has the supplied size.",
        "return": {
          "type": "bool",
          "description": "Returns true if there is a font with the supplied name that has the supplied size.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the `font` to be checked.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "font_size": {
            "type": "int",
            "description": "The size to check.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "name_as_string",
          "group": "graphics",
          "static": "text"
        },
        "signatures": {
          "python": [
            "def font_has_size_name_as_string(name, font_size):"
          ],
          "csharp": [
            "public static bool SplashKit.FontHasSize(string name, int fontSize);"
          ],
          "cpp": [
            "bool font_has_size(const string &name, int font_size)"
          ],
          "pascal": [
            "function FontHasSize(const name: String; fontSize: Integer): Boolean"
          ]
        }
      },
      {
        "signature": "bool font_has_size(font fnt,int font_size);",
        "name": "font_has_size",
        "method_name": "has_size",
        "unique_global_name": "font_has_size",
        "unique_method_name": "font.has_size",
        "suffix_name": null,
        "description": null,
        "brief": "Checks if the supplied `font` has the supplied size.",
        "return": {
          "type": "bool",
          "description": "Returns true if the supplied `font` has the supplied size.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "fnt": {
            "type": "font",
            "description": "The `font` to be checked.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "font_size": {
            "type": "int",
            "description": "The size to check.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "font",
          "method": "has_size",
          "self": "fnt",
          "group": "graphics",
          "static": "text"
        },
        "signatures": {
          "python": [
            "def font_has_size(fnt, font_size):"
          ],
          "csharp": [
            "public bool Font.HasSize(int fontSize);",
            "public static bool SplashKit.FontHasSize(Font fnt, int fontSize);"
          ],
          "cpp": [
            "bool font_has_size(font fnt, int font_size)"
          ],
          "pascal": [
            "function FontHasSize(fnt: Font; fontSize: Integer): Boolean"
          ]
        }
      },
      {
        "signature": "void font_load_size(const string &name,int font_size);",
        "name": "font_load_size",
        "method_name": null,
        "unique_global_name": "font_load_size_name_as_string",
        "unique_method_name": null,
        "suffix_name": null,
        "description": null,
        "brief": "Loads a new size for an already loaded `font`.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the `font` to load the size for.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "font_size": {
            "type": "int",
            "description": "The desired size of the `font`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "name_as_string",
          "group": "graphics",
          "static": "text"
        },
        "signatures": {
          "python": [
            "def font_load_size_name_as_string(name, font_size):"
          ],
          "csharp": [
            "public static void SplashKit.FontLoadSize(string name, int fontSize);"
          ],
          "cpp": [
            "void font_load_size(const string &name, int font_size)"
          ],
          "pascal": [
            "procedure FontLoadSize(const name: String; fontSize: Integer)"
          ]
        }
      },
      {
        "signature": "void font_load_size(font fnt,int font_size);",
        "name": "font_load_size",
        "method_name": "load_size",
        "unique_global_name": "font_load_size",
        "unique_method_name": "font.load_size",
        "suffix_name": null,
        "description": null,
        "brief": "Loads a new size for an already loaded `font`.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "fnt": {
            "type": "font",
            "description": "The `font` to load the size for.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "font_size": {
            "type": "int",
            "description": "The desired size of the `font`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "font",
          "method": "load_size",
          "self": "fnt",
          "group": "graphics",
          "static": "text"
        },
        "signatures": {
          "python": [
            "def font_load_size(fnt, font_size):"
          ],
          "csharp": [
            "public void Font.LoadSize(int fontSize);",
            "public static void SplashKit.FontLoadSize(Font fnt, int fontSize);"
          ],
          "cpp": [
            "void font_load_size(font fnt, int font_size)"
          ],
          "pascal": [
            "procedure FontLoadSize(fnt: Font; fontSize: Integer)"
          ]
        }
      },
      {
        "signature": "font font_named(string name);",
        "name": "font_named",
        "method_name": null,
        "unique_global_name": "font_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": null,
        "brief": "Finds a loaded font that has the supplied name and returns it.",
        "return": {
          "type": "font",
          "description": "Returns the font that has the supplied name.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the font to find.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "text"
        },
        "signatures": {
          "python": [
            "def font_named(name):"
          ],
          "csharp": [
            "public static Font SplashKit.FontNamed(string name);"
          ],
          "cpp": [
            "font font_named(string name)"
          ],
          "pascal": [
            "function FontNamed(name: String): Font"
          ]
        }
      },
      {
        "signature": "void free_all_fonts();",
        "name": "free_all_fonts",
        "method_name": "free_all",
        "unique_global_name": "free_all_fonts",
        "unique_method_name": ".free_all",
        "suffix_name": null,
        "description": null,
        "brief": "Frees all loaded fonts.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "method": "free_all",
          "static": "text",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def free_all_fonts():"
          ],
          "csharp": [
            "public static void Text.FreeAll();",
            "public static void SplashKit.FreeAllFonts();"
          ],
          "cpp": [
            "void free_all_fonts()"
          ],
          "pascal": [
            "procedure FreeAllFonts()"
          ]
        }
      },
      {
        "signature": "void free_font(font fnt);",
        "name": "free_font",
        "method_name": "free",
        "unique_global_name": "free_font",
        "unique_method_name": "font.free",
        "suffix_name": null,
        "description": null,
        "brief": "Frees a loaded font.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "fnt": {
            "type": "font",
            "description": "The font to be freed.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "font",
          "destructor": true,
          "method": "free",
          "self": "fnt",
          "group": "graphics",
          "static": "text"
        },
        "signatures": {
          "python": [
            "def free_font(fnt):"
          ],
          "csharp": [
            "public void Font.Free();",
            "public static void SplashKit.FreeFont(Font fnt);"
          ],
          "cpp": [
            "void free_font(font fnt)"
          ],
          "pascal": [
            "procedure FreeFont(fnt: Font)"
          ]
        }
      },
      {
        "signature": "font_style get_font_style(const string &name);",
        "name": "get_font_style",
        "method_name": null,
        "unique_global_name": "get_font_style_name_as_string",
        "unique_method_name": null,
        "suffix_name": null,
        "description": null,
        "brief": "Gets the font style for given `font`.",
        "return": {
          "type": "font_style",
          "description": "Returns the current `font_style` for the `font`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the font to return the style of.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "name_as_string",
          "group": "graphics",
          "static": "text"
        },
        "signatures": {
          "python": [
            "def get_font_style_name_as_string(name):"
          ],
          "csharp": [
            "public static FontStyle SplashKit.GetFontStyle(string name);"
          ],
          "cpp": [
            "font_style get_font_style(const string &name)"
          ],
          "pascal": [
            "function GetFontStyle(const name: String): FontStyle"
          ]
        }
      },
      {
        "signature": "font_style get_font_style(font fnt);",
        "name": "get_font_style",
        "method_name": null,
        "unique_global_name": "get_font_style",
        "unique_method_name": null,
        "suffix_name": null,
        "description": null,
        "brief": "Gets the font style for given `font`.",
        "return": {
          "type": "font_style",
          "description": "Returns the current `font_style` for the `font`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "fnt": {
            "type": "font",
            "description": "The `font` to return the style of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "font",
          "getter": "style",
          "self": "fnt",
          "group": "graphics",
          "static": "text"
        },
        "signatures": {
          "python": [
            "def get_font_style(fnt):"
          ],
          "csharp": [
            "public FontStyle Font.Style { get }",
            "public static FontStyle SplashKit.GetFontStyle(Font fnt);"
          ],
          "cpp": [
            "font_style get_font_style(font fnt)"
          ],
          "pascal": [
            "function GetFontStyle(fnt: Font): FontStyle"
          ]
        }
      },
      {
        "signature": "font get_system_font();",
        "name": "get_system_font",
        "method_name": null,
        "unique_global_name": "get_system_font",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Searches for and (if found) returns a default system font. Otherwise defaults to the in-built font.",
        "brief": "Searches for and (if found) returns a default system font. Otherwise defaults to the in-built font.",
        "return": {
          "type": "font",
          "description": "Returns the `font` found, or the in-built font if not",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "graphics",
          "static": "text"
        },
        "signatures": {
          "python": [
            "def get_system_font():"
          ],
          "csharp": [
            "public static Font SplashKit.GetSystemFont();"
          ],
          "cpp": [
            "font get_system_font()"
          ],
          "pascal": [
            "function GetSystemFont(): Font"
          ]
        }
      },
      {
        "signature": "bool has_font(font fnt);",
        "name": "has_font",
        "method_name": null,
        "unique_global_name": "has_font",
        "unique_method_name": null,
        "suffix_name": null,
        "description": null,
        "brief": "Checks if the supplied `font` has been loaded.",
        "return": {
          "type": "bool",
          "description": "Returns true if the specified `font` is loaded.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "fnt": {
            "type": "font",
            "description": "The `font` to check if loaded.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "text"
        },
        "signatures": {
          "python": [
            "def has_font(fnt):"
          ],
          "csharp": [
            "public static bool SplashKit.HasFont(Font fnt);"
          ],
          "cpp": [
            "bool has_font(font fnt)"
          ],
          "pascal": [
            "function HasFont(fnt: Font): Boolean"
          ]
        }
      },
      {
        "signature": "bool has_font(string name);",
        "name": "has_font",
        "method_name": null,
        "unique_global_name": "has_font_name_as_string",
        "unique_method_name": null,
        "suffix_name": null,
        "description": null,
        "brief": "Checks if there exists a loaded font with the supplied name.",
        "return": {
          "type": "bool",
          "description": "Returns whether there is a loaded font with the supplied name.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of `font` to check if loaded.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "name_as_string",
          "group": "graphics",
          "static": "text"
        },
        "signatures": {
          "python": [
            "def has_font_name_as_string(name):"
          ],
          "csharp": [
            "public static bool SplashKit.HasFont(string name);"
          ],
          "cpp": [
            "bool has_font(string name)"
          ],
          "pascal": [
            "function HasFont(name: String): Boolean"
          ]
        }
      },
      {
        "signature": "font load_font(const string &name,const string &filename);",
        "name": "load_font",
        "method_name": null,
        "unique_global_name": "load_font",
        "unique_method_name": null,
        "suffix_name": null,
        "description": null,
        "brief": "Loads a new font from a file.",
        "return": {
          "type": "font",
          "description": "Returns a new `font` object.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the `font` to be loaded from file.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "filename": {
            "type": "string",
            "description": "The name of the file to load the `font` from.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "font",
          "constructor": true,
          "group": "graphics",
          "static": "text"
        },
        "signatures": {
          "python": [
            "def load_font(name, filename):"
          ],
          "csharp": [
            "public static Font SplashKit.LoadFont(string name, string filename);",
            "public Font(string name, string filename);"
          ],
          "cpp": [
            "font load_font(const string &name, const string &filename)"
          ],
          "pascal": [
            "function LoadFont(const name: String; const filename: String): Font"
          ]
        }
      },
      {
        "signature": "void set_font_style(const string &name,font_style style);",
        "name": "set_font_style",
        "method_name": null,
        "unique_global_name": "set_font_style_name_as_string",
        "unique_method_name": null,
        "suffix_name": null,
        "description": null,
        "brief": "Sets the style for a `font` by name.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the `font` to set the style of.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "style": {
            "type": "font_style",
            "description": "The new style for the `font`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "name_as_string",
          "group": "graphics",
          "static": "text"
        },
        "signatures": {
          "python": [
            "def set_font_style_name_as_string(name, style):"
          ],
          "csharp": [
            "public static void SplashKit.SetFontStyle(string name, FontStyle style);"
          ],
          "cpp": [
            "void set_font_style(const string &name, font_style style)"
          ],
          "pascal": [
            "procedure SetFontStyle(const name: String; style: FontStyle)"
          ]
        }
      },
      {
        "signature": "void set_font_style(font fnt,font_style style);",
        "name": "set_font_style",
        "method_name": null,
        "unique_global_name": "set_font_style",
        "unique_method_name": null,
        "suffix_name": null,
        "description": null,
        "brief": "Sets the style for a `font`.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "fnt": {
            "type": "font",
            "description": "The `font` to set the style of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "style": {
            "type": "font_style",
            "description": "The new style for the `font`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "font",
          "self": "fnt",
          "setter": "style",
          "group": "graphics",
          "static": "text"
        },
        "signatures": {
          "python": [
            "def set_font_style(fnt, style):"
          ],
          "csharp": [
            "public void Font.Style { set }",
            "public static void SplashKit.SetFontStyle(Font fnt, FontStyle style);"
          ],
          "cpp": [
            "void set_font_style(font fnt, font_style style)"
          ],
          "pascal": [
            "procedure SetFontStyle(fnt: Font; style: FontStyle)"
          ]
        }
      },
      {
        "signature": "int text_height(const string &text,const string& fnt,int font_size);",
        "name": "text_height",
        "method_name": "height",
        "unique_global_name": "text_height_font_named",
        "unique_method_name": ".height_font_named",
        "suffix_name": null,
        "description": null,
        "brief": "Returns the height of the supplied text string.",
        "return": {
          "type": "int",
          "description": "Returns the height of the text as an integer.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "text": {
            "type": "string",
            "description": "The text string to check the length of.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "fnt": {
            "type": "string",
            "description": "The font used for the text.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "font_size": {
            "type": "int",
            "description": "The size of the font used for the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "method": "height",
          "static": "text",
          "suffix": "font_named",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def text_height_font_named(text, fnt, font_size):"
          ],
          "csharp": [
            "public static int Text.Height(string text, string fnt, int fontSize);",
            "public static int SplashKit.TextHeight(string text, string fnt, int fontSize);"
          ],
          "cpp": [
            "int text_height(const string &text, const string &fnt, int font_size)"
          ],
          "pascal": [
            "function TextHeight(const text: String; const fnt: String; fontSize: Integer): Integer"
          ]
        }
      },
      {
        "signature": "int text_height(const string &text,font fnt,int font_size);",
        "name": "text_height",
        "method_name": "height",
        "unique_global_name": "text_height",
        "unique_method_name": ".height",
        "suffix_name": null,
        "description": null,
        "brief": "Returns the height of the supplied text string.",
        "return": {
          "type": "int",
          "description": "Returns the height of the text as an integer.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "text": {
            "type": "string",
            "description": "The text string to check the length of.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "fnt": {
            "type": "font",
            "description": "The font used for the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "font_size": {
            "type": "int",
            "description": "The size of the font used for the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "method": "height",
          "static": "text",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def text_height(text, fnt, font_size):"
          ],
          "csharp": [
            "public static int Text.Height(string text, Font fnt, int fontSize);",
            "public static int SplashKit.TextHeight(string text, Font fnt, int fontSize);"
          ],
          "cpp": [
            "int text_height(const string &text, font fnt, int font_size)"
          ],
          "pascal": [
            "function TextHeight(const text: String; fnt: Font; fontSize: Integer): Integer"
          ]
        }
      },
      {
        "signature": "int text_width(const string &text,const string& fnt,int font_size);",
        "name": "text_width",
        "method_name": "width",
        "unique_global_name": "text_width_font_named",
        "unique_method_name": ".width_font_named",
        "suffix_name": null,
        "description": null,
        "brief": "Returns the width of the supplied text string.",
        "return": {
          "type": "int",
          "description": "Returns the width of the text as an integer.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "text": {
            "type": "string",
            "description": "The text string to check the length of.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "fnt": {
            "type": "string",
            "description": "The font used for the text.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "font_size": {
            "type": "int",
            "description": "The size of the font used for the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "method": "width",
          "static": "text",
          "suffix": "font_named",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def text_width_font_named(text, fnt, font_size):"
          ],
          "csharp": [
            "public static int Text.Width(string text, string fnt, int fontSize);",
            "public static int SplashKit.TextWidth(string text, string fnt, int fontSize);"
          ],
          "cpp": [
            "int text_width(const string &text, const string &fnt, int font_size)"
          ],
          "pascal": [
            "function TextWidth(const text: String; const fnt: String; fontSize: Integer): Integer"
          ]
        }
      },
      {
        "signature": "int text_width(const string &text,font fnt,int font_size);",
        "name": "text_width",
        "method_name": "width",
        "unique_global_name": "text_width",
        "unique_method_name": ".width",
        "suffix_name": null,
        "description": null,
        "brief": "Returns the width of the supplied text string.",
        "return": {
          "type": "int",
          "description": "Returns the width of the text as an integer.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "text": {
            "type": "string",
            "description": "The text string to check the length of.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "fnt": {
            "type": "font",
            "description": "The font used for the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "font_size": {
            "type": "int",
            "description": "The size of the font used for the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "method": "width",
          "static": "text",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def text_width(text, fnt, font_size):"
          ],
          "csharp": [
            "public static int Text.Width(string text, Font fnt, int fontSize);",
            "public static int SplashKit.TextWidth(string text, Font fnt, int fontSize);"
          ],
          "cpp": [
            "int text_width(const string &text, font fnt, int font_size)"
          ],
          "pascal": [
            "function TextWidth(const text: String; fnt: Font; fontSize: Integer): Integer"
          ]
        }
      },
      {
        "signature": "void draw_triangle(color clr,const triangle &tri);",
        "name": "draw_triangle",
        "method_name": null,
        "unique_global_name": "draw_triangle_record",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draw a triangle onto the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color for the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "tri": {
            "type": "triangle",
            "description": "The triangles details",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "record",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def draw_triangle_record(clr, tri):"
          ],
          "csharp": [
            "public static void SplashKit.DrawTriangle(Color clr, Triangle tri);"
          ],
          "cpp": [
            "void draw_triangle(color clr, const triangle &tri)"
          ],
          "pascal": [
            "procedure DrawTriangle(clr: Color; const tri: Triangle)"
          ]
        }
      },
      {
        "signature": "void draw_triangle(color clr,const triangle &tri,drawing_options opts);",
        "name": "draw_triangle",
        "method_name": null,
        "unique_global_name": "draw_triangle_record_with_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draw a triangle using the supplied drawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color for the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "tri": {
            "type": "triangle",
            "description": "The triangles details",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "record_with_options",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def draw_triangle_record_with_options(clr, tri, opts):"
          ],
          "csharp": [
            "public static void SplashKit.DrawTriangle(Color clr, Triangle tri, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_triangle(color clr, const triangle &tri, drawing_options opts)"
          ],
          "pascal": [
            "procedure DrawTriangle(clr: Color; const tri: Triangle; opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_triangle(color clr,double x1,double y1,double x2,double y2,double x3,double y3);",
        "name": "draw_triangle",
        "method_name": null,
        "unique_global_name": "draw_triangle",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draw a triangle to the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color for the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x1": {
            "type": "double",
            "description": "The distance from the left side of the window to the\nfirst point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y1": {
            "type": "double",
            "description": "The distance from the top of the window to the\nfirst point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x2": {
            "type": "double",
            "description": "The distance from the left side of the window to the\nsecond point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y2": {
            "type": "double",
            "description": "The distance from the top of the window to the\nsecond point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x3": {
            "type": "double",
            "description": "The distance from the left side of the window to the\nthird point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y3": {
            "type": "double",
            "description": "The distance from the top of the window to the\nthird point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def draw_triangle(clr, x1, y1, x2, y2, x3, y3):"
          ],
          "csharp": [
            "public static void SplashKit.DrawTriangle(Color clr, double x1, double y1, double x2, double y2, double x3, double y3);"
          ],
          "cpp": [
            "void draw_triangle(color clr, double x1, double y1, double x2, double y2, double x3, double y3)"
          ],
          "pascal": [
            "procedure DrawTriangle(clr: Color; x1: Double; y1: Double; x2: Double; y2: Double; x3: Double; y3: Double)"
          ]
        }
      },
      {
        "signature": "void draw_triangle(color clr,double x1,double y1,double x2,double y2,double x3,double y3,drawing_options opts);",
        "name": "draw_triangle",
        "method_name": null,
        "unique_global_name": "draw_triangle_with_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draw a triangle using the supplied drawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color for the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x1": {
            "type": "double",
            "description": "The distance from the left side of the bitmap/window to the\nfirst point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y1": {
            "type": "double",
            "description": "The distance from the top of the bitmap/window to the\nfirst point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x2": {
            "type": "double",
            "description": "The distance from the left side of the bitmap/window to the\nsecond point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y2": {
            "type": "double",
            "description": "The distance from the top of the bitmap/window to the\nsecond point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x3": {
            "type": "double",
            "description": "The distance from the left side of the bitmap/window to the\nthird point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y3": {
            "type": "double",
            "description": "The distance from the top of the bitmap/window to the\nthird point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "with_options",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def draw_triangle_with_options(clr, x1, y1, x2, y2, x3, y3, opts):"
          ],
          "csharp": [
            "public static void SplashKit.DrawTriangle(Color clr, double x1, double y1, double x2, double y2, double x3, double y3, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_triangle(color clr, double x1, double y1, double x2, double y2, double x3, double y3, drawing_options opts)"
          ],
          "pascal": [
            "procedure DrawTriangle(clr: Color; x1: Double; y1: Double; x2: Double; y2: Double; x3: Double; y3: Double; opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_triangle_on_bitmap(bitmap destination,color clr,const triangle &tri);",
        "name": "draw_triangle_on_bitmap",
        "method_name": "draw_triangle",
        "unique_global_name": "draw_triangle_on_bitmap_record",
        "unique_method_name": "bitmap.draw_triangle_record",
        "suffix_name": null,
        "description": "Draw a triangle on a given bitmap, using the supplied drawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "bitmap",
            "description": "The bitmap which the triangle will be drawn on.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color for the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "tri": {
            "type": "triangle",
            "description": "The triangles details",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "draw_triangle",
          "suffix": "record",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_triangle_on_bitmap_record(destination, clr, tri):"
          ],
          "csharp": [
            "public void Bitmap.DrawTriangle(Color clr, Triangle tri);",
            "public static void SplashKit.DrawTriangleOnBitmap(Bitmap destination, Color clr, Triangle tri);"
          ],
          "cpp": [
            "void draw_triangle_on_bitmap(bitmap destination, color clr, const triangle &tri)"
          ],
          "pascal": [
            "procedure DrawTriangleOnBitmap(destination: Bitmap; clr: Color; const tri: Triangle)"
          ]
        }
      },
      {
        "signature": "void draw_triangle_on_bitmap(bitmap destination,color clr,const triangle &tri,drawing_options opts);",
        "name": "draw_triangle_on_bitmap",
        "method_name": "draw_triangle",
        "unique_global_name": "draw_triangle_on_bitmap_record_with_options",
        "unique_method_name": "bitmap.draw_triangle_record_with_options",
        "suffix_name": null,
        "description": "Draw a triangle on a given bitmap, using the supplied drawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "bitmap",
            "description": "The bitmap which the triangle will be drawn on.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color for the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "tri": {
            "type": "triangle",
            "description": "The triangles details",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "draw_triangle",
          "suffix": "record_with_options",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_triangle_on_bitmap_record_with_options(destination, clr, tri, opts):"
          ],
          "csharp": [
            "public void Bitmap.DrawTriangle(Color clr, Triangle tri, DrawingOptions opts);",
            "public static void SplashKit.DrawTriangleOnBitmap(Bitmap destination, Color clr, Triangle tri, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_triangle_on_bitmap(bitmap destination, color clr, const triangle &tri, drawing_options opts)"
          ],
          "pascal": [
            "procedure DrawTriangleOnBitmap(destination: Bitmap; clr: Color; const tri: Triangle; opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_triangle_on_bitmap(bitmap destination,color clr,double x1,double y1,double x2,double y2,double x3,double y3);",
        "name": "draw_triangle_on_bitmap",
        "method_name": "draw_triangle",
        "unique_global_name": "draw_triangle_on_bitmap",
        "unique_method_name": "bitmap.draw_triangle",
        "suffix_name": null,
        "description": "Draw a triangle to the given bitmap.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "bitmap",
            "description": "The bitmap which the triangle will be drawn on.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color for the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x1": {
            "type": "double",
            "description": "The distance from the left side of the bitmap to the\nfirst point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y1": {
            "type": "double",
            "description": "The distance from the top of the bitmap to the\nfirst point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x2": {
            "type": "double",
            "description": "The distance from the left side of the bitmap to the\nsecond point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y2": {
            "type": "double",
            "description": "The distance from the top of the bitmap to the\nsecond point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x3": {
            "type": "double",
            "description": "The distance from the left side of the bitmap to the\nthird point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y3": {
            "type": "double",
            "description": "The distance from the top of the bitmap to the\nthird point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "draw_triangle",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_triangle_on_bitmap(destination, clr, x1, y1, x2, y2, x3, y3):"
          ],
          "csharp": [
            "public void Bitmap.DrawTriangle(Color clr, double x1, double y1, double x2, double y2, double x3, double y3);",
            "public static void SplashKit.DrawTriangleOnBitmap(Bitmap destination, Color clr, double x1, double y1, double x2, double y2, double x3, double y3);"
          ],
          "cpp": [
            "void draw_triangle_on_bitmap(bitmap destination, color clr, double x1, double y1, double x2, double y2, double x3, double y3)"
          ],
          "pascal": [
            "procedure DrawTriangleOnBitmap(destination: Bitmap; clr: Color; x1: Double; y1: Double; x2: Double; y2: Double; x3: Double; y3: Double)"
          ]
        }
      },
      {
        "signature": "void draw_triangle_on_bitmap(bitmap destination,color clr,double x1,double y1,double x2,double y2,double x3,double y3,drawing_options opts);",
        "name": "draw_triangle_on_bitmap",
        "method_name": "draw_triangle",
        "unique_global_name": "draw_triangle_on_bitmap_with_options",
        "unique_method_name": "bitmap.draw_triangle_with_options",
        "suffix_name": null,
        "description": "Draw a triangle to the given bitmap, using the supplied drawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "bitmap",
            "description": "The bitmap which the triangle will be drawn on.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color for the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x1": {
            "type": "double",
            "description": "The distance from the left side of the bitmap/bitmap to the\nfirst point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y1": {
            "type": "double",
            "description": "The distance from the top of the bitmap/bitmap to the\nfirst point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x2": {
            "type": "double",
            "description": "The distance from the left side of the bitmap/bitmap to the\nsecond point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y2": {
            "type": "double",
            "description": "The distance from the top of the bitmap/bitmap to the\nsecond point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x3": {
            "type": "double",
            "description": "The distance from the left side of the bitmap/bitmap to the\nthird point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y3": {
            "type": "double",
            "description": "The distance from the top of the bitmap/bitmap to the\nthird point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "draw_triangle",
          "suffix": "with_options",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_triangle_on_bitmap_with_options(destination, clr, x1, y1, x2, y2, x3, y3, opts):"
          ],
          "csharp": [
            "public void Bitmap.DrawTriangle(Color clr, double x1, double y1, double x2, double y2, double x3, double y3, DrawingOptions opts);",
            "public static void SplashKit.DrawTriangleOnBitmap(Bitmap destination, Color clr, double x1, double y1, double x2, double y2, double x3, double y3, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_triangle_on_bitmap(bitmap destination, color clr, double x1, double y1, double x2, double y2, double x3, double y3, drawing_options opts)"
          ],
          "pascal": [
            "procedure DrawTriangleOnBitmap(destination: Bitmap; clr: Color; x1: Double; y1: Double; x2: Double; y2: Double; x3: Double; y3: Double; opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_triangle_on_window(window destination,color clr,const triangle &tri);",
        "name": "draw_triangle_on_window",
        "method_name": "draw_triangle",
        "unique_global_name": "draw_triangle_on_window_record",
        "unique_method_name": "window.draw_triangle_record",
        "suffix_name": null,
        "description": "Draw a triangle on a given window, using the supplied drawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "window",
            "description": "The window which the triangle will be drawn on.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color for the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "tri": {
            "type": "triangle",
            "description": "The triangles details",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "draw_triangle",
          "suffix": "record",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_triangle_on_window_record(destination, clr, tri):"
          ],
          "csharp": [
            "public void Window.DrawTriangle(Color clr, Triangle tri);",
            "public static void SplashKit.DrawTriangleOnWindow(Window destination, Color clr, Triangle tri);"
          ],
          "cpp": [
            "void draw_triangle_on_window(window destination, color clr, const triangle &tri)"
          ],
          "pascal": [
            "procedure DrawTriangleOnWindow(destination: Window; clr: Color; const tri: Triangle)"
          ]
        }
      },
      {
        "signature": "void draw_triangle_on_window(window destination,color clr,const triangle &tri,drawing_options opts);",
        "name": "draw_triangle_on_window",
        "method_name": "draw_triangle",
        "unique_global_name": "draw_triangle_on_window_record_with_options",
        "unique_method_name": "window.draw_triangle_record_with_options",
        "suffix_name": null,
        "description": "Draw a triangle on a given window, using the supplied drawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "window",
            "description": "The window which the triangle will be drawn on.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color for the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "tri": {
            "type": "triangle",
            "description": "The triangles details",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "draw_triangle",
          "suffix": "record_with_options",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_triangle_on_window_record_with_options(destination, clr, tri, opts):"
          ],
          "csharp": [
            "public void Window.DrawTriangle(Color clr, Triangle tri, DrawingOptions opts);",
            "public static void SplashKit.DrawTriangleOnWindow(Window destination, Color clr, Triangle tri, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_triangle_on_window(window destination, color clr, const triangle &tri, drawing_options opts)"
          ],
          "pascal": [
            "procedure DrawTriangleOnWindow(destination: Window; clr: Color; const tri: Triangle; opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void draw_triangle_on_window(window destination,color clr,double x1,double y1,double x2,double y2,double x3,double y3);",
        "name": "draw_triangle_on_window",
        "method_name": "draw_triangle",
        "unique_global_name": "draw_triangle_on_window",
        "unique_method_name": "window.draw_triangle",
        "suffix_name": null,
        "description": "Draw a triangle to the given window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "window",
            "description": "The window which the triangle will be drawn on.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color for the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x1": {
            "type": "double",
            "description": "The distance from the left side of the window to the\nfirst point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y1": {
            "type": "double",
            "description": "The distance from the top of the window to the\nfirst point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x2": {
            "type": "double",
            "description": "The distance from the left side of the window to the\nsecond point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y2": {
            "type": "double",
            "description": "The distance from the top of the window to the\nsecond point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x3": {
            "type": "double",
            "description": "The distance from the left side of the window to the\nthird point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y3": {
            "type": "double",
            "description": "The distance from the top of the window to the\nthird point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "draw_triangle",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_triangle_on_window(destination, clr, x1, y1, x2, y2, x3, y3):"
          ],
          "csharp": [
            "public void Window.DrawTriangle(Color clr, double x1, double y1, double x2, double y2, double x3, double y3);",
            "public static void SplashKit.DrawTriangleOnWindow(Window destination, Color clr, double x1, double y1, double x2, double y2, double x3, double y3);"
          ],
          "cpp": [
            "void draw_triangle_on_window(window destination, color clr, double x1, double y1, double x2, double y2, double x3, double y3)"
          ],
          "pascal": [
            "procedure DrawTriangleOnWindow(destination: Window; clr: Color; x1: Double; y1: Double; x2: Double; y2: Double; x3: Double; y3: Double)"
          ]
        }
      },
      {
        "signature": "void draw_triangle_on_window(window destination,color clr,double x1,double y1,double x2,double y2,double x3,double y3,drawing_options opts);",
        "name": "draw_triangle_on_window",
        "method_name": "draw_triangle",
        "unique_global_name": "draw_triangle_on_window_with_options",
        "unique_method_name": "window.draw_triangle_with_options",
        "suffix_name": null,
        "description": "Draw a triangle to the given window, using the supplied drawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "window",
            "description": "The window which the triangle will be drawn on.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color for the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x1": {
            "type": "double",
            "description": "The distance from the left side of the bitmap/window to the\nfirst point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y1": {
            "type": "double",
            "description": "The distance from the top of the bitmap/window to the\nfirst point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x2": {
            "type": "double",
            "description": "The distance from the left side of the bitmap/window to the\nsecond point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y2": {
            "type": "double",
            "description": "The distance from the top of the bitmap/window to the\nsecond point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x3": {
            "type": "double",
            "description": "The distance from the left side of the bitmap/window to the\nthird point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y3": {
            "type": "double",
            "description": "The distance from the top of the bitmap/window to the\nthird point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "draw_triangle",
          "suffix": "with_options",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def draw_triangle_on_window_with_options(destination, clr, x1, y1, x2, y2, x3, y3, opts):"
          ],
          "csharp": [
            "public void Window.DrawTriangle(Color clr, double x1, double y1, double x2, double y2, double x3, double y3, DrawingOptions opts);",
            "public static void SplashKit.DrawTriangleOnWindow(Window destination, Color clr, double x1, double y1, double x2, double y2, double x3, double y3, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_triangle_on_window(window destination, color clr, double x1, double y1, double x2, double y2, double x3, double y3, drawing_options opts)"
          ],
          "pascal": [
            "procedure DrawTriangleOnWindow(destination: Window; clr: Color; x1: Double; y1: Double; x2: Double; y2: Double; x3: Double; y3: Double; opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void fill_triangle(color clr,const triangle &tri);",
        "name": "fill_triangle",
        "method_name": null,
        "unique_global_name": "fill_triangle_record",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draw a triangle onto the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color for the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "tri": {
            "type": "triangle",
            "description": "The triangles details",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "record",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def fill_triangle_record(clr, tri):"
          ],
          "csharp": [
            "public static void SplashKit.FillTriangle(Color clr, Triangle tri);"
          ],
          "cpp": [
            "void fill_triangle(color clr, const triangle &tri)"
          ],
          "pascal": [
            "procedure FillTriangle(clr: Color; const tri: Triangle)"
          ]
        }
      },
      {
        "signature": "void fill_triangle(color clr,const triangle &tri,drawing_options opts);",
        "name": "fill_triangle",
        "method_name": null,
        "unique_global_name": "fill_triangle_record_with_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fill a triangle using the supplied drawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color for the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "tri": {
            "type": "triangle",
            "description": "The triangles details",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "record_with_options",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def fill_triangle_record_with_options(clr, tri, opts):"
          ],
          "csharp": [
            "public static void SplashKit.FillTriangle(Color clr, Triangle tri, DrawingOptions opts);"
          ],
          "cpp": [
            "void fill_triangle(color clr, const triangle &tri, drawing_options opts)"
          ],
          "pascal": [
            "procedure FillTriangle(clr: Color; const tri: Triangle; opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void fill_triangle(color clr,double x1,double y1,double x2,double y2,double x3,double y3);",
        "name": "fill_triangle",
        "method_name": null,
        "unique_global_name": "fill_triangle",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fills a triangle on the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color for the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x1": {
            "type": "double",
            "description": "The distance from the left side of the window to the\nfirst point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y1": {
            "type": "double",
            "description": "The distance from the top of the window to the\nfirst point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x2": {
            "type": "double",
            "description": "The distance from the left side of the window to the\nsecond point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y2": {
            "type": "double",
            "description": "The distance from the top of the window to the\nsecond point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x3": {
            "type": "double",
            "description": "The distance from the left side of the window to the\nthird point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y3": {
            "type": "double",
            "description": "The distance from the top of the window to the\nthird point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def fill_triangle(clr, x1, y1, x2, y2, x3, y3):"
          ],
          "csharp": [
            "public static void SplashKit.FillTriangle(Color clr, double x1, double y1, double x2, double y2, double x3, double y3);"
          ],
          "cpp": [
            "void fill_triangle(color clr, double x1, double y1, double x2, double y2, double x3, double y3)"
          ],
          "pascal": [
            "procedure FillTriangle(clr: Color; x1: Double; y1: Double; x2: Double; y2: Double; x3: Double; y3: Double)"
          ]
        }
      },
      {
        "signature": "void fill_triangle(color clr,double x1,double y1,double x2,double y2,double x3,double y3,drawing_options opts);",
        "name": "fill_triangle",
        "method_name": null,
        "unique_global_name": "fill_triangle_with_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fills a triangle using the supplied drawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color for the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x1": {
            "type": "double",
            "description": "The distance from the left side of the bitmap/window to the\nfirst point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y1": {
            "type": "double",
            "description": "The distance from the top of the bitmap/window to the\nfirst point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x2": {
            "type": "double",
            "description": "The distance from the left side of the bitmap/window to the\nsecond point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y2": {
            "type": "double",
            "description": "The distance from the top of the bitmap/window to the\nsecond point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x3": {
            "type": "double",
            "description": "The distance from the left side of the bitmap/window to the\nthird point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y3": {
            "type": "double",
            "description": "The distance from the top of the bitmap/window to the\nthird point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "with_options",
          "group": "graphics"
        },
        "signatures": {
          "python": [
            "def fill_triangle_with_options(clr, x1, y1, x2, y2, x3, y3, opts):"
          ],
          "csharp": [
            "public static void SplashKit.FillTriangle(Color clr, double x1, double y1, double x2, double y2, double x3, double y3, DrawingOptions opts);"
          ],
          "cpp": [
            "void fill_triangle(color clr, double x1, double y1, double x2, double y2, double x3, double y3, drawing_options opts)"
          ],
          "pascal": [
            "procedure FillTriangle(clr: Color; x1: Double; y1: Double; x2: Double; y2: Double; x3: Double; y3: Double; opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void fill_triangle_on_bitmap(bitmap destination,color clr,const triangle &tri);",
        "name": "fill_triangle_on_bitmap",
        "method_name": "fill_triangle",
        "unique_global_name": "fill_triangle_on_bitmap_record",
        "unique_method_name": "bitmap.fill_triangle_record",
        "suffix_name": null,
        "description": "Fill a triangle on a given bitmap",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "bitmap",
            "description": "The bitmap which the triangle will be drawn on.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color for the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "tri": {
            "type": "triangle",
            "description": "The triangles details",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "fill_triangle",
          "suffix": "record",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def fill_triangle_on_bitmap_record(destination, clr, tri):"
          ],
          "csharp": [
            "public void Bitmap.FillTriangle(Color clr, Triangle tri);",
            "public static void SplashKit.FillTriangleOnBitmap(Bitmap destination, Color clr, Triangle tri);"
          ],
          "cpp": [
            "void fill_triangle_on_bitmap(bitmap destination, color clr, const triangle &tri)"
          ],
          "pascal": [
            "procedure FillTriangleOnBitmap(destination: Bitmap; clr: Color; const tri: Triangle)"
          ]
        }
      },
      {
        "signature": "void fill_triangle_on_bitmap(bitmap destination,color clr,const triangle &tri,drawing_options opts);",
        "name": "fill_triangle_on_bitmap",
        "method_name": "fill_triangle",
        "unique_global_name": "fill_triangle_on_bitmap_record_with_options",
        "unique_method_name": "bitmap.fill_triangle_record_with_options",
        "suffix_name": null,
        "description": "Fill a triangle on a given bitmap, using given drawing options",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "bitmap",
            "description": "The bitmap which the triangle will be drawn on.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color for the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "tri": {
            "type": "triangle",
            "description": "The triangles details",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "fill_triangle",
          "suffix": "record_with_options",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def fill_triangle_on_bitmap_record_with_options(destination, clr, tri, opts):"
          ],
          "csharp": [
            "public void Bitmap.FillTriangle(Color clr, Triangle tri, DrawingOptions opts);",
            "public static void SplashKit.FillTriangleOnBitmap(Bitmap destination, Color clr, Triangle tri, DrawingOptions opts);"
          ],
          "cpp": [
            "void fill_triangle_on_bitmap(bitmap destination, color clr, const triangle &tri, drawing_options opts)"
          ],
          "pascal": [
            "procedure FillTriangleOnBitmap(destination: Bitmap; clr: Color; const tri: Triangle; opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void fill_triangle_on_bitmap(bitmap destination,color clr,double x1,double y1,double x2,double y2,double x3,double y3);",
        "name": "fill_triangle_on_bitmap",
        "method_name": "fill_triangle",
        "unique_global_name": "fill_triangle_on_bitmap",
        "unique_method_name": "bitmap.fill_triangle",
        "suffix_name": null,
        "description": "Fill a triangle on a given bitmap",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "bitmap",
            "description": "The bitmap which the triangle will be drawn on.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color for the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x1": {
            "type": "double",
            "description": "The distance from the left side of the bitmap to the\nfirst point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y1": {
            "type": "double",
            "description": "The distance from the top of the bitmap to the\nfirst point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x2": {
            "type": "double",
            "description": "The distance from the left side of the bitmap to the\nsecond point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y2": {
            "type": "double",
            "description": "The distance from the top of the bitmap to the\nsecond point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x3": {
            "type": "double",
            "description": "The distance from the left side of the bitmap to the\nthird point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y3": {
            "type": "double",
            "description": "The distance from the top of the bitmap to the\nthird point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "fill_triangle",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def fill_triangle_on_bitmap(destination, clr, x1, y1, x2, y2, x3, y3):"
          ],
          "csharp": [
            "public void Bitmap.FillTriangle(Color clr, double x1, double y1, double x2, double y2, double x3, double y3);",
            "public static void SplashKit.FillTriangleOnBitmap(Bitmap destination, Color clr, double x1, double y1, double x2, double y2, double x3, double y3);"
          ],
          "cpp": [
            "void fill_triangle_on_bitmap(bitmap destination, color clr, double x1, double y1, double x2, double y2, double x3, double y3)"
          ],
          "pascal": [
            "procedure FillTriangleOnBitmap(destination: Bitmap; clr: Color; x1: Double; y1: Double; x2: Double; y2: Double; x3: Double; y3: Double)"
          ]
        }
      },
      {
        "signature": "void fill_triangle_on_bitmap(bitmap destination,color clr,double x1,double y1,double x2,double y2,double x3,double y3,drawing_options opts);",
        "name": "fill_triangle_on_bitmap",
        "method_name": "fill_triangle",
        "unique_global_name": "fill_triangle_on_bitmap_with_options",
        "unique_method_name": "bitmap.fill_triangle_with_options",
        "suffix_name": null,
        "description": "Fill a triangle on a given bitmap, using the supplied drawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "bitmap",
            "description": "The bitmap which the triangle will be drawn on.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color for the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x1": {
            "type": "double",
            "description": "The distance from the left side of the bitmap/bitmap to the\nfirst point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y1": {
            "type": "double",
            "description": "The distance from the top of the bitmap/bitmap to the\nfirst point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x2": {
            "type": "double",
            "description": "The distance from the left side of the bitmap/bitmap to the\nsecond point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y2": {
            "type": "double",
            "description": "The distance from the top of the bitmap/bitmap to the\nsecond point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x3": {
            "type": "double",
            "description": "The distance from the left side of the bitmap/bitmap to the\nthird point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y3": {
            "type": "double",
            "description": "The distance from the top of the bitmap/bitmap to the\nthird point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "fill_triangle",
          "suffix": "with_options",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def fill_triangle_on_bitmap_with_options(destination, clr, x1, y1, x2, y2, x3, y3, opts):"
          ],
          "csharp": [
            "public void Bitmap.FillTriangle(Color clr, double x1, double y1, double x2, double y2, double x3, double y3, DrawingOptions opts);",
            "public static void SplashKit.FillTriangleOnBitmap(Bitmap destination, Color clr, double x1, double y1, double x2, double y2, double x3, double y3, DrawingOptions opts);"
          ],
          "cpp": [
            "void fill_triangle_on_bitmap(bitmap destination, color clr, double x1, double y1, double x2, double y2, double x3, double y3, drawing_options opts)"
          ],
          "pascal": [
            "procedure FillTriangleOnBitmap(destination: Bitmap; clr: Color; x1: Double; y1: Double; x2: Double; y2: Double; x3: Double; y3: Double; opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void fill_triangle_on_window(window destination,color clr,const triangle &tri);",
        "name": "fill_triangle_on_window",
        "method_name": "fill_triangle",
        "unique_global_name": "fill_triangle_on_window_record",
        "unique_method_name": "window.fill_triangle_record",
        "suffix_name": null,
        "description": "Fill a triangle on a given window",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "window",
            "description": "The window which the triangle will be drawn on.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color for the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "tri": {
            "type": "triangle",
            "description": "The triangles details",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "fill_triangle",
          "suffix": "record",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def fill_triangle_on_window_record(destination, clr, tri):"
          ],
          "csharp": [
            "public void Window.FillTriangle(Color clr, Triangle tri);",
            "public static void SplashKit.FillTriangleOnWindow(Window destination, Color clr, Triangle tri);"
          ],
          "cpp": [
            "void fill_triangle_on_window(window destination, color clr, const triangle &tri)"
          ],
          "pascal": [
            "procedure FillTriangleOnWindow(destination: Window; clr: Color; const tri: Triangle)"
          ]
        }
      },
      {
        "signature": "void fill_triangle_on_window(window destination,color clr,const triangle &tri,drawing_options opts);",
        "name": "fill_triangle_on_window",
        "method_name": "fill_triangle",
        "unique_global_name": "fill_triangle_on_window_record_with_options",
        "unique_method_name": "window.fill_triangle_record_with_options",
        "suffix_name": null,
        "description": "Fill a triangle on a given window, using given drawing options",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "window",
            "description": "The window which the triangle will be drawn on.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color for the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "tri": {
            "type": "triangle",
            "description": "The triangles details",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "fill_triangle",
          "suffix": "record_with_options",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def fill_triangle_on_window_record_with_options(destination, clr, tri, opts):"
          ],
          "csharp": [
            "public void Window.FillTriangle(Color clr, Triangle tri, DrawingOptions opts);",
            "public static void SplashKit.FillTriangleOnWindow(Window destination, Color clr, Triangle tri, DrawingOptions opts);"
          ],
          "cpp": [
            "void fill_triangle_on_window(window destination, color clr, const triangle &tri, drawing_options opts)"
          ],
          "pascal": [
            "procedure FillTriangleOnWindow(destination: Window; clr: Color; const tri: Triangle; opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void fill_triangle_on_window(window destination,color clr,double x1,double y1,double x2,double y2,double x3,double y3);",
        "name": "fill_triangle_on_window",
        "method_name": "fill_triangle",
        "unique_global_name": "fill_triangle_on_window",
        "unique_method_name": "window.fill_triangle",
        "suffix_name": null,
        "description": "Fill a triangle on a given window",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "window",
            "description": "The window which the triangle will be drawn on.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color for the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x1": {
            "type": "double",
            "description": "The distance from the left side of the window to the\nfirst point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y1": {
            "type": "double",
            "description": "The distance from the top of the window to the\nfirst point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x2": {
            "type": "double",
            "description": "The distance from the left side of the window to the\nsecond point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y2": {
            "type": "double",
            "description": "The distance from the top of the window to the\nsecond point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x3": {
            "type": "double",
            "description": "The distance from the left side of the window to the\nthird point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y3": {
            "type": "double",
            "description": "The distance from the top of the window to the\nthird point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "fill_triangle",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def fill_triangle_on_window(destination, clr, x1, y1, x2, y2, x3, y3):"
          ],
          "csharp": [
            "public void Window.FillTriangle(Color clr, double x1, double y1, double x2, double y2, double x3, double y3);",
            "public static void SplashKit.FillTriangleOnWindow(Window destination, Color clr, double x1, double y1, double x2, double y2, double x3, double y3);"
          ],
          "cpp": [
            "void fill_triangle_on_window(window destination, color clr, double x1, double y1, double x2, double y2, double x3, double y3)"
          ],
          "pascal": [
            "procedure FillTriangleOnWindow(destination: Window; clr: Color; x1: Double; y1: Double; x2: Double; y2: Double; x3: Double; y3: Double)"
          ]
        }
      },
      {
        "signature": "void fill_triangle_on_window(window destination,color clr,double x1,double y1,double x2,double y2,double x3,double y3,drawing_options opts);",
        "name": "fill_triangle_on_window",
        "method_name": "fill_triangle",
        "unique_global_name": "fill_triangle_on_window_with_options",
        "unique_method_name": "window.fill_triangle_with_options",
        "suffix_name": null,
        "description": "Fill a triangle on a given window, using the supplied drawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "destination": {
            "type": "window",
            "description": "The window which the triangle will be drawn on.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color for the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x1": {
            "type": "double",
            "description": "The distance from the left side of the bitmap/window to the\nfirst point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y1": {
            "type": "double",
            "description": "The distance from the top of the bitmap/window to the\nfirst point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x2": {
            "type": "double",
            "description": "The distance from the left side of the bitmap/window to the\nsecond point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y2": {
            "type": "double",
            "description": "The distance from the top of the bitmap/window to the\nsecond point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x3": {
            "type": "double",
            "description": "The distance from the left side of the bitmap/window to the\nthird point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y3": {
            "type": "double",
            "description": "The distance from the top of the bitmap/window to the\nthird point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "fill_triangle",
          "suffix": "with_options",
          "group": "graphics",
          "self": "destination"
        },
        "signatures": {
          "python": [
            "def fill_triangle_on_window_with_options(destination, clr, x1, y1, x2, y2, x3, y3, opts):"
          ],
          "csharp": [
            "public void Window.FillTriangle(Color clr, double x1, double y1, double x2, double y2, double x3, double y3, DrawingOptions opts);",
            "public static void SplashKit.FillTriangleOnWindow(Window destination, Color clr, double x1, double y1, double x2, double y2, double x3, double y3, DrawingOptions opts);"
          ],
          "cpp": [
            "void fill_triangle_on_window(window destination, color clr, double x1, double y1, double x2, double y2, double x3, double y3, drawing_options opts)"
          ],
          "pascal": [
            "procedure FillTriangleOnWindow(destination: Window; clr: Color; x1: Double; y1: Double; x2: Double; y2: Double; x3: Double; y3: Double; opts: DrawingOptions)"
          ]
        }
      }
    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "input": {
    "brief": "Input handles user interaction and events such as keypresses.",
    "description": "",
    "functions": [
      {
        "signature": "void process_events();",
        "name": "process_events",
        "method_name": null,
        "unique_global_name": "process_events",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "ProcessEvents allows SplashKit to react to user interactions. This\nprocedure checks the current keyboard and mouse states and should be\ncalled once within your game loop to check user interaction.\n\nSide Effects\n- Reads user interaction events\n- Updates keys down, text input, etc.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "input",
          "static": "input"
        },
        "signatures": {
          "python": [
            "def process_events():"
          ],
          "csharp": [
            "public static void SplashKit.ProcessEvents();"
          ],
          "cpp": [
            "void process_events()"
          ],
          "pascal": [
            "procedure ProcessEvents()"
          ]
        }
      },
      {
        "signature": "bool quit_requested();",
        "name": "quit_requested",
        "method_name": null,
        "unique_global_name": "quit_requested",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks to see if the user has asked for the application to quit. This\nvalue is updated by the `process_events` routine. Also see\n`window_close_requested`.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the application has been requested to close.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "input",
          "static": "input"
        },
        "signatures": {
          "python": [
            "def quit_requested():"
          ],
          "csharp": [
            "public static bool SplashKit.QuitRequested();"
          ],
          "cpp": [
            "bool quit_requested()"
          ],
          "pascal": [
            "function QuitRequested(): Boolean"
          ]
        }
      },
      {
        "signature": "void reset_quit();",
        "name": "reset_quit",
        "method_name": null,
        "unique_global_name": "reset_quit",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Cancels a quit request, ensuring the quit requested will return false.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "input",
          "static": "input"
        },
        "signatures": {
          "python": [
            "def reset_quit():"
          ],
          "csharp": [
            "public static void SplashKit.ResetQuit();"
          ],
          "cpp": [
            "void reset_quit()"
          ],
          "pascal": [
            "procedure ResetQuit()"
          ]
        }
      },
      {
        "signature": "bool any_key_pressed();",
        "name": "any_key_pressed",
        "method_name": null,
        "unique_global_name": "any_key_pressed",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks to see if any key has been pressed since the last time\n`process_events` was called.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if any key was pressed.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "python": [
            "def any_key_pressed():"
          ],
          "csharp": [
            "public static bool SplashKit.AnyKeyPressed();"
          ],
          "cpp": [
            "bool any_key_pressed()"
          ],
          "pascal": [
            "function AnyKeyPressed(): Boolean"
          ]
        }
      },
      {
        "signature": "void deregister_callback_on_key_down(key_callback *callback);",
        "name": "deregister_callback_on_key_down",
        "method_name": null,
        "unique_global_name": "deregister_callback_on_key_down",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Remove the registered callback from receiving events related to key down actions.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "callback": {
            "type": "key_callback",
            "description": "The function to from from key down events",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "python": [
            "def deregister_callback_on_key_down(callback):"
          ],
          "csharp": [
            "public static void SplashKit.DeregisterCallbackOnKeyDown(KeyCallback callback);"
          ],
          "cpp": [
            "void deregister_callback_on_key_down(key_callback *callback)"
          ],
          "pascal": [
            "procedure DeregisterCallbackOnKeyDown(callback: KeyCallback)"
          ]
        }
      },
      {
        "signature": "void deregister_callback_on_key_typed(key_callback *callback);",
        "name": "deregister_callback_on_key_typed",
        "method_name": null,
        "unique_global_name": "deregister_callback_on_key_typed",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Remove the registered callback from receiving events related to key typed actions.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "callback": {
            "type": "key_callback",
            "description": "The function to from from key typed events",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "python": [
            "def deregister_callback_on_key_typed(callback):"
          ],
          "csharp": [
            "public static void SplashKit.DeregisterCallbackOnKeyTyped(KeyCallback callback);"
          ],
          "cpp": [
            "void deregister_callback_on_key_typed(key_callback *callback)"
          ],
          "pascal": [
            "procedure DeregisterCallbackOnKeyTyped(callback: KeyCallback)"
          ]
        }
      },
      {
        "signature": "void deregister_callback_on_key_up(key_callback *callback);",
        "name": "deregister_callback_on_key_up",
        "method_name": null,
        "unique_global_name": "deregister_callback_on_key_up",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Remove the registered callback from receiving events related to key up actions.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "callback": {
            "type": "key_callback",
            "description": "The function to from from key up events",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "python": [
            "def deregister_callback_on_key_up(callback):"
          ],
          "csharp": [
            "public static void SplashKit.DeregisterCallbackOnKeyUp(KeyCallback callback);"
          ],
          "cpp": [
            "void deregister_callback_on_key_up(key_callback *callback)"
          ],
          "pascal": [
            "procedure DeregisterCallbackOnKeyUp(callback: KeyCallback)"
          ]
        }
      },
      {
        "signature": "bool key_down(key_code key);",
        "name": "key_down",
        "method_name": null,
        "unique_global_name": "key_down",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true when the key requested is being held down. This is updated\nas part of the `process_events` call. Use the key codes from `key_code`\nto specify the key to be checked.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the key is currently held down",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "key": {
            "type": "key_code",
            "description": "The key to check if it is down",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "python": [
            "def key_down(key):"
          ],
          "csharp": [
            "public static bool SplashKit.KeyDown(KeyCode key);"
          ],
          "cpp": [
            "bool key_down(key_code key)"
          ],
          "pascal": [
            "function KeyDown(key: KeyCode): Boolean"
          ]
        }
      },
      {
        "signature": "string key_name(key_code key);",
        "name": "key_name",
        "method_name": null,
        "unique_global_name": "key_name",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The `key_name` function returns a string name for a given `key_code`. For\nexample, `COMMA_KEY` returns the string 'Comma'. This function could be used\nto display more meaningful key names for configuring game controls, etc.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "The name of the key",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "key": {
            "type": "key_code",
            "description": "The key to get the name of",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "python": [
            "def key_name(key):"
          ],
          "csharp": [
            "public static string SplashKit.KeyName(KeyCode key);"
          ],
          "cpp": [
            "string key_name(key_code key)"
          ],
          "pascal": [
            "function KeyName(key: KeyCode): String"
          ]
        }
      },
      {
        "signature": "bool key_released(key_code key);",
        "name": "key_released",
        "method_name": null,
        "unique_global_name": "key_released",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if the specified key was released since the last time\n`process_events` was called. This occurs only once for the key that is\nreleased and will not return true again until the key is pressed down and\nreleased again.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the key was just released",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "key": {
            "type": "key_code",
            "description": "The key to check if it was released",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "python": [
            "def key_released(key):"
          ],
          "csharp": [
            "public static bool SplashKit.KeyReleased(KeyCode key);"
          ],
          "cpp": [
            "bool key_released(key_code key)"
          ],
          "pascal": [
            "function KeyReleased(key: KeyCode): Boolean"
          ]
        }
      },
      {
        "signature": "bool key_typed(key_code key);",
        "name": "key_typed",
        "method_name": null,
        "unique_global_name": "key_typed",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true when the key requested is just pressed down. This is updated\nas part of the `process_events` call. Use the key codes from `key_code`\nto specify the key to be checked. this will only occur once for that key that is\npressed and will not return true again until the key is released and presssed down again",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the key was just pressed down",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "key": {
            "type": "key_code",
            "description": "The key to check if it was typed",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "python": [
            "def key_typed(key):"
          ],
          "csharp": [
            "public static bool SplashKit.KeyTyped(KeyCode key);"
          ],
          "cpp": [
            "bool key_typed(key_code key)"
          ],
          "pascal": [
            "function KeyTyped(key: KeyCode): Boolean"
          ]
        }
      },
      {
        "signature": "bool key_up(key_code key);",
        "name": "key_up",
        "method_name": null,
        "unique_global_name": "key_up",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns false when the key requested is being held down. This is updated\nas part of the `process_events` call. Use the key codes from `key_code`\nto specify the key to be checked.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the key is currently up",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "key": {
            "type": "key_code",
            "description": "The key to check if it is up",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "python": [
            "def key_up(key):"
          ],
          "csharp": [
            "public static bool SplashKit.KeyUp(KeyCode key);"
          ],
          "cpp": [
            "bool key_up(key_code key)"
          ],
          "pascal": [
            "function KeyUp(key: KeyCode): Boolean"
          ]
        }
      },
      {
        "signature": "void register_callback_on_key_down(key_callback *callback);",
        "name": "register_callback_on_key_down",
        "method_name": null,
        "unique_global_name": "register_callback_on_key_down",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Register the passed in callback function to receive notification of key down\ncalls. This will be called in response to `process_events`, for each key that\nthe user presses down.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "callback": {
            "type": "key_callback",
            "description": "The function to be called when a key is first pressed",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "python": [
            "def register_callback_on_key_down(callback):"
          ],
          "csharp": [
            "public static void SplashKit.RegisterCallbackOnKeyDown(KeyCallback callback);"
          ],
          "cpp": [
            "void register_callback_on_key_down(key_callback *callback)"
          ],
          "pascal": [
            "procedure RegisterCallbackOnKeyDown(callback: KeyCallback)"
          ]
        }
      },
      {
        "signature": "void register_callback_on_key_typed(key_callback *callback);",
        "name": "register_callback_on_key_typed",
        "method_name": null,
        "unique_global_name": "register_callback_on_key_typed",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Register the passed in callback function to receive notification of key typed\ncalls. This will be called in response to `process_events`, when the user initially\npresses a key down.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "callback": {
            "type": "key_callback",
            "description": "The function to be called when a key is typed",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "python": [
            "def register_callback_on_key_typed(callback):"
          ],
          "csharp": [
            "public static void SplashKit.RegisterCallbackOnKeyTyped(KeyCallback callback);"
          ],
          "cpp": [
            "void register_callback_on_key_typed(key_callback *callback)"
          ],
          "pascal": [
            "procedure RegisterCallbackOnKeyTyped(callback: KeyCallback)"
          ]
        }
      },
      {
        "signature": "void register_callback_on_key_up(key_callback *callback);",
        "name": "register_callback_on_key_up",
        "method_name": null,
        "unique_global_name": "register_callback_on_key_up",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Register the passed in callback function to receive notification of key up\ncalls. This will be called in response to `process_events`, for each key that\nthe user releases.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "callback": {
            "type": "key_callback",
            "description": "The function to be called when a key is released",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "python": [
            "def register_callback_on_key_up(callback):"
          ],
          "csharp": [
            "public static void SplashKit.RegisterCallbackOnKeyUp(KeyCallback callback);"
          ],
          "cpp": [
            "void register_callback_on_key_up(key_callback *callback)"
          ],
          "pascal": [
            "procedure RegisterCallbackOnKeyUp(callback: KeyCallback)"
          ]
        }
      },
      {
        "signature": "void hide_mouse();",
        "name": "hide_mouse",
        "method_name": null,
        "unique_global_name": "hide_mouse",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Tells the mouse cursor to hide (no longer visible) if it is currently\nshowing. Use `ShowMouse` to make the mouse cursor visible again.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "python": [
            "def hide_mouse():"
          ],
          "csharp": [
            "public static void SplashKit.HideMouse();"
          ],
          "cpp": [
            "void hide_mouse()"
          ],
          "pascal": [
            "procedure HideMouse()"
          ]
        }
      },
      {
        "signature": "bool mouse_clicked(mouse_button button);",
        "name": "mouse_clicked",
        "method_name": null,
        "unique_global_name": "mouse_clicked",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if the specified button was clicked since the last time\n`process_events` was called.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the mouse button was clicked",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "button": {
            "type": "mouse_button",
            "description": "The mouse button to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "python": [
            "def mouse_clicked(button):"
          ],
          "csharp": [
            "public static bool SplashKit.MouseClicked(MouseButton button);"
          ],
          "cpp": [
            "bool mouse_clicked(mouse_button button)"
          ],
          "pascal": [
            "function MouseClicked(button: MouseButton): Boolean"
          ]
        }
      },
      {
        "signature": "bool mouse_down(mouse_button button);",
        "name": "mouse_down",
        "method_name": null,
        "unique_global_name": "mouse_down",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns `true` if the specified button is currently pressed down.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the mouse button is down",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "button": {
            "type": "mouse_button",
            "description": "The mouse button to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "python": [
            "def mouse_down(button):"
          ],
          "csharp": [
            "public static bool SplashKit.MouseDown(MouseButton button);"
          ],
          "cpp": [
            "bool mouse_down(mouse_button button)"
          ],
          "pascal": [
            "function MouseDown(button: MouseButton): Boolean"
          ]
        }
      },
      {
        "signature": "vector_2d mouse_movement();",
        "name": "mouse_movement",
        "method_name": null,
        "unique_global_name": "mouse_movement",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the amount of accumulated mouse movement, since the last time\n`process_events` was called, as a `vector_2d`.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "The movement of the mouse since the last process events",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "python": [
            "def mouse_movement():"
          ],
          "csharp": [
            "public static Vector2D SplashKit.MouseMovement();"
          ],
          "cpp": [
            "vector_2d mouse_movement()"
          ],
          "pascal": [
            "function MouseMovement(): Vector2D"
          ]
        }
      },
      {
        "signature": "point_2d mouse_position();",
        "name": "mouse_position",
        "method_name": null,
        "unique_global_name": "mouse_position",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the current window position of the mouse as a `Point2D`",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "The position of the mouse in the current window.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "python": [
            "def mouse_position():"
          ],
          "csharp": [
            "public static Point2D SplashKit.MousePosition();"
          ],
          "cpp": [
            "point_2d mouse_position()"
          ],
          "pascal": [
            "function MousePosition(): Point2D"
          ]
        }
      },
      {
        "signature": "vector_2d mouse_position_vector();",
        "name": "mouse_position_vector",
        "method_name": null,
        "unique_global_name": "mouse_position_vector",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns The current window position of the mouse as a `Vector`",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "The offset from the window origin to the mouse.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "python": [
            "def mouse_position_vector():"
          ],
          "csharp": [
            "public static Vector2D SplashKit.MousePositionVector();"
          ],
          "cpp": [
            "vector_2d mouse_position_vector()"
          ],
          "pascal": [
            "function MousePositionVector(): Vector2D"
          ]
        }
      },
      {
        "signature": "bool mouse_shown();",
        "name": "mouse_shown",
        "method_name": null,
        "unique_global_name": "mouse_shown",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns `true` if the mouse is currently visible, `false` if not.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the mouse is shown.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "python": [
            "def mouse_shown():"
          ],
          "csharp": [
            "public static bool SplashKit.MouseShown();"
          ],
          "cpp": [
            "bool mouse_shown()"
          ],
          "pascal": [
            "function MouseShown(): Boolean"
          ]
        }
      },
      {
        "signature": "bool mouse_up(mouse_button button);",
        "name": "mouse_up",
        "method_name": null,
        "unique_global_name": "mouse_up",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns `true` if the specified button is currently up.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the mouse button is up (i.e. not down)",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "button": {
            "type": "mouse_button",
            "description": "The mouse button to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "python": [
            "def mouse_up(button):"
          ],
          "csharp": [
            "public static bool SplashKit.MouseUp(MouseButton button);"
          ],
          "cpp": [
            "bool mouse_up(mouse_button button)"
          ],
          "pascal": [
            "function MouseUp(button: MouseButton): Boolean"
          ]
        }
      },
      {
        "signature": "vector_2d mouse_wheel_scroll();",
        "name": "mouse_wheel_scroll",
        "method_name": null,
        "unique_global_name": "mouse_wheel_scroll",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the amount the mouse wheel was scrolled since the last call\nto `process_events`. The result is a vector containing the x and y\namounts scrolled. Scroll left generates a negative x, scroll right a\npositive x. Scroll backward is negative y, scroll forward positive y.\nNote that on MacOS the directions may be inverted by OS settings.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "The distance and direction of the mouse scroll since the last\n`process_events`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "python": [
            "def mouse_wheel_scroll():"
          ],
          "csharp": [
            "public static Vector2D SplashKit.MouseWheelScroll();"
          ],
          "cpp": [
            "vector_2d mouse_wheel_scroll()"
          ],
          "pascal": [
            "function MouseWheelScroll(): Vector2D"
          ]
        }
      },
      {
        "signature": "float mouse_x();",
        "name": "mouse_x",
        "method_name": null,
        "unique_global_name": "mouse_x",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the current x value of the mouse's position.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The distance of the mouse from the left edge of the current\nwindow location",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "python": [
            "def mouse_x():"
          ],
          "csharp": [
            "public static float SplashKit.MouseX();"
          ],
          "cpp": [
            "float mouse_x()"
          ],
          "pascal": [
            "function MouseX(): Single"
          ]
        }
      },
      {
        "signature": "float mouse_y();",
        "name": "mouse_y",
        "method_name": null,
        "unique_global_name": "mouse_y",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the current y value of the mouse's position.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The distance of the mouse from the top edge of the current\nwindow location",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "python": [
            "def mouse_y():"
          ],
          "csharp": [
            "public static float SplashKit.MouseY();"
          ],
          "cpp": [
            "float mouse_y()"
          ],
          "pascal": [
            "function MouseY(): Single"
          ]
        }
      },
      {
        "signature": "void move_mouse(double x,double y);",
        "name": "move_mouse",
        "method_name": null,
        "unique_global_name": "move_mouse",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Moves the mouse cursor to the specified screen location.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "x": {
            "type": "double",
            "description": "The new x location of the mouse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The new y location of the mouse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "python": [
            "def move_mouse(x, y):"
          ],
          "csharp": [
            "public static void SplashKit.MoveMouse(double x, double y);"
          ],
          "cpp": [
            "void move_mouse(double x, double y)"
          ],
          "pascal": [
            "procedure MoveMouse(x: Double; y: Double)"
          ]
        }
      },
      {
        "signature": "void move_mouse(point_2d point);",
        "name": "move_mouse",
        "method_name": null,
        "unique_global_name": "move_mouse_to_point",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Moves the mouse cursor to the specified screen location.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "point": {
            "type": "point_2d",
            "description": "The new location of the mouse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "to_point",
          "group": "input"
        },
        "signatures": {
          "python": [
            "def move_mouse_to_point(point):"
          ],
          "csharp": [
            "public static void SplashKit.MoveMouse(Point2D point);"
          ],
          "cpp": [
            "void move_mouse(point_2d point)"
          ],
          "pascal": [
            "procedure MoveMouse(point: Point2D)"
          ]
        }
      },
      {
        "signature": "void show_mouse();",
        "name": "show_mouse",
        "method_name": null,
        "unique_global_name": "show_mouse",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Tells the mouse cursor to be visible if it was previously hidden with\nby a `HideMouse` or `SetMouseVisible`(False) call.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "python": [
            "def show_mouse():"
          ],
          "csharp": [
            "public static void SplashKit.ShowMouse();"
          ],
          "cpp": [
            "void show_mouse()"
          ],
          "pascal": [
            "procedure ShowMouse()"
          ]
        }
      },
      {
        "signature": "void show_mouse(bool show);",
        "name": "show_mouse",
        "method_name": null,
        "unique_global_name": "show_mouse_with_boolean",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Used to explicitly set the mouse cursors visible state (if it is showing\nin the window or not) based on the show parameter.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "show": {
            "type": "bool",
            "description": "When true the mouse is shown, when false it is hidden",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "with_boolean",
          "group": "input"
        },
        "signatures": {
          "python": [
            "def show_mouse_with_boolean(show):"
          ],
          "csharp": [
            "public static void SplashKit.ShowMouse(bool show);"
          ],
          "cpp": [
            "void show_mouse(bool show)"
          ],
          "pascal": [
            "procedure ShowMouse(show: Boolean)"
          ]
        }
      },
      {
        "signature": "void draw_collected_text(color clr,font fnt,int font_size,const drawing_options &opts);",
        "name": "draw_collected_text",
        "method_name": null,
        "unique_global_name": "draw_collected_text",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draw the text that the user is currently enterring on the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color for the text",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "fnt": {
            "type": "font",
            "description": "The font to use",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "font_size": {
            "type": "int",
            "description": "The size of the font",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "Any drawing options",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "python": [
            "def draw_collected_text(clr, fnt, font_size, opts):"
          ],
          "csharp": [
            "public static void SplashKit.DrawCollectedText(Color clr, Font fnt, int fontSize, DrawingOptions opts);"
          ],
          "cpp": [
            "void draw_collected_text(color clr, font fnt, int font_size, const drawing_options &opts)"
          ],
          "pascal": [
            "procedure DrawCollectedText(clr: Color; fnt: Font; fontSize: Integer; const opts: DrawingOptions)"
          ]
        }
      },
      {
        "signature": "void end_reading_text();",
        "name": "end_reading_text",
        "method_name": null,
        "unique_global_name": "end_reading_text",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Ends reading text in for the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "python": [
            "def end_reading_text():"
          ],
          "csharp": [
            "public static void SplashKit.EndReadingText();"
          ],
          "cpp": [
            "void end_reading_text()"
          ],
          "pascal": [
            "procedure EndReadingText()"
          ]
        }
      },
      {
        "signature": "void end_reading_text(window wind);",
        "name": "end_reading_text",
        "method_name": null,
        "unique_global_name": "end_reading_text_in_window",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Ends reading text for the passed in window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "The window to end reading text",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "in_window",
          "group": "input"
        },
        "signatures": {
          "python": [
            "def end_reading_text_in_window(wind):"
          ],
          "csharp": [
            "public static void SplashKit.EndReadingText(Window wind);"
          ],
          "cpp": [
            "void end_reading_text(window wind)"
          ],
          "pascal": [
            "procedure EndReadingText(wind: Window)"
          ]
        }
      },
      {
        "signature": "bool reading_text();",
        "name": "reading_text",
        "method_name": null,
        "unique_global_name": "reading_text",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true when the current window is reading text.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True when window is setup to read input from the user.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "python": [
            "def reading_text():"
          ],
          "csharp": [
            "public static bool SplashKit.ReadingText();"
          ],
          "cpp": [
            "bool reading_text()"
          ],
          "pascal": [
            "function ReadingText(): Boolean"
          ]
        }
      },
      {
        "signature": "bool reading_text(window wind);",
        "name": "reading_text",
        "method_name": null,
        "unique_global_name": "reading_text_in_window",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true when the window is reading text.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True when window is setup to read input from the user.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "The window to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "in_window",
          "group": "input"
        },
        "signatures": {
          "python": [
            "def reading_text_in_window(wind):"
          ],
          "csharp": [
            "public static bool SplashKit.ReadingText(Window wind);"
          ],
          "cpp": [
            "bool reading_text(window wind)"
          ],
          "pascal": [
            "function ReadingText(wind: Window): Boolean"
          ]
        }
      },
      {
        "signature": "void start_reading_text(rectangle rect);",
        "name": "start_reading_text",
        "method_name": null,
        "unique_global_name": "start_reading_text",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Start reading text in the current window within the bounds of the\nsupplied rectangle.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "rect": {
            "type": "rectangle",
            "description": "The area where the text will be entered.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "python": [
            "def start_reading_text(rect):"
          ],
          "csharp": [
            "public static void SplashKit.StartReadingText(Rectangle rect);"
          ],
          "cpp": [
            "void start_reading_text(rectangle rect)"
          ],
          "pascal": [
            "procedure StartReadingText(rect: Rectangle)"
          ]
        }
      },
      {
        "signature": "void start_reading_text(rectangle rect,string initial_text);",
        "name": "start_reading_text",
        "method_name": null,
        "unique_global_name": "start_reading_text_with_initial_text",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Start reading text in the current window within the bounds of the\nsupplied rectangle. The text will start with an initial value.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "rect": {
            "type": "rectangle",
            "description": "The area where the text will be entered.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "initial_text": {
            "type": "string",
            "description": "The initial text, which may be edited by the user.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "with_initial_text",
          "group": "input"
        },
        "signatures": {
          "python": [
            "def start_reading_text_with_initial_text(rect, initial_text):"
          ],
          "csharp": [
            "public static void SplashKit.StartReadingText(Rectangle rect, string initialText);"
          ],
          "cpp": [
            "void start_reading_text(rectangle rect, string initial_text)"
          ],
          "pascal": [
            "procedure StartReadingText(rect: Rectangle; initialText: String)"
          ]
        }
      },
      {
        "signature": "void start_reading_text(window wind,rectangle rect);",
        "name": "start_reading_text",
        "method_name": null,
        "unique_global_name": "start_reading_text_in_window",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Start reading text in the window within the bounds of the\nsupplied rectangle.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "The window where the text will be entered",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The area where the text will be entered.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "in_window",
          "group": "input"
        },
        "signatures": {
          "python": [
            "def start_reading_text_in_window(wind, rect):"
          ],
          "csharp": [
            "public static void SplashKit.StartReadingText(Window wind, Rectangle rect);"
          ],
          "cpp": [
            "void start_reading_text(window wind, rectangle rect)"
          ],
          "pascal": [
            "procedure StartReadingText(wind: Window; rect: Rectangle)"
          ]
        }
      },
      {
        "signature": "void start_reading_text(window wind,rectangle rect,string initial_text);",
        "name": "start_reading_text",
        "method_name": null,
        "unique_global_name": "start_reading_text_in_window_with_initial_text",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Start reading text in the window within the bounds of the\nsupplied rectangle. The text will start with an initial value.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "The window where the text will be entered",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The area where the text will be entered.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "initial_text": {
            "type": "string",
            "description": "The initial text, which may be edited by the user.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "in_window_with_initial_text",
          "group": "input"
        },
        "signatures": {
          "python": [
            "def start_reading_text_in_window_with_initial_text(wind, rect, initial_text):"
          ],
          "csharp": [
            "public static void SplashKit.StartReadingText(Window wind, Rectangle rect, string initialText);"
          ],
          "cpp": [
            "void start_reading_text(window wind, rectangle rect, string initial_text)"
          ],
          "pascal": [
            "procedure StartReadingText(wind: Window; rect: Rectangle; initialText: String)"
          ]
        }
      },
      {
        "signature": "bool text_entry_cancelled();",
        "name": "text_entry_cancelled",
        "method_name": null,
        "unique_global_name": "text_entry_cancelled",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Did the user press escape and cancel the enterring of text?",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True when the use has cancelled text entry",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "python": [
            "def text_entry_cancelled():"
          ],
          "csharp": [
            "public static bool SplashKit.TextEntryCancelled();"
          ],
          "cpp": [
            "bool text_entry_cancelled()"
          ],
          "pascal": [
            "function TextEntryCancelled(): Boolean"
          ]
        }
      },
      {
        "signature": "bool text_entry_cancelled(window wind);",
        "name": "text_entry_cancelled",
        "method_name": null,
        "unique_global_name": "text_entry_cancelled_in_window",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Did the user press escape and cancel the enterring of text?",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True when the use has cancelled text entry",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "The window to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "in_window",
          "group": "input"
        },
        "signatures": {
          "python": [
            "def text_entry_cancelled_in_window(wind):"
          ],
          "csharp": [
            "public static bool SplashKit.TextEntryCancelled(Window wind);"
          ],
          "cpp": [
            "bool text_entry_cancelled(window wind)"
          ],
          "pascal": [
            "function TextEntryCancelled(wind: Window): Boolean"
          ]
        }
      },
      {
        "signature": "string text_input();",
        "name": "text_input",
        "method_name": null,
        "unique_global_name": "text_input",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The text the user has currently enterred on the current window.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "The user's text entry",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "python": [
            "def text_input():"
          ],
          "csharp": [
            "public static string SplashKit.TextInput();"
          ],
          "cpp": [
            "string text_input()"
          ],
          "pascal": [
            "function TextInput(): String"
          ]
        }
      },
      {
        "signature": "string text_input(window wind);",
        "name": "text_input",
        "method_name": null,
        "unique_global_name": "text_input_in_window",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The text the user has currently enterred on the current window.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "The user's text entry",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "The window to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "in_window",
          "group": "input"
        },
        "signatures": {
          "python": [
            "def text_input_in_window(wind):"
          ],
          "csharp": [
            "public static string SplashKit.TextInput(Window wind);"
          ],
          "cpp": [
            "string text_input(window wind)"
          ],
          "pascal": [
            "function TextInput(wind: Window): String"
          ]
        }
      }
    ],
    "typedefs": [
      {
        "signature": "typedef void (key_callback)(int code);",
        "name": "key_callback",
        "description": "The `key_callback` is a function pointer used to register your code with SplashKit\nor keyboard related events. See `register_callback_on_key_down`,\n`register_callback_on_key_up`, and `register_callback_on_key_typed`",
        "brief": null,
        "attributes": {
          "group": "input"
        },
        "is_function_pointer": true,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "code": {
            "type": "int",
            "description": "The `key_code` related to the event.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        }
      }
    ],
    "structs": [

    ],
    "enums": [
      {
        "signature": "enum key_code {UNKNOWN_KEY = 0,BACKSPACE_KEY = 8,TAB_KEY = 9,CLEAR_KEY = 12,RETURN_KEY = 13,PAUSE_KEY = 19,ESCAPE_KEY = 27,SPACE_KEY = 32,EXCLAIM_KEY = 33,DOUBLE_QUOTE_KEY = 34,HASH_KEY = 35,DOLLAR_KEY = 36,AMPERSAND_KEY = 38,QUOTE_KEY = 39,LEFT_PAREN_KEY = 40,RIGHT_PAREN_KEY = 41,ASTERISK_KEY = 42,PLUS_KEY = 43,COMMA_KEY = 44,MINUS_KEY = 45,PERIOD_KEY = 46,SLASH_KEY = 47,NUM_0_KEY = 48,NUM_1_KEY = 49,NUM_2_KEY = 50,NUM_3_KEY = 51,NUM_4_KEY = 52,NUM_5_KEY = 53,NUM_6_KEY = 54,NUM_7_KEY = 55,NUM_8_KEY = 56,NUM_9_KEY = 57,COLON_KEY = 58,SEMI_COLON_KEY = 59,LESS_KEY = 60,EQUALS_KEY = 61,GREATER_KEY = 62,QUESTION_KEY = 63,AT_KEY = 64,LEFT_BRACKET_KEY = 91,BACKSLASH_KEY = 92,RIGHT_BRACKET_KEY = 93,CARET_KEY = 94,UNDERSCORE_KEY = 95,BACKQUOTE_KEY = 96,A_KEY = 97,B_KEY = 98,C_KEY = 99,D_KEY = 100,E_KEY = 101,F_KEY = 102,G_KEY = 103,H_KEY = 104,I_KEY = 105,J_KEY = 106,K_KEY = 107,L_KEY = 108,M_KEY = 109,N_KEY = 110,O_KEY = 111,P_KEY = 112,Q_KEY = 113,R_KEY = 114,S_KEY = 115,T_KEY = 116,U_KEY = 117,V_KEY = 118,W_KEY = 119,X_KEY = 120,Y_KEY = 121,Z_KEY = 122,DELETE_KEY = 127,KEYPAD_0 = 256,KEYPAD_1 = 257,KEYPAD_2 = 258,KEYPAD_3 = 259,KEYPAD_4 = 260,KEYPAD_5 = 261,KEYPAD_6 = 262,KEYPAD_7 = 263,KEYPAD_8 = 264,KEYPAD_9 = 265,KEYPAD_PERIOD = 266,KEYPAD_DIVIDE = 267,KEYPAD_MULTIPLY = 268,KEYPAD_MINUS = 269,KEYPAD_PLUS = 270,KEYPAD_ENTER = 271,KEYPAD_EQUALS = 272,UP_KEY = 273,DOWN_KEY = 274,RIGHT_KEY = 275,LEFT_KEY = 276,INSERT_KEY = 277,HOME_KEY = 278,END_KEY = 279,PAGE_UP_KEY = 280,PAGE_DOWN_KEY = 281,F1_KEY = 282,F2_KEY = 283,F3_KEY = 284,F4_KEY = 285,F5_KEY = 286,F6_KEY = 287,F7_KEY = 288,F8_KEY = 289,F9_KEY = 290,F10_KEY = 291,F11_KEY = 292,F12_KEY = 293,F13_KEY = 294,F14_KEY = 295,F15_KEY = 296,NUM_LOCK_KEY = 300,CAPS_LOCK_KEY = 301,SCROLL_LOCK_KEY = 302,RIGHT_SHIFT_KEY = 303,LEFT_SHIFT_KEY = 304,RIGHT_CTRL_KEY = 305,LEFT_CTRL_KEY = 306,RIGHT_ALT_KEY = 307,LEFT_ALT_KEY = 308,LEFT_SUPER_KEY = 311,RIGHT_SUPER_KEY = 312,MODE_KEY = 313,HELP_KEY = 315,SYS_REQ_KEY = 317,MENU_KEY = 319,POWER_KEY = 320,};",
        "name": "key_code",
        "description": "These are the key codes you can use to check details of keyboard actions.\nSee `key_down`, `key_up`, `key_typed`, and `key_released` functions.\nYou can get a string representation of these keys using `key_name`.",
        "brief": null,
        "constants": {
          "UNKNOWN_KEY": {
            "description": "The unknown key",
            "number": 0
          },
          "BACKSPACE_KEY": {
            "description": "The backspace key",
            "number": 8
          },
          "TAB_KEY": {
            "description": "The tab key",
            "number": 9
          },
          "CLEAR_KEY": {
            "description": "The clear key",
            "number": 12
          },
          "RETURN_KEY": {
            "description": "The return key",
            "number": 13
          },
          "PAUSE_KEY": {
            "description": "The pause key",
            "number": 19
          },
          "ESCAPE_KEY": {
            "description": "The escape key",
            "number": 27
          },
          "SPACE_KEY": {
            "description": "The space key",
            "number": 32
          },
          "EXCLAIM_KEY": {
            "description": "The exclaim key",
            "number": 33
          },
          "DOUBLE_QUOTE_KEY": {
            "description": "The double quote key",
            "number": 34
          },
          "HASH_KEY": {
            "description": "The hash key",
            "number": 35
          },
          "DOLLAR_KEY": {
            "description": "The dollar key",
            "number": 36
          },
          "AMPERSAND_KEY": {
            "description": "The ampersand key",
            "number": 38
          },
          "QUOTE_KEY": {
            "description": "The quote key",
            "number": 39
          },
          "LEFT_PAREN_KEY": {
            "description": "The left paren key",
            "number": 40
          },
          "RIGHT_PAREN_KEY": {
            "description": "The right paren key",
            "number": 41
          },
          "ASTERISK_KEY": {
            "description": "The asterisk key",
            "number": 42
          },
          "PLUS_KEY": {
            "description": "The plus key",
            "number": 43
          },
          "COMMA_KEY": {
            "description": "The comma key",
            "number": 44
          },
          "MINUS_KEY": {
            "description": "The minus key",
            "number": 45
          },
          "PERIOD_KEY": {
            "description": "The period key",
            "number": 46
          },
          "SLASH_KEY": {
            "description": "The slash key",
            "number": 47
          },
          "NUM_0_KEY": {
            "description": "The num 0 key",
            "number": 48
          },
          "NUM_1_KEY": {
            "description": "The num 1 key",
            "number": 49
          },
          "NUM_2_KEY": {
            "description": "The num 2 key",
            "number": 50
          },
          "NUM_3_KEY": {
            "description": "The num 3 key",
            "number": 51
          },
          "NUM_4_KEY": {
            "description": "The num 4 key",
            "number": 52
          },
          "NUM_5_KEY": {
            "description": "The num 5 key",
            "number": 53
          },
          "NUM_6_KEY": {
            "description": "The num 6 key",
            "number": 54
          },
          "NUM_7_KEY": {
            "description": "The num 7 key",
            "number": 55
          },
          "NUM_8_KEY": {
            "description": "The num 8 key",
            "number": 56
          },
          "NUM_9_KEY": {
            "description": "The num 9 key",
            "number": 57
          },
          "COLON_KEY": {
            "description": "The colon key",
            "number": 58
          },
          "SEMI_COLON_KEY": {
            "description": "The semi colon key",
            "number": 59
          },
          "LESS_KEY": {
            "description": "The less key",
            "number": 60
          },
          "EQUALS_KEY": {
            "description": "The equals key",
            "number": 61
          },
          "GREATER_KEY": {
            "description": "The greater key",
            "number": 62
          },
          "QUESTION_KEY": {
            "description": "The question key",
            "number": 63
          },
          "AT_KEY": {
            "description": "The at key",
            "number": 64
          },
          "LEFT_BRACKET_KEY": {
            "description": "The left bracket key",
            "number": 91
          },
          "BACKSLASH_KEY": {
            "description": "The backslash (\\) key",
            "number": 92
          },
          "RIGHT_BRACKET_KEY": {
            "description": "The right bracket key",
            "number": 93
          },
          "CARET_KEY": {
            "description": "The caret (^) key",
            "number": 94
          },
          "UNDERSCORE_KEY": {
            "description": "The underscore (_) key",
            "number": 95
          },
          "BACKQUOTE_KEY": {
            "description": "The backquote (`) key",
            "number": 96
          },
          "A_KEY": {
            "description": "The a key",
            "number": 97
          },
          "B_KEY": {
            "description": "The b key",
            "number": 98
          },
          "C_KEY": {
            "description": "The c key",
            "number": 99
          },
          "D_KEY": {
            "description": "The d key",
            "number": 100
          },
          "E_KEY": {
            "description": "The e key",
            "number": 101
          },
          "F_KEY": {
            "description": "The f key",
            "number": 102
          },
          "G_KEY": {
            "description": "The g key",
            "number": 103
          },
          "H_KEY": {
            "description": "The h key",
            "number": 104
          },
          "I_KEY": {
            "description": "The i key",
            "number": 105
          },
          "J_KEY": {
            "description": "The j key",
            "number": 106
          },
          "K_KEY": {
            "description": "The k key",
            "number": 107
          },
          "L_KEY": {
            "description": "The l key",
            "number": 108
          },
          "M_KEY": {
            "description": "The m key",
            "number": 109
          },
          "N_KEY": {
            "description": "The n key",
            "number": 110
          },
          "O_KEY": {
            "description": "The o key",
            "number": 111
          },
          "P_KEY": {
            "description": "The p key",
            "number": 112
          },
          "Q_KEY": {
            "description": "The q key",
            "number": 113
          },
          "R_KEY": {
            "description": "The r key",
            "number": 114
          },
          "S_KEY": {
            "description": "The s key",
            "number": 115
          },
          "T_KEY": {
            "description": "The t key",
            "number": 116
          },
          "U_KEY": {
            "description": "The u key",
            "number": 117
          },
          "V_KEY": {
            "description": "The v key",
            "number": 118
          },
          "W_KEY": {
            "description": "The w key",
            "number": 119
          },
          "X_KEY": {
            "description": "The x key",
            "number": 120
          },
          "Y_KEY": {
            "description": "The y key",
            "number": 121
          },
          "Z_KEY": {
            "description": "The z key",
            "number": 122
          },
          "DELETE_KEY": {
            "description": "The delete key",
            "number": 127
          },
          "KEYPAD_0": {
            "description": "The keypad 0 key",
            "number": 256
          },
          "KEYPAD_1": {
            "description": "The keypad 1 key",
            "number": 257
          },
          "KEYPAD_2": {
            "description": "The keypad 2 key",
            "number": 258
          },
          "KEYPAD_3": {
            "description": "The keypad 3 key",
            "number": 259
          },
          "KEYPAD_4": {
            "description": "The keypad 4 key",
            "number": 260
          },
          "KEYPAD_5": {
            "description": "The keypad 5 key",
            "number": 261
          },
          "KEYPAD_6": {
            "description": "The keypad 6 key",
            "number": 262
          },
          "KEYPAD_7": {
            "description": "The keypad 7 key",
            "number": 263
          },
          "KEYPAD_8": {
            "description": "The keypad 8 key",
            "number": 264
          },
          "KEYPAD_9": {
            "description": "The keypad 9 key",
            "number": 265
          },
          "KEYPAD_PERIOD": {
            "description": "The keypad period key",
            "number": 266
          },
          "KEYPAD_DIVIDE": {
            "description": "The keypad divide key",
            "number": 267
          },
          "KEYPAD_MULTIPLY": {
            "description": "The keypad multiply key",
            "number": 268
          },
          "KEYPAD_MINUS": {
            "description": "The keypad minus key",
            "number": 269
          },
          "KEYPAD_PLUS": {
            "description": "The keypad plus key",
            "number": 270
          },
          "KEYPAD_ENTER": {
            "description": "The keypad enter key",
            "number": 271
          },
          "KEYPAD_EQUALS": {
            "description": "The keypad equals key",
            "number": 272
          },
          "UP_KEY": {
            "description": "The up key",
            "number": 273
          },
          "DOWN_KEY": {
            "description": "The down key",
            "number": 274
          },
          "RIGHT_KEY": {
            "description": "The right key",
            "number": 275
          },
          "LEFT_KEY": {
            "description": "The left key",
            "number": 276
          },
          "INSERT_KEY": {
            "description": "The insert key",
            "number": 277
          },
          "HOME_KEY": {
            "description": "The home key",
            "number": 278
          },
          "END_KEY": {
            "description": "The end key",
            "number": 279
          },
          "PAGE_UP_KEY": {
            "description": "The page up key",
            "number": 280
          },
          "PAGE_DOWN_KEY": {
            "description": "The page down key",
            "number": 281
          },
          "F1_KEY": {
            "description": "The f1 key",
            "number": 282
          },
          "F2_KEY": {
            "description": "The f2 key",
            "number": 283
          },
          "F3_KEY": {
            "description": "The f3 key",
            "number": 284
          },
          "F4_KEY": {
            "description": "The f4 key",
            "number": 285
          },
          "F5_KEY": {
            "description": "The f5 key",
            "number": 286
          },
          "F6_KEY": {
            "description": "The f6 key",
            "number": 287
          },
          "F7_KEY": {
            "description": "The f7 key",
            "number": 288
          },
          "F8_KEY": {
            "description": "The f8 key",
            "number": 289
          },
          "F9_KEY": {
            "description": "The f9 key",
            "number": 290
          },
          "F10_KEY": {
            "description": "The f10 key",
            "number": 291
          },
          "F11_KEY": {
            "description": "The f11 key",
            "number": 292
          },
          "F12_KEY": {
            "description": "The f12 key",
            "number": 293
          },
          "F13_KEY": {
            "description": "The f13 key",
            "number": 294
          },
          "F14_KEY": {
            "description": "The f14 key",
            "number": 295
          },
          "F15_KEY": {
            "description": "The f15 key",
            "number": 296
          },
          "NUM_LOCK_KEY": {
            "description": "The num lock key",
            "number": 300
          },
          "CAPS_LOCK_KEY": {
            "description": "The caps lock key",
            "number": 301
          },
          "SCROLL_LOCK_KEY": {
            "description": "The scroll lock key",
            "number": 302
          },
          "RIGHT_SHIFT_KEY": {
            "description": "The right shift key",
            "number": 303
          },
          "LEFT_SHIFT_KEY": {
            "description": "The left shift key",
            "number": 304
          },
          "RIGHT_CTRL_KEY": {
            "description": "The right ctrl key",
            "number": 305
          },
          "LEFT_CTRL_KEY": {
            "description": "The left ctrl key",
            "number": 306
          },
          "RIGHT_ALT_KEY": {
            "description": "The right alt or option key",
            "number": 307
          },
          "LEFT_ALT_KEY": {
            "description": "The left alt or option key",
            "number": 308
          },
          "LEFT_SUPER_KEY": {
            "description": "The left super (windows or command) key",
            "number": 311
          },
          "RIGHT_SUPER_KEY": {
            "description": "The right super (windows or command) key",
            "number": 312
          },
          "MODE_KEY": {
            "description": "The mode key",
            "number": 313
          },
          "HELP_KEY": {
            "description": "The help key",
            "number": 315
          },
          "SYS_REQ_KEY": {
            "description": "The sys req key",
            "number": 317
          },
          "MENU_KEY": {
            "description": "The menu key",
            "number": 319
          },
          "POWER_KEY": {
            "description": "The power key",
            "number": 320
          }
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "python": "public enum {key_code.unknown_key = 0, key_code.backspace_key = 8, key_code.tab_key = 9, key_code.clear_key = 12, key_code.return_key = 13, key_code.pause_key = 19, key_code.escape_key = 27, key_code.space_key = 32, key_code.exclaim_key = 33, key_code.double_quote_key = 34, key_code.hash_key = 35, key_code.dollar_key = 36, key_code.ampersand_key = 38, key_code.quote_key = 39, key_code.left_paren_key = 40, key_code.right_paren_key = 41, key_code.asterisk_key = 42, key_code.plus_key = 43, key_code.comma_key = 44, key_code.minus_key = 45, key_code.period_key = 46, key_code.slash_key = 47, key_code.num_0_key = 48, key_code.num_1_key = 49, key_code.num_2_key = 50, key_code.num_3_key = 51, key_code.num_4_key = 52, key_code.num_5_key = 53, key_code.num_6_key = 54, key_code.num_7_key = 55, key_code.num_8_key = 56, key_code.num_9_key = 57, key_code.colon_key = 58, key_code.semi_colon_key = 59, key_code.less_key = 60, key_code.equals_key = 61, key_code.greater_key = 62, key_code.question_key = 63, key_code.at_key = 64, key_code.left_bracket_key = 91, key_code.backslash_key = 92, key_code.right_bracket_key = 93, key_code.caret_key = 94, key_code.underscore_key = 95, key_code.backquote_key = 96, key_code.a_key = 97, key_code.b_key = 98, key_code.c_key = 99, key_code.d_key = 100, key_code.e_key = 101, key_code.f_key = 102, key_code.g_key = 103, key_code.h_key = 104, key_code.i_key = 105, key_code.j_key = 106, key_code.k_key = 107, key_code.l_key = 108, key_code.m_key = 109, key_code.n_key = 110, key_code.o_key = 111, key_code.p_key = 112, key_code.q_key = 113, key_code.r_key = 114, key_code.s_key = 115, key_code.t_key = 116, key_code.u_key = 117, key_code.v_key = 118, key_code.w_key = 119, key_code.x_key = 120, key_code.y_key = 121, key_code.z_key = 122, key_code.delete_key = 127, key_code.keypad_0 = 256, key_code.keypad_1 = 257, key_code.keypad_2 = 258, key_code.keypad_3 = 259, key_code.keypad_4 = 260, key_code.keypad_5 = 261, key_code.keypad_6 = 262, key_code.keypad_7 = 263, key_code.keypad_8 = 264, key_code.keypad_9 = 265, key_code.keypad_period = 266, key_code.keypad_divide = 267, key_code.keypad_multiply = 268, key_code.keypad_minus = 269, key_code.keypad_plus = 270, key_code.keypad_enter = 271, key_code.keypad_equals = 272, key_code.up_key = 273, key_code.down_key = 274, key_code.right_key = 275, key_code.left_key = 276, key_code.insert_key = 277, key_code.home_key = 278, key_code.end_key = 279, key_code.page_up_key = 280, key_code.page_down_key = 281, key_code.f1_key = 282, key_code.f2_key = 283, key_code.f3_key = 284, key_code.f4_key = 285, key_code.f5_key = 286, key_code.f6_key = 287, key_code.f7_key = 288, key_code.f8_key = 289, key_code.f9_key = 290, key_code.f10_key = 291, key_code.f11_key = 292, key_code.f12_key = 293, key_code.f13_key = 294, key_code.f14_key = 295, key_code.f15_key = 296, key_code.num_lock_key = 300, key_code.caps_lock_key = 301, key_code.scroll_lock_key = 302, key_code.right_shift_key = 303, key_code.left_shift_key = 304, key_code.right_ctrl_key = 305, key_code.left_ctrl_key = 306, key_code.right_alt_key = 307, key_code.left_alt_key = 308, key_code.left_super_key = 311, key_code.right_super_key = 312, key_code.mode_key = 313, key_code.help_key = 315, key_code.sys_req_key = 317, key_code.menu_key = 319, key_code.power_key = 320}",
          "csharp": "public enum {KeyCode.UnknownKey = 0, KeyCode.BackspaceKey = 8, KeyCode.TabKey = 9, KeyCode.ClearKey = 12, KeyCode.ReturnKey = 13, KeyCode.PauseKey = 19, KeyCode.EscapeKey = 27, KeyCode.SpaceKey = 32, KeyCode.ExclaimKey = 33, KeyCode.DoubleQuoteKey = 34, KeyCode.HashKey = 35, KeyCode.DollarKey = 36, KeyCode.AmpersandKey = 38, KeyCode.QuoteKey = 39, KeyCode.LeftParenKey = 40, KeyCode.RightParenKey = 41, KeyCode.AsteriskKey = 42, KeyCode.PlusKey = 43, KeyCode.CommaKey = 44, KeyCode.MinusKey = 45, KeyCode.PeriodKey = 46, KeyCode.SlashKey = 47, KeyCode.Num0Key = 48, KeyCode.Num1Key = 49, KeyCode.Num2Key = 50, KeyCode.Num3Key = 51, KeyCode.Num4Key = 52, KeyCode.Num5Key = 53, KeyCode.Num6Key = 54, KeyCode.Num7Key = 55, KeyCode.Num8Key = 56, KeyCode.Num9Key = 57, KeyCode.ColonKey = 58, KeyCode.SemiColonKey = 59, KeyCode.LessKey = 60, KeyCode.EqualsKey = 61, KeyCode.GreaterKey = 62, KeyCode.QuestionKey = 63, KeyCode.AtKey = 64, KeyCode.LeftBracketKey = 91, KeyCode.BackslashKey = 92, KeyCode.RightBracketKey = 93, KeyCode.CaretKey = 94, KeyCode.UnderscoreKey = 95, KeyCode.BackquoteKey = 96, KeyCode.AKey = 97, KeyCode.BKey = 98, KeyCode.CKey = 99, KeyCode.DKey = 100, KeyCode.EKey = 101, KeyCode.FKey = 102, KeyCode.GKey = 103, KeyCode.HKey = 104, KeyCode.IKey = 105, KeyCode.JKey = 106, KeyCode.KKey = 107, KeyCode.LKey = 108, KeyCode.MKey = 109, KeyCode.NKey = 110, KeyCode.OKey = 111, KeyCode.PKey = 112, KeyCode.QKey = 113, KeyCode.RKey = 114, KeyCode.SKey = 115, KeyCode.TKey = 116, KeyCode.UKey = 117, KeyCode.VKey = 118, KeyCode.WKey = 119, KeyCode.XKey = 120, KeyCode.YKey = 121, KeyCode.ZKey = 122, KeyCode.DeleteKey = 127, KeyCode.Keypad0 = 256, KeyCode.Keypad1 = 257, KeyCode.Keypad2 = 258, KeyCode.Keypad3 = 259, KeyCode.Keypad4 = 260, KeyCode.Keypad5 = 261, KeyCode.Keypad6 = 262, KeyCode.Keypad7 = 263, KeyCode.Keypad8 = 264, KeyCode.Keypad9 = 265, KeyCode.KeypadPeriod = 266, KeyCode.KeypadDivide = 267, KeyCode.KeypadMultiply = 268, KeyCode.KeypadMinus = 269, KeyCode.KeypadPlus = 270, KeyCode.KeypadEnter = 271, KeyCode.KeypadEquals = 272, KeyCode.UpKey = 273, KeyCode.DownKey = 274, KeyCode.RightKey = 275, KeyCode.LeftKey = 276, KeyCode.InsertKey = 277, KeyCode.HomeKey = 278, KeyCode.EndKey = 279, KeyCode.PageUpKey = 280, KeyCode.PageDownKey = 281, KeyCode.F1Key = 282, KeyCode.F2Key = 283, KeyCode.F3Key = 284, KeyCode.F4Key = 285, KeyCode.F5Key = 286, KeyCode.F6Key = 287, KeyCode.F7Key = 288, KeyCode.F8Key = 289, KeyCode.F9Key = 290, KeyCode.F10Key = 291, KeyCode.F11Key = 292, KeyCode.F12Key = 293, KeyCode.F13Key = 294, KeyCode.F14Key = 295, KeyCode.F15Key = 296, KeyCode.NumLockKey = 300, KeyCode.CapsLockKey = 301, KeyCode.ScrollLockKey = 302, KeyCode.RightShiftKey = 303, KeyCode.LeftShiftKey = 304, KeyCode.RightCtrlKey = 305, KeyCode.LeftCtrlKey = 306, KeyCode.RightAltKey = 307, KeyCode.LeftAltKey = 308, KeyCode.LeftSuperKey = 311, KeyCode.RightSuperKey = 312, KeyCode.ModeKey = 313, KeyCode.HelpKey = 315, KeyCode.SysReqKey = 317, KeyCode.MenuKey = 319, KeyCode.PowerKey = 320}",
          "cpp": "class key_code {UNKNOWN_KEY = 0, BACKSPACE_KEY = 8, TAB_KEY = 9, CLEAR_KEY = 12, RETURN_KEY = 13, PAUSE_KEY = 19, ESCAPE_KEY = 27, SPACE_KEY = 32, EXCLAIM_KEY = 33, DOUBLE_QUOTE_KEY = 34, HASH_KEY = 35, DOLLAR_KEY = 36, AMPERSAND_KEY = 38, QUOTE_KEY = 39, LEFT_PAREN_KEY = 40, RIGHT_PAREN_KEY = 41, ASTERISK_KEY = 42, PLUS_KEY = 43, COMMA_KEY = 44, MINUS_KEY = 45, PERIOD_KEY = 46, SLASH_KEY = 47, NUM_0_KEY = 48, NUM_1_KEY = 49, NUM_2_KEY = 50, NUM_3_KEY = 51, NUM_4_KEY = 52, NUM_5_KEY = 53, NUM_6_KEY = 54, NUM_7_KEY = 55, NUM_8_KEY = 56, NUM_9_KEY = 57, COLON_KEY = 58, SEMI_COLON_KEY = 59, LESS_KEY = 60, EQUALS_KEY = 61, GREATER_KEY = 62, QUESTION_KEY = 63, AT_KEY = 64, LEFT_BRACKET_KEY = 91, BACKSLASH_KEY = 92, RIGHT_BRACKET_KEY = 93, CARET_KEY = 94, UNDERSCORE_KEY = 95, BACKQUOTE_KEY = 96, A_KEY = 97, B_KEY = 98, C_KEY = 99, D_KEY = 100, E_KEY = 101, F_KEY = 102, G_KEY = 103, H_KEY = 104, I_KEY = 105, J_KEY = 106, K_KEY = 107, L_KEY = 108, M_KEY = 109, N_KEY = 110, O_KEY = 111, P_KEY = 112, Q_KEY = 113, R_KEY = 114, S_KEY = 115, T_KEY = 116, U_KEY = 117, V_KEY = 118, W_KEY = 119, X_KEY = 120, Y_KEY = 121, Z_KEY = 122, DELETE_KEY = 127, KEYPAD_0 = 256, KEYPAD_1 = 257, KEYPAD_2 = 258, KEYPAD_3 = 259, KEYPAD_4 = 260, KEYPAD_5 = 261, KEYPAD_6 = 262, KEYPAD_7 = 263, KEYPAD_8 = 264, KEYPAD_9 = 265, KEYPAD_PERIOD = 266, KEYPAD_DIVIDE = 267, KEYPAD_MULTIPLY = 268, KEYPAD_MINUS = 269, KEYPAD_PLUS = 270, KEYPAD_ENTER = 271, KEYPAD_EQUALS = 272, UP_KEY = 273, DOWN_KEY = 274, RIGHT_KEY = 275, LEFT_KEY = 276, INSERT_KEY = 277, HOME_KEY = 278, END_KEY = 279, PAGE_UP_KEY = 280, PAGE_DOWN_KEY = 281, F1_KEY = 282, F2_KEY = 283, F3_KEY = 284, F4_KEY = 285, F5_KEY = 286, F6_KEY = 287, F7_KEY = 288, F8_KEY = 289, F9_KEY = 290, F10_KEY = 291, F11_KEY = 292, F12_KEY = 293, F13_KEY = 294, F14_KEY = 295, F15_KEY = 296, NUM_LOCK_KEY = 300, CAPS_LOCK_KEY = 301, SCROLL_LOCK_KEY = 302, RIGHT_SHIFT_KEY = 303, LEFT_SHIFT_KEY = 304, RIGHT_CTRL_KEY = 305, LEFT_CTRL_KEY = 306, RIGHT_ALT_KEY = 307, LEFT_ALT_KEY = 308, LEFT_SUPER_KEY = 311, RIGHT_SUPER_KEY = 312, MODE_KEY = 313, HELP_KEY = 315, SYS_REQ_KEY = 317, MENU_KEY = 319, POWER_KEY = 320};",
          "pascal": "public enum {KeyCode.UnknownKey = 0, KeyCode.BackspaceKey = 8, KeyCode.TabKey = 9, KeyCode.ClearKey = 12, KeyCode.ReturnKey = 13, KeyCode.PauseKey = 19, KeyCode.EscapeKey = 27, KeyCode.SpaceKey = 32, KeyCode.ExclaimKey = 33, KeyCode.DoubleQuoteKey = 34, KeyCode.HashKey = 35, KeyCode.DollarKey = 36, KeyCode.AmpersandKey = 38, KeyCode.QuoteKey = 39, KeyCode.LeftParenKey = 40, KeyCode.RightParenKey = 41, KeyCode.AsteriskKey = 42, KeyCode.PlusKey = 43, KeyCode.CommaKey = 44, KeyCode.MinusKey = 45, KeyCode.PeriodKey = 46, KeyCode.SlashKey = 47, KeyCode.Num0Key = 48, KeyCode.Num1Key = 49, KeyCode.Num2Key = 50, KeyCode.Num3Key = 51, KeyCode.Num4Key = 52, KeyCode.Num5Key = 53, KeyCode.Num6Key = 54, KeyCode.Num7Key = 55, KeyCode.Num8Key = 56, KeyCode.Num9Key = 57, KeyCode.ColonKey = 58, KeyCode.SemiColonKey = 59, KeyCode.LessKey = 60, KeyCode.EqualsKey = 61, KeyCode.GreaterKey = 62, KeyCode.QuestionKey = 63, KeyCode.AtKey = 64, KeyCode.LeftBracketKey = 91, KeyCode.BackslashKey = 92, KeyCode.RightBracketKey = 93, KeyCode.CaretKey = 94, KeyCode.UnderscoreKey = 95, KeyCode.BackquoteKey = 96, KeyCode.AKey = 97, KeyCode.BKey = 98, KeyCode.CKey = 99, KeyCode.DKey = 100, KeyCode.EKey = 101, KeyCode.FKey = 102, KeyCode.GKey = 103, KeyCode.HKey = 104, KeyCode.IKey = 105, KeyCode.JKey = 106, KeyCode.KKey = 107, KeyCode.LKey = 108, KeyCode.MKey = 109, KeyCode.NKey = 110, KeyCode.OKey = 111, KeyCode.PKey = 112, KeyCode.QKey = 113, KeyCode.RKey = 114, KeyCode.SKey = 115, KeyCode.TKey = 116, KeyCode.UKey = 117, KeyCode.VKey = 118, KeyCode.WKey = 119, KeyCode.XKey = 120, KeyCode.YKey = 121, KeyCode.ZKey = 122, KeyCode.DeleteKey = 127, KeyCode.Keypad0 = 256, KeyCode.Keypad1 = 257, KeyCode.Keypad2 = 258, KeyCode.Keypad3 = 259, KeyCode.Keypad4 = 260, KeyCode.Keypad5 = 261, KeyCode.Keypad6 = 262, KeyCode.Keypad7 = 263, KeyCode.Keypad8 = 264, KeyCode.Keypad9 = 265, KeyCode.KeypadPeriod = 266, KeyCode.KeypadDivide = 267, KeyCode.KeypadMultiply = 268, KeyCode.KeypadMinus = 269, KeyCode.KeypadPlus = 270, KeyCode.KeypadEnter = 271, KeyCode.KeypadEquals = 272, KeyCode.UpKey = 273, KeyCode.DownKey = 274, KeyCode.RightKey = 275, KeyCode.LeftKey = 276, KeyCode.InsertKey = 277, KeyCode.HomeKey = 278, KeyCode.EndKey = 279, KeyCode.PageUpKey = 280, KeyCode.PageDownKey = 281, KeyCode.F1Key = 282, KeyCode.F2Key = 283, KeyCode.F3Key = 284, KeyCode.F4Key = 285, KeyCode.F5Key = 286, KeyCode.F6Key = 287, KeyCode.F7Key = 288, KeyCode.F8Key = 289, KeyCode.F9Key = 290, KeyCode.F10Key = 291, KeyCode.F11Key = 292, KeyCode.F12Key = 293, KeyCode.F13Key = 294, KeyCode.F14Key = 295, KeyCode.F15Key = 296, KeyCode.NumLockKey = 300, KeyCode.CapsLockKey = 301, KeyCode.ScrollLockKey = 302, KeyCode.RightShiftKey = 303, KeyCode.LeftShiftKey = 304, KeyCode.RightCtrlKey = 305, KeyCode.LeftCtrlKey = 306, KeyCode.RightAltKey = 307, KeyCode.LeftAltKey = 308, KeyCode.LeftSuperKey = 311, KeyCode.RightSuperKey = 312, KeyCode.ModeKey = 313, KeyCode.HelpKey = 315, KeyCode.SysReqKey = 317, KeyCode.MenuKey = 319, KeyCode.PowerKey = 320}"
        }
      },
      {
        "signature": "enum mouse_button {NO_BUTTON,LEFT_BUTTON,MIDDLE_BUTTON,RIGHT_BUTTON,MOUSE_X1_BUTTON,MOUSE_X2_BUTTON};",
        "name": "mouse_button",
        "description": "A mouse can have many different types of buttons. Most people know\nabout the simple Left and Right buttons, but there is also a Middle\nbutton (sometimes part of a scoll wheel), and possible side buttons.",
        "brief": null,
        "constants": {
          "NO_BUTTON": {
            "description": "No mouse button"
          },
          "LEFT_BUTTON": {
            "description": "The left mouse button"
          },
          "MIDDLE_BUTTON": {
            "description": "The middle mouse button"
          },
          "RIGHT_BUTTON": {
            "description": "The right mouse button"
          },
          "MOUSE_X1_BUTTON": {
            "description": "The x1 mouse button"
          },
          "MOUSE_X2_BUTTON": {
            "description": "The x2 mouse button"
          }
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "python": "public enum {mouse_button.no_button = 0, mouse_button.left_button = 0, mouse_button.middle_button = 0, mouse_button.right_button = 0, mouse_button.mouse_x1_button = 0, mouse_button.mouse_x2_button = 0}",
          "csharp": "public enum {MouseButton.NoButton = 0, MouseButton.LeftButton = 0, MouseButton.MiddleButton = 0, MouseButton.RightButton = 0, MouseButton.MouseX1Button = 0, MouseButton.MouseX2Button = 0}",
          "cpp": "class mouse_button {NO_BUTTON = 0, LEFT_BUTTON = 0, MIDDLE_BUTTON = 0, RIGHT_BUTTON = 0, MOUSE_X1_BUTTON = 0, MOUSE_X2_BUTTON = 0};",
          "pascal": "public enum {MouseButton.NoButton = 0, MouseButton.LeftButton = 0, MouseButton.MiddleButton = 0, MouseButton.RightButton = 0, MouseButton.MouseX1Button = 0, MouseButton.MouseX2Button = 0}"
        }
      }
    ],
    "defines": [

    ]
  },
  "interface": {
    "brief": "SplashKit Interface provides functions to create user interfaces, with elements such as draggable panels, buttons and text boxes.",
    "description": "SplashKit`s interface library provides various functions for creating\npanels, and drawing interface elements such as buttons, text boxes, and more",
    "functions": [
      {
        "signature": "void add_column(int width);",
        "name": "add_column",
        "method_name": null,
        "unique_global_name": "add_column",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Adds a column to the current layout with width `width`.\n\n- Positive values of width just specify the width in pixels.\n- 0 means use the default control width - not always a good choice.\n- Negative values specify filling to the right _until_ `width + 1` pixels away from the edge.\n- e.g -1 fills entirely to the right, while -20 leaves a 19 pixel gap on the right.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "width": {
            "type": "int",
            "description": "Width of the column in pixels",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def add_column(width):"
          ],
          "csharp": [
            "public static void SplashKit.AddColumn(int width);"
          ],
          "cpp": [
            "void add_column(int width)"
          ],
          "pascal": [
            "procedure AddColumn(width: Integer)"
          ]
        }
      },
      {
        "signature": "void add_column_relative(double width);",
        "name": "add_column_relative",
        "method_name": null,
        "unique_global_name": "add_column_relative",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Adds a column to the current layout with width `width` percentage of the container's width.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "width": {
            "type": "double",
            "description": "Percentage of the container's width (between 0 and 1)",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def add_column_relative(width):"
          ],
          "csharp": [
            "public static void SplashKit.AddColumnRelative(double width);"
          ],
          "cpp": [
            "void add_column_relative(double width)"
          ],
          "pascal": [
            "procedure AddColumnRelative(width: Double)"
          ]
        }
      },
      {
        "signature": "bool bitmap_button(bitmap bmp);",
        "name": "bitmap_button",
        "method_name": null,
        "unique_global_name": "bitmap_button",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a button with a bitmap in it, and no label.\nReturns whether the button was clicked.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Whether the button was clicked",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to show inside the button",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def bitmap_button(bmp):"
          ],
          "csharp": [
            "public static bool SplashKit.BitmapButton(Bitmap bmp);"
          ],
          "cpp": [
            "bool bitmap_button(bitmap bmp)"
          ],
          "pascal": [
            "function BitmapButton(bmp: Bitmap): Boolean"
          ]
        }
      },
      {
        "signature": "bool bitmap_button(bitmap bmp,const rectangle& rect);",
        "name": "bitmap_button",
        "method_name": null,
        "unique_global_name": "bitmap_button_at_position",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a button with a bitmap in it at a specific position on screen.\nReturns whether the button was clicked.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Whether the button was clicked",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to show inside the button",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to display the button in",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "at_position",
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def bitmap_button_at_position(bmp, rect):"
          ],
          "csharp": [
            "public static bool SplashKit.BitmapButton(Bitmap bmp, Rectangle rect);"
          ],
          "cpp": [
            "bool bitmap_button(bitmap bmp, const rectangle &rect)"
          ],
          "pascal": [
            "function BitmapButton(bmp: Bitmap; const rect: Rectangle): Boolean"
          ]
        }
      },
      {
        "signature": "bool bitmap_button(bitmap bmp,const rectangle& rect,drawing_options opts);",
        "name": "bitmap_button",
        "method_name": null,
        "unique_global_name": "bitmap_button_at_position_with_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a button with a bitmap in it at a specific position on screen.\nReturns whether the button was clicked.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Whether the button was clicked",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to show inside the button",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to display the button in",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "at_position_with_options",
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def bitmap_button_at_position_with_options(bmp, rect, opts):"
          ],
          "csharp": [
            "public static bool SplashKit.BitmapButton(Bitmap bmp, Rectangle rect, DrawingOptions opts);"
          ],
          "cpp": [
            "bool bitmap_button(bitmap bmp, const rectangle &rect, drawing_options opts)"
          ],
          "pascal": [
            "function BitmapButton(bmp: Bitmap; const rect: Rectangle; opts: DrawingOptions): Boolean"
          ]
        }
      },
      {
        "signature": "bool bitmap_button(bitmap bmp,drawing_options opts);",
        "name": "bitmap_button",
        "method_name": null,
        "unique_global_name": "bitmap_button_with_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a button with a bitmap in it, and no label.\nReturns whether the button was clicked.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Whether the button was clicked",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to show inside the button",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "with_options",
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def bitmap_button_with_options(bmp, opts):"
          ],
          "csharp": [
            "public static bool SplashKit.BitmapButton(Bitmap bmp, DrawingOptions opts);"
          ],
          "cpp": [
            "bool bitmap_button(bitmap bmp, drawing_options opts)"
          ],
          "pascal": [
            "function BitmapButton(bmp: Bitmap; opts: DrawingOptions): Boolean"
          ]
        }
      },
      {
        "signature": "bool bitmap_button(const string& label_text,bitmap bmp);",
        "name": "bitmap_button",
        "method_name": null,
        "unique_global_name": "bitmap_button_labeled",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a button with a bitmap in it and a label.\nReturns whether the button was clicked.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Whether the button was clicked",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "label_text": {
            "type": "string",
            "description": "The label to show in front of the button",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to show inside the button",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "labeled",
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def bitmap_button_labeled(label_text, bmp):"
          ],
          "csharp": [
            "public static bool SplashKit.BitmapButton(string labelText, Bitmap bmp);"
          ],
          "cpp": [
            "bool bitmap_button(const string &label_text, bitmap bmp)"
          ],
          "pascal": [
            "function BitmapButton(const labelText: String; bmp: Bitmap): Boolean"
          ]
        }
      },
      {
        "signature": "bool bitmap_button(const string& label_text,bitmap bmp,drawing_options opts);",
        "name": "bitmap_button",
        "method_name": null,
        "unique_global_name": "bitmap_button_labeled_with_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a button with a bitmap in it and a label.\nReturns whether the button was clicked.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Whether the button was clicked",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "label_text": {
            "type": "string",
            "description": "The label to show in front of the button",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to show inside the button",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "labeled_with_options",
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def bitmap_button_labeled_with_options(label_text, bmp, opts):"
          ],
          "csharp": [
            "public static bool SplashKit.BitmapButton(string labelText, Bitmap bmp, DrawingOptions opts);"
          ],
          "cpp": [
            "bool bitmap_button(const string &label_text, bitmap bmp, drawing_options opts)"
          ],
          "pascal": [
            "function BitmapButton(const labelText: String; bmp: Bitmap; opts: DrawingOptions): Boolean"
          ]
        }
      },
      {
        "signature": "bool button(const string& text,const rectangle& rect);",
        "name": "button",
        "method_name": null,
        "unique_global_name": "button_at_position",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a button at a specific position on screen.\nReturns whether the button was clicked.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Whether the button was clicked",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "text": {
            "type": "string",
            "description": "The text to show inside the button",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to display the button in",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "at_position",
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def button_at_position(text, rect):"
          ],
          "csharp": [
            "public static bool SplashKit.Button(string text, Rectangle rect);"
          ],
          "cpp": [
            "bool button(const string &text, const rectangle &rect)"
          ],
          "pascal": [
            "function Button(const text: String; const rect: Rectangle): Boolean"
          ]
        }
      },
      {
        "signature": "bool button(const string& text);",
        "name": "button",
        "method_name": null,
        "unique_global_name": "button",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a button without a label.\nReturns whether the button was clicked.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Whether the button was clicked",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "text": {
            "type": "string",
            "description": "The text to show inside the button",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def button(text):"
          ],
          "csharp": [
            "public static bool SplashKit.Button(string text);"
          ],
          "cpp": [
            "bool button(const string &text)"
          ],
          "pascal": [
            "function Button(const text: String): Boolean"
          ]
        }
      },
      {
        "signature": "bool button(const string& label_text,const string& text);",
        "name": "button",
        "method_name": null,
        "unique_global_name": "button_labeled",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a button with a label.\nReturns whether the button was clicked.\n\nExample usage:\n```c++\n// Test if clicked:\nif (button(\"Button 1\", \"Click me!\"))\n{\n// do stuff..\n}\n```",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Whether the button was clicked",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "label_text": {
            "type": "string",
            "description": "The label to show in front of the button",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "text": {
            "type": "string",
            "description": "The text to show inside the button",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "labeled",
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def button_labeled(label_text, text):"
          ],
          "csharp": [
            "public static bool SplashKit.Button(string labelText, string text);"
          ],
          "cpp": [
            "bool button(const string &label_text, const string &text)"
          ],
          "pascal": [
            "function Button(const labelText: String; const text: String): Boolean"
          ]
        }
      },
      {
        "signature": "bool checkbox(const string& text,const bool& value,const rectangle& rect);",
        "name": "checkbox",
        "method_name": null,
        "unique_global_name": "checkbox_at_position",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a checkbox at a specific position on screen.\nReturns the updated value of the checkbox.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "The updated value of the checkbox",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "text": {
            "type": "string",
            "description": "The text to show next to the checkbox",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "bool",
            "description": "The current value of the checkbox",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to display the checkbox in",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "at_position",
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def checkbox_at_position(text, value, rect):"
          ],
          "csharp": [
            "public static bool SplashKit.Checkbox(string text, bool value, Rectangle rect);"
          ],
          "cpp": [
            "bool checkbox(const string &text, const bool &value, const rectangle &rect)"
          ],
          "pascal": [
            "function Checkbox(const text: String; const value: Boolean; const rect: Rectangle): Boolean"
          ]
        }
      },
      {
        "signature": "bool checkbox(const string& text,const bool& value);",
        "name": "checkbox",
        "method_name": null,
        "unique_global_name": "checkbox",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a checkbox.\nReturns the updated value of the checkbox.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "The updated value of the checkbox",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "text": {
            "type": "string",
            "description": "The text to show next to the checkbox",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "bool",
            "description": "The current value of the checkbox",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def checkbox(text, value):"
          ],
          "csharp": [
            "public static bool SplashKit.Checkbox(string text, bool value);"
          ],
          "cpp": [
            "bool checkbox(const string &text, const bool &value)"
          ],
          "pascal": [
            "function Checkbox(const text: String; const value: Boolean): Boolean"
          ]
        }
      },
      {
        "signature": "bool checkbox(const string& label_text,const string& text,const bool& value);",
        "name": "checkbox",
        "method_name": null,
        "unique_global_name": "checkbox_labeled",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a checkbox with a label.\nReturns the updated value of the checkbox.\n\nExample usage:\n```c++\nmy_bool = checkbox(\"Checkbox 1\", \"Enabled?\", my_bool);\n```",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "The updated value of the checkbox",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "label_text": {
            "type": "string",
            "description": "The label to show in front of the checkbox",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "text": {
            "type": "string",
            "description": "The text to show next to the checkbox",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "bool",
            "description": "The current value of the checkbox",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "labeled",
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def checkbox_labeled(label_text, text, value):"
          ],
          "csharp": [
            "public static bool SplashKit.Checkbox(string labelText, string text, bool value);"
          ],
          "cpp": [
            "bool checkbox(const string &label_text, const string &text, const bool &value)"
          ],
          "pascal": [
            "function Checkbox(const labelText: String; const text: String; const value: Boolean): Boolean"
          ]
        }
      },
      {
        "signature": "color color_slider(const color& clr,const rectangle& rect);",
        "name": "color_slider",
        "method_name": null,
        "unique_global_name": "color_slider_at_position",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a set of RGBA sliders to adjust a color, at a specific position on screen.\nReturns the updated color value of the slider.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "The updated value of the slider",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The current value of the color slider",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to display the slider in.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "at_position",
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def color_slider_at_position(clr, rect):"
          ],
          "csharp": [
            "public static Color SplashKit.ColorSlider(Color clr, Rectangle rect);"
          ],
          "cpp": [
            "color color_slider(const color &clr, const rectangle &rect)"
          ],
          "pascal": [
            "function ColorSlider(const clr: Color; const rect: Rectangle): Color"
          ]
        }
      },
      {
        "signature": "color color_slider(const color& clr);",
        "name": "color_slider",
        "method_name": null,
        "unique_global_name": "color_slider",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a set of RGBA sliders to adjust a color.\nReturns the updated color value of the slider.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "The updated value of the slider",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The current value of the color slider",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def color_slider(clr):"
          ],
          "csharp": [
            "public static Color SplashKit.ColorSlider(Color clr);"
          ],
          "cpp": [
            "color color_slider(const color &clr)"
          ],
          "pascal": [
            "function ColorSlider(const clr: Color): Color"
          ]
        }
      },
      {
        "signature": "color color_slider(const string& label_text,const color& clr);",
        "name": "color_slider",
        "method_name": null,
        "unique_global_name": "color_slider_labeled",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a set of RGBA sliders to adjust a color, with a label.\nReturns the updated color value of the slider.\n\nExample usage:\n```c++\nmy_color = color_slider(\"Player Color\", my_color);\n```",
        "brief": null,
        "return": {
          "type": "color",
          "description": "The updated value of the slider",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "label_text": {
            "type": "string",
            "description": "The label to show in front of the slider",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The current value of the color slider",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "labeled",
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def color_slider_labeled(label_text, clr):"
          ],
          "csharp": [
            "public static Color SplashKit.ColorSlider(string labelText, Color clr);"
          ],
          "cpp": [
            "color color_slider(const string &label_text, const color &clr)"
          ],
          "pascal": [
            "function ColorSlider(const labelText: String; const clr: Color): Color"
          ]
        }
      },
      {
        "signature": "void disable_interface();",
        "name": "disable_interface",
        "method_name": null,
        "unique_global_name": "disable_interface",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Disables the interface temporarily. Elements created after this function will appear disabled and cannot be interacted with.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def disable_interface():"
          ],
          "csharp": [
            "public static void SplashKit.DisableInterface();"
          ],
          "cpp": [
            "void disable_interface()"
          ],
          "pascal": [
            "procedure DisableInterface()"
          ]
        }
      },
      {
        "signature": "void draw_interface();",
        "name": "draw_interface",
        "method_name": null,
        "unique_global_name": "draw_interface",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draws the user interface that all the previous calls (such as `start_panel`, `button`, etc) have created.\n\n**Make sure to call this!** Without calling it, the interface won't be visible.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def draw_interface():"
          ],
          "csharp": [
            "public static void SplashKit.DrawInterface();"
          ],
          "cpp": [
            "void draw_interface()"
          ],
          "pascal": [
            "procedure DrawInterface()"
          ]
        }
      },
      {
        "signature": "void enable_interface();",
        "name": "enable_interface",
        "method_name": null,
        "unique_global_name": "enable_interface",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Re-enables the interface, reverses the effects of disabling the interface.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def enable_interface():"
          ],
          "csharp": [
            "public static void SplashKit.EnableInterface();"
          ],
          "cpp": [
            "void enable_interface()"
          ],
          "pascal": [
            "procedure EnableInterface()"
          ]
        }
      },
      {
        "signature": "void end_inset(const string& name);",
        "name": "end_inset",
        "method_name": null,
        "unique_global_name": "end_inset",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Finishes the creation of an inset area.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The area's name - must match with `start_inset`",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def end_inset(name):"
          ],
          "csharp": [
            "public static void SplashKit.EndInset(string name);"
          ],
          "cpp": [
            "void end_inset(const string &name)"
          ],
          "pascal": [
            "procedure EndInset(const name: String)"
          ]
        }
      },
      {
        "signature": "void end_panel(const string& name);",
        "name": "end_panel",
        "method_name": null,
        "unique_global_name": "end_panel",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Finishes the creation of a panel.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name shown in the panel's titlebar - must match with `start_panel`",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def end_panel(name):"
          ],
          "csharp": [
            "public static void SplashKit.EndPanel(string name);"
          ],
          "cpp": [
            "void end_panel(const string &name)"
          ],
          "pascal": [
            "procedure EndPanel(const name: String)"
          ]
        }
      },
      {
        "signature": "void end_popup(const string& name);",
        "name": "end_popup",
        "method_name": null,
        "unique_global_name": "end_popup",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Finishes the creation of a popup.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The popup's name - must match with `start_popup`",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def end_popup(name):"
          ],
          "csharp": [
            "public static void SplashKit.EndPopup(string name);"
          ],
          "cpp": [
            "void end_popup(const string &name)"
          ],
          "pascal": [
            "procedure EndPopup(const name: String)"
          ]
        }
      },
      {
        "signature": "void end_treenode(const string& label_text);",
        "name": "end_treenode",
        "method_name": null,
        "unique_global_name": "end_treenode",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Finishes the creation of a tree node.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "label_text": {
            "type": "string",
            "description": "The node's name - must match with `start_treenode`",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def end_treenode(label_text):"
          ],
          "csharp": [
            "public static void SplashKit.EndTreenode(string labelText);"
          ],
          "cpp": [
            "void end_treenode(const string &label_text)"
          ],
          "pascal": [
            "procedure EndTreenode(const labelText: String)"
          ]
        }
      },
      {
        "signature": "void enter_column();",
        "name": "enter_column",
        "method_name": null,
        "unique_global_name": "enter_column",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Begins placing elements inside the current column. Must be paired with a call to `leave_column`.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def enter_column():"
          ],
          "csharp": [
            "public static void SplashKit.EnterColumn();"
          ],
          "cpp": [
            "void enter_column()"
          ],
          "pascal": [
            "procedure EnterColumn()"
          ]
        }
      },
      {
        "signature": "int get_interface_label_width();",
        "name": "get_interface_label_width",
        "method_name": null,
        "unique_global_name": "get_interface_label_width",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the width of element labels.\n\nDefault is 60 pixels.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The width of labels",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def get_interface_label_width():"
          ],
          "csharp": [
            "public static int SplashKit.GetInterfaceLabelWidth();"
          ],
          "cpp": [
            "int get_interface_label_width()"
          ],
          "pascal": [
            "function GetInterfaceLabelWidth(): Integer"
          ]
        }
      },
      {
        "signature": "bool header(const string& label_text);",
        "name": "header",
        "method_name": null,
        "unique_global_name": "header",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a collapsable header with a label.\nReturns whether the header is expanded or not.\n\nNote: Unlike `start_panel` and other similar functions, there is\nno need to 'end' this one. Example usage:\n```c++\nif (header(\"Section A\"))\n{\n// elements inside header go here\n}\n```",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Whether the header is expanded or not",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "label_text": {
            "type": "string",
            "description": "The label to show in the header",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def header(label_text):"
          ],
          "csharp": [
            "public static bool SplashKit.Header(string labelText);"
          ],
          "cpp": [
            "bool header(const string &label_text)"
          ],
          "pascal": [
            "function Header(const labelText: String): Boolean"
          ]
        }
      },
      {
        "signature": "color hsb_color_slider(const color& clr,const rectangle& rect);",
        "name": "hsb_color_slider",
        "method_name": null,
        "unique_global_name": "hsb_color_slider_at_position",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a set of HSBA (hue, saturation, brightness, alpha) sliders to adjust a color, at a specific position on screen.\nReturns the updated color value of the slider.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "The updated value of the slider",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The current value of the color slider",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to display the slider in.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "at_position",
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def hsb_color_slider_at_position(clr, rect):"
          ],
          "csharp": [
            "public static Color SplashKit.HSBColorSlider(Color clr, Rectangle rect);"
          ],
          "cpp": [
            "color hsb_color_slider(const color &clr, const rectangle &rect)"
          ],
          "pascal": [
            "function HSBColorSlider(const clr: Color; const rect: Rectangle): Color"
          ]
        }
      },
      {
        "signature": "color hsb_color_slider(const color& clr);",
        "name": "hsb_color_slider",
        "method_name": null,
        "unique_global_name": "hsb_color_slider",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a set of HSBA (hue, saturation, brightness, alpha) sliders to adjust a color.\nReturns the updated color value of the slider.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "The updated value of the slider",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The current value of the color slider",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def hsb_color_slider(clr):"
          ],
          "csharp": [
            "public static Color SplashKit.HSBColorSlider(Color clr);"
          ],
          "cpp": [
            "color hsb_color_slider(const color &clr)"
          ],
          "pascal": [
            "function HSBColorSlider(const clr: Color): Color"
          ]
        }
      },
      {
        "signature": "color hsb_color_slider(const string& label_text,const color& clr);",
        "name": "hsb_color_slider",
        "method_name": null,
        "unique_global_name": "hsb_color_slider_labeled",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a set of HSBA (hue, saturation, brightness, alpha) sliders to adjust a color, with a label.\nReturns the updated color value of the slider.\n\nExample usage:\n```c++\nmy_color = hsb_color_slider(\"Player Color\", my_color);\n```",
        "brief": null,
        "return": {
          "type": "color",
          "description": "The updated value of the slider",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "label_text": {
            "type": "string",
            "description": "The label to show in front of the slider",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The current value of the color slider",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "labeled",
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def hsb_color_slider_labeled(label_text, clr):"
          ],
          "csharp": [
            "public static Color SplashKit.HSBColorSlider(string labelText, Color clr);"
          ],
          "cpp": [
            "color hsb_color_slider(const string &label_text, const color &clr)"
          ],
          "pascal": [
            "function HSBColorSlider(const labelText: String; const clr: Color): Color"
          ]
        }
      },
      {
        "signature": "bool interface_enabled();",
        "name": "interface_enabled",
        "method_name": null,
        "unique_global_name": "interface_enabled",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns if the interface is currently enabled or not.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Whether the interface is currently enabled or not",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def interface_enabled():"
          ],
          "csharp": [
            "public static bool SplashKit.InterfaceEnabled();"
          ],
          "cpp": [
            "bool interface_enabled()"
          ],
          "pascal": [
            "function InterfaceEnabled(): Boolean"
          ]
        }
      },
      {
        "signature": "void interface_style_panel(const rectangle& initial_rectangle);",
        "name": "interface_style_panel",
        "method_name": null,
        "unique_global_name": "interface_style_panel",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "A utility function to show a 'Style Panel', which will allows you to experiment with different interface styles.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "initial_rectangle": {
            "type": "rectangle",
            "description": "The initial position/size the panel starts off in",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def interface_style_panel(initial_rectangle):"
          ],
          "csharp": [
            "public static void SplashKit.InterfaceStylePanel(Rectangle initialRectangle);"
          ],
          "cpp": [
            "void interface_style_panel(const rectangle &initial_rectangle)"
          ],
          "pascal": [
            "procedure InterfaceStylePanel(const initialRectangle: Rectangle)"
          ]
        }
      },
      {
        "signature": "void label_element(const string& text);",
        "name": "label_element",
        "method_name": null,
        "unique_global_name": "label_element",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a label with the given text.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "text": {
            "type": "string",
            "description": "The label to show",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def label_element(text):"
          ],
          "csharp": [
            "public static void SplashKit.LabelElement(string text);"
          ],
          "cpp": [
            "void label_element(const string &text)"
          ],
          "pascal": [
            "procedure LabelElement(const text: String)"
          ]
        }
      },
      {
        "signature": "void label_element(const string& text,const rectangle& rect);",
        "name": "label_element",
        "method_name": null,
        "unique_global_name": "label_element_at_position",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a label at a specific position on screen.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "text": {
            "type": "string",
            "description": "The label to show",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to display the label in",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "at_position",
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def label_element_at_position(text, rect):"
          ],
          "csharp": [
            "public static void SplashKit.LabelElement(string text, Rectangle rect);"
          ],
          "cpp": [
            "void label_element(const string &text, const rectangle &rect)"
          ],
          "pascal": [
            "procedure LabelElement(const text: String; const rect: Rectangle)"
          ]
        }
      },
      {
        "signature": "bool last_element_changed();",
        "name": "last_element_changed",
        "method_name": null,
        "unique_global_name": "last_element_changed",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns if the last created element was changed at all (such as dragged, typed in, etc)",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Whether the last created element was changed",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def last_element_changed():"
          ],
          "csharp": [
            "public static bool SplashKit.LastElementChanged();"
          ],
          "cpp": [
            "bool last_element_changed()"
          ],
          "pascal": [
            "function LastElementChanged(): Boolean"
          ]
        }
      },
      {
        "signature": "bool last_element_confirmed();",
        "name": "last_element_confirmed",
        "method_name": null,
        "unique_global_name": "last_element_confirmed",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns if the last created element was 'confirmed' (such as clicking a button, or hitting enter in a text box)",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Whether the last created element was confirmed",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def last_element_confirmed():"
          ],
          "csharp": [
            "public static bool SplashKit.LastElementConfirmed();"
          ],
          "cpp": [
            "bool last_element_confirmed()"
          ],
          "pascal": [
            "function LastElementConfirmed(): Boolean"
          ]
        }
      },
      {
        "signature": "void leave_column();",
        "name": "leave_column",
        "method_name": null,
        "unique_global_name": "leave_column",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Stops placing elements inside the current column and moves to the next one.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def leave_column():"
          ],
          "csharp": [
            "public static void SplashKit.LeaveColumn();"
          ],
          "cpp": [
            "void leave_column()"
          ],
          "pascal": [
            "procedure LeaveColumn()"
          ]
        }
      },
      {
        "signature": "float number_box(const float& value,float step,const rectangle& rect);",
        "name": "number_box",
        "method_name": null,
        "unique_global_name": "number_box_at_position",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a number entry box at a specific position on screen.\nReturns the updated value of the number box.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The updated value of the slider",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "value": {
            "type": "float",
            "description": "The current value of the number box",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "step": {
            "type": "float",
            "description": "The amount incremented when dragging on the box",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to display the slider in",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "at_position",
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def number_box_at_position(value, step, rect):"
          ],
          "csharp": [
            "public static float SplashKit.NumberBox(float value, float step, Rectangle rect);"
          ],
          "cpp": [
            "float number_box(const float &value, float step, const rectangle &rect)"
          ],
          "pascal": [
            "function NumberBox(const value: Single; step: Single; const rect: Rectangle): Single"
          ]
        }
      },
      {
        "signature": "float number_box(const float& value,float step);",
        "name": "number_box",
        "method_name": null,
        "unique_global_name": "number_box",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a number entry box with a label.\nReturns the updated value of the number box.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The updated value of the slider",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "value": {
            "type": "float",
            "description": "The current value of the number box",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "step": {
            "type": "float",
            "description": "The amount incremented when dragging on the box",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def number_box(value, step):"
          ],
          "csharp": [
            "public static float SplashKit.NumberBox(float value, float step);"
          ],
          "cpp": [
            "float number_box(const float &value, float step)"
          ],
          "pascal": [
            "function NumberBox(const value: Single; step: Single): Single"
          ]
        }
      },
      {
        "signature": "float number_box(const string& label_text,const float& value,float step);",
        "name": "number_box",
        "method_name": null,
        "unique_global_name": "number_box_labeled",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a number entry box with a label.\nReturns the updated value of the number box.\n\nExample usage:\n```c++\nmy_float = number_box(\"Percentage\", my_float, 1);\n```",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The updated value of the slider",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "label_text": {
            "type": "string",
            "description": "The label to show in front of the number box",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "float",
            "description": "The current value of the number box",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "step": {
            "type": "float",
            "description": "The amount incremented when dragging on the box",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "labeled",
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def number_box_labeled(label_text, value, step):"
          ],
          "csharp": [
            "public static float SplashKit.NumberBox(string labelText, float value, float step);"
          ],
          "cpp": [
            "float number_box(const string &label_text, const float &value, float step)"
          ],
          "pascal": [
            "function NumberBox(const labelText: String; const value: Single; step: Single): Single"
          ]
        }
      },
      {
        "signature": "void open_popup(const string& name);",
        "name": "open_popup",
        "method_name": null,
        "unique_global_name": "open_popup",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Makes the popup named `name` open/popup at the cursor's position.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The popup's name. Must match with the same name used in `start_popup`",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def open_popup(name):"
          ],
          "csharp": [
            "public static void SplashKit.OpenPopup(string name);"
          ],
          "cpp": [
            "void open_popup(const string &name)"
          ],
          "pascal": [
            "procedure OpenPopup(const name: String)"
          ]
        }
      },
      {
        "signature": "void paragraph(const string& text);",
        "name": "paragraph",
        "method_name": null,
        "unique_global_name": "paragraph",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a paragraph of text that auto-wraps.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "text": {
            "type": "string",
            "description": "The text to show",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def paragraph(text):"
          ],
          "csharp": [
            "public static void SplashKit.Paragraph(string text);"
          ],
          "cpp": [
            "void paragraph(const string &text)"
          ],
          "pascal": [
            "procedure Paragraph(const text: String)"
          ]
        }
      },
      {
        "signature": "void paragraph(const string& text,const rectangle& rect);",
        "name": "paragraph",
        "method_name": null,
        "unique_global_name": "paragraph_at_position",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a paragraph of text that auto-wraps at a specific position on screen.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "text": {
            "type": "string",
            "description": "The text to show",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to display the label in",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "at_position",
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def paragraph_at_position(text, rect):"
          ],
          "csharp": [
            "public static void SplashKit.Paragraph(string text, Rectangle rect);"
          ],
          "cpp": [
            "void paragraph(const string &text, const rectangle &rect)"
          ],
          "pascal": [
            "procedure Paragraph(const text: String; const rect: Rectangle)"
          ]
        }
      },
      {
        "signature": "void reset_layout();",
        "name": "reset_layout",
        "method_name": null,
        "unique_global_name": "reset_layout",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Resets to the default layout of a single column with default height.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def reset_layout():"
          ],
          "csharp": [
            "public static void SplashKit.ResetLayout();"
          ],
          "cpp": [
            "void reset_layout()"
          ],
          "pascal": [
            "procedure ResetLayout()"
          ]
        }
      },
      {
        "signature": "void set_interface_accent_color(color clr,float contrast);",
        "name": "set_interface_accent_color",
        "method_name": null,
        "unique_global_name": "set_interface_accent_color",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the color of accents in the interface, and the contrast of how strongly they appear when hovering/interacting.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of accents",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "contrast": {
            "type": "float",
            "description": "The strength of how much the accents show (between 0 and 1)",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def set_interface_accent_color(clr, contrast):"
          ],
          "csharp": [
            "public static void SplashKit.SetInterfaceAccentColor(Color clr, float contrast);"
          ],
          "cpp": [
            "void set_interface_accent_color(color clr, float contrast)"
          ],
          "pascal": [
            "procedure SetInterfaceAccentColor(clr: Color; contrast: Single)"
          ]
        }
      },
      {
        "signature": "void set_interface_border_color(color clr);",
        "name": "set_interface_border_color",
        "method_name": null,
        "unique_global_name": "set_interface_border_color",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the interface's border color.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color to set borders to",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def set_interface_border_color(clr):"
          ],
          "csharp": [
            "public static void SplashKit.SetInterfaceBorderColor(Color clr);"
          ],
          "cpp": [
            "void set_interface_border_color(color clr)"
          ],
          "pascal": [
            "procedure SetInterfaceBorderColor(clr: Color)"
          ]
        }
      },
      {
        "signature": "void set_interface_colors_auto(color main_clr,color accent_clr,float contrast,float accent_contrast,float border_contrast);",
        "name": "set_interface_colors_auto",
        "method_name": null,
        "unique_global_name": "set_interface_colors_auto",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "A convenience function to set the majority of the interface's colors in one go.\nSome colors will be automatically chosen based on the parameters (such as text color).",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "main_clr": {
            "type": "color",
            "description": "The main color of the interface - also decides if the interface is light or dark mode",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "accent_clr": {
            "type": "color",
            "description": "The color used to accent the interface - this will appear in highlighted areas",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "contrast": {
            "type": "float",
            "description": "The contrast between the frames of elements/containers and their internal elements",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "accent_contrast": {
            "type": "float",
            "description": "How strongly the accent color is used, for instance when highlighting elements",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "border_contrast": {
            "type": "float",
            "description": "Simply the opacity of the borders",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def set_interface_colors_auto(main_clr, accent_clr, contrast, accent_contrast, border_contrast):"
          ],
          "csharp": [
            "public static void SplashKit.SetInterfaceColorsAuto(Color mainClr, Color accentClr, float contrast, float accentContrast, float borderContrast);"
          ],
          "cpp": [
            "void set_interface_colors_auto(color main_clr, color accent_clr, float contrast, float accent_contrast, float border_contrast)"
          ],
          "pascal": [
            "procedure SetInterfaceColorsAuto(mainClr: Color; accentClr: Color; contrast: Single; accentContrast: Single; borderContrast: Single)"
          ]
        }
      },
      {
        "signature": "void set_interface_element_color(color clr,float contrast);",
        "name": "set_interface_element_color",
        "method_name": null,
        "unique_global_name": "set_interface_element_color",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the main color of elements in the interface, and the contrast between their frame and internal pieces.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of elements",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "contrast": {
            "type": "float",
            "description": "The contrast between the frame of elements and their internal pieces (between 0 and 1)",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def set_interface_element_color(clr, contrast):"
          ],
          "csharp": [
            "public static void SplashKit.SetInterfaceElementColor(Color clr, float contrast);"
          ],
          "cpp": [
            "void set_interface_element_color(color clr, float contrast)"
          ],
          "pascal": [
            "procedure SetInterfaceElementColor(clr: Color; contrast: Single)"
          ]
        }
      },
      {
        "signature": "void set_interface_element_shadows(int radius,color clr,point_2d offset);",
        "name": "set_interface_element_shadows",
        "method_name": null,
        "unique_global_name": "set_interface_element_shadows",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the style of element's shadows. Use a fully transparent color to disable them.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "radius": {
            "type": "int",
            "description": "The radius of the shadow's blur",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the shadows (commonly black, but can do coloured and semi-transparent too)",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "offset": {
            "type": "point_2d",
            "description": "The offset in x/y coordinates of the shadows from their casting elements",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def set_interface_element_shadows(radius, clr, offset):"
          ],
          "csharp": [
            "public static void SplashKit.SetInterfaceElementShadows(int radius, Color clr, Point2D offset);"
          ],
          "cpp": [
            "void set_interface_element_shadows(int radius, color clr, point_2d offset)"
          ],
          "pascal": [
            "procedure SetInterfaceElementShadows(radius: Integer; clr: Color; offset: Point2D)"
          ]
        }
      },
      {
        "signature": "void set_interface_font(const string& fnt);",
        "name": "set_interface_font",
        "method_name": null,
        "unique_global_name": "set_interface_font_font_as_string",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the interface's font.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "fnt": {
            "type": "string",
            "description": "The name of the font to be used",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "font_as_string",
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def set_interface_font_font_as_string(fnt):"
          ],
          "csharp": [
            "public static void SplashKit.SetInterfaceFont(string fnt);"
          ],
          "cpp": [
            "void set_interface_font(const string &fnt)"
          ],
          "pascal": [
            "procedure SetInterfaceFont(const fnt: String)"
          ]
        }
      },
      {
        "signature": "void set_interface_font(font fnt);",
        "name": "set_interface_font",
        "method_name": null,
        "unique_global_name": "set_interface_font",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the interface's font.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "fnt": {
            "type": "font",
            "description": "The font to be used",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def set_interface_font(fnt):"
          ],
          "csharp": [
            "public static void SplashKit.SetInterfaceFont(Font fnt);"
          ],
          "cpp": [
            "void set_interface_font(font fnt)"
          ],
          "pascal": [
            "procedure SetInterfaceFont(fnt: Font)"
          ]
        }
      },
      {
        "signature": "void set_interface_font_size(int size);",
        "name": "set_interface_font_size",
        "method_name": null,
        "unique_global_name": "set_interface_font_size",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the interface's font size.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "size": {
            "type": "int",
            "description": "The font size to be used",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def set_interface_font_size(size):"
          ],
          "csharp": [
            "public static void SplashKit.SetInterfaceFontSize(int size);"
          ],
          "cpp": [
            "void set_interface_font_size(int size)"
          ],
          "pascal": [
            "procedure SetInterfaceFontSize(size: Integer)"
          ]
        }
      },
      {
        "signature": "void set_interface_label_width(int width);",
        "name": "set_interface_label_width",
        "method_name": null,
        "unique_global_name": "set_interface_label_width",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the width of element labels. This is the maximum width\nin pixels that a label can span in front of an element.\n\nDefault is 60 pixels.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "width": {
            "type": "int",
            "description": "The width of labels",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def set_interface_label_width(width):"
          ],
          "csharp": [
            "public static void SplashKit.SetInterfaceLabelWidth(int width);"
          ],
          "cpp": [
            "void set_interface_label_width(int width)"
          ],
          "pascal": [
            "procedure SetInterfaceLabelWidth(width: Integer)"
          ]
        }
      },
      {
        "signature": "void set_interface_panel_shadows(int radius,color clr,point_2d offset);",
        "name": "set_interface_panel_shadows",
        "method_name": null,
        "unique_global_name": "set_interface_panel_shadows",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the style of panel's shadows. Use a fully transparent color to disable them.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "radius": {
            "type": "int",
            "description": "The radius of the shadow's blur",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the shadows (commonly black, but can do coloured and semi-transparent too)",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "offset": {
            "type": "point_2d",
            "description": "The offset in x/y coordinates of the shadows from their casting elements",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def set_interface_panel_shadows(radius, clr, offset):"
          ],
          "csharp": [
            "public static void SplashKit.SetInterfacePanelShadows(int radius, Color clr, Point2D offset);"
          ],
          "cpp": [
            "void set_interface_panel_shadows(int radius, color clr, point_2d offset)"
          ],
          "pascal": [
            "procedure SetInterfacePanelShadows(radius: Integer; clr: Color; offset: Point2D)"
          ]
        }
      },
      {
        "signature": "void set_interface_root_text_color(color clr);",
        "name": "set_interface_root_text_color",
        "method_name": null,
        "unique_global_name": "set_interface_root_text_color",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets color of text drawn directly onto the main window",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color to set text drawn on the main window to",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def set_interface_root_text_color(clr):"
          ],
          "csharp": [
            "public static void SplashKit.SetInterfaceRootTextColor(Color clr);"
          ],
          "cpp": [
            "void set_interface_root_text_color(color clr)"
          ],
          "pascal": [
            "procedure SetInterfaceRootTextColor(clr: Color)"
          ]
        }
      },
      {
        "signature": "void set_interface_shadows(int radius,color clr,point_2d offset);",
        "name": "set_interface_shadows",
        "method_name": null,
        "unique_global_name": "set_interface_shadows",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the style of all interface shadows. Use a fully transparent color to disable them.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "radius": {
            "type": "int",
            "description": "The radius of the shadow's blur",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color of the shadows (commonly black, but can do coloured and semi-transparent too)",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "offset": {
            "type": "point_2d",
            "description": "The offset in x/y coordinates of the shadows from their casting elements",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def set_interface_shadows(radius, clr, offset):"
          ],
          "csharp": [
            "public static void SplashKit.SetInterfaceShadows(int radius, Color clr, Point2D offset);"
          ],
          "cpp": [
            "void set_interface_shadows(int radius, color clr, point_2d offset)"
          ],
          "pascal": [
            "procedure SetInterfaceShadows(radius: Integer; clr: Color; offset: Point2D)"
          ]
        }
      },
      {
        "signature": "void set_interface_spacing(int spacing,int padding);",
        "name": "set_interface_spacing",
        "method_name": null,
        "unique_global_name": "set_interface_spacing",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the spacing within the interface.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "spacing": {
            "type": "int",
            "description": "The distance between elements",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "padding": {
            "type": "int",
            "description": "The padding within elements",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def set_interface_spacing(spacing, padding):"
          ],
          "csharp": [
            "public static void SplashKit.SetInterfaceSpacing(int spacing, int padding);"
          ],
          "cpp": [
            "void set_interface_spacing(int spacing, int padding)"
          ],
          "pascal": [
            "procedure SetInterfaceSpacing(spacing: Integer; padding: Integer)"
          ]
        }
      },
      {
        "signature": "void set_interface_style(interface_style style);",
        "name": "set_interface_style",
        "method_name": null,
        "unique_global_name": "set_interface_style",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the interface style to one of the presets in the interface_style enum.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "style": {
            "type": "interface_style",
            "description": "The preset style to use",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def set_interface_style(style):"
          ],
          "csharp": [
            "public static void SplashKit.SetInterfaceStyle(InterfaceStyle style);"
          ],
          "cpp": [
            "void set_interface_style(interface_style style)"
          ],
          "pascal": [
            "procedure SetInterfaceStyle(style: InterfaceStyle)"
          ]
        }
      },
      {
        "signature": "void set_interface_style(interface_style style,color clr);",
        "name": "set_interface_style",
        "method_name": null,
        "unique_global_name": "set_interface_style_with_color",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the interface style to one of the presets in the interface_style enum.\nAlso accepts a color used to customize the interface.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "style": {
            "type": "interface_style",
            "description": "The preset style to use",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The color to style the interface after",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "with_color",
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def set_interface_style_with_color(style, clr):"
          ],
          "csharp": [
            "public static void SplashKit.SetInterfaceStyle(InterfaceStyle style, Color clr);"
          ],
          "cpp": [
            "void set_interface_style(interface_style style, color clr)"
          ],
          "pascal": [
            "procedure SetInterfaceStyle(style: InterfaceStyle; clr: Color)"
          ]
        }
      },
      {
        "signature": "void set_interface_text_color(color clr);",
        "name": "set_interface_text_color",
        "method_name": null,
        "unique_global_name": "set_interface_text_color",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the interface's text color.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color to set text to",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def set_interface_text_color(clr):"
          ],
          "csharp": [
            "public static void SplashKit.SetInterfaceTextColor(Color clr);"
          ],
          "cpp": [
            "void set_interface_text_color(color clr)"
          ],
          "pascal": [
            "procedure SetInterfaceTextColor(clr: Color)"
          ]
        }
      },
      {
        "signature": "void set_layout_height(int height);",
        "name": "set_layout_height",
        "method_name": null,
        "unique_global_name": "set_layout_height",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the height of each row in the interface in pixels.\n0 resets to default.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "height": {
            "type": "int",
            "description": "Height of rows in pixels",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def set_layout_height(height):"
          ],
          "csharp": [
            "public static void SplashKit.SetLayoutHeight(int height);"
          ],
          "cpp": [
            "void set_layout_height(int height)"
          ],
          "pascal": [
            "procedure SetLayoutHeight(height: Integer)"
          ]
        }
      },
      {
        "signature": "void single_line_layout();",
        "name": "single_line_layout",
        "method_name": null,
        "unique_global_name": "single_line_layout",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Starts layouting all elements onto a single row. Reset with `reset_layout()`.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def single_line_layout():"
          ],
          "csharp": [
            "public static void SplashKit.SingleLineLayout();"
          ],
          "cpp": [
            "void single_line_layout()"
          ],
          "pascal": [
            "procedure SingleLineLayout()"
          ]
        }
      },
      {
        "signature": "float slider(const float& value,float min_value,float max_value,const rectangle& rect);",
        "name": "slider",
        "method_name": null,
        "unique_global_name": "slider_at_position",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a slider at a specific position on screen.\nReturns the updated value of the slider.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The updated value of the slider",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "value": {
            "type": "float",
            "description": "The current value of the slider",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "min_value": {
            "type": "float",
            "description": "The minimum value of the slider",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "max_value": {
            "type": "float",
            "description": "The maximum value of the slider",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to display the slider in",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "at_position",
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def slider_at_position(value, min_value, max_value, rect):"
          ],
          "csharp": [
            "public static float SplashKit.Slider(float value, float minValue, float maxValue, Rectangle rect);"
          ],
          "cpp": [
            "float slider(const float &value, float min_value, float max_value, const rectangle &rect)"
          ],
          "pascal": [
            "function Slider(const value: Single; minValue: Single; maxValue: Single; const rect: Rectangle): Single"
          ]
        }
      },
      {
        "signature": "float slider(const float& value,float min_value,float max_value);",
        "name": "slider",
        "method_name": null,
        "unique_global_name": "slider",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a slider without a label.\nReturns the updated value of the slider.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The updated value of the slider",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "value": {
            "type": "float",
            "description": "The current value of the slider",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "min_value": {
            "type": "float",
            "description": "The minimum value of the slider",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "max_value": {
            "type": "float",
            "description": "The maximum value of the slider",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def slider(value, min_value, max_value):"
          ],
          "csharp": [
            "public static float SplashKit.Slider(float value, float minValue, float maxValue);"
          ],
          "cpp": [
            "float slider(const float &value, float min_value, float max_value)"
          ],
          "pascal": [
            "function Slider(const value: Single; minValue: Single; maxValue: Single): Single"
          ]
        }
      },
      {
        "signature": "float slider(const string& label_text,const float& value,float min_value,float max_value);",
        "name": "slider",
        "method_name": null,
        "unique_global_name": "slider_labeled",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a slider with a label.\nReturns the updated value of the slider.\n\nExample usage:\n```c++\nmy_float = slider(\"Percentage\", my_float, 0, 100);\n```",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The updated value of the slider",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "label_text": {
            "type": "string",
            "description": "The label to show in front of the slider",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "float",
            "description": "The current value of the slider",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "min_value": {
            "type": "float",
            "description": "The minimum value of the slider",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "max_value": {
            "type": "float",
            "description": "The maximum value of the slider",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "labeled",
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def slider_labeled(label_text, value, min_value, max_value):"
          ],
          "csharp": [
            "public static float SplashKit.Slider(string labelText, float value, float minValue, float maxValue);"
          ],
          "cpp": [
            "float slider(const string &label_text, const float &value, float min_value, float max_value)"
          ],
          "pascal": [
            "function Slider(const labelText: String; const value: Single; minValue: Single; maxValue: Single): Single"
          ]
        }
      },
      {
        "signature": "void split_into_columns(int count);",
        "name": "split_into_columns",
        "method_name": null,
        "unique_global_name": "split_into_columns",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Adds `count` columns to the current layout, with equal widths",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "count": {
            "type": "int",
            "description": "Number of columns to add",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def split_into_columns(count):"
          ],
          "csharp": [
            "public static void SplashKit.SplitIntoColumns(int count);"
          ],
          "cpp": [
            "void split_into_columns(int count)"
          ],
          "pascal": [
            "procedure SplitIntoColumns(count: Integer)"
          ]
        }
      },
      {
        "signature": "void split_into_columns(int count,int last_width);",
        "name": "split_into_columns",
        "method_name": null,
        "unique_global_name": "split_into_columns_with_last_width",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Adds `count` columns to the current layout, with equal widths.\nHas extra parameter `last_width`, which lets you specify a specific\nwidth (in pixels) for the last column.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "count": {
            "type": "int",
            "description": "Number of columns to add",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "last_width": {
            "type": "int",
            "description": "The width of the last column in pixels",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "with_last_width",
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def split_into_columns_with_last_width(count, last_width):"
          ],
          "csharp": [
            "public static void SplashKit.SplitIntoColumns(int count, int lastWidth);"
          ],
          "cpp": [
            "void split_into_columns(int count, int last_width)"
          ],
          "pascal": [
            "procedure SplitIntoColumns(count: Integer; lastWidth: Integer)"
          ]
        }
      },
      {
        "signature": "void split_into_columns_relative(int count,double last_width);",
        "name": "split_into_columns_relative",
        "method_name": null,
        "unique_global_name": "split_into_columns_relative_with_last_width",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Adds `count` columns to the current layout, with equal widths.\nHas extra parameter `last_width`, which lets you specify a specific\nwidth (relative to the width of the container, between 0 and 1) for the last column.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "count": {
            "type": "int",
            "description": "Number of columns to add",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "last_width": {
            "type": "double",
            "description": "The width of the last column as percentage of the container's width (between 0 and 1)",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "with_last_width",
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def split_into_columns_relative_with_last_width(count, last_width):"
          ],
          "csharp": [
            "public static void SplashKit.SplitIntoColumnsRelative(int count, double lastWidth);"
          ],
          "cpp": [
            "void split_into_columns_relative(int count, double last_width)"
          ],
          "pascal": [
            "procedure SplitIntoColumnsRelative(count: Integer; lastWidth: Double)"
          ]
        }
      },
      {
        "signature": "void start_custom_layout();",
        "name": "start_custom_layout",
        "method_name": null,
        "unique_global_name": "start_custom_layout",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Clears the default layout so that a custom layout can be made.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def start_custom_layout():"
          ],
          "csharp": [
            "public static void SplashKit.StartCustomLayout();"
          ],
          "cpp": [
            "void start_custom_layout()"
          ],
          "pascal": [
            "procedure StartCustomLayout()"
          ]
        }
      },
      {
        "signature": "void start_inset(const string& name,const rectangle& rect);",
        "name": "start_inset",
        "method_name": null,
        "unique_global_name": "start_inset_at_position",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Starts the creation of an inset area inside an arbitrary rectangle.\n\nThe function **must** be accompanied by a call to `end_inset`\nwith the same name.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the area",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle for the inset",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "at_position",
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def start_inset_at_position(name, rect):"
          ],
          "csharp": [
            "public static void SplashKit.StartInset(string name, Rectangle rect);"
          ],
          "cpp": [
            "void start_inset(const string &name, const rectangle &rect)"
          ],
          "pascal": [
            "procedure StartInset(const name: String; const rect: Rectangle)"
          ]
        }
      },
      {
        "signature": "void start_inset(const string& name,int height);",
        "name": "start_inset",
        "method_name": null,
        "unique_global_name": "start_inset",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Starts the creation of an inset area inside a panel/popup.\n\nUse as follows:\n```c++\nstart_inset(\"Inset area\", 60);\n// elements inside area goes here\nend_inset(\"Inset area\");\n\n```\nThe function **must** be accompanied by a call to `end_inset`\nwith the same name.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the area",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "int",
            "description": "Height of the inset area in pixels. -1 fills entire space. Use negative heights to fill _up to_ `height` away from the bottom",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def start_inset(name, height):"
          ],
          "csharp": [
            "public static void SplashKit.StartInset(string name, int height);"
          ],
          "cpp": [
            "void start_inset(const string &name, int height)"
          ],
          "pascal": [
            "procedure StartInset(const name: String; height: Integer)"
          ]
        }
      },
      {
        "signature": "bool start_panel(const string& name,rectangle initial_rectangle);",
        "name": "start_panel",
        "method_name": null,
        "unique_global_name": "start_panel",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Starts the creation of a draggable panel with a title bar.\nReturns whether the panel is visible or not.\n\nUse as follows:\n```c++\nif (start_panel(\"My panel\", rectangle_from(0,0,100,100)))\n{\n// Rest of interface goes here\nend_panel(\"My panel\");\n}\n```\nAfter calling this, you can then call functions to\nadd elements such as buttons and text boxes inside the panel.\nThe function **must** be accompanied by a call to `end_panel`,\nthat is only called if the panel is visible, and is passed the same `name`.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Whether the panel is visible or not",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name shown in the panel's titlebar",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "initial_rectangle": {
            "type": "rectangle",
            "description": "The initial position/size the panel starts off in",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def start_panel(name, initial_rectangle):"
          ],
          "csharp": [
            "public static bool SplashKit.StartPanel(string name, Rectangle initialRectangle);"
          ],
          "cpp": [
            "bool start_panel(const string &name, rectangle initial_rectangle)"
          ],
          "pascal": [
            "function StartPanel(const name: String; initialRectangle: Rectangle): Boolean"
          ]
        }
      },
      {
        "signature": "bool start_popup(const string& name);",
        "name": "start_popup",
        "method_name": null,
        "unique_global_name": "start_popup",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Starts the creation of a popup.\nReturns whether the popup is visible or not.\n\nUsage is the same as `start_panel`, other than the 'starting rectangle' will be automatically calculated.\nThe function **must** be accompanied by a call to `end_popup`\nwith the same name.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Whether the popup is visible or not",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the popup",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def start_popup(name):"
          ],
          "csharp": [
            "public static bool SplashKit.StartPopup(string name);"
          ],
          "cpp": [
            "bool start_popup(const string &name)"
          ],
          "pascal": [
            "function StartPopup(const name: String): Boolean"
          ]
        }
      },
      {
        "signature": "bool start_treenode(const string& label_text);",
        "name": "start_treenode",
        "method_name": null,
        "unique_global_name": "start_treenode",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Starts the creation of a tree node (such as those in a file tree view).\nReturns whether the tree node is expanded or not.\n\nUsage is the same as `start_panel`.\nThe function **must** be accompanied by a call to `end_treenode`\nwith the same name.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Whether the tree node is expanded or not",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "label_text": {
            "type": "string",
            "description": "The name of the node",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def start_treenode(label_text):"
          ],
          "csharp": [
            "public static bool SplashKit.StartTreenode(string labelText);"
          ],
          "cpp": [
            "bool start_treenode(const string &label_text)"
          ],
          "pascal": [
            "function StartTreenode(const labelText: String): Boolean"
          ]
        }
      },
      {
        "signature": "string text_box(const string& value);",
        "name": "text_box",
        "method_name": null,
        "unique_global_name": "text_box",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a text entry box with a label.\nReturns the updated value of the text box.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "The updated value of the text box",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "value": {
            "type": "string",
            "description": "The current value of the text box",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def text_box(value):"
          ],
          "csharp": [
            "public static string SplashKit.TextBox(string value);"
          ],
          "cpp": [
            "string text_box(const string &value)"
          ],
          "pascal": [
            "function TextBox(const value: String): String"
          ]
        }
      },
      {
        "signature": "string text_box(const string& value,const rectangle& rect);",
        "name": "text_box",
        "method_name": null,
        "unique_global_name": "text_box_at_position",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a text entry box at a specific position on screen.\nReturns the updated value of the text box.\n\nExample usage:\n```c++\nmy_string = text_box(\"Name\", my_string);\n```",
        "brief": null,
        "return": {
          "type": "string",
          "description": "The updated value of the text box",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "value": {
            "type": "string",
            "description": "The current value of the text box",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to display the button in",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "at_position",
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def text_box_at_position(value, rect):"
          ],
          "csharp": [
            "public static string SplashKit.TextBox(string value, Rectangle rect);"
          ],
          "cpp": [
            "string text_box(const string &value, const rectangle &rect)"
          ],
          "pascal": [
            "function TextBox(const value: String; const rect: Rectangle): String"
          ]
        }
      },
      {
        "signature": "string text_box(const string& label_text,const string& value);",
        "name": "text_box",
        "method_name": null,
        "unique_global_name": "text_box_labeled",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a text entry box with a label.\nReturns the updated value of the text box.\n\nExample usage:\n```c++\nmy_string = text_box(\"Name\", my_string);\n```",
        "brief": null,
        "return": {
          "type": "string",
          "description": "The updated value of the text box",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "label_text": {
            "type": "string",
            "description": "The label to show in front of the text box",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "string",
            "description": "The current value of the text box",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "labeled",
          "group": "interface",
          "static": "interface"
        },
        "signatures": {
          "python": [
            "def text_box_labeled(label_text, value):"
          ],
          "csharp": [
            "public static string SplashKit.TextBox(string labelText, string value);"
          ],
          "cpp": [
            "string text_box(const string &label_text, const string &value)"
          ],
          "pascal": [
            "function TextBox(const labelText: String; const value: String): String"
          ]
        }
      }
    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "json": {
    "brief": "SplashKit Json allows you to create and read JSON objects.",
    "description": "Splashkit's JSON library allows you to easily create or read JSON objects and\nmanipulate them to/from a JSON string or from a file containing a JSON\nstring. Create a new JSON object with a call to `create_json()` and\nread or write data to it by calling methods like\n`json_add_string(json j, string key, string value)` and\n`json_read_string(json j, string key)`.",
    "functions": [
      {
        "signature": "json create_json();",
        "name": "create_json",
        "method_name": null,
        "unique_global_name": "create_json",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The empty `json` object returned can be filled with data and read by the\nfunctions and procedures prefixed with `json_add_` and `json_read_`",
        "brief": "Creates an empty `json` object.",
        "return": {
          "type": "json",
          "description": "Returns an empty `json` object.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "class": "json",
          "constructor": true,
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "python": [
            "def create_json():"
          ],
          "csharp": [
            "public static Json SplashKit.CreateJson();",
            "public Json();"
          ],
          "cpp": [
            "json create_json()"
          ],
          "pascal": [
            "function CreateJson(): Json"
          ]
        }
      },
      {
        "signature": "json create_json(string json_string);",
        "name": "create_json",
        "method_name": null,
        "unique_global_name": "create_json_from_string",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "`string json_string` must be valid JSON.\nThe `json` object returned can be filled with data and read by the functions\nand procedures prefixed with `json_add_` and `json_read_`",
        "brief": "Creates a `json` object filled with JSON fields from `json_string`.",
        "return": {
          "type": "json",
          "description": "Returns a `json` object filled with data from the parameter `string`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "json_string": {
            "type": "string",
            "description": "The JSON formatted `string` to be converted to a `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "json",
          "constructor": true,
          "suffix": "from_string",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "python": [
            "def create_json_from_string(json_string):"
          ],
          "csharp": [
            "public static Json SplashKit.CreateJson(string jsonString);",
            "public Json(string jsonString);"
          ],
          "cpp": [
            "json create_json(string json_string)"
          ],
          "pascal": [
            "function CreateJson(jsonString: String): Json"
          ]
        }
      },
      {
        "signature": "void free_all_json();",
        "name": "free_all_json",
        "method_name": "free_all",
        "unique_global_name": "free_all_json",
        "unique_method_name": ".free_all",
        "suffix_name": null,
        "description": "Releases all of the `json` objects which have been loaded.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "method": "free_all",
          "static": "json",
          "group": "json"
        },
        "signatures": {
          "python": [
            "def free_all_json():"
          ],
          "csharp": [
            "public static void Json.FreeAll();",
            "public static void SplashKit.FreeAllJson();"
          ],
          "cpp": [
            "void free_all_json()"
          ],
          "pascal": [
            "procedure FreeAllJson()"
          ]
        }
      },
      {
        "signature": "void free_json(json j);",
        "name": "free_json",
        "method_name": null,
        "unique_global_name": "free_json",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Frees the SplashKit resources associated with the `json` object.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object whose resources should be released.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "json",
          "destructor": true,
          "self": "j",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "python": [
            "def free_json(j):"
          ],
          "csharp": [
            "public static void SplashKit.FreeJson(Json j);"
          ],
          "cpp": [
            "void free_json(json j)"
          ],
          "pascal": [
            "procedure FreeJson(j: Json)"
          ]
        }
      },
      {
        "signature": "int json_count_keys(json j);",
        "name": "json_count_keys",
        "method_name": "count_keys",
        "unique_global_name": "json_count_keys",
        "unique_method_name": "json.count_keys",
        "suffix_name": null,
        "description": "Returns the count of keys in the top-level `json` object.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The count of keys in the top-level `json` object.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object to count keys.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "json",
          "method": "count_keys",
          "self": "j",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "python": [
            "def json_count_keys(j):"
          ],
          "csharp": [
            "public int Json.CountKeys();",
            "public static int SplashKit.JsonCountKeys(Json j);"
          ],
          "cpp": [
            "int json_count_keys(json j)"
          ],
          "pascal": [
            "function JsonCountKeys(j: Json): Integer"
          ]
        }
      },
      {
        "signature": "json json_from_color(color clr);",
        "name": "json_from_color",
        "method_name": null,
        "unique_global_name": "json_from_color",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Converts a `color` to a `json` object.",
        "brief": null,
        "return": {
          "type": "json",
          "description": "The `color` serialized into a `json` object.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The `color` to convert to `json`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "python": [
            "def json_from_color(clr):"
          ],
          "csharp": [
            "public static Json SplashKit.JsonFromColor(Color clr);"
          ],
          "cpp": [
            "json json_from_color(color clr)"
          ],
          "pascal": [
            "function JsonFromColor(clr: Color): Json"
          ]
        }
      },
      {
        "signature": "json json_from_file(const string& filename);",
        "name": "json_from_file",
        "method_name": "from_file",
        "unique_global_name": "json_from_file",
        "unique_method_name": ".from_file",
        "suffix_name": null,
        "description": "Reads a `json` object from a JSON string stored in `Resources/json/filename`\nand loads the data into the returned `json` object.",
        "brief": null,
        "return": {
          "type": "json",
          "description": "Returns the `json` object loaded from the JSON file in `filename`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "filename": {
            "type": "string",
            "description": "The filename of the file to be written to `Resources/json/`.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "method": "from_file",
          "static": "json",
          "group": "json"
        },
        "signatures": {
          "python": [
            "def json_from_file(filename):"
          ],
          "csharp": [
            "public static Json Json.FromFile(string filename);",
            "public static Json SplashKit.JsonFromFile(string filename);"
          ],
          "cpp": [
            "json json_from_file(const string &filename)"
          ],
          "pascal": [
            "function JsonFromFile(const filename: String): Json"
          ]
        }
      },
      {
        "signature": "json json_from_string(const string &j_string);",
        "name": "json_from_string",
        "method_name": "from_json_string",
        "unique_global_name": "json_from_string",
        "unique_method_name": ".from_json_string",
        "suffix_name": null,
        "description": "Reads a `json` object from a `string` in the JSON format.",
        "brief": null,
        "return": {
          "type": "json",
          "description": "Returns a `json` object loaded with data from `string j_string`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j_string": {
            "type": "string",
            "description": "A `string` in the JSON format.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "method": "from_json_string",
          "static": "json",
          "group": "json"
        },
        "signatures": {
          "python": [
            "def json_from_string(j_string):"
          ],
          "csharp": [
            "public static Json Json.FromJsonString(string jString);",
            "public static Json SplashKit.JsonFromString(string jString);"
          ],
          "cpp": [
            "json json_from_string(const string &j_string)"
          ],
          "pascal": [
            "function JsonFromString(const jString: String): Json"
          ]
        }
      },
      {
        "signature": "bool json_has_key(json j,string key);",
        "name": "json_has_key",
        "method_name": "has_key",
        "unique_global_name": "json_has_key",
        "unique_method_name": "json.has_key",
        "suffix_name": null,
        "description": "Checks if the `json` object contains the given `string` key.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Returns `true` if the `json j` object contains a key for `string` key.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object to check for the given key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "key": {
            "type": "string",
            "description": "The `string` key to be checked.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "json",
          "method": "has_key",
          "self": "j",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "python": [
            "def json_has_key(j, key):"
          ],
          "csharp": [
            "public bool Json.HasKey(string key);",
            "public static bool SplashKit.JsonHasKey(Json j, string key);"
          ],
          "cpp": [
            "bool json_has_key(json j, string key)"
          ],
          "pascal": [
            "function JsonHasKey(j: Json; key: String): Boolean"
          ]
        }
      },
      {
        "signature": "void json_read_array(json j,string key,vector<double> &out_result);",
        "name": "json_read_array",
        "method_name": "read_array",
        "unique_global_name": "json_read_array_of_double",
        "unique_method_name": "json.read_array_of_double",
        "suffix_name": null,
        "description": "Reads an array of `double` values from the `json` object for\nthe given `string` key.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object from which data will be returned for the given key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "key": {
            "type": "string",
            "description": "The `string` key used to find data in the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "out_result": {
            "type": "vector",
            "description": "The array which will be filled with the data stored for `string` key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": true,
            "type_parameter": "double"
          }
        },
        "attributes": {
          "class": "json",
          "method": "read_array",
          "self": "j",
          "suffix": "of_double",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "python": [
            "def json_read_array_of_double(j, key, out_result):"
          ],
          "csharp": [
            "public void Json.ReadArray(string key, ref List<double> outResult);",
            "public static void SplashKit.JsonReadArray(Json j, string key, ref List<double> outResult);"
          ],
          "cpp": [
            "void json_read_array(json j, string key, vector<double> &out_result)"
          ],
          "pascal": [
            "procedure JsonReadArray(j: Json; key: String; var outResult: ArrayOfDouble)"
          ]
        }
      },
      {
        "signature": "void json_read_array(json j,string key,vector<json> &out_result);",
        "name": "json_read_array",
        "method_name": "read_array",
        "unique_global_name": "json_read_array_of_json",
        "unique_method_name": "json.read_array_of_json",
        "suffix_name": null,
        "description": "Reads an array of `json` object values from the `json` object for\nthe given `string` key.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object from which data will be returned for the given key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "key": {
            "type": "string",
            "description": "The `string` key used to find data in the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "out_result": {
            "type": "vector",
            "description": "The array which will be filled with the data stored for `string` key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": true,
            "type_parameter": "json"
          }
        },
        "attributes": {
          "class": "json",
          "method": "read_array",
          "self": "j",
          "suffix": "of_json",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "python": [
            "def json_read_array_of_json(j, key, out_result):"
          ],
          "csharp": [
            "public void Json.ReadArray(string key, ref List<Json> outResult);",
            "public static void SplashKit.JsonReadArray(Json j, string key, ref List<Json> outResult);"
          ],
          "cpp": [
            "void json_read_array(json j, string key, vector<json> &out_result)"
          ],
          "pascal": [
            "procedure JsonReadArray(j: Json; key: String; var outResult: ArrayOfJson)"
          ]
        }
      },
      {
        "signature": "void json_read_array(json j,string key,vector<string> &out_result);",
        "name": "json_read_array",
        "method_name": "read_array",
        "unique_global_name": "json_read_array_of_string",
        "unique_method_name": "json.read_array_of_string",
        "suffix_name": null,
        "description": "Reads an array of `string` values from the `json` object for\nthe given `string` key.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object from which data will be returned for the given key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "key": {
            "type": "string",
            "description": "The `string` key used to find data in the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "out_result": {
            "type": "vector",
            "description": "The array which will be filled with the data stored for `string` key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": true,
            "type_parameter": "string"
          }
        },
        "attributes": {
          "class": "json",
          "method": "read_array",
          "self": "j",
          "suffix": "of_string",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "python": [
            "def json_read_array_of_string(j, key, out_result):"
          ],
          "csharp": [
            "public void Json.ReadArray(string key, ref List<string> outResult);",
            "public static void SplashKit.JsonReadArray(Json j, string key, ref List<string> outResult);"
          ],
          "cpp": [
            "void json_read_array(json j, string key, vector<string> &out_result)"
          ],
          "pascal": [
            "procedure JsonReadArray(j: Json; key: String; var outResult: ArrayOfString)"
          ]
        }
      },
      {
        "signature": "void json_read_array(json j,string key,vector<bool> &out_result);",
        "name": "json_read_array",
        "method_name": "read_array",
        "unique_global_name": "json_read_array_of_bool",
        "unique_method_name": "json.read_array_of_bool",
        "suffix_name": null,
        "description": "Reads an array of `bool` values from the `json` object for\nthe given `string` key.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object from which data will be returned for the given key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "key": {
            "type": "string",
            "description": "The `string` key used to find data in the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "out_result": {
            "type": "vector",
            "description": "The array which will be filled with the data stored for `string` key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": true,
            "type_parameter": "bool"
          }
        },
        "attributes": {
          "class": "json",
          "method": "read_array",
          "self": "j",
          "suffix": "of_bool",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "python": [
            "def json_read_array_of_bool(j, key, out_result):"
          ],
          "csharp": [
            "public void Json.ReadArray(string key, ref List<bool> outResult);",
            "public static void SplashKit.JsonReadArray(Json j, string key, ref List<bool> outResult);"
          ],
          "cpp": [
            "void json_read_array(json j, string key, vector<bool> &out_result)"
          ],
          "pascal": [
            "procedure JsonReadArray(j: Json; key: String; var outResult: ArrayOfBoolean)"
          ]
        }
      },
      {
        "signature": "bool json_read_bool(json j,string key);",
        "name": "json_read_bool",
        "method_name": "read_bool",
        "unique_global_name": "json_read_bool",
        "unique_method_name": "json.read_bool",
        "suffix_name": null,
        "description": "Reads a `bool` value from the `json` object for the given `string` key.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Returns the `bool` value stored at the `string` key.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object from which data will be returned for the given key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "key": {
            "type": "string",
            "description": "The `string` key used to find data in the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "json",
          "method": "read_bool",
          "self": "j",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "python": [
            "def json_read_bool(j, key):"
          ],
          "csharp": [
            "public bool Json.ReadBool(string key);",
            "public static bool SplashKit.JsonReadBool(Json j, string key);"
          ],
          "cpp": [
            "bool json_read_bool(json j, string key)"
          ],
          "pascal": [
            "function JsonReadBool(j: Json; key: String): Boolean"
          ]
        }
      },
      {
        "signature": "float json_read_number(json j,string key);",
        "name": "json_read_number",
        "method_name": "read_number",
        "unique_global_name": "json_read_number",
        "unique_method_name": "json.read_number",
        "suffix_name": null,
        "description": "Reads a `float` value from the `json` object for the given `string` key.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "Returns the `float` value stored at the `string` key.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object from which data will be returned for the given key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "key": {
            "type": "string",
            "description": "The `string` key used to find data in the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "json",
          "method": "read_number",
          "self": "j",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "python": [
            "def json_read_number(j, key):"
          ],
          "csharp": [
            "public float Json.ReadNumber(string key);",
            "public static float SplashKit.JsonReadNumber(Json j, string key);"
          ],
          "cpp": [
            "float json_read_number(json j, string key)"
          ],
          "pascal": [
            "function JsonReadNumber(j: Json; key: String): Single"
          ]
        }
      },
      {
        "signature": "double json_read_number_as_double(json j,string key);",
        "name": "json_read_number_as_double",
        "method_name": "read_double",
        "unique_global_name": "json_read_number_as_double",
        "unique_method_name": "json.read_double",
        "suffix_name": null,
        "description": "Reads a `double` value from the `json` object for the given `string` key.",
        "brief": null,
        "return": {
          "type": "double",
          "description": "Returns the `double` value stored at the `string` key.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object from which data will be returned for the given key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "key": {
            "type": "string",
            "description": "The `string` key used to find data in the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "json",
          "method": "read_double",
          "self": "j",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "python": [
            "def json_read_number_as_double(j, key):"
          ],
          "csharp": [
            "public double Json.ReadDouble(string key);",
            "public static double SplashKit.JsonReadNumberAsDouble(Json j, string key);"
          ],
          "cpp": [
            "double json_read_number_as_double(json j, string key)"
          ],
          "pascal": [
            "function JsonReadNumberAsDouble(j: Json; key: String): Double"
          ]
        }
      },
      {
        "signature": "int json_read_number_as_int(json j,string key);",
        "name": "json_read_number_as_int",
        "method_name": "read_integer",
        "unique_global_name": "json_read_number_as_int",
        "unique_method_name": "json.read_integer",
        "suffix_name": null,
        "description": "Reads a `integer` value from the `json` object for the given `string` key.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "Returns the `integer` value stored at the `string` key.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object from which data will be returned for the given key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "key": {
            "type": "string",
            "description": "The `string` key used to find data in the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "json",
          "method": "read_integer",
          "self": "j",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "python": [
            "def json_read_number_as_int(j, key):"
          ],
          "csharp": [
            "public int Json.ReadInteger(string key);",
            "public static int SplashKit.JsonReadNumberAsInt(Json j, string key);"
          ],
          "cpp": [
            "int json_read_number_as_int(json j, string key)"
          ],
          "pascal": [
            "function JsonReadNumberAsInt(j: Json; key: String): Integer"
          ]
        }
      },
      {
        "signature": "json json_read_object(json j,string key);",
        "name": "json_read_object",
        "method_name": "read_object",
        "unique_global_name": "json_read_object",
        "unique_method_name": "json.read_object",
        "suffix_name": null,
        "description": "Reads a `json` object value from the `json` object for the given `string` key.",
        "brief": null,
        "return": {
          "type": "json",
          "description": "Returns the `json` object value stored at the `string` key.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object from which data will be returned for the given key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "key": {
            "type": "string",
            "description": "The `string` key used to find data in the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "json",
          "method": "read_object",
          "self": "j",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "python": [
            "def json_read_object(j, key):"
          ],
          "csharp": [
            "public Json Json.ReadObject(string key);",
            "public static Json SplashKit.JsonReadObject(Json j, string key);"
          ],
          "cpp": [
            "json json_read_object(json j, string key)"
          ],
          "pascal": [
            "function JsonReadObject(j: Json; key: String): Json"
          ]
        }
      },
      {
        "signature": "string json_read_string(json j,string key);",
        "name": "json_read_string",
        "method_name": "read_string",
        "unique_global_name": "json_read_string",
        "unique_method_name": "json.read_string",
        "suffix_name": null,
        "description": "Reads a `string` value from the `json` object for the given `string` key.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "Returns the `string` value stored at the `string` key.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object from which data will be returned for the given key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "key": {
            "type": "string",
            "description": "The `string` key used to find data in the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "json",
          "method": "read_string",
          "self": "j",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "python": [
            "def json_read_string(j, key):"
          ],
          "csharp": [
            "public string Json.ReadString(string key);",
            "public static string SplashKit.JsonReadString(Json j, string key);"
          ],
          "cpp": [
            "string json_read_string(json j, string key)"
          ],
          "pascal": [
            "function JsonReadString(j: Json; key: String): String"
          ]
        }
      },
      {
        "signature": "void json_set_array(json j,string key,vector<string> value);",
        "name": "json_set_array",
        "method_name": "add_array",
        "unique_global_name": "json_set_array_of_string",
        "unique_method_name": "json.add_array_of_string",
        "suffix_name": null,
        "description": "Adds an array of `string` values to the `json` object for\nthe given `string` key.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object where data will be inserted for the given key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "key": {
            "type": "string",
            "description": "The `string` key where data will be stored in the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "vector",
            "description": "The value to be inserted into the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": true,
            "type_parameter": "string"
          }
        },
        "attributes": {
          "class": "json",
          "method": "add_array",
          "self": "j",
          "suffix": "of_string",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "python": [
            "def json_set_array_of_string(j, key, value):"
          ],
          "csharp": [
            "public void Json.AddArray(string key, List<string> value);",
            "public static void SplashKit.JsonSetArray(Json j, string key, List<string> value);"
          ],
          "cpp": [
            "void json_set_array(json j, string key, vector<string> value)"
          ],
          "pascal": [
            "procedure JsonSetArray(j: Json; key: String; value: ArrayOfString)"
          ]
        }
      },
      {
        "signature": "void json_set_array(json j,string key,vector<double> value);",
        "name": "json_set_array",
        "method_name": "add_array",
        "unique_global_name": "json_set_array_of_double",
        "unique_method_name": "json.add_array_of_double",
        "suffix_name": null,
        "description": "Adds an array of `double` values to the `json` object for\nthe given `string` key.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object where data will be inserted for the given key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "key": {
            "type": "string",
            "description": "The `string` key where data will be stored in the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "vector",
            "description": "The value to be inserted into the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": true,
            "type_parameter": "double"
          }
        },
        "attributes": {
          "class": "json",
          "method": "add_array",
          "self": "j",
          "suffix": "of_double",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "python": [
            "def json_set_array_of_double(j, key, value):"
          ],
          "csharp": [
            "public void Json.AddArray(string key, List<double> value);",
            "public static void SplashKit.JsonSetArray(Json j, string key, List<double> value);"
          ],
          "cpp": [
            "void json_set_array(json j, string key, vector<double> value)"
          ],
          "pascal": [
            "procedure JsonSetArray(j: Json; key: String; value: ArrayOfDouble)"
          ]
        }
      },
      {
        "signature": "void json_set_array(json j,string key,vector<bool> value);",
        "name": "json_set_array",
        "method_name": "add_array",
        "unique_global_name": "json_set_array_of_bool",
        "unique_method_name": "json.add_array_of_bool",
        "suffix_name": null,
        "description": "Adds an array of `bool` values to the `json` object for\nthe given `string` key.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object where data will be inserted for the given key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "key": {
            "type": "string",
            "description": "The `string` key where data will be stored in the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "vector",
            "description": "The value to be inserted into the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": true,
            "type_parameter": "bool"
          }
        },
        "attributes": {
          "class": "json",
          "method": "add_array",
          "self": "j",
          "suffix": "of_bool",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "python": [
            "def json_set_array_of_bool(j, key, value):"
          ],
          "csharp": [
            "public void Json.AddArray(string key, List<bool> value);",
            "public static void SplashKit.JsonSetArray(Json j, string key, List<bool> value);"
          ],
          "cpp": [
            "void json_set_array(json j, string key, vector<bool> value)"
          ],
          "pascal": [
            "procedure JsonSetArray(j: Json; key: String; value: ArrayOfBoolean)"
          ]
        }
      },
      {
        "signature": "void json_set_array(json j,string key,vector<json> value);",
        "name": "json_set_array",
        "method_name": "add_array",
        "unique_global_name": "json_set_array_of_json",
        "unique_method_name": "json.add_array_of_json",
        "suffix_name": null,
        "description": "Adds an array of `json` object values to the `json` object for\nthe given `string` key.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object where data will be inserted for the given key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "key": {
            "type": "string",
            "description": "The `string` key where data will be stored in the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "vector",
            "description": "The value to be inserted into the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": true,
            "type_parameter": "json"
          }
        },
        "attributes": {
          "class": "json",
          "method": "add_array",
          "self": "j",
          "suffix": "of_json",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "python": [
            "def json_set_array_of_json(j, key, value):"
          ],
          "csharp": [
            "public void Json.AddArray(string key, List<Json> value);",
            "public static void SplashKit.JsonSetArray(Json j, string key, List<Json> value);"
          ],
          "cpp": [
            "void json_set_array(json j, string key, vector<json> value)"
          ],
          "pascal": [
            "procedure JsonSetArray(j: Json; key: String; value: ArrayOfJson)"
          ]
        }
      },
      {
        "signature": "void json_set_bool(json j,string key,bool value);",
        "name": "json_set_bool",
        "method_name": "add_bool",
        "unique_global_name": "json_set_bool",
        "unique_method_name": "json.add_bool",
        "suffix_name": null,
        "description": "Adds a `bool` value to the `json` object for the given `string` key.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object where data will be inserted for the given key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "key": {
            "type": "string",
            "description": "The `string` key where data will be stored in the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "bool",
            "description": "The value to be inserted into the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "json",
          "method": "add_bool",
          "self": "j",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "python": [
            "def json_set_bool(j, key, value):"
          ],
          "csharp": [
            "public void Json.AddBool(string key, bool value);",
            "public static void SplashKit.JsonSetBool(Json j, string key, bool value);"
          ],
          "cpp": [
            "void json_set_bool(json j, string key, bool value)"
          ],
          "pascal": [
            "procedure JsonSetBool(j: Json; key: String; value: Boolean)"
          ]
        }
      },
      {
        "signature": "void json_set_number(json j,string key,int value);",
        "name": "json_set_number",
        "method_name": "add_number",
        "unique_global_name": "json_set_number_integer",
        "unique_method_name": "json.add_number_integer",
        "suffix_name": null,
        "description": "Adds an `int` value to the `json` object for the given `string` key.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object where data will be inserted for the given key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "key": {
            "type": "string",
            "description": "The `string` key where data will be stored in the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "int",
            "description": "The value to be inserted into the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "json",
          "method": "add_number",
          "self": "j",
          "suffix": "integer",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "python": [
            "def json_set_number_integer(j, key, value):"
          ],
          "csharp": [
            "public void Json.AddNumber(string key, int value);",
            "public static void SplashKit.JsonSetNumber(Json j, string key, int value);"
          ],
          "cpp": [
            "void json_set_number(json j, string key, int value)"
          ],
          "pascal": [
            "procedure JsonSetNumber(j: Json; key: String; value: Integer)"
          ]
        }
      },
      {
        "signature": "void json_set_number(json j,string key,double value);",
        "name": "json_set_number",
        "method_name": "add_number",
        "unique_global_name": "json_set_number_double",
        "unique_method_name": "json.add_number_double",
        "suffix_name": null,
        "description": "Adds a `double` value to the `json` object for the given `string` key.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object where data will be inserted for the given key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "key": {
            "type": "string",
            "description": "The `string` key where data will be stored in the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "double",
            "description": "The value to be inserted into the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "json",
          "method": "add_number",
          "self": "j",
          "suffix": "double",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "python": [
            "def json_set_number_double(j, key, value):"
          ],
          "csharp": [
            "public void Json.AddNumber(string key, double value);",
            "public static void SplashKit.JsonSetNumber(Json j, string key, double value);"
          ],
          "cpp": [
            "void json_set_number(json j, string key, double value)"
          ],
          "pascal": [
            "procedure JsonSetNumber(j: Json; key: String; value: Double)"
          ]
        }
      },
      {
        "signature": "void json_set_number(json j,string key,float value);",
        "name": "json_set_number",
        "method_name": "add_number",
        "unique_global_name": "json_set_number_float",
        "unique_method_name": "json.add_number_float",
        "suffix_name": null,
        "description": "Adds a `float` value to the `json` object for the given `string` key.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object where data will be inserted for the given key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "key": {
            "type": "string",
            "description": "The `string` key where data will be stored in the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "float",
            "description": "The value to be inserted into the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "json",
          "method": "add_number",
          "self": "j",
          "suffix": "float",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "python": [
            "def json_set_number_float(j, key, value):"
          ],
          "csharp": [
            "public void Json.AddNumber(string key, float value);",
            "public static void SplashKit.JsonSetNumber(Json j, string key, float value);"
          ],
          "cpp": [
            "void json_set_number(json j, string key, float value)"
          ],
          "pascal": [
            "procedure JsonSetNumber(j: Json; key: String; value: Single)"
          ]
        }
      },
      {
        "signature": "void json_set_object(json j,string key,json obj);",
        "name": "json_set_object",
        "method_name": "add_object",
        "unique_global_name": "json_set_object",
        "unique_method_name": "json.add_object",
        "suffix_name": null,
        "description": "Adds a `json` object to the `json` object for the given `string` key.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object where data will be inserted for the given key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "key": {
            "type": "string",
            "description": "The `string` key where data will be stored in the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "obj": {
            "type": "json",
            "description": "The value to be inserted into the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "json",
          "method": "add_object",
          "self": "j",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "python": [
            "def json_set_object(j, key, obj):"
          ],
          "csharp": [
            "public void Json.AddObject(string key, Json obj);",
            "public static void SplashKit.JsonSetObject(Json j, string key, Json obj);"
          ],
          "cpp": [
            "void json_set_object(json j, string key, json obj)"
          ],
          "pascal": [
            "procedure JsonSetObject(j: Json; key: String; obj: Json)"
          ]
        }
      },
      {
        "signature": "void json_set_string(json j,string key,string value);",
        "name": "json_set_string",
        "method_name": "add_string",
        "unique_global_name": "json_set_string",
        "unique_method_name": "json.add_string",
        "suffix_name": null,
        "description": "Adds a `string` value to the `json` object for the given `string` key.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object where data will be inserted for the given key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "key": {
            "type": "string",
            "description": "The `string` key where data will be stored in the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "string",
            "description": "The value to be inserted into the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "json",
          "method": "add_string",
          "self": "j",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "python": [
            "def json_set_string(j, key, value):"
          ],
          "csharp": [
            "public void Json.AddString(string key, string value);",
            "public static void SplashKit.JsonSetString(Json j, string key, string value);"
          ],
          "cpp": [
            "void json_set_string(json j, string key, string value)"
          ],
          "pascal": [
            "procedure JsonSetString(j: Json; key: String; value: String)"
          ]
        }
      },
      {
        "signature": "color json_to_color(json j);",
        "name": "json_to_color",
        "method_name": null,
        "unique_global_name": "json_to_color",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Converts a `json` object to a `color` object.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "The `color` deserialized from the `json` object.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` to convert to a `color`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "python": [
            "def json_to_color(j):"
          ],
          "csharp": [
            "public static Color SplashKit.JsonToColor(Json j);"
          ],
          "cpp": [
            "color json_to_color(json j)"
          ],
          "pascal": [
            "function JsonToColor(j: Json): Color"
          ]
        }
      },
      {
        "signature": "void json_to_file(json j,const string& filename);",
        "name": "json_to_file",
        "method_name": "to_file",
        "unique_global_name": "json_to_file",
        "unique_method_name": ".to_file",
        "suffix_name": null,
        "description": "Writes the `json` object to a JSON string stored in `Resources/json/filename`.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object to be written to file.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "filename": {
            "type": "string",
            "description": "The filename of the file to be stored in `Resources/json/`",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "method": "to_file",
          "static": "json",
          "group": "json"
        },
        "signatures": {
          "python": [
            "def json_to_file(j, filename):"
          ],
          "csharp": [
            "public static void Json.ToFile(Json j, string filename);",
            "public static void SplashKit.JsonToFile(Json j, string filename);"
          ],
          "cpp": [
            "void json_to_file(json j, const string &filename)"
          ],
          "pascal": [
            "procedure JsonToFile(j: Json; const filename: String)"
          ]
        }
      },
      {
        "signature": "string json_to_string(json j);",
        "name": "json_to_string",
        "method_name": "to_json_string",
        "unique_global_name": "json_to_string",
        "unique_method_name": ".to_json_string",
        "suffix_name": null,
        "description": "Converts and returns the `json` object as a `string`.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "Returns the `json` object as a `string`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object to be converted to a `string`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "method": "to_json_string",
          "static": "json",
          "group": "json"
        },
        "signatures": {
          "python": [
            "def json_to_string(j):"
          ],
          "csharp": [
            "public static string Json.ToJsonString(Json j);",
            "public static string SplashKit.JsonToString(Json j);"
          ],
          "cpp": [
            "string json_to_string(json j)"
          ],
          "pascal": [
            "function JsonToString(j: Json): String"
          ]
        }
      }
    ],
    "typedefs": [
      {
        "signature": "typedef struct sk_json *json;",
        "name": "json",
        "description": "The `json` type is used to refer to objects in the JSON format that can be\nmanipulated by the SplashKit `json` functions and procedures.\n\n\nAll `json` objects are:\n\n\n- created with `create_json()` or `create_json(string s)` or\n`json_from_string(string s)` or `json_from_file(json j)`\n\n\n- and must be released using `free_json()` (to release a specific `json` object)\nor `free_all_json()` (to release all loaded `json` objects).",
        "brief": null,
        "attributes": {
          "class": "json",
          "group": "json",
          "static": "json"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      }
    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "logging": {
    "brief": "SplashKit Logging facilitates streamlined logging with customizable severity levels and modes.",
    "description": "SplashKit Logging module,  allows users to initialize a custom logger with specified log levels and modes (console, file, or both). \nThe module provides functions to log messages at different severity levels (INFO, DEBUG, WARNING, ERROR, FATAL) with timestamped entries. \nUsers can close the logging process as needed, and the module handles customization for console and file output.",
    "functions": [
      {
        "signature": "void close_log_process ();",
        "name": "close_log_process",
        "method_name": null,
        "unique_global_name": "close_log_process",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Ensures propper memory clean-up prior to exit, if needed.  Used in sk_init_looging ().",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "logging",
          "static": "logging"
        },
        "signatures": {
          "python": [
            "def close_log_process():"
          ],
          "csharp": [
            "public static void SplashKit.CloseLogProcess();"
          ],
          "cpp": [
            "void close_log_process()"
          ],
          "pascal": [
            "procedure CloseLogProcess()"
          ]
        }
      },
      {
        "signature": "void init_custom_logger (log_mode mode);",
        "name": "init_custom_logger",
        "method_name": null,
        "unique_global_name": "init_custom_logger",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Initialises the logging mode for logged messages to be written to the text-based console.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "mode": {
            "type": "log_mode",
            "description": "The mode of log output i.e. whether there should be output to the console, a text file, or both.  Pass your choice of mode variable in by reference.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "logging",
          "static": "logging"
        },
        "signatures": {
          "python": [
            "def init_custom_logger(mode):"
          ],
          "csharp": [
            "public static void SplashKit.InitCustomLogger(LogMode mode);"
          ],
          "cpp": [
            "void init_custom_logger(log_mode mode)"
          ],
          "pascal": [
            "procedure InitCustomLogger(mode: LogMode)"
          ]
        }
      },
      {
        "signature": "void init_custom_logger (string app_name,bool override_prev_log,log_mode mode);",
        "name": "init_custom_logger",
        "method_name": null,
        "unique_global_name": "init_custom_logger_name_override_mode",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Initialises the logging mode between either writing to a file or both a file and the text-based console.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "app_name": {
            "type": "string",
            "description": "The name of the application being written requiring logging",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "override_prev_log": {
            "type": "bool",
            "description": "Determines whether or not a new logging session should override the existing file, if any. Set this to false if you want new log messages to be appended to the bottom of the file; otherwise set it to true if you would like a new file to be created on top of the old one.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "mode": {
            "type": "log_mode",
            "description": "The mode of log output i.e. whether there should be output to the console, a text file, or both.  Pass your choice of mode variable in by reference.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "name_override_mode",
          "group": "logging",
          "static": "logging"
        },
        "signatures": {
          "python": [
            "def init_custom_logger_name_override_mode(app_name, override_prev_log, mode):"
          ],
          "csharp": [
            "public static void SplashKit.InitCustomLogger(string appName, bool overridePrevLog, LogMode mode);"
          ],
          "cpp": [
            "void init_custom_logger(string app_name, bool override_prev_log, log_mode mode)"
          ],
          "pascal": [
            "procedure InitCustomLogger(appName: String; overridePrevLog: Boolean; mode: LogMode)"
          ]
        }
      },
      {
        "signature": "void log(log_level level,string message);",
        "name": "log",
        "method_name": null,
        "unique_global_name": "log",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Send a message to the message log. The message will be written if the log level for\nthe program is set to display this.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "level": {
            "type": "log_level",
            "description": "The level of the message to log",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "message": {
            "type": "string",
            "description": "The message to be shown",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "logging",
          "static": "logging"
        },
        "signatures": {
          "python": [
            "def log(level, message):"
          ],
          "csharp": [
            "public static void SplashKit.Log(LogLevel level, string message);"
          ],
          "cpp": [
            "void log(log_level level, string message)"
          ],
          "pascal": [
            "procedure Log(level: LogLevel; message: String)"
          ]
        }
      }
    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [
      {
        "signature": "enum log_level {NONE,INFO,DEBUG,WARNING,ERROR,FATAL};",
        "name": "log_level",
        "description": "Defines the available levels for log messages. This allows categorisation of log\nmessages which can then be filtered allowing messages below a given level to be\nignored.",
        "brief": null,
        "constants": {
          "NONE": {
            "description": "Output to the message log but without a specified level"
          },
          "INFO": {
            "description": "Output information to the message log"
          },
          "DEBUG": {
            "description": "Output a debug message to the message log"
          },
          "WARNING": {
            "description": "Output a warning message to the message log"
          },
          "ERROR": {
            "description": "Output an error message to the message log"
          },
          "FATAL": {
            "description": "Output an error message to the message log"
          }
        },
        "attributes": {
          "group": "logging",
          "static": "logging"
        },
        "signatures": {
          "python": "public enum {log_level.none = 0, log_level.info = 0, log_level.debug = 0, log_level.warning = 0, log_level.error = 0, log_level.fatal = 0}",
          "csharp": "public enum {LogLevel.None = 0, LogLevel.Info = 0, LogLevel.Debug = 0, LogLevel.Warning = 0, LogLevel.Error = 0, LogLevel.Fatal = 0}",
          "cpp": "class log_level {NONE = 0, INFO = 0, DEBUG = 0, WARNING = 0, ERROR = 0, FATAL = 0};",
          "pascal": "public enum {LogLevel.None = 0, LogLevel.Info = 0, LogLevel.Debug = 0, LogLevel.Warning = 0, LogLevel.Error = 0, LogLevel.Fatal = 0}"
        }
      },
      {
        "signature": "enum log_mode {LOG_NONE,LOG_CONSOLE,LOG_FILE_ONLY,LOG_CONSOLE_AND_FILE};",
        "name": "log_mode",
        "description": "Defines the available modes of logging, indicating where messages are written to.",
        "brief": null,
        "constants": {
          "LOG_NONE": {
            "description": "Set the logging mode to none for nothing to be logged to the console or a file."
          },
          "LOG_CONSOLE": {
            "description": "Ensure that output only directs to the on-screen, text-based console.."
          },
          "LOG_FILE_ONLY": {
            "description": "Ensure that output only directs to a text file.."
          },
          "LOG_CONSOLE_AND_FILE": {
            "description": "Direct ouput to both the console and a file."
          }
        },
        "attributes": {
          "group": "logging",
          "static": "logging"
        },
        "signatures": {
          "python": "public enum {log_mode.log_none = 0, log_mode.log_console = 0, log_mode.log_file_only = 0, log_mode.log_console_and_file = 0}",
          "csharp": "public enum {LogMode.LogNone = 0, LogMode.LogConsole = 0, LogMode.LogFileOnly = 0, LogMode.LogConsoleAndFile = 0}",
          "cpp": "class log_mode {LOG_NONE = 0, LOG_CONSOLE = 0, LOG_FILE_ONLY = 0, LOG_CONSOLE_AND_FILE = 0};",
          "pascal": "public enum {LogMode.LogNone = 0, LogMode.LogConsole = 0, LogMode.LogFileOnly = 0, LogMode.LogConsoleAndFile = 0}"
        }
      }
    ],
    "defines": [

    ]
  },
  "networking": {
    "brief": "SplashKit's network-related functions allow you to communicate data\nacross networks.",
    "description": "",
    "functions": [
      {
        "signature": "bool accept_all_new_connections();",
        "name": "accept_all_new_connections",
        "method_name": null,
        "unique_global_name": "accept_all_new_connections",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Accept new connections for all servers.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if there were accepted connections",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def accept_all_new_connections():"
          ],
          "csharp": [
            "public static bool SplashKit.AcceptAllNewConnections();"
          ],
          "cpp": [
            "bool accept_all_new_connections()"
          ],
          "pascal": [
            "function AcceptAllNewConnections(): Boolean"
          ]
        }
      },
      {
        "signature": "bool accept_new_connection(server_socket server);",
        "name": "accept_new_connection",
        "method_name": "accept_new_connection",
        "unique_global_name": "accept_new_connection",
        "unique_method_name": "server_socket.accept_new_connection",
        "suffix_name": null,
        "description": "Accept new connections for a server",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if a connection was accepted",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "server": {
            "type": "server_socket",
            "description": "The server to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "server_socket",
          "method": "accept_new_connection",
          "group": "networking",
          "static": "networking",
          "self": "server"
        },
        "signatures": {
          "python": [
            "def accept_new_connection(server):"
          ],
          "csharp": [
            "public bool ServerSocket.AcceptNewConnection();",
            "public static bool SplashKit.AcceptNewConnection(ServerSocket server);"
          ],
          "cpp": [
            "bool accept_new_connection(server_socket server)"
          ],
          "pascal": [
            "function AcceptNewConnection(server: ServerSocket): Boolean"
          ]
        }
      },
      {
        "signature": "void broadcast_message(const string &a_msg,server_socket svr);",
        "name": "broadcast_message",
        "method_name": "broadcast_message",
        "unique_global_name": "broadcast_message",
        "unique_method_name": "server_socket.broadcast_message",
        "suffix_name": null,
        "description": "Broadcast a message to all connections of a server.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "a_msg": {
            "type": "string",
            "description": "The message to send",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "svr": {
            "type": "server_socket",
            "description": "The server to send the message to.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "server_socket",
          "method": "broadcast_message",
          "self": "svr",
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def broadcast_message(a_msg, svr):"
          ],
          "csharp": [
            "public void ServerSocket.BroadcastMessage(string aMsg);",
            "public static void SplashKit.BroadcastMessage(string aMsg, ServerSocket svr);"
          ],
          "cpp": [
            "void broadcast_message(const string &a_msg, server_socket svr)"
          ],
          "pascal": [
            "procedure BroadcastMessage(const aMsg: String; svr: ServerSocket)"
          ]
        }
      },
      {
        "signature": "void broadcast_message(const string &a_msg);",
        "name": "broadcast_message",
        "method_name": null,
        "unique_global_name": "broadcast_message_to_all",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Broadcase a message to all of the connections.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "a_msg": {
            "type": "string",
            "description": "The message to send",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "to_all",
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def broadcast_message_to_all(a_msg):"
          ],
          "csharp": [
            "public static void SplashKit.BroadcastMessage(string aMsg);"
          ],
          "cpp": [
            "void broadcast_message(const string &a_msg)"
          ],
          "pascal": [
            "procedure BroadcastMessage(const aMsg: String)"
          ]
        }
      },
      {
        "signature": "void broadcast_message(const string &a_msg,const string &name);",
        "name": "broadcast_message",
        "method_name": null,
        "unique_global_name": "broadcast_message_to_server_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Broadcast a message to all connections of a server.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "a_msg": {
            "type": "string",
            "description": "The message to send",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the server to send the message to.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "to_server_named",
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def broadcast_message_to_server_named(a_msg, name):"
          ],
          "csharp": [
            "public static void SplashKit.BroadcastMessage(string aMsg, string name);"
          ],
          "cpp": [
            "void broadcast_message(const string &a_msg, const string &name)"
          ],
          "pascal": [
            "procedure BroadcastMessage(const aMsg: String; const name: String)"
          ]
        }
      },
      {
        "signature": "void check_network_activity();",
        "name": "check_network_activity",
        "method_name": null,
        "unique_global_name": "check_network_activity",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Check network activity, looking for new connections and messages.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def check_network_activity():"
          ],
          "csharp": [
            "public static void SplashKit.CheckNetworkActivity();"
          ],
          "cpp": [
            "void check_network_activity()"
          ],
          "pascal": [
            "procedure CheckNetworkActivity()"
          ]
        }
      },
      {
        "signature": "void clear_messages(const string &name);",
        "name": "clear_messages",
        "method_name": null,
        "unique_global_name": "clear_messages_from_name",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Clear all of the messages from a server or connection with the supplied name.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the connection or the server to clear.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "from_name",
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def clear_messages_from_name(name):"
          ],
          "csharp": [
            "public static void SplashKit.ClearMessages(string name);"
          ],
          "cpp": [
            "void clear_messages(const string &name)"
          ],
          "pascal": [
            "procedure ClearMessages(const name: String)"
          ]
        }
      },
      {
        "signature": "void clear_messages(connection a_connection);",
        "name": "clear_messages",
        "method_name": "clear_messages",
        "unique_global_name": "clear_messages_from_connection",
        "unique_method_name": "connection.clear_messages_from_connection",
        "suffix_name": null,
        "description": "Clear all of the messages from a connection.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "a_connection": {
            "type": "connection",
            "description": "The connection",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "connection",
          "method": "clear_messages",
          "suffix": "from_connection",
          "group": "networking",
          "static": "networking",
          "self": "a_connection"
        },
        "signatures": {
          "python": [
            "def clear_messages_from_connection(a_connection):"
          ],
          "csharp": [
            "public void Connection.ClearMessages();",
            "public static void SplashKit.ClearMessages(Connection aConnection);"
          ],
          "cpp": [
            "void clear_messages(connection a_connection)"
          ],
          "pascal": [
            "procedure ClearMessages(aConnection: Connection)"
          ]
        }
      },
      {
        "signature": "void clear_messages(server_socket svr);",
        "name": "clear_messages",
        "method_name": "clear_messages",
        "unique_global_name": "clear_messages_from_server",
        "unique_method_name": "server_socket.clear_messages_from_server",
        "suffix_name": null,
        "description": "Clear all of the messages from a server.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "svr": {
            "type": "server_socket",
            "description": "The server to clear the messages from",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "server_socket",
          "method": "clear_messages",
          "suffix": "from_server",
          "group": "networking",
          "static": "networking",
          "self": "svr"
        },
        "signatures": {
          "python": [
            "def clear_messages_from_server(svr):"
          ],
          "csharp": [
            "public void ServerSocket.ClearMessages();",
            "public static void SplashKit.ClearMessages(ServerSocket svr);"
          ],
          "cpp": [
            "void clear_messages(server_socket svr)"
          ],
          "pascal": [
            "procedure ClearMessages(svr: ServerSocket)"
          ]
        }
      },
      {
        "signature": "void close_all_connections();",
        "name": "close_all_connections",
        "method_name": null,
        "unique_global_name": "close_all_connections",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Close all of the connections you have opened. This does not close\nconnections to servers.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def close_all_connections():"
          ],
          "csharp": [
            "public static void SplashKit.CloseAllConnections();"
          ],
          "cpp": [
            "void close_all_connections()"
          ],
          "pascal": [
            "procedure CloseAllConnections()"
          ]
        }
      },
      {
        "signature": "void close_all_servers();",
        "name": "close_all_servers",
        "method_name": null,
        "unique_global_name": "close_all_servers",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Close all of the servers that are currently open.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def close_all_servers():"
          ],
          "csharp": [
            "public static void SplashKit.CloseAllServers();"
          ],
          "cpp": [
            "void close_all_servers()"
          ],
          "pascal": [
            "procedure CloseAllServers()"
          ]
        }
      },
      {
        "signature": "bool close_connection(connection a_connection);",
        "name": "close_connection",
        "method_name": "close",
        "unique_global_name": "close_connection",
        "unique_method_name": "connection.close",
        "suffix_name": null,
        "description": "Close the connection",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if this succeeds.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "a_connection": {
            "type": "connection",
            "description": "The connection to close",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "connection",
          "destructor": true,
          "method": "close",
          "group": "networking",
          "static": "networking",
          "self": "a_connection"
        },
        "signatures": {
          "python": [
            "def close_connection(a_connection):"
          ],
          "csharp": [
            "public bool Connection.Close();",
            "public static bool SplashKit.CloseConnection(Connection aConnection);"
          ],
          "cpp": [
            "bool close_connection(connection a_connection)"
          ],
          "pascal": [
            "function CloseConnection(aConnection: Connection): Boolean"
          ]
        }
      },
      {
        "signature": "bool close_connection(const string &name);",
        "name": "close_connection",
        "method_name": null,
        "unique_global_name": "close_connection_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Close the connection",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if this succeeds.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the connection to close",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "named",
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def close_connection_named(name):"
          ],
          "csharp": [
            "public static bool SplashKit.CloseConnection(string name);"
          ],
          "cpp": [
            "bool close_connection(const string &name)"
          ],
          "pascal": [
            "function CloseConnection(const name: String): Boolean"
          ]
        }
      },
      {
        "signature": "void close_message(message msg);",
        "name": "close_message",
        "method_name": "close",
        "unique_global_name": "close_message",
        "unique_method_name": "message.close",
        "suffix_name": null,
        "description": "Closes the message.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "msg": {
            "type": "message",
            "description": "The message to close",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "message",
          "destructor": true,
          "method": "close",
          "group": "networking",
          "static": "networking",
          "self": "msg"
        },
        "signatures": {
          "python": [
            "def close_message(msg):"
          ],
          "csharp": [
            "public void Message.Close();",
            "public static void SplashKit.CloseMessage(Message msg);"
          ],
          "cpp": [
            "void close_message(message msg)"
          ],
          "pascal": [
            "procedure CloseMessage(msg: Message)"
          ]
        }
      },
      {
        "signature": "bool close_server(const string &name);",
        "name": "close_server",
        "method_name": null,
        "unique_global_name": "close_server_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Closes the server with the indicated name.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the server was closed successfully",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the server to close",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "named",
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def close_server_named(name):"
          ],
          "csharp": [
            "public static bool SplashKit.CloseServer(string name);"
          ],
          "cpp": [
            "bool close_server(const string &name)"
          ],
          "pascal": [
            "function CloseServer(const name: String): Boolean"
          ]
        }
      },
      {
        "signature": "bool close_server(server_socket svr);",
        "name": "close_server",
        "method_name": "close",
        "unique_global_name": "close_server",
        "unique_method_name": "server_socket.close",
        "suffix_name": null,
        "description": "Closes the server, all connections with clients will be shut and\nthe port will be closed.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the close was successful",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "svr": {
            "type": "server_socket",
            "description": "The server to close",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "server_socket",
          "destructor": true,
          "method": "close",
          "group": "networking",
          "static": "networking",
          "self": "svr"
        },
        "signatures": {
          "python": [
            "def close_server(svr):"
          ],
          "csharp": [
            "public bool ServerSocket.Close();",
            "public static bool SplashKit.CloseServer(ServerSocket svr);"
          ],
          "cpp": [
            "bool close_server(server_socket svr)"
          ],
          "pascal": [
            "function CloseServer(svr: ServerSocket): Boolean"
          ]
        }
      },
      {
        "signature": "unsigned int connection_count(const string &name);",
        "name": "connection_count",
        "method_name": null,
        "unique_global_name": "connection_count_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the number of clients connected to a server.",
        "brief": null,
        "return": {
          "type": "unsigned int",
          "description": "The number of connected clients",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the server to check",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "named",
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def connection_count_named(name):"
          ],
          "csharp": [
            "public static uint SplashKit.ConnectionCount(string name);"
          ],
          "cpp": [
            "unsigned int connection_count(const string &name)"
          ],
          "pascal": [
            "function ConnectionCount(const name: String): Cardinal"
          ]
        }
      },
      {
        "signature": "unsigned int connection_count(server_socket server);",
        "name": "connection_count",
        "method_name": null,
        "unique_global_name": "connection_count",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the number of clients connected to a server.",
        "brief": null,
        "return": {
          "type": "unsigned int",
          "description": "The number of connected clients",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "server": {
            "type": "server_socket",
            "description": "The server to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "server_socket",
          "getter": "connection_count",
          "group": "networking",
          "static": "networking",
          "self": "server"
        },
        "signatures": {
          "python": [
            "def connection_count(server):"
          ],
          "csharp": [
            "public uint ServerSocket.ConnectionCount { get }",
            "public static uint SplashKit.ConnectionCount(ServerSocket server);"
          ],
          "cpp": [
            "unsigned int connection_count(server_socket server)"
          ],
          "pascal": [
            "function ConnectionCount(server: ServerSocket): Cardinal"
          ]
        }
      },
      {
        "signature": "unsigned int connection_ip(connection a_connection);",
        "name": "connection_ip",
        "method_name": null,
        "unique_global_name": "connection_ip",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Gets the ip address of the passed in connection.",
        "brief": null,
        "return": {
          "type": "unsigned int",
          "description": "The ip addres of the connection",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "a_connection": {
            "type": "connection",
            "description": "The connection",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "connection",
          "getter": "ip",
          "group": "networking",
          "static": "networking",
          "self": "a_connection"
        },
        "signatures": {
          "python": [
            "def connection_ip(a_connection):"
          ],
          "csharp": [
            "public uint Connection.IP { get }",
            "public static uint SplashKit.ConnectionIP(Connection aConnection);"
          ],
          "cpp": [
            "unsigned int connection_ip(connection a_connection)"
          ],
          "pascal": [
            "function ConnectionIP(aConnection: Connection): Cardinal"
          ]
        }
      },
      {
        "signature": "unsigned int connection_ip(const string &name);",
        "name": "connection_ip",
        "method_name": null,
        "unique_global_name": "connection_ip_from_name",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Gets the ip address of the connection with the supplied name.",
        "brief": null,
        "return": {
          "type": "unsigned int",
          "description": "The connection's ip address",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the connection",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "from_name",
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def connection_ip_from_name(name):"
          ],
          "csharp": [
            "public static uint SplashKit.ConnectionIP(string name);"
          ],
          "cpp": [
            "unsigned int connection_ip(const string &name)"
          ],
          "pascal": [
            "function ConnectionIP(const name: String): Cardinal"
          ]
        }
      },
      {
        "signature": "connection connection_named(const string &name);",
        "name": "connection_named",
        "method_name": null,
        "unique_global_name": "connection_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fetch the connection with the indicated name.",
        "brief": null,
        "return": {
          "type": "connection",
          "description": "The connection with that name",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the connection to fetch",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def connection_named(name):"
          ],
          "csharp": [
            "public static Connection SplashKit.ConnectionNamed(string name);"
          ],
          "cpp": [
            "connection connection_named(const string &name)"
          ],
          "pascal": [
            "function ConnectionNamed(const name: String): Connection"
          ]
        }
      },
      {
        "signature": "unsigned short int connection_port(connection a_connection);",
        "name": "connection_port",
        "method_name": null,
        "unique_global_name": "connection_port",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Gets the port of the connection.",
        "brief": null,
        "return": {
          "type": "unsigned short",
          "description": "The port of the connection.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "a_connection": {
            "type": "connection",
            "description": "The connection",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "connection",
          "getter": "port",
          "group": "networking",
          "static": "networking",
          "self": "a_connection"
        },
        "signatures": {
          "python": [
            "def connection_port(a_connection):"
          ],
          "csharp": [
            "public ushort Connection.Port { get }",
            "public static ushort SplashKit.ConnectionPort(Connection aConnection);"
          ],
          "cpp": [
            "unsigned short connection_port(connection a_connection)"
          ],
          "pascal": [
            "function ConnectionPort(aConnection: Connection): Word"
          ]
        }
      },
      {
        "signature": "unsigned short int connection_port(const string &name);",
        "name": "connection_port",
        "method_name": null,
        "unique_global_name": "connection_port_from_name",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Gets the part of the connection.",
        "brief": null,
        "return": {
          "type": "unsigned short",
          "description": "The port of the connection",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the connection",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "from_name",
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def connection_port_from_name(name):"
          ],
          "csharp": [
            "public static ushort SplashKit.ConnectionPort(string name);"
          ],
          "cpp": [
            "unsigned short connection_port(const string &name)"
          ],
          "pascal": [
            "function ConnectionPort(const name: String): Word"
          ]
        }
      },
      {
        "signature": "server_socket create_server(const string &name,unsigned short int port);",
        "name": "create_server",
        "method_name": null,
        "unique_global_name": "create_server_with_port",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a new TCP server that can accept connections from other programs.",
        "brief": null,
        "return": {
          "type": "server_socket",
          "description": "A new server with the indicated details",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name used to access the Server in splashkit",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "port": {
            "type": "unsigned short",
            "description": "The port that clients will use to connect to the server",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "server_socket",
          "constructor": true,
          "suffix": "with_port",
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def create_server_with_port(name, port):"
          ],
          "csharp": [
            "public static ServerSocket SplashKit.CreateServer(string name, ushort port);",
            "public ServerSocket(string name, ushort port);"
          ],
          "cpp": [
            "server_socket create_server(const string &name, unsigned short port)"
          ],
          "pascal": [
            "function CreateServer(const name: String; port: Word): ServerSocket"
          ]
        }
      },
      {
        "signature": "server_socket create_server(const string &name,unsigned short int port,connection_type protocol);",
        "name": "create_server",
        "method_name": null,
        "unique_global_name": "create_server_with_port_and_protocol",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a new server that can accept connections from other programs.",
        "brief": null,
        "return": {
          "type": "server_socket",
          "description": "A new server with the indicated details",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name used to access the Server in splashkit",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "port": {
            "type": "unsigned short",
            "description": "The port that clients will use to connect to the server",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "protocol": {
            "type": "connection_type",
            "description": "The protocol used by the server",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "server_socket",
          "constructor": true,
          "suffix": "with_port_and_protocol",
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def create_server_with_port_and_protocol(name, port, protocol):"
          ],
          "csharp": [
            "public static ServerSocket SplashKit.CreateServer(string name, ushort port, ConnectionType protocol);",
            "public ServerSocket(string name, ushort port, ConnectionType protocol);"
          ],
          "cpp": [
            "server_socket create_server(const string &name, unsigned short port, connection_type protocol)"
          ],
          "pascal": [
            "function CreateServer(const name: String; port: Word; protocol: ConnectionType): ServerSocket"
          ]
        }
      },
      {
        "signature": "string dec_to_hex(unsigned int a_dec);",
        "name": "dec_to_hex",
        "method_name": null,
        "unique_global_name": "dec_to_hex",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Converts the supplied decimal integer into it's hexadecimal representation.\ne.g. 0x7F000001 from 2130706433",
        "brief": "Converts a decimal integer into a hexadecimal string",
        "return": {
          "type": "string",
          "description": "hexadecimal representation of the supplied decimal integer",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "a_dec": {
            "type": "unsigned int",
            "description": "decimal to be converted to a hexadecimal number string",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def dec_to_hex(a_dec):"
          ],
          "csharp": [
            "public static string SplashKit.DecToHex(uint aDec);"
          ],
          "cpp": [
            "string dec_to_hex(unsigned int a_dec)"
          ],
          "pascal": [
            "function DecToHex(aDec: Cardinal): String"
          ]
        }
      },
      {
        "signature": "connection fetch_new_connection(server_socket server);",
        "name": "fetch_new_connection",
        "method_name": "fetch_new_connection",
        "unique_global_name": "fetch_new_connection",
        "unique_method_name": "server_socket.fetch_new_connection",
        "suffix_name": null,
        "description": "Get the oldest new connections made to the server, and\nreduces the new connection count by 1.",
        "brief": null,
        "return": {
          "type": "connection",
          "description": "The oldest new connection",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "server": {
            "type": "server_socket",
            "description": "The server to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "server_socket",
          "method": "fetch_new_connection",
          "group": "networking",
          "static": "networking",
          "self": "server"
        },
        "signatures": {
          "python": [
            "def fetch_new_connection(server):"
          ],
          "csharp": [
            "public Connection ServerSocket.FetchNewConnection();",
            "public static Connection SplashKit.FetchNewConnection(ServerSocket server);"
          ],
          "cpp": [
            "connection fetch_new_connection(server_socket server)"
          ],
          "pascal": [
            "function FetchNewConnection(server: ServerSocket): Connection"
          ]
        }
      },
      {
        "signature": "bool has_connection(const string &name);",
        "name": "has_connection",
        "method_name": null,
        "unique_global_name": "has_connection",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Does the connection with the supplied name exist?",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if there is a connection with the supplied name",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the connection to check.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def has_connection(name):"
          ],
          "csharp": [
            "public static bool SplashKit.HasConnection(string name);"
          ],
          "cpp": [
            "bool has_connection(const string &name)"
          ],
          "pascal": [
            "function HasConnection(const name: String): Boolean"
          ]
        }
      },
      {
        "signature": "bool has_messages();",
        "name": "has_messages",
        "method_name": null,
        "unique_global_name": "has_messages",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks if there are any messages waiting to be read.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if there are any messages waiting to be read",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "has_messages",
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def has_messages():"
          ],
          "csharp": [
            "public static bool Networking.HasMessages { get }",
            "public static bool SplashKit.HasMessages();"
          ],
          "cpp": [
            "bool has_messages()"
          ],
          "pascal": [
            "function HasMessages(): Boolean"
          ]
        }
      },
      {
        "signature": "bool has_messages(connection con);",
        "name": "has_messages",
        "method_name": null,
        "unique_global_name": "has_messages_on_connection",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks if a connection has messages waiting to be read.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if there are any messages on the connection.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "con": {
            "type": "connection",
            "description": "The connection",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "connection",
          "getter": "has_messages",
          "suffix": "on_connection",
          "group": "networking",
          "static": "networking",
          "self": "con"
        },
        "signatures": {
          "python": [
            "def has_messages_on_connection(con):"
          ],
          "csharp": [
            "public bool Connection.HasMessages { get }",
            "public static bool SplashKit.HasMessages(Connection con);"
          ],
          "cpp": [
            "bool has_messages(connection con)"
          ],
          "pascal": [
            "function HasMessages(con: Connection): Boolean"
          ]
        }
      },
      {
        "signature": "bool has_messages(const string &name);",
        "name": "has_messages",
        "method_name": null,
        "unique_global_name": "has_messages_on_name",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks if a server or connection has any messages.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "[description]",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the server or connection to check.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "on_name",
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def has_messages_on_name(name):"
          ],
          "csharp": [
            "public static bool SplashKit.HasMessages(string name);"
          ],
          "cpp": [
            "bool has_messages(const string &name)"
          ],
          "pascal": [
            "function HasMessages(const name: String): Boolean"
          ]
        }
      },
      {
        "signature": "bool has_messages(server_socket svr);",
        "name": "has_messages",
        "method_name": null,
        "unique_global_name": "has_messages_on_server",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks if a server has any messages waiting to be read.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if there are messages on the server.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "svr": {
            "type": "server_socket",
            "description": "The server to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "server_socket",
          "getter": "has_messages",
          "suffix": "on_server",
          "group": "networking",
          "static": "networking",
          "self": "svr"
        },
        "signatures": {
          "python": [
            "def has_messages_on_server(svr):"
          ],
          "csharp": [
            "public bool ServerSocket.HasMessages { get }",
            "public static bool SplashKit.HasMessages(ServerSocket svr);"
          ],
          "cpp": [
            "bool has_messages(server_socket svr)"
          ],
          "pascal": [
            "function HasMessages(svr: ServerSocket): Boolean"
          ]
        }
      },
      {
        "signature": "bool has_new_connections();",
        "name": "has_new_connections",
        "method_name": null,
        "unique_global_name": "has_new_connections",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks if any of the servers have new connections.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if there is one or more servers with new connections.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def has_new_connections():"
          ],
          "csharp": [
            "public static bool SplashKit.HasNewConnections();"
          ],
          "cpp": [
            "bool has_new_connections()"
          ],
          "pascal": [
            "function HasNewConnections(): Boolean"
          ]
        }
      },
      {
        "signature": "bool has_server(const string &name);",
        "name": "has_server",
        "method_name": null,
        "unique_global_name": "has_server",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks if there is a server with the indicated name.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if there is a server with that name",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the server to check",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def has_server(name):"
          ],
          "csharp": [
            "public static bool SplashKit.HasServer(string name);"
          ],
          "cpp": [
            "bool has_server(const string &name)"
          ],
          "pascal": [
            "function HasServer(const name: String): Boolean"
          ]
        }
      },
      {
        "signature": "string hex_str_to_ipv4(const string &a_hex);",
        "name": "hex_str_to_ipv4",
        "method_name": null,
        "unique_global_name": "hex_str_to_ipv4",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The supplied hexadecimal string is translated into ipv4 standard address string.\nFunction handles hex strings starting with or without 0x.\ne.g. 127.0.0.1 from 0x7F000001",
        "brief": "Converts a hexadecimal ipv4 string to standard ipv4 address string x.x.x.x",
        "return": {
          "type": "string",
          "description": "standard ipv4 address using format X.X.X.X",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "a_hex": {
            "type": "string",
            "description": "hexadecimal ipv4 string to convert",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def hex_str_to_ipv4(a_hex):"
          ],
          "csharp": [
            "public static string SplashKit.HexStrToIpv4(string aHex);"
          ],
          "cpp": [
            "string hex_str_to_ipv4(const string &a_hex)"
          ],
          "pascal": [
            "function HexStrToIpv4(const aHex: String): String"
          ]
        }
      },
      {
        "signature": "string hex_to_dec_string(const string &a_hex);",
        "name": "hex_to_dec_string",
        "method_name": null,
        "unique_global_name": "hex_to_dec_string",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The supplied hexadecimal string is converted into it's decimal representation\ne.g. 7F into 127",
        "brief": "Converts a hexadecimal string to a decimal string",
        "return": {
          "type": "string",
          "description": "decimal representation of supplied hex string",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "a_hex": {
            "type": "string",
            "description": "hexadecimal string to convert",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def hex_to_dec_string(a_hex):"
          ],
          "csharp": [
            "public static string SplashKit.HexToDecString(string aHex);"
          ],
          "cpp": [
            "string hex_to_dec_string(const string &a_hex)"
          ],
          "pascal": [
            "function HexToDecString(const aHex: String): String"
          ]
        }
      },
      {
        "signature": "unsigned int ipv4_to_dec(const string &a_ip);",
        "name": "ipv4_to_dec",
        "method_name": null,
        "unique_global_name": "ipv4_to_dec",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Encodes the supplied ipv4 address string (in format X.X.X.X) into a single integer\ne.g. 127.0.0.1 into 2130706433",
        "brief": "Encodes ipv4 string into single integer",
        "return": {
          "type": "unsigned int",
          "description": "encoded ipv4 string",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "a_ip": {
            "type": "string",
            "description": "ipv4 address to encode",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def ipv4_to_dec(a_ip):"
          ],
          "csharp": [
            "public static uint SplashKit.Ipv4ToDec(string aIP);"
          ],
          "cpp": [
            "unsigned int ipv4_to_dec(const string &a_ip)"
          ],
          "pascal": [
            "function Ipv4ToDec(const aIP: String): Cardinal"
          ]
        }
      },
      {
        "signature": "string ipv4_to_hex(const string& a_ip);",
        "name": "ipv4_to_hex",
        "method_name": null,
        "unique_global_name": "ipv4_to_hex",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Converts an ipv4 address into it's hexadecimal representation\ne.g. 0x7F000001 from 127.0.0.1",
        "brief": "Converts an ipv4 address string to hex representation",
        "return": {
          "type": "string",
          "description": "hexadecimal representation of ipc4 string",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "a_ip": {
            "type": "string",
            "description": "ip address to convert",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def ipv4_to_hex(a_ip):"
          ],
          "csharp": [
            "public static string SplashKit.Ipv4ToHex(string aIP);"
          ],
          "cpp": [
            "string ipv4_to_hex(const string &a_ip)"
          ],
          "pascal": [
            "function Ipv4ToHex(const aIP: String): String"
          ]
        }
      },
      {
        "signature": "string ipv4_to_str(unsigned int ip);",
        "name": "ipv4_to_str",
        "method_name": null,
        "unique_global_name": "ipv4_to_str",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Decodes the supplied unsigned 32 bit integer into it's ipv4 address form\ne.g. 2130706433 into 127.0.0.1",
        "brief": "Decodes an integer into it's ipv4 address representation",
        "return": {
          "type": "string",
          "description": "ipv4 address string in X.X.X.X format",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "ip": {
            "type": "unsigned int",
            "description": "integer to be decoded",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def ipv4_to_str(ip):"
          ],
          "csharp": [
            "public static string SplashKit.Ipv4ToStr(uint ip);"
          ],
          "cpp": [
            "string ipv4_to_str(unsigned int ip)"
          ],
          "pascal": [
            "function Ipv4ToStr(ip: Cardinal): String"
          ]
        }
      },
      {
        "signature": "bool is_connection_open(connection con);",
        "name": "is_connection_open",
        "method_name": null,
        "unique_global_name": "is_connection_open",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks if the connection currently is open.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the connection is open.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "con": {
            "type": "connection",
            "description": "The connection",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "connection",
          "getter": "is_open",
          "group": "networking",
          "static": "networking",
          "self": "con"
        },
        "signatures": {
          "python": [
            "def is_connection_open(con):"
          ],
          "csharp": [
            "public bool Connection.IsOpen { get }",
            "public static bool SplashKit.IsConnectionOpen(Connection con);"
          ],
          "cpp": [
            "bool is_connection_open(connection con)"
          ],
          "pascal": [
            "function IsConnectionOpen(con: Connection): Boolean"
          ]
        }
      },
      {
        "signature": "bool is_connection_open(const string &name);",
        "name": "is_connection_open",
        "method_name": null,
        "unique_global_name": "is_connection_open_from_name",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks if the connection with the supplied name currently is open.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the connection is open.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the connection",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "from_name",
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def is_connection_open_from_name(name):"
          ],
          "csharp": [
            "public static bool SplashKit.IsConnectionOpen(string name);"
          ],
          "cpp": [
            "bool is_connection_open(const string &name)"
          ],
          "pascal": [
            "function IsConnectionOpen(const name: String): Boolean"
          ]
        }
      },
      {
        "signature": "bool is_valid_ipv4(const string &ip);",
        "name": "is_valid_ipv4",
        "method_name": null,
        "unique_global_name": "is_valid_ipv4",
        "unique_method_name": null,
        "suffix_name": null,
        "description": null,
        "brief": "Validates if a given string represents a valid IPv4 address.",
        "return": {
          "type": "bool",
          "description": "bool Returns true if the string is a valid IPv4 address, false otherwise",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "ip": {
            "type": "string",
            "description": "The string containing the IP address to validate",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def is_valid_ipv4(ip):"
          ],
          "csharp": [
            "public static bool SplashKit.IsValidIpv4(string ip);"
          ],
          "cpp": [
            "bool is_valid_ipv4(const string &ip)"
          ],
          "pascal": [
            "function IsValidIpv4(const ip: String): Boolean"
          ]
        }
      },
      {
        "signature": "connection last_connection(const string &name);",
        "name": "last_connection",
        "method_name": null,
        "unique_global_name": "last_connection_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Gets the last client that connected to a server.",
        "brief": null,
        "return": {
          "type": "connection",
          "description": "The last connection made to that server",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the server to check",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "named",
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def last_connection_named(name):"
          ],
          "csharp": [
            "public static Connection SplashKit.LastConnection(string name);"
          ],
          "cpp": [
            "connection last_connection(const string &name)"
          ],
          "pascal": [
            "function LastConnection(const name: String): Connection"
          ]
        }
      },
      {
        "signature": "connection last_connection(server_socket server);",
        "name": "last_connection",
        "method_name": null,
        "unique_global_name": "last_connection",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Gets the last client that connected to a server.",
        "brief": null,
        "return": {
          "type": "connection",
          "description": "The last connection made to that server",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "server": {
            "type": "server_socket",
            "description": "The server to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "server_socket",
          "getter": "last_connection",
          "group": "networking",
          "static": "networking",
          "self": "server"
        },
        "signatures": {
          "python": [
            "def last_connection(server):"
          ],
          "csharp": [
            "public Connection ServerSocket.LastConnection { get }",
            "public static Connection SplashKit.LastConnection(ServerSocket server);"
          ],
          "cpp": [
            "connection last_connection(server_socket server)"
          ],
          "pascal": [
            "function LastConnection(server: ServerSocket): Connection"
          ]
        }
      },
      {
        "signature": "connection message_connection(message msg);",
        "name": "message_connection",
        "method_name": null,
        "unique_global_name": "message_connection",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the connection that sent a message.",
        "brief": null,
        "return": {
          "type": "connection",
          "description": "The connection that sent the message",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "msg": {
            "type": "message",
            "description": "The message",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def message_connection(msg):"
          ],
          "csharp": [
            "public static Connection SplashKit.MessageConnection(Message msg);"
          ],
          "cpp": [
            "connection message_connection(message msg)"
          ],
          "pascal": [
            "function MessageConnection(msg: Message): Connection"
          ]
        }
      },
      {
        "signature": "unsigned int message_count(server_socket svr);",
        "name": "message_count",
        "method_name": null,
        "unique_global_name": "message_count_on_server",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the number of messages on a server.",
        "brief": null,
        "return": {
          "type": "unsigned int",
          "description": "The number of messages on the server",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "svr": {
            "type": "server_socket",
            "description": "The server to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "server_socket",
          "getter": "message_count",
          "suffix": "on_server",
          "group": "networking",
          "static": "networking",
          "self": "svr"
        },
        "signatures": {
          "python": [
            "def message_count_on_server(svr):"
          ],
          "csharp": [
            "public uint ServerSocket.MessageCount { get }",
            "public static uint SplashKit.MessageCount(ServerSocket svr);"
          ],
          "cpp": [
            "unsigned int message_count(server_socket svr)"
          ],
          "pascal": [
            "function MessageCount(svr: ServerSocket): Cardinal"
          ]
        }
      },
      {
        "signature": "unsigned int message_count(connection a_connection);",
        "name": "message_count",
        "method_name": null,
        "unique_global_name": "message_count_on_connection",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the number of messages on a connection.",
        "brief": null,
        "return": {
          "type": "unsigned int",
          "description": "The number of messages to be read from the connection",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "a_connection": {
            "type": "connection",
            "description": "The connection",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "connection",
          "getter": "message_count",
          "suffix": "on_connection",
          "group": "networking",
          "static": "networking",
          "self": "a_connection"
        },
        "signatures": {
          "python": [
            "def message_count_on_connection(a_connection):"
          ],
          "csharp": [
            "public uint Connection.MessageCount { get }",
            "public static uint SplashKit.MessageCount(Connection aConnection);"
          ],
          "cpp": [
            "unsigned int message_count(connection a_connection)"
          ],
          "pascal": [
            "function MessageCount(aConnection: Connection): Cardinal"
          ]
        }
      },
      {
        "signature": "unsigned int message_count(const string &name);",
        "name": "message_count",
        "method_name": null,
        "unique_global_name": "message_count_from_name",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the number of messages on a server or connection.",
        "brief": null,
        "return": {
          "type": "unsigned int",
          "description": "The number of messages on the server or connection",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the server or connection",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "from_name",
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def message_count_from_name(name):"
          ],
          "csharp": [
            "public static uint SplashKit.MessageCount(string name);"
          ],
          "cpp": [
            "unsigned int message_count(const string &name)"
          ],
          "pascal": [
            "function MessageCount(const name: String): Cardinal"
          ]
        }
      },
      {
        "signature": "string message_data(message msg);",
        "name": "message_data",
        "method_name": null,
        "unique_global_name": "message_data",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Gets the body of a message as a string.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "The string body of the message",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "msg": {
            "type": "message",
            "description": "The message to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "message",
          "getter": "data",
          "group": "networking",
          "static": "networking",
          "self": "msg"
        },
        "signatures": {
          "python": [
            "def message_data(msg):"
          ],
          "csharp": [
            "public string Message.Data { get }",
            "public static string SplashKit.MessageData(Message msg);"
          ],
          "cpp": [
            "string message_data(message msg)"
          ],
          "pascal": [
            "function MessageData(msg: Message): String"
          ]
        }
      },
      {
        "signature": "vector<int8_t> message_data_bytes(message msg);",
        "name": "message_data_bytes",
        "method_name": null,
        "unique_global_name": "message_data_bytes",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Gets the body of a message as a list of bytes.",
        "brief": null,
        "return": {
          "type": "vector",
          "description": "The body of the message as bytes",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": true,
          "type_parameter": "int8_t"
        },
        "parameters": {
          "msg": {
            "type": "message",
            "description": "The message to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "message",
          "getter": "data_bytes",
          "group": "networking",
          "static": "networking",
          "self": "msg"
        },
        "signatures": {
          "python": [
            "def message_data_bytes(msg):"
          ],
          "csharp": [
            "public List<byte> Message.DataBytes { get }",
            "public static List<byte> SplashKit.MessageDataBytes(Message msg);"
          ],
          "cpp": [
            "vector<int8_t> message_data_bytes(message msg)"
          ],
          "pascal": [
            "function MessageDataBytes(msg: Message): ArrayOfChar"
          ]
        }
      },
      {
        "signature": "string message_host(message msg);",
        "name": "message_host",
        "method_name": null,
        "unique_global_name": "message_host",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the host who made the message.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "The host who sent the message",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "msg": {
            "type": "message",
            "description": "The message to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "message",
          "getter": "host",
          "group": "networking",
          "static": "networking",
          "self": "msg"
        },
        "signatures": {
          "python": [
            "def message_host(msg):"
          ],
          "csharp": [
            "public string Message.Host { get }",
            "public static string SplashKit.MessageHost(Message msg);"
          ],
          "cpp": [
            "string message_host(message msg)"
          ],
          "pascal": [
            "function MessageHost(msg: Message): String"
          ]
        }
      },
      {
        "signature": "unsigned short int message_port(message msg);",
        "name": "message_port",
        "method_name": null,
        "unique_global_name": "message_port",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the port used to send a message.",
        "brief": null,
        "return": {
          "type": "unsigned short",
          "description": "The port of the message",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "msg": {
            "type": "message",
            "description": "The message to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "message",
          "getter": "port",
          "group": "networking",
          "static": "networking",
          "self": "msg"
        },
        "signatures": {
          "python": [
            "def message_port(msg):"
          ],
          "csharp": [
            "public ushort Message.Port { get }",
            "public static ushort SplashKit.MessagePort(Message msg);"
          ],
          "cpp": [
            "unsigned short message_port(message msg)"
          ],
          "pascal": [
            "function MessagePort(msg: Message): Word"
          ]
        }
      },
      {
        "signature": "connection_type message_protocol(message msg);",
        "name": "message_protocol",
        "method_name": null,
        "unique_global_name": "message_protocol",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the protocol used to send a message.",
        "brief": null,
        "return": {
          "type": "connection_type",
          "description": "The protocol used to sent the message",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "msg": {
            "type": "message",
            "description": "The message to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "message",
          "getter": "protocol",
          "group": "networking",
          "static": "networking",
          "self": "msg"
        },
        "signatures": {
          "python": [
            "def message_protocol(msg):"
          ],
          "csharp": [
            "public ConnectionType Message.Protocol { get }",
            "public static ConnectionType SplashKit.MessageProtocol(Message msg);"
          ],
          "cpp": [
            "connection_type message_protocol(message msg)"
          ],
          "pascal": [
            "function MessageProtocol(msg: Message): ConnectionType"
          ]
        }
      },
      {
        "signature": "string my_ip();",
        "name": "my_ip",
        "method_name": null,
        "unique_global_name": "my_ip",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the ipv4 string of the localhost loopback for the current computer.",
        "brief": "Returns the ipv4 string for the current computer's ip",
        "return": {
          "type": "string",
          "description": "ipv4 address string in X.X.X.X format",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def my_ip():"
          ],
          "csharp": [
            "public static string SplashKit.MyIP();"
          ],
          "cpp": [
            "string my_ip()"
          ],
          "pascal": [
            "function MyIP(): String"
          ]
        }
      },
      {
        "signature": "string name_for_connection(const string host,const unsigned int port);",
        "name": "name_for_connection",
        "method_name": null,
        "unique_global_name": "name_for_connection",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the name SplashKit would use for a connection made to a server\nfrom a host to a port.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "The name SplashKit would use for this connection",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "host": {
            "type": "string",
            "description": "The host name",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "port": {
            "type": "unsigned int",
            "description": "The port",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def name_for_connection(host, port):"
          ],
          "csharp": [
            "public static string SplashKit.NameForConnection(string host, uint port);"
          ],
          "cpp": [
            "string name_for_connection(const string host, const unsigned int port)"
          ],
          "pascal": [
            "function NameForConnection(host: String; port: Cardinal): String"
          ]
        }
      },
      {
        "signature": "int new_connection_count(server_socket server);",
        "name": "new_connection_count",
        "method_name": null,
        "unique_global_name": "new_connection_count",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Get the number of new connections made to the server.\nThe count will increase as the server accepts new connections.\nThe count decreases each time you fetch a new connection, or\ncan be set to 0 if you reset the new connection count.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The number of new connections",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "server": {
            "type": "server_socket",
            "description": "The server to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "server_socket",
          "getter": "new_connection_count",
          "group": "networking",
          "static": "networking",
          "self": "server"
        },
        "signatures": {
          "python": [
            "def new_connection_count(server):"
          ],
          "csharp": [
            "public int ServerSocket.NewConnectionCount { get }",
            "public static int SplashKit.NewConnectionCount(ServerSocket server);"
          ],
          "cpp": [
            "int new_connection_count(server_socket server)"
          ],
          "pascal": [
            "function NewConnectionCount(server: ServerSocket): Integer"
          ]
        }
      },
      {
        "signature": "connection open_connection(const string &name,const string &host,unsigned short int port);",
        "name": "open_connection",
        "method_name": null,
        "unique_global_name": "open_connection",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Opens a TCP connection to a server using the supplied details.",
        "brief": null,
        "return": {
          "type": "connection",
          "description": "A new connection to the indicated server",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name for the connection",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "host": {
            "type": "string",
            "description": "The address of the server",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "port": {
            "type": "unsigned short",
            "description": "The server's port",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "connection",
          "constructor": true,
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def open_connection(name, host, port):"
          ],
          "csharp": [
            "public static Connection SplashKit.OpenConnection(string name, string host, ushort port);",
            "public Connection(string name, string host, ushort port);"
          ],
          "cpp": [
            "connection open_connection(const string &name, const string &host, unsigned short port)"
          ],
          "pascal": [
            "function OpenConnection(const name: String; const host: String; port: Word): Connection"
          ]
        }
      },
      {
        "signature": "connection open_connection(const string &name,const string &host,unsigned short int port,connection_type protocol);",
        "name": "open_connection",
        "method_name": null,
        "unique_global_name": "open_connection_with_protocol",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Opens a connection to a server using the supplied details.",
        "brief": null,
        "return": {
          "type": "connection",
          "description": "A new connection to the indicated server",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name for the connection",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "host": {
            "type": "string",
            "description": "The address of the server",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "port": {
            "type": "unsigned short",
            "description": "The server's port",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "protocol": {
            "type": "connection_type",
            "description": "The protocol used to connect to the server",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "connection",
          "constructor": true,
          "suffix": "with_protocol",
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def open_connection_with_protocol(name, host, port, protocol):"
          ],
          "csharp": [
            "public static Connection SplashKit.OpenConnection(string name, string host, ushort port, ConnectionType protocol);",
            "public Connection(string name, string host, ushort port, ConnectionType protocol);"
          ],
          "cpp": [
            "connection open_connection(const string &name, const string &host, unsigned short port, connection_type protocol)"
          ],
          "pascal": [
            "function OpenConnection(const name: String; const host: String; port: Word; protocol: ConnectionType): Connection"
          ]
        }
      },
      {
        "signature": "message read_message();",
        "name": "read_message",
        "method_name": null,
        "unique_global_name": "read_message",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Read a message from the network (from a server or connection).",
        "brief": null,
        "return": {
          "type": "message",
          "description": "The first message from the network.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def read_message():"
          ],
          "csharp": [
            "public static Message SplashKit.ReadMessage();"
          ],
          "cpp": [
            "message read_message()"
          ],
          "pascal": [
            "function ReadMessage(): Message"
          ]
        }
      },
      {
        "signature": "message read_message(connection a_connection);",
        "name": "read_message",
        "method_name": "read_message",
        "unique_global_name": "read_message_from_connection",
        "unique_method_name": "connection.read_message_from_connection",
        "suffix_name": null,
        "description": "Reads the first message from the connection.",
        "brief": null,
        "return": {
          "type": "message",
          "description": "The first message read from the connection",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "a_connection": {
            "type": "connection",
            "description": "A connection",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "connection",
          "method": "read_message",
          "suffix": "from_connection",
          "group": "networking",
          "static": "networking",
          "self": "a_connection"
        },
        "signatures": {
          "python": [
            "def read_message_from_connection(a_connection):"
          ],
          "csharp": [
            "public Message Connection.ReadMessage();",
            "public static Message SplashKit.ReadMessage(Connection aConnection);"
          ],
          "cpp": [
            "message read_message(connection a_connection)"
          ],
          "pascal": [
            "function ReadMessage(aConnection: Connection): Message"
          ]
        }
      },
      {
        "signature": "message read_message(const string &name);",
        "name": "read_message",
        "method_name": null,
        "unique_global_name": "read_message_from_name",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Reads the first message from a connection or server.",
        "brief": null,
        "return": {
          "type": "message",
          "description": "The first message read from the connection or server",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of a connection or server",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "from_name",
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def read_message_from_name(name):"
          ],
          "csharp": [
            "public static Message SplashKit.ReadMessage(string name);"
          ],
          "cpp": [
            "message read_message(const string &name)"
          ],
          "pascal": [
            "function ReadMessage(const name: String): Message"
          ]
        }
      },
      {
        "signature": "message read_message(server_socket svr);",
        "name": "read_message",
        "method_name": "read_message",
        "unique_global_name": "read_message_from_server",
        "unique_method_name": "server_socket.read_message_from_server",
        "suffix_name": null,
        "description": "Reads the first message from the server.",
        "brief": null,
        "return": {
          "type": "message",
          "description": "The first message read from the server",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "svr": {
            "type": "server_socket",
            "description": "A server",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "server_socket",
          "method": "read_message",
          "suffix": "from_server",
          "group": "networking",
          "static": "networking",
          "self": "svr"
        },
        "signatures": {
          "python": [
            "def read_message_from_server(svr):"
          ],
          "csharp": [
            "public Message ServerSocket.ReadMessage();",
            "public static Message SplashKit.ReadMessage(ServerSocket svr);"
          ],
          "cpp": [
            "message read_message(server_socket svr)"
          ],
          "pascal": [
            "function ReadMessage(svr: ServerSocket): Message"
          ]
        }
      },
      {
        "signature": "string read_message_data(const string &name);",
        "name": "read_message_data",
        "method_name": null,
        "unique_global_name": "read_message_data_from_name",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Read message data from a connection or server.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "The data from the first message from the server or connection",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the connection or server",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "from_name",
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def read_message_data_from_name(name):"
          ],
          "csharp": [
            "public static string SplashKit.ReadMessageData(string name);"
          ],
          "cpp": [
            "string read_message_data(const string &name)"
          ],
          "pascal": [
            "function ReadMessageData(const name: String): String"
          ]
        }
      },
      {
        "signature": "string read_message_data(connection a_connection);",
        "name": "read_message_data",
        "method_name": "read_message_data",
        "unique_global_name": "read_message_data_from_connection",
        "unique_method_name": "connection.read_message_data_from_connection",
        "suffix_name": null,
        "description": "Read message data from a connection.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "The data from the first message on the connection",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "a_connection": {
            "type": "connection",
            "description": "The connection",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "connection",
          "method": "read_message_data",
          "suffix": "from_connection",
          "group": "networking",
          "static": "networking",
          "self": "a_connection"
        },
        "signatures": {
          "python": [
            "def read_message_data_from_connection(a_connection):"
          ],
          "csharp": [
            "public string Connection.ReadMessageData();",
            "public static string SplashKit.ReadMessageData(Connection aConnection);"
          ],
          "cpp": [
            "string read_message_data(connection a_connection)"
          ],
          "pascal": [
            "function ReadMessageData(aConnection: Connection): String"
          ]
        }
      },
      {
        "signature": "string read_message_data(server_socket svr);",
        "name": "read_message_data",
        "method_name": "read_message_data",
        "unique_global_name": "read_message_data_from_server",
        "unique_method_name": "server_socket.read_message_data_from_server",
        "suffix_name": null,
        "description": "Read message data from a server.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "The data from the first message on the server",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "svr": {
            "type": "server_socket",
            "description": "The server",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "server_socket",
          "method": "read_message_data",
          "suffix": "from_server",
          "group": "networking",
          "static": "networking",
          "self": "svr"
        },
        "signatures": {
          "python": [
            "def read_message_data_from_server(svr):"
          ],
          "csharp": [
            "public string ServerSocket.ReadMessageData();",
            "public static string SplashKit.ReadMessageData(ServerSocket svr);"
          ],
          "cpp": [
            "string read_message_data(server_socket svr)"
          ],
          "pascal": [
            "function ReadMessageData(svr: ServerSocket): String"
          ]
        }
      },
      {
        "signature": "void reconnect(connection a_connection);",
        "name": "reconnect",
        "method_name": "reconnect",
        "unique_global_name": "reconnect",
        "unique_method_name": "connection.reconnect",
        "suffix_name": null,
        "description": "Attempt to reconnect the connection.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "a_connection": {
            "type": "connection",
            "description": "The connection to reconnect",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "connection",
          "method": "reconnect",
          "group": "networking",
          "static": "networking",
          "self": "a_connection"
        },
        "signatures": {
          "python": [
            "def reconnect(a_connection):"
          ],
          "csharp": [
            "public void Connection.Reconnect();",
            "public static void SplashKit.Reconnect(Connection aConnection);"
          ],
          "cpp": [
            "void reconnect(connection a_connection)"
          ],
          "pascal": [
            "procedure Reconnect(aConnection: Connection)"
          ]
        }
      },
      {
        "signature": "void reconnect(const string &name);",
        "name": "reconnect",
        "method_name": null,
        "unique_global_name": "reconnect_from_name",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Attempt to reconnect the connection.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the connection to reconnect.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "from_name",
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def reconnect_from_name(name):"
          ],
          "csharp": [
            "public static void SplashKit.Reconnect(string name);"
          ],
          "cpp": [
            "void reconnect(const string &name)"
          ],
          "pascal": [
            "procedure Reconnect(const name: String)"
          ]
        }
      },
      {
        "signature": "void release_all_connections();",
        "name": "release_all_connections",
        "method_name": null,
        "unique_global_name": "release_all_connections",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Close and release the resources used by all of the connections.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def release_all_connections():"
          ],
          "csharp": [
            "public static void SplashKit.ReleaseAllConnections();"
          ],
          "cpp": [
            "void release_all_connections()"
          ],
          "pascal": [
            "procedure ReleaseAllConnections()"
          ]
        }
      },
      {
        "signature": "void reset_new_connection_count(server_socket server);",
        "name": "reset_new_connection_count",
        "method_name": "reset_new_connection_count",
        "unique_global_name": "reset_new_connection_count",
        "unique_method_name": "server_socket.reset_new_connection_count",
        "suffix_name": null,
        "description": "Allows you to reset the new connection count to 0.\n(The connections are kept)",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "server": {
            "type": "server_socket",
            "description": "The server to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "server_socket",
          "method": "reset_new_connection_count",
          "group": "networking",
          "static": "networking",
          "self": "server"
        },
        "signatures": {
          "python": [
            "def reset_new_connection_count(server):"
          ],
          "csharp": [
            "public void ServerSocket.ResetNewConnectionCount();",
            "public static void SplashKit.ResetNewConnectionCount(ServerSocket server);"
          ],
          "cpp": [
            "void reset_new_connection_count(server_socket server)"
          ],
          "pascal": [
            "procedure ResetNewConnectionCount(server: ServerSocket)"
          ]
        }
      },
      {
        "signature": "connection retrieve_connection(const string &name,int idx);",
        "name": "retrieve_connection",
        "method_name": null,
        "unique_global_name": "retrieve_connection_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Get a connection from the server.",
        "brief": null,
        "return": {
          "type": "connection",
          "description": "The connection at the supplied index",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the server",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "idx": {
            "type": "int",
            "description": "The index of the connection",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "named",
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def retrieve_connection_named(name, idx):"
          ],
          "csharp": [
            "public static Connection SplashKit.RetrieveConnection(string name, int idx);"
          ],
          "cpp": [
            "connection retrieve_connection(const string &name, int idx)"
          ],
          "pascal": [
            "function RetrieveConnection(const name: String; idx: Integer): Connection"
          ]
        }
      },
      {
        "signature": "connection retrieve_connection(server_socket server,int idx);",
        "name": "retrieve_connection",
        "method_name": "retrieve_connection",
        "unique_global_name": "retrieve_connection",
        "unique_method_name": "server_socket.retrieve_connection",
        "suffix_name": null,
        "description": "Get a connection from the server.",
        "brief": null,
        "return": {
          "type": "connection",
          "description": "The connection at the supplied index",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "server": {
            "type": "server_socket",
            "description": "The server",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "idx": {
            "type": "int",
            "description": "The index of the connection",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "server_socket",
          "method": "retrieve_connection",
          "group": "networking",
          "static": "networking",
          "self": "server"
        },
        "signatures": {
          "python": [
            "def retrieve_connection(server, idx):"
          ],
          "csharp": [
            "public Connection ServerSocket.RetrieveConnection(int idx);",
            "public static Connection SplashKit.RetrieveConnection(ServerSocket server, int idx);"
          ],
          "cpp": [
            "connection retrieve_connection(server_socket server, int idx)"
          ],
          "pascal": [
            "function RetrieveConnection(server: ServerSocket; idx: Integer): Connection"
          ]
        }
      },
      {
        "signature": "bool send_message_to(const string &a_msg,connection a_connection);",
        "name": "send_message_to",
        "method_name": "send_message",
        "unique_global_name": "send_message_to_connection",
        "unique_method_name": "connection.send_message_connection",
        "suffix_name": null,
        "description": "Send a message to the connection.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the message sends.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "a_msg": {
            "type": "string",
            "description": "The message to send",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "a_connection": {
            "type": "connection",
            "description": "The connection to send the message to",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "connection",
          "method": "send_message",
          "self": "a_connection",
          "suffix": "connection",
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def send_message_to_connection(a_msg, a_connection):"
          ],
          "csharp": [
            "public bool Connection.SendMessage(string aMsg);",
            "public static bool SplashKit.SendMessageTo(string aMsg, Connection aConnection);"
          ],
          "cpp": [
            "bool send_message_to(const string &a_msg, connection a_connection)"
          ],
          "pascal": [
            "function SendMessageTo(const aMsg: String; aConnection: Connection): Boolean"
          ]
        }
      },
      {
        "signature": "bool send_message_to(const string &a_msg,const string &name);",
        "name": "send_message_to",
        "method_name": null,
        "unique_global_name": "send_message_to_name",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Send a message to the connection with the given name.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the message sends",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "a_msg": {
            "type": "string",
            "description": "The message to send",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the connection to send the message to",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "name",
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def send_message_to_name(a_msg, name):"
          ],
          "csharp": [
            "public static bool SplashKit.SendMessageTo(string aMsg, string name);"
          ],
          "cpp": [
            "bool send_message_to(const string &a_msg, const string &name)"
          ],
          "pascal": [
            "function SendMessageTo(const aMsg: String; const name: String): Boolean"
          ]
        }
      },
      {
        "signature": "bool server_has_new_connection(const string &name);",
        "name": "server_has_new_connection",
        "method_name": null,
        "unique_global_name": "server_has_new_connection_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks of there are new connections waiting for a server.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the server has new connections",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the server to check",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "named",
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def server_has_new_connection_named(name):"
          ],
          "csharp": [
            "public static bool SplashKit.ServerHasNewConnection(string name);"
          ],
          "cpp": [
            "bool server_has_new_connection(const string &name)"
          ],
          "pascal": [
            "function ServerHasNewConnection(const name: String): Boolean"
          ]
        }
      },
      {
        "signature": "bool server_has_new_connection(server_socket server);",
        "name": "server_has_new_connection",
        "method_name": null,
        "unique_global_name": "server_has_new_connection",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks of there are new connections waiting for a server.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the server has new connections",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "server": {
            "type": "server_socket",
            "description": "The server to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "server_socket",
          "getter": "has_new_connections",
          "group": "networking",
          "static": "networking",
          "self": "server"
        },
        "signatures": {
          "python": [
            "def server_has_new_connection(server):"
          ],
          "csharp": [
            "public bool ServerSocket.HasNewConnections { get }",
            "public static bool SplashKit.ServerHasNewConnection(ServerSocket server);"
          ],
          "cpp": [
            "bool server_has_new_connection(server_socket server)"
          ],
          "pascal": [
            "function ServerHasNewConnection(server: ServerSocket): Boolean"
          ]
        }
      },
      {
        "signature": "server_socket server_named(const string &name);",
        "name": "server_named",
        "method_name": null,
        "unique_global_name": "server_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Gets the server with the indicated name.",
        "brief": null,
        "return": {
          "type": "server_socket",
          "description": "The server",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the server to get",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def server_named(name):"
          ],
          "csharp": [
            "public static ServerSocket SplashKit.ServerNamed(string name);"
          ],
          "cpp": [
            "server_socket server_named(const string &name)"
          ],
          "pascal": [
            "function ServerNamed(const name: String): ServerSocket"
          ]
        }
      },
      {
        "signature": "void set_udp_packet_size(unsigned int udp_packet_size);",
        "name": "set_udp_packet_size",
        "method_name": null,
        "unique_global_name": "set_udp_packet_size",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Change the size of the UDP packets.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "udp_packet_size": {
            "type": "unsigned int",
            "description": "The new packet size.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "setter": "udp_packet_size",
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def set_udp_packet_size(udp_packet_size):"
          ],
          "csharp": [
            "public static void Networking.UDPPacketSize { set }",
            "public static void SplashKit.SetUDPPacketSize(uint udpPacketSize);"
          ],
          "cpp": [
            "void set_udp_packet_size(unsigned int udp_packet_size)"
          ],
          "pascal": [
            "procedure SetUDPPacketSize(udpPacketSize: Cardinal)"
          ]
        }
      },
      {
        "signature": "unsigned int udp_packet_size();",
        "name": "udp_packet_size",
        "method_name": null,
        "unique_global_name": "udp_packet_size",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the size SplashKit is using for UDP packets.",
        "brief": null,
        "return": {
          "type": "unsigned int",
          "description": "The size of UDP packets.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "udp_packet_size",
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": [
            "def udp_packet_size():"
          ],
          "csharp": [
            "public static uint Networking.UDPPacketSize { get }",
            "public static uint SplashKit.UDPPacketSize();"
          ],
          "cpp": [
            "unsigned int udp_packet_size()"
          ],
          "pascal": [
            "function UDPPacketSize(): Cardinal"
          ]
        }
      },
      {
        "signature": "bitmap download_bitmap(const string &name,const string &url,unsigned short port);",
        "name": "download_bitmap",
        "method_name": null,
        "unique_global_name": "download_bitmap",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Download an image from a web server and load it into SplashKit so that\nyou can use it.",
        "brief": null,
        "return": {
          "type": "bitmap",
          "description": "The bitmap that was loaded",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the bitmap resource when it is loaded",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "url": {
            "type": "string",
            "description": "The URL path to the image resoure",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "port": {
            "type": "unsigned short",
            "description": "The port to connect to on the server",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking"
        },
        "signatures": {
          "python": [
            "def download_bitmap(name, url, port):"
          ],
          "csharp": [
            "public static Bitmap SplashKit.DownloadBitmap(string name, string url, ushort port);"
          ],
          "cpp": [
            "bitmap download_bitmap(const string &name, const string &url, unsigned short port)"
          ],
          "pascal": [
            "function DownloadBitmap(const name: String; const url: String; port: Word): Bitmap"
          ]
        }
      },
      {
        "signature": "font download_font(const string &name,const string &url,unsigned short port);",
        "name": "download_font",
        "method_name": null,
        "unique_global_name": "download_font",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Download a font from a web server and load it into SplashKit so that\nyou can use it.",
        "brief": null,
        "return": {
          "type": "font",
          "description": "The font that was loaded",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the font resource when it is loaded",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "url": {
            "type": "string",
            "description": "The URL path to the font resoure",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "port": {
            "type": "unsigned short",
            "description": "The port to connect to on the server",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking"
        },
        "signatures": {
          "python": [
            "def download_font(name, url, port):"
          ],
          "csharp": [
            "public static Font SplashKit.DownloadFont(string name, string url, ushort port);"
          ],
          "cpp": [
            "font download_font(const string &name, const string &url, unsigned short port)"
          ],
          "pascal": [
            "function DownloadFont(const name: String; const url: String; port: Word): Font"
          ]
        }
      },
      {
        "signature": "music download_music(const string &name,const string &url,unsigned short port);",
        "name": "download_music",
        "method_name": null,
        "unique_global_name": "download_music",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Download a music file from a web server and load it into SplashKit so\nthat you can use it.",
        "brief": null,
        "return": {
          "type": "music",
          "description": "The music that was loaded",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the music resource when it is loaded",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "url": {
            "type": "string",
            "description": "The URL path to the music resoure",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "port": {
            "type": "unsigned short",
            "description": "The port to connect to on the server",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking"
        },
        "signatures": {
          "python": [
            "def download_music(name, url, port):"
          ],
          "csharp": [
            "public static Music SplashKit.DownloadMusic(string name, string url, ushort port);"
          ],
          "cpp": [
            "music download_music(const string &name, const string &url, unsigned short port)"
          ],
          "pascal": [
            "function DownloadMusic(const name: String; const url: String; port: Word): Music"
          ]
        }
      },
      {
        "signature": "sound_effect download_sound_effect(const string &name,const string &url,unsigned short port);",
        "name": "download_sound_effect",
        "method_name": null,
        "unique_global_name": "download_sound_effect",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Download a sound effect from a web server and load it into SplashKit so\nthat you can use it.",
        "brief": null,
        "return": {
          "type": "sound_effect",
          "description": "The sound effect that was loaded",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the sound effect resource when it is loaded",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "url": {
            "type": "string",
            "description": "The URL path to the sound effect resoure",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "port": {
            "type": "unsigned short",
            "description": "The port to connect to on the server",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking"
        },
        "signatures": {
          "python": [
            "def download_sound_effect(name, url, port):"
          ],
          "csharp": [
            "public static SoundEffect SplashKit.DownloadSoundEffect(string name, string url, ushort port);"
          ],
          "cpp": [
            "sound_effect download_sound_effect(const string &name, const string &url, unsigned short port)"
          ],
          "pascal": [
            "function DownloadSoundEffect(const name: String; const url: String; port: Word): SoundEffect"
          ]
        }
      },
      {
        "signature": "void free_response (http_response response);",
        "name": "free_response",
        "method_name": "free",
        "unique_global_name": "free_response",
        "unique_method_name": "http_response.free",
        "suffix_name": null,
        "description": "Free the response resource.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "response": {
            "type": "http_response",
            "description": "The response to free",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "http_response",
          "destructor": true,
          "method": "free",
          "group": "networking",
          "self": "response"
        },
        "signatures": {
          "python": [
            "def free_response(response):"
          ],
          "csharp": [
            "public void HttpResponse.Free();",
            "public static void SplashKit.FreeResponse(HttpResponse response);"
          ],
          "cpp": [
            "void free_response(http_response response)"
          ],
          "pascal": [
            "procedure FreeResponse(response: HttpResponse)"
          ]
        }
      },
      {
        "signature": "http_response http_get(const string &url,unsigned short port);",
        "name": "http_get",
        "method_name": null,
        "unique_global_name": "http_get",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Make a get request to access a resource on the internet.",
        "brief": null,
        "return": {
          "type": "http_response",
          "description": "The response with all of the data received",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "url": {
            "type": "string",
            "description": "The path to the resource, for example http://splashkit.io",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "port": {
            "type": "unsigned short",
            "description": "The port on the server (80 for http, 443 for https)",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking"
        },
        "signatures": {
          "python": [
            "def http_get(url, port):"
          ],
          "csharp": [
            "public static HttpResponse SplashKit.HttpGet(string url, ushort port);"
          ],
          "cpp": [
            "http_response http_get(const string &url, unsigned short port)"
          ],
          "pascal": [
            "function HttpGet(const url: String; port: Word): HttpResponse"
          ]
        }
      },
      {
        "signature": "http_response http_post(const string &url,unsigned short port,const string &body,const vector<string> &headers);",
        "name": "http_post",
        "method_name": null,
        "unique_global_name": "http_post_with_headers",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Post the supplied information to the indicated url with the given headers.",
        "brief": null,
        "return": {
          "type": "http_response",
          "description": "The response from the server",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "url": {
            "type": "string",
            "description": "The url of the server to post the data to",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "port": {
            "type": "unsigned short",
            "description": "The port to connect to on the server",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "body": {
            "type": "string",
            "description": "The body of the message to post",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "headers": {
            "type": "vector",
            "description": "The headers of the request",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": true,
            "type_parameter": "string"
          }
        },
        "attributes": {
          "suffix": "with_headers",
          "group": "networking"
        },
        "signatures": {
          "python": [
            "def http_post_with_headers(url, port, body, headers):"
          ],
          "csharp": [
            "public static HttpResponse SplashKit.HttpPost(string url, ushort port, string body, List<string> headers);"
          ],
          "cpp": [
            "http_response http_post(const string &url, unsigned short port, const string &body, const vector<string> &headers)"
          ],
          "pascal": [
            "function HttpPost(const url: String; port: Word; const body: String; const headers: ArrayOfString): HttpResponse"
          ]
        }
      },
      {
        "signature": "http_response http_post(const string &url,unsigned short port,string body);",
        "name": "http_post",
        "method_name": null,
        "unique_global_name": "http_post",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Post the supplied information to the indicated url.",
        "brief": null,
        "return": {
          "type": "http_response",
          "description": "The response from the server",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "url": {
            "type": "string",
            "description": "The url of the server to post the data to",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "port": {
            "type": "unsigned short",
            "description": "The port to connect to on the server",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "body": {
            "type": "string",
            "description": "The body of the message to post",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking"
        },
        "signatures": {
          "python": [
            "def http_post(url, port, body):"
          ],
          "csharp": [
            "public static HttpResponse SplashKit.HttpPost(string url, ushort port, string body);"
          ],
          "cpp": [
            "http_response http_post(const string &url, unsigned short port, string body)"
          ],
          "pascal": [
            "function HttpPost(const url: String; port: Word; body: String): HttpResponse"
          ]
        }
      },
      {
        "signature": "string http_response_to_string(http_response response);",
        "name": "http_response_to_string",
        "method_name": null,
        "unique_global_name": "http_response_to_string",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Read the HTTP response and convert it to text",
        "brief": null,
        "return": {
          "type": "string",
          "description": "The data from the response as text",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "response": {
            "type": "http_response",
            "description": "The response from the server",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking"
        },
        "signatures": {
          "python": [
            "def http_response_to_string(response):"
          ],
          "csharp": [
            "public static string SplashKit.HttpResponseToString(HttpResponse response);"
          ],
          "cpp": [
            "string http_response_to_string(http_response response)"
          ],
          "pascal": [
            "function HttpResponseToString(response: HttpResponse): String"
          ]
        }
      },
      {
        "signature": "void save_response_to_file(http_response response,string path);",
        "name": "save_response_to_file",
        "method_name": null,
        "unique_global_name": "save_response_to_file",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Save the HTTP response downloaded into a file.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "response": {
            "type": "http_response",
            "description": "The response from the server",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "path": {
            "type": "string",
            "description": "The path to the file where the response should be saved",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking"
        },
        "signatures": {
          "python": [
            "def save_response_to_file(response, path):"
          ],
          "csharp": [
            "public static void SplashKit.SaveResponseToFile(HttpResponse response, string path);"
          ],
          "cpp": [
            "void save_response_to_file(http_response response, string path)"
          ],
          "pascal": [
            "procedure SaveResponseToFile(response: HttpResponse; path: String)"
          ]
        }
      },
      {
        "signature": "bool has_incoming_requests(web_server server);",
        "name": "has_incoming_requests",
        "method_name": null,
        "unique_global_name": "has_incoming_requests",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if the given `web_sever` has pending requests.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Returns a `bool` denoting whether the `web_server` has pending requests.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "server": {
            "type": "web_server",
            "description": "The `web_server` to check for waiting requests.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "web_server",
          "getter": "has_incoming_requests",
          "self": "server",
          "group": "networking",
          "static": "web_server"
        },
        "signatures": {
          "python": [
            "def has_incoming_requests(server):"
          ],
          "csharp": [
            "public bool WebServer.HasIncomingRequests { get }",
            "public static bool SplashKit.HasIncomingRequests(WebServer server);"
          ],
          "cpp": [
            "bool has_incoming_requests(web_server server)"
          ],
          "pascal": [
            "function HasIncomingRequests(server: WebServer): Boolean"
          ]
        }
      },
      {
        "signature": "bool is_delete_request_for(http_request request,const string &path);",
        "name": "is_delete_request_for",
        "method_name": "is_delete_request_for",
        "unique_global_name": "is_delete_request_for",
        "unique_method_name": "http_request.is_delete_request_for",
        "suffix_name": null,
        "description": "Checks if a request wants to delete a given resource.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the request is a HTTP DELETE request for `path`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "request": {
            "type": "http_request",
            "description": "The request to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "path": {
            "type": "string",
            "description": "The resource/route path",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "http_request",
          "method": "is_delete_request_for",
          "group": "networking",
          "static": "web_server",
          "self": "request"
        },
        "signatures": {
          "python": [
            "def is_delete_request_for(request, path):"
          ],
          "csharp": [
            "public bool HttpRequest.IsDeleteRequestFor(string path);",
            "public static bool SplashKit.IsDeleteRequestFor(HttpRequest request, string path);"
          ],
          "cpp": [
            "bool is_delete_request_for(http_request request, const string &path)"
          ],
          "pascal": [
            "function IsDeleteRequestFor(request: HttpRequest; const path: String): Boolean"
          ]
        }
      },
      {
        "signature": "bool is_get_request_for(http_request request,const string &path);",
        "name": "is_get_request_for",
        "method_name": "is_get_request_for",
        "unique_global_name": "is_get_request_for",
        "unique_method_name": "http_request.is_get_request_for",
        "suffix_name": null,
        "description": "Checks if a request wants to get a given resource.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the request is a HTTP GET request for `path`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "request": {
            "type": "http_request",
            "description": "The request to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "path": {
            "type": "string",
            "description": "The resource/route path",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "http_request",
          "method": "is_get_request_for",
          "group": "networking",
          "static": "web_server",
          "self": "request"
        },
        "signatures": {
          "python": [
            "def is_get_request_for(request, path):"
          ],
          "csharp": [
            "public bool HttpRequest.IsGetRequestFor(string path);",
            "public static bool SplashKit.IsGetRequestFor(HttpRequest request, string path);"
          ],
          "cpp": [
            "bool is_get_request_for(http_request request, const string &path)"
          ],
          "pascal": [
            "function IsGetRequestFor(request: HttpRequest; const path: String): Boolean"
          ]
        }
      },
      {
        "signature": "bool is_options_request_for(http_request request,const string &path);",
        "name": "is_options_request_for",
        "method_name": "is_options_request_for",
        "unique_global_name": "is_options_request_for",
        "unique_method_name": "http_request.is_options_request_for",
        "suffix_name": null,
        "description": "Checks if a request wants to check options for given resource.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the request is a HTTP OPTIONS request for `path`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "request": {
            "type": "http_request",
            "description": "The request to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "path": {
            "type": "string",
            "description": "The resource/route path",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "http_request",
          "method": "is_options_request_for",
          "group": "networking",
          "static": "web_server",
          "self": "request"
        },
        "signatures": {
          "python": [
            "def is_options_request_for(request, path):"
          ],
          "csharp": [
            "public bool HttpRequest.IsOptionsRequestFor(string path);",
            "public static bool SplashKit.IsOptionsRequestFor(HttpRequest request, string path);"
          ],
          "cpp": [
            "bool is_options_request_for(http_request request, const string &path)"
          ],
          "pascal": [
            "function IsOptionsRequestFor(request: HttpRequest; const path: String): Boolean"
          ]
        }
      },
      {
        "signature": "bool is_post_request_for(http_request request,const string &path);",
        "name": "is_post_request_for",
        "method_name": "is_post_request_for",
        "unique_global_name": "is_post_request_for",
        "unique_method_name": "http_request.is_post_request_for",
        "suffix_name": null,
        "description": "Checks if a request wants to create (post) a given resource.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the request is a HTTP POST request for `path`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "request": {
            "type": "http_request",
            "description": "The request to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "path": {
            "type": "string",
            "description": "The resource/route path",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "http_request",
          "method": "is_post_request_for",
          "group": "networking",
          "static": "web_server",
          "self": "request"
        },
        "signatures": {
          "python": [
            "def is_post_request_for(request, path):"
          ],
          "csharp": [
            "public bool HttpRequest.IsPostRequestFor(string path);",
            "public static bool SplashKit.IsPostRequestFor(HttpRequest request, string path);"
          ],
          "cpp": [
            "bool is_post_request_for(http_request request, const string &path)"
          ],
          "pascal": [
            "function IsPostRequestFor(request: HttpRequest; const path: String): Boolean"
          ]
        }
      },
      {
        "signature": "bool is_put_request_for(http_request request,const string &path);",
        "name": "is_put_request_for",
        "method_name": "is_put_request_for",
        "unique_global_name": "is_put_request_for",
        "unique_method_name": "http_request.is_put_request_for",
        "suffix_name": null,
        "description": "Checks if a request wants to update (put) a given resource.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the request is a HTTP PUT request for `path`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "request": {
            "type": "http_request",
            "description": "The request to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "path": {
            "type": "string",
            "description": "The resource/route path",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "http_request",
          "method": "is_put_request_for",
          "group": "networking",
          "static": "web_server",
          "self": "request"
        },
        "signatures": {
          "python": [
            "def is_put_request_for(request, path):"
          ],
          "csharp": [
            "public bool HttpRequest.IsPutRequestFor(string path);",
            "public static bool SplashKit.IsPutRequestFor(HttpRequest request, string path);"
          ],
          "cpp": [
            "bool is_put_request_for(http_request request, const string &path)"
          ],
          "pascal": [
            "function IsPutRequestFor(request: HttpRequest; const path: String): Boolean"
          ]
        }
      },
      {
        "signature": "bool is_request_for(http_request request,http_method method,const string &path);",
        "name": "is_request_for",
        "method_name": "is_request_for",
        "unique_global_name": "is_request_for",
        "unique_method_name": "http_request.is_request_for",
        "suffix_name": null,
        "description": "Checks if a request is after a given resource.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the request is for the indicated method and path",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "request": {
            "type": "http_request",
            "description": "The request to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "method": {
            "type": "http_method",
            "description": "The kind of request",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "path": {
            "type": "string",
            "description": "The resource/route path",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "http_request",
          "method": "is_request_for",
          "group": "networking",
          "static": "web_server",
          "self": "request"
        },
        "signatures": {
          "python": [
            "def is_request_for(request, method, path):"
          ],
          "csharp": [
            "public bool HttpRequest.IsRequestFor(HttpMethod method, string path);",
            "public static bool SplashKit.IsRequestFor(HttpRequest request, HttpMethod method, string path);"
          ],
          "cpp": [
            "bool is_request_for(http_request request, http_method method, const string &path)"
          ],
          "pascal": [
            "function IsRequestFor(request: HttpRequest; method: HttpMethod; const path: String): Boolean"
          ]
        }
      },
      {
        "signature": "bool is_trace_request_for(http_request request,const string &path);",
        "name": "is_trace_request_for",
        "method_name": "is_trace_request_for",
        "unique_global_name": "is_trace_request_for",
        "unique_method_name": "http_request.is_trace_request_for",
        "suffix_name": null,
        "description": "Checks if a request wants to trace a given resource.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the request is a HTTP TRACE request for `path`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "request": {
            "type": "http_request",
            "description": "The request to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "path": {
            "type": "string",
            "description": "The resource/route path",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "http_request",
          "method": "is_trace_request_for",
          "group": "networking",
          "static": "web_server",
          "self": "request"
        },
        "signatures": {
          "python": [
            "def is_trace_request_for(request, path):"
          ],
          "csharp": [
            "public bool HttpRequest.IsTraceRequestFor(string path);",
            "public static bool SplashKit.IsTraceRequestFor(HttpRequest request, string path);"
          ],
          "cpp": [
            "bool is_trace_request_for(http_request request, const string &path)"
          ],
          "pascal": [
            "function IsTraceRequestFor(request: HttpRequest; const path: String): Boolean"
          ]
        }
      },
      {
        "signature": "http_request next_web_request(web_server server);",
        "name": "next_web_request",
        "method_name": null,
        "unique_global_name": "next_web_request",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the next request on a given `web_server` instance",
        "brief": null,
        "return": {
          "type": "http_request",
          "description": "Returns the next request on the given `web_server` instance.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "server": {
            "type": "web_server",
            "description": "The `web_server` to get the `http_request` from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "web_server",
          "getter": "next_web_request",
          "self": "server",
          "group": "networking",
          "static": "web_server"
        },
        "signatures": {
          "python": [
            "def next_web_request(server):"
          ],
          "csharp": [
            "public HttpRequest WebServer.NextWebRequest { get }",
            "public static HttpRequest SplashKit.NextWebRequest(WebServer server);"
          ],
          "cpp": [
            "http_request next_web_request(web_server server)"
          ],
          "pascal": [
            "function NextWebRequest(server: WebServer): HttpRequest"
          ]
        }
      },
      {
        "signature": "string request_body(http_request r);",
        "name": "request_body",
        "method_name": null,
        "unique_global_name": "request_body",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the body of the request.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "The body of the request.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "r": {
            "type": "http_request",
            "description": "A request object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "http_request",
          "getter": "body",
          "group": "networking",
          "static": "web_server",
          "self": "r"
        },
        "signatures": {
          "python": [
            "def request_body(r):"
          ],
          "csharp": [
            "public string HttpRequest.Body { get }",
            "public static string SplashKit.RequestBody(HttpRequest r);"
          ],
          "cpp": [
            "string request_body(http_request r)"
          ],
          "pascal": [
            "function RequestBody(r: HttpRequest): String"
          ]
        }
      },
      {
        "signature": "bool request_has_query_parameter(http_request r,const string &name);",
        "name": "request_has_query_parameter",
        "method_name": "has_query_parameter",
        "unique_global_name": "request_has_query_parameter",
        "unique_method_name": "http_request.has_query_parameter",
        "suffix_name": null,
        "description": "Returns true if the parameter exists in the query string.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the parameter exists in the user's request.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "r": {
            "type": "http_request",
            "description": "A request object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the parameter to check",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "http_request",
          "method": "has_query_parameter",
          "group": "networking",
          "static": "web_server",
          "self": "r"
        },
        "signatures": {
          "python": [
            "def request_has_query_parameter(r, name):"
          ],
          "csharp": [
            "public bool HttpRequest.HasQueryParameter(string name);",
            "public static bool SplashKit.RequestHasQueryParameter(HttpRequest r, string name);"
          ],
          "cpp": [
            "bool request_has_query_parameter(http_request r, const string &name)"
          ],
          "pascal": [
            "function RequestHasQueryParameter(r: HttpRequest; const name: String): Boolean"
          ]
        }
      },
      {
        "signature": "vector<string> request_headers(http_request r);",
        "name": "request_headers",
        "method_name": null,
        "unique_global_name": "request_headers",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the headers of the request.",
        "brief": null,
        "return": {
          "type": "vector",
          "description": "The headers of the request.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": true,
          "type_parameter": "string"
        },
        "parameters": {
          "r": {
            "type": "http_request",
            "description": "A request object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "http_request",
          "getter": "headers",
          "group": "networking",
          "static": "web_server",
          "self": "r"
        },
        "signatures": {
          "python": [
            "def request_headers(r):"
          ],
          "csharp": [
            "public List<string> HttpRequest.Headers { get }",
            "public static List<string> SplashKit.RequestHeaders(HttpRequest r);"
          ],
          "cpp": [
            "vector<string> request_headers(http_request r)"
          ],
          "pascal": [
            "function RequestHeaders(r: HttpRequest): ArrayOfString"
          ]
        }
      },
      {
        "signature": "http_method request_method(http_request r);",
        "name": "request_method",
        "method_name": null,
        "unique_global_name": "request_method",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the HTTP method of the client request.",
        "brief": null,
        "return": {
          "type": "http_method",
          "description": "Returns the request method.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "r": {
            "type": "http_request",
            "description": "A request object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "http_request",
          "getter": "method",
          "group": "networking",
          "static": "web_server",
          "self": "r"
        },
        "signatures": {
          "python": [
            "def request_method(r):"
          ],
          "csharp": [
            "public HttpMethod HttpRequest.Method { get }",
            "public static HttpMethod SplashKit.RequestMethod(HttpRequest r);"
          ],
          "cpp": [
            "http_method request_method(http_request r)"
          ],
          "pascal": [
            "function RequestMethod(r: HttpRequest): HttpMethod"
          ]
        }
      },
      {
        "signature": "string request_query_parameter(http_request r,const string &name,const string &default_value);",
        "name": "request_query_parameter",
        "method_name": "query_parameter",
        "unique_global_name": "request_query_parameter",
        "unique_method_name": "http_request.query_parameter",
        "suffix_name": null,
        "description": "Returns the value of a parameter from within the query string, or the supplied default\nif no matching parameter is found.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "Returns value of the parameter from the query string, or the default value if the parameter is not found.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "r": {
            "type": "http_request",
            "description": "A request object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the parameter to fetch",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "default_value": {
            "type": "string",
            "description": "The value to return if the named parameter is not in the query string.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "http_request",
          "method": "query_parameter",
          "group": "networking",
          "static": "web_server",
          "self": "r"
        },
        "signatures": {
          "python": [
            "def request_query_parameter(r, name, default_value):"
          ],
          "csharp": [
            "public string HttpRequest.QueryParameter(string name, string defaultValue);",
            "public static string SplashKit.RequestQueryParameter(HttpRequest r, string name, string defaultValue);"
          ],
          "cpp": [
            "string request_query_parameter(http_request r, const string &name, const string &default_value)"
          ],
          "pascal": [
            "function RequestQueryParameter(r: HttpRequest; const name: String; const defaultValue: String): String"
          ]
        }
      },
      {
        "signature": "string request_query_string(http_request r);",
        "name": "request_query_string",
        "method_name": null,
        "unique_global_name": "request_query_string",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the URI query string of the client request.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "Returns the requested URI queries in the form of a string.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "r": {
            "type": "http_request",
            "description": "A request object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "http_request",
          "getter": "query_string",
          "group": "networking",
          "static": "web_server",
          "self": "r"
        },
        "signatures": {
          "python": [
            "def request_query_string(r):"
          ],
          "csharp": [
            "public string HttpRequest.QueryString { get }",
            "public static string SplashKit.RequestQueryString(HttpRequest r);"
          ],
          "cpp": [
            "string request_query_string(http_request r)"
          ],
          "pascal": [
            "function RequestQueryString(r: HttpRequest): String"
          ]
        }
      },
      {
        "signature": "string request_uri(http_request r);",
        "name": "request_uri",
        "method_name": null,
        "unique_global_name": "request_uri",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the server URI of the client request.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "Returns the requested URI in the form of a string.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "r": {
            "type": "http_request",
            "description": "A request object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "http_request",
          "getter": "uri",
          "group": "networking",
          "static": "web_server",
          "self": "r"
        },
        "signatures": {
          "python": [
            "def request_uri(r):"
          ],
          "csharp": [
            "public string HttpRequest.URI { get }",
            "public static string SplashKit.RequestURI(HttpRequest r);"
          ],
          "cpp": [
            "string request_uri(http_request r)"
          ],
          "pascal": [
            "function RequestURI(r: HttpRequest): String"
          ]
        }
      },
      {
        "signature": "vector<string> request_uri_stubs(http_request r);",
        "name": "request_uri_stubs",
        "method_name": null,
        "unique_global_name": "request_uri_stubs",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns an array of strings representing each stub of the URI.\n\nFor example a request sent to `http://localhost:8080/names/0` returns...\n\n[\"names\", \"0\"]",
        "brief": null,
        "return": {
          "type": "vector",
          "description": "The array of stubs as strings.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": true,
          "type_parameter": "string"
        },
        "parameters": {
          "r": {
            "type": "http_request",
            "description": "The request for retrieving URI to split into stubs.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "http_request",
          "getter": "uri_stubs",
          "group": "networking",
          "static": "web_server",
          "self": "r"
        },
        "signatures": {
          "python": [
            "def request_uri_stubs(r):"
          ],
          "csharp": [
            "public List<string> HttpRequest.URIStubs { get }",
            "public static List<string> SplashKit.RequestURIStubs(HttpRequest r);"
          ],
          "cpp": [
            "vector<string> request_uri_stubs(http_request r)"
          ],
          "pascal": [
            "function RequestURIStubs(r: HttpRequest): ArrayOfString"
          ]
        }
      },
      {
        "signature": "void send_css_file_response(http_request r,const string &filename);",
        "name": "send_css_file_response",
        "method_name": "send_css_file_response",
        "unique_global_name": "send_css_file_response",
        "unique_method_name": "http_request.send_css_file_response",
        "suffix_name": null,
        "description": "Serves a css file to the given `http_request`.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "r": {
            "type": "http_request",
            "description": "The request which is asking for the resource.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "filename": {
            "type": "string",
            "description": "The name of the file in Resources/server",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "http_request",
          "method": "send_css_file_response",
          "group": "networking",
          "static": "web_server",
          "self": "r"
        },
        "signatures": {
          "python": [
            "def send_css_file_response(r, filename):"
          ],
          "csharp": [
            "public void HttpRequest.SendCSSFileResponse(string filename);",
            "public static void SplashKit.SendCSSFileResponse(HttpRequest r, string filename);"
          ],
          "cpp": [
            "void send_css_file_response(http_request r, const string &filename)"
          ],
          "pascal": [
            "procedure SendCSSFileResponse(r: HttpRequest; const filename: String)"
          ]
        }
      },
      {
        "signature": "void send_file_response(http_request r,const string &filename,const string &content_type);",
        "name": "send_file_response",
        "method_name": "send_file_response",
        "unique_global_name": "send_file_response",
        "unique_method_name": "http_request.send_file_response",
        "suffix_name": null,
        "description": "Serves a file to the given `http_request`.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "r": {
            "type": "http_request",
            "description": "The request which is asking for the resource.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "filename": {
            "type": "string",
            "description": "The name of the file in Resources/server",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "content_type": {
            "type": "string",
            "description": "The type of content being send:",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "http_request",
          "method": "send_file_response",
          "group": "networking",
          "static": "web_server",
          "self": "r"
        },
        "signatures": {
          "python": [
            "def send_file_response(r, filename, content_type):"
          ],
          "csharp": [
            "public void HttpRequest.SendFileResponse(string filename, string contentType);",
            "public static void SplashKit.SendFileResponse(HttpRequest r, string filename, string contentType);"
          ],
          "cpp": [
            "void send_file_response(http_request r, const string &filename, const string &content_type)"
          ],
          "pascal": [
            "procedure SendFileResponse(r: HttpRequest; const filename: String; const contentType: String)"
          ]
        }
      },
      {
        "signature": "void send_html_file_response(http_request r,const string &filename);",
        "name": "send_html_file_response",
        "method_name": "send_html_file_response",
        "unique_global_name": "send_html_file_response",
        "unique_method_name": "http_request.send_html_file_response",
        "suffix_name": null,
        "description": "Serves a HTML file to the given `http_request`.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "r": {
            "type": "http_request",
            "description": "The request which is asking for the resource.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "filename": {
            "type": "string",
            "description": "The name of the file in Resources/server",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "http_request",
          "method": "send_html_file_response",
          "group": "networking",
          "static": "web_server",
          "self": "r"
        },
        "signatures": {
          "python": [
            "def send_html_file_response(r, filename):"
          ],
          "csharp": [
            "public void HttpRequest.SendHtmlFileResponse(string filename);",
            "public static void SplashKit.SendHtmlFileResponse(HttpRequest r, string filename);"
          ],
          "cpp": [
            "void send_html_file_response(http_request r, const string &filename)"
          ],
          "pascal": [
            "procedure SendHtmlFileResponse(r: HttpRequest; const filename: String)"
          ]
        }
      },
      {
        "signature": "void send_javascript_file_response(http_request r,const string &filename);",
        "name": "send_javascript_file_response",
        "method_name": "send_javascript_file_response",
        "unique_global_name": "send_javascript_file_response",
        "unique_method_name": "http_request.send_javascript_file_response",
        "suffix_name": null,
        "description": "Serves a javascript file to the given `http_request`.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "r": {
            "type": "http_request",
            "description": "The request which is asking for the resource.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "filename": {
            "type": "string",
            "description": "The name of the file in Resources/server",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "http_request",
          "method": "send_javascript_file_response",
          "group": "networking",
          "static": "web_server",
          "self": "r"
        },
        "signatures": {
          "python": [
            "def send_javascript_file_response(r, filename):"
          ],
          "csharp": [
            "public void HttpRequest.SendJavascriptFileResponse(string filename);",
            "public static void SplashKit.SendJavascriptFileResponse(HttpRequest r, string filename);"
          ],
          "cpp": [
            "void send_javascript_file_response(http_request r, const string &filename)"
          ],
          "pascal": [
            "procedure SendJavascriptFileResponse(r: HttpRequest; const filename: String)"
          ]
        }
      },
      {
        "signature": "void send_response(http_request r);",
        "name": "send_response",
        "method_name": "send_response",
        "unique_global_name": "send_response_empty",
        "unique_method_name": "http_request.send_response_empty",
        "suffix_name": null,
        "description": "Sends a response with no content to a `http_request`.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "r": {
            "type": "http_request",
            "description": "The `http_request` to send the response to",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "http_request",
          "method": "send_response",
          "self": "r",
          "suffix": "empty",
          "group": "networking",
          "static": "web_server"
        },
        "signatures": {
          "python": [
            "def send_response_empty(r):"
          ],
          "csharp": [
            "public void HttpRequest.SendResponse();",
            "public static void SplashKit.SendResponse(HttpRequest r);"
          ],
          "cpp": [
            "void send_response(http_request r)"
          ],
          "pascal": [
            "procedure SendResponse(r: HttpRequest)"
          ]
        }
      },
      {
        "signature": "void send_response(http_request r,const string &message);",
        "name": "send_response",
        "method_name": "send_response",
        "unique_global_name": "send_response",
        "unique_method_name": "http_request.send_response",
        "suffix_name": null,
        "description": "Sends a message to a given `http_request`.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "r": {
            "type": "http_request",
            "description": "The request to be sent.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "message": {
            "type": "string",
            "description": "The message to be sent",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "http_request",
          "method": "send_response",
          "group": "networking",
          "static": "web_server",
          "self": "r"
        },
        "signatures": {
          "python": [
            "def send_response(r, message):"
          ],
          "csharp": [
            "public void HttpRequest.SendResponse(string message);",
            "public static void SplashKit.SendResponse(HttpRequest r, string message);"
          ],
          "cpp": [
            "void send_response(http_request r, const string &message)"
          ],
          "pascal": [
            "procedure SendResponse(r: HttpRequest; const message: String)"
          ]
        }
      },
      {
        "signature": "void send_response(http_request r,http_status_code code);",
        "name": "send_response",
        "method_name": "send_response",
        "unique_global_name": "send_response_json_with_status",
        "unique_method_name": "http_request.send_response_json_with_status",
        "suffix_name": null,
        "description": "Sends a response code to a given `http_request`.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "r": {
            "type": "http_request",
            "description": "The `http_request` to send the response to",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "code": {
            "type": "http_status_code",
            "description": "The [HTTP status code](See https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) to be sent.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "http_request",
          "method": "send_response",
          "self": "r",
          "suffix": "json_with_status",
          "group": "networking",
          "static": "web_server"
        },
        "signatures": {
          "python": [
            "def send_response_json_with_status(r, code):"
          ],
          "csharp": [
            "public void HttpRequest.SendResponse(HttpStatusCode code);",
            "public static void SplashKit.SendResponse(HttpRequest r, HttpStatusCode code);"
          ],
          "cpp": [
            "void send_response(http_request r, http_status_code code)"
          ],
          "pascal": [
            "procedure SendResponse(r: HttpRequest; code: HttpStatusCode)"
          ]
        }
      },
      {
        "signature": "void send_response(http_request r,http_status_code code,const string &message);",
        "name": "send_response",
        "method_name": "send_response",
        "unique_global_name": "send_response_with_status",
        "unique_method_name": "http_request.send_response_with_status",
        "suffix_name": null,
        "description": "Sends a message to a given `http_request` with the specified content type.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "r": {
            "type": "http_request",
            "description": "The `http_request` to send the response to",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "code": {
            "type": "http_status_code",
            "description": "The [HTTP status code](See https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) to be sent.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "message": {
            "type": "string",
            "description": "The messsage, in the form of a `http_response`, to be sent.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "http_request",
          "method": "send_response",
          "self": "r",
          "suffix": "with_status",
          "group": "networking",
          "static": "web_server"
        },
        "signatures": {
          "python": [
            "def send_response_with_status(r, code, message):"
          ],
          "csharp": [
            "public void HttpRequest.SendResponse(HttpStatusCode code, string message);",
            "public static void SplashKit.SendResponse(HttpRequest r, HttpStatusCode code, string message);"
          ],
          "cpp": [
            "void send_response(http_request r, http_status_code code, const string &message)"
          ],
          "pascal": [
            "procedure SendResponse(r: HttpRequest; code: HttpStatusCode; const message: String)"
          ]
        }
      },
      {
        "signature": "void send_response(http_request r,http_status_code code,const string &message,const string &content_type);",
        "name": "send_response",
        "method_name": "send_response",
        "unique_global_name": "send_response_with_status_and_content_type",
        "unique_method_name": "http_request.send_response_with_status_and_content_type",
        "suffix_name": null,
        "description": "Sends a message to a given `http_request` with the specified content type.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "r": {
            "type": "http_request",
            "description": "The `http_request` to send the response to",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "code": {
            "type": "http_status_code",
            "description": "The [HTTP status code](See https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) to be sent.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "message": {
            "type": "string",
            "description": "The messsage, in the form of a `http_response`, to be sent.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "content_type": {
            "type": "string",
            "description": "The content type of the response.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "http_request",
          "method": "send_response",
          "self": "r",
          "suffix": "with_status_and_content_type",
          "group": "networking",
          "static": "web_server"
        },
        "signatures": {
          "python": [
            "def send_response_with_status_and_content_type(r, code, message, content_type):"
          ],
          "csharp": [
            "public void HttpRequest.SendResponse(HttpStatusCode code, string message, string contentType);",
            "public static void SplashKit.SendResponse(HttpRequest r, HttpStatusCode code, string message, string contentType);"
          ],
          "cpp": [
            "void send_response(http_request r, http_status_code code, const string &message, const string &content_type)"
          ],
          "pascal": [
            "procedure SendResponse(r: HttpRequest; code: HttpStatusCode; const message: String; const contentType: String)"
          ]
        }
      },
      {
        "signature": "void send_response(http_request r,http_status_code code,const string &message,const string &content_type,const vector<string> &headers);",
        "name": "send_response",
        "method_name": "send_response",
        "unique_global_name": "send_response_with_status_and_content_type_and_headers",
        "unique_method_name": "http_request.send_response_with_status_and_content_type_and_headers",
        "suffix_name": null,
        "description": "Sends a message to a given `http_request` with the specified content type.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "r": {
            "type": "http_request",
            "description": "The `http_request` to send the response to",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "code": {
            "type": "http_status_code",
            "description": "The [HTTP status code](See https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) to be sent.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "message": {
            "type": "string",
            "description": "The messsage, in the form of a `http_response`, to be sent.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "content_type": {
            "type": "string",
            "description": "The content type of the response.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "headers": {
            "type": "vector",
            "description": "The response headers",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": true,
            "type_parameter": "string"
          }
        },
        "attributes": {
          "class": "http_request",
          "method": "send_response",
          "self": "r",
          "suffix": "with_status_and_content_type_and_headers",
          "group": "networking",
          "static": "web_server"
        },
        "signatures": {
          "python": [
            "def send_response_with_status_and_content_type_and_headers(r, code, message, content_type, headers):"
          ],
          "csharp": [
            "public void HttpRequest.SendResponse(HttpStatusCode code, string message, string contentType, List<string> headers);",
            "public static void SplashKit.SendResponse(HttpRequest r, HttpStatusCode code, string message, string contentType, List<string> headers);"
          ],
          "cpp": [
            "void send_response(http_request r, http_status_code code, const string &message, const string &content_type, const vector<string> &headers)"
          ],
          "pascal": [
            "procedure SendResponse(r: HttpRequest; code: HttpStatusCode; const message: String; const contentType: String; const headers: ArrayOfString)"
          ]
        }
      },
      {
        "signature": "void send_response(http_request r,json j);",
        "name": "send_response",
        "method_name": "send_response",
        "unique_global_name": "send_response_json",
        "unique_method_name": "http_request.send_response_json",
        "suffix_name": null,
        "description": "Send a JSON response to a given `http_request`",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "r": {
            "type": "http_request",
            "description": "The request the response belongs to.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "j": {
            "type": "json",
            "description": "The json to be sent.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "http_request",
          "method": "send_response",
          "suffix": "json",
          "group": "networking",
          "static": "web_server",
          "self": "r"
        },
        "signatures": {
          "python": [
            "def send_response_json(r, j):"
          ],
          "csharp": [
            "public void HttpRequest.SendResponse(Json j);",
            "public static void SplashKit.SendResponse(HttpRequest r, Json j);"
          ],
          "cpp": [
            "void send_response(http_request r, json j)"
          ],
          "pascal": [
            "procedure SendResponse(r: HttpRequest; j: Json)"
          ]
        }
      },
      {
        "signature": "vector<string> split_uri_stubs(const string &uri);",
        "name": "split_uri_stubs",
        "method_name": null,
        "unique_global_name": "split_uri_stubs",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns an array of strings representing each stub of the URI.\n\nFor example a request sent to `http://localhost:8080/names/0` returns...\n\n[\"names\", \"0\"]",
        "brief": null,
        "return": {
          "type": "vector",
          "description": "The array of stubs as strings.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": true,
          "type_parameter": "string"
        },
        "parameters": {
          "uri": {
            "type": "string",
            "description": "The URI to split into stubs.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking",
          "static": "web_server"
        },
        "signatures": {
          "python": [
            "def split_uri_stubs(uri):"
          ],
          "csharp": [
            "public static List<string> SplashKit.SplitURIStubs(string uri);"
          ],
          "cpp": [
            "vector<string> split_uri_stubs(const string &uri)"
          ],
          "pascal": [
            "function SplitURIStubs(const uri: String): ArrayOfString"
          ]
        }
      },
      {
        "signature": "web_server start_web_server();",
        "name": "start_web_server",
        "method_name": null,
        "unique_global_name": "start_web_server_with_default_port",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a new web server listening for connections on port 8080.",
        "brief": null,
        "return": {
          "type": "web_server",
          "description": "Returns a new `web_sever` instance.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "class": "web_server",
          "constructor": true,
          "suffix": "with_default_port",
          "group": "networking",
          "static": "web_server"
        },
        "signatures": {
          "python": [
            "def start_web_server_with_default_port():"
          ],
          "csharp": [
            "public static WebServer SplashKit.StartWebServer();",
            "public WebServer();"
          ],
          "cpp": [
            "web_server start_web_server()"
          ],
          "pascal": [
            "function StartWebServer(): WebServer"
          ]
        }
      },
      {
        "signature": "web_server start_web_server(unsigned short port);",
        "name": "start_web_server",
        "method_name": null,
        "unique_global_name": "start_web_server",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Starts the web server on a given port number.",
        "brief": null,
        "return": {
          "type": "web_server",
          "description": "Returns a new `web_server` instance.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "port": {
            "type": "unsigned short",
            "description": "The port number to connect through.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "web_server",
          "constructor": true,
          "group": "networking",
          "static": "web_server"
        },
        "signatures": {
          "python": [
            "def start_web_server(port):"
          ],
          "csharp": [
            "public static WebServer SplashKit.StartWebServer(ushort port);",
            "public WebServer(ushort port);"
          ],
          "cpp": [
            "web_server start_web_server(unsigned short port)"
          ],
          "pascal": [
            "function StartWebServer(port: Word): WebServer"
          ]
        }
      },
      {
        "signature": "void stop_web_server(web_server server);",
        "name": "stop_web_server",
        "method_name": "stop",
        "unique_global_name": "stop_web_server",
        "unique_method_name": "web_server.stop",
        "suffix_name": null,
        "description": "Stops a given `web_server` instance.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "server": {
            "type": "web_server",
            "description": "The server instance to stop.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "web_server",
          "destructor": true,
          "method": "stop",
          "self": "server",
          "group": "networking",
          "static": "web_server"
        },
        "signatures": {
          "python": [
            "def stop_web_server(server):"
          ],
          "csharp": [
            "public void WebServer.Stop();",
            "public static void SplashKit.StopWebServer(WebServer server);"
          ],
          "cpp": [
            "void stop_web_server(web_server server)"
          ],
          "pascal": [
            "procedure StopWebServer(server: WebServer)"
          ]
        }
      }
    ],
    "typedefs": [
      {
        "signature": "typedef struct sk_connection_data *connection;",
        "name": "connection",
        "description": "A connection represents the communication channel from a client going to\na server. This can be used for the client and the server to send and\nreceive messages.",
        "brief": null,
        "attributes": {
          "class": "connection",
          "group": "networking",
          "static": "networking"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      },
      {
        "signature": "typedef struct sk_message *message;",
        "name": "message",
        "description": "A message contains data that has been transferred between a client\nconnection and a server (or visa versa).",
        "brief": null,
        "attributes": {
          "class": "message",
          "group": "networking",
          "static": "networking"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      },
      {
        "signature": "typedef struct sk_server_data *server_socket;",
        "name": "server_socket",
        "description": "A server represents a network resource that clients can connect to. The\nserver will receive messages from all of the client connections, and can\nbe used to access the clients connected to the server.",
        "brief": null,
        "attributes": {
          "class": "server_socket",
          "group": "networking",
          "static": "networking"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      },
      {
        "signature": "typedef struct sk_http_response *http_response;",
        "name": "http_response",
        "description": "A HTTP response is a resource that comes back from a HTTP request. This\nmay be the text related to a web page, or the data related to a resource.\nOnce you have used the response, you need to make sure to call\n`free_response`.",
        "brief": null,
        "attributes": {
          "class": "http_response",
          "group": "networking"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      },
      {
        "signature": "typedef struct sk_http_request *http_request;",
        "name": "http_request",
        "description": "The request contains the details of the resource the user is requesting.",
        "brief": null,
        "attributes": {
          "class": "http_request",
          "no_destructor": true,
          "group": "networking",
          "static": "web_server"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      },
      {
        "signature": "typedef struct sk_web_server *web_server;",
        "name": "web_server",
        "description": "The web server is able to listen for incoming requests, and you can then provide the response.",
        "brief": null,
        "attributes": {
          "class": "web_server",
          "group": "networking",
          "static": "web_server"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      }
    ],
    "structs": [

    ],
    "enums": [
      {
        "signature": "enum connection_type {TCP,UDP,UNKNOWN};",
        "name": "connection_type",
        "description": "The kind of protocol used for a server of connection.",
        "brief": null,
        "constants": {
          "TCP": {
            "description": "Uses the TCP protocol. SplashKit can send messages of any\nsize, and repackage it from you at the other end. Messages\nare reliably transferred."
          },
          "UDP": {
            "description": "Uses the UDP protocol. SplashKit will send messages of up\nto 1024 bytes (by default). You need to handle packaging\nanything larger than this."
          },
          "UNKNOWN": {
            "description": "The protocol is unknown, usually due to the connection\nor server being invalid or closed."
          }
        },
        "attributes": {
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "python": "public enum {connection_type.tcp = 0, connection_type.udp = 0, connection_type.unknown = 0}",
          "csharp": "public enum {ConnectionType.TCP = 0, ConnectionType.UDP = 0, ConnectionType.Unknown = 0}",
          "cpp": "class connection_type {TCP = 0, UDP = 0, UNKNOWN = 0};",
          "pascal": "public enum {ConnectionType.TCP = 0, ConnectionType.UDP = 0, ConnectionType.Unknown = 0}"
        }
      },
      {
        "signature": "enum http_method {HTTP_GET_METHOD,HTTP_POST_METHOD,HTTP_PUT_METHOD,HTTP_DELETE_METHOD,HTTP_OPTIONS_METHOD,HTTP_TRACE_METHOD,UNKNOWN_HTTP_METHOD};",
        "name": "http_method",
        "description": "The method token is used to indicate the kind of action to be performed\non the server. See [W3 specifications](https://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html).",
        "brief": null,
        "constants": {
          "HTTP_GET_METHOD": {
            "description": "A get method"
          },
          "HTTP_POST_METHOD": {
            "description": "A post method"
          },
          "HTTP_PUT_METHOD": {
            "description": "A put method"
          },
          "HTTP_DELETE_METHOD": {
            "description": "A delete method"
          },
          "HTTP_OPTIONS_METHOD": {
            "description": "An options method"
          },
          "HTTP_TRACE_METHOD": {
            "description": "A trace method"
          },
          "UNKNOWN_HTTP_METHOD": {
            "description": "A method not recognised by SplashKit"
          }
        },
        "attributes": {
          "group": "networking",
          "static": "web_server"
        },
        "signatures": {
          "python": "public enum {http_method.http_get_method = 0, http_method.http_post_method = 0, http_method.http_put_method = 0, http_method.http_delete_method = 0, http_method.http_options_method = 0, http_method.http_trace_method = 0, http_method.unknown_http_method = 0}",
          "csharp": "public enum {HttpMethod.HttpGetMethod = 0, HttpMethod.HttpPostMethod = 0, HttpMethod.HttpPutMethod = 0, HttpMethod.HttpDeleteMethod = 0, HttpMethod.HttpOptionsMethod = 0, HttpMethod.HttpTraceMethod = 0, HttpMethod.UnknownHttpMethod = 0}",
          "cpp": "class http_method {HTTP_GET_METHOD = 0, HTTP_POST_METHOD = 0, HTTP_PUT_METHOD = 0, HTTP_DELETE_METHOD = 0, HTTP_OPTIONS_METHOD = 0, HTTP_TRACE_METHOD = 0, UNKNOWN_HTTP_METHOD = 0};",
          "pascal": "public enum {HttpMethod.HttpGetMethod = 0, HttpMethod.HttpPostMethod = 0, HttpMethod.HttpPutMethod = 0, HttpMethod.HttpDeleteMethod = 0, HttpMethod.HttpOptionsMethod = 0, HttpMethod.HttpTraceMethod = 0, HttpMethod.UnknownHttpMethod = 0}"
        }
      }
    ],
    "defines": [

    ]
  },
  "physics": {
    "brief": "SplashKit Collisions library allow you to perform tests between\nbitmaps, sprites and shapes to determin if a collision has occured.Provides matrix functions to work on 2d coordinates.Provides vector functions to work on vectors.",
    "description": "",
    "functions": [
      {
        "signature": "bool bitmap_circle_collision(bitmap bmp,const point_2d& pt,const circle& circ);",
        "name": "bitmap_circle_collision",
        "method_name": "circle_collision",
        "unique_global_name": "bitmap_circle_collision_at_point",
        "unique_method_name": "bitmap.circle_collision_at_point",
        "suffix_name": null,
        "description": "Tests if a bitmap drawn at `pt` would intersect with a circle.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if a drawn pixel in the cell of the bitmap will\nintersect with `circ` when drawn.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The location where the bitmap is drawn",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "circ": {
            "type": "circle",
            "description": "The circle to test",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "circle_collision",
          "suffix": "at_point",
          "group": "physics",
          "static": "collisions",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def bitmap_circle_collision_at_point(bmp, pt, circ):"
          ],
          "csharp": [
            "public bool Bitmap.CircleCollision(Point2D pt, Circle circ);",
            "public static bool SplashKit.BitmapCircleCollision(Bitmap bmp, Point2D pt, Circle circ);"
          ],
          "cpp": [
            "bool bitmap_circle_collision(bitmap bmp, const point_2d &pt, const circle &circ)"
          ],
          "pascal": [
            "function BitmapCircleCollision(bmp: Bitmap; const pt: Point2D; const circ: Circle): Boolean"
          ]
        }
      },
      {
        "signature": "bool bitmap_circle_collision(bitmap bmp,double x,double y,const circle& circ);",
        "name": "bitmap_circle_collision",
        "method_name": "circle_collision",
        "unique_global_name": "bitmap_circle_collision",
        "unique_method_name": "bitmap.circle_collision",
        "suffix_name": null,
        "description": "Tests if a bitmap drawn at `x`, `y` would intersect with a circle.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if a drawn pixel in the bitmap will\nintersect with `circ` when drawn.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x location where the bitmap is drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location where the bitmap is drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "circ": {
            "type": "circle",
            "description": "The circle to test",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "circle_collision",
          "group": "physics",
          "static": "collisions",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def bitmap_circle_collision(bmp, x, y, circ):"
          ],
          "csharp": [
            "public bool Bitmap.CircleCollision(double x, double y, Circle circ);",
            "public static bool SplashKit.BitmapCircleCollision(Bitmap bmp, double x, double y, Circle circ);"
          ],
          "cpp": [
            "bool bitmap_circle_collision(bitmap bmp, double x, double y, const circle &circ)"
          ],
          "pascal": [
            "function BitmapCircleCollision(bmp: Bitmap; x: Double; y: Double; const circ: Circle): Boolean"
          ]
        }
      },
      {
        "signature": "bool bitmap_circle_collision(bitmap bmp,int cell,const matrix_2d& translation,const circle& circ);",
        "name": "bitmap_circle_collision",
        "method_name": "circle_collision",
        "unique_global_name": "bitmap_circle_collision_for_cell_with_translation",
        "unique_method_name": "bitmap.circle_collision_for_cell_with_translation",
        "suffix_name": null,
        "description": "Tests if a bitmap cell drawn using a passed in translation, will\nintersect with a circle. You can use this to detect collisions between\nbitmaps and circles.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if a drawn pixel in the cell of the bitmap will\nintersect with `circ` when drawn.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "cell": {
            "type": "int",
            "description": "The cell of the bitmap to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "translation": {
            "type": "matrix_2d",
            "description": "The matrix used to transfrom the bitmap when drawing",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "circ": {
            "type": "circle",
            "description": "The circle to test",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "circle_collision",
          "suffix": "for_cell_with_translation",
          "group": "physics",
          "static": "collisions",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def bitmap_circle_collision_for_cell_with_translation(bmp, cell, translation, circ):"
          ],
          "csharp": [
            "public bool Bitmap.CircleCollision(int cell, Matrix2D translation, Circle circ);",
            "public static bool SplashKit.BitmapCircleCollision(Bitmap bmp, int cell, Matrix2D translation, Circle circ);"
          ],
          "cpp": [
            "bool bitmap_circle_collision(bitmap bmp, int cell, const matrix_2d &translation, const circle &circ)"
          ],
          "pascal": [
            "function BitmapCircleCollision(bmp: Bitmap; cell: Integer; const translation: Matrix2D; const circ: Circle): Boolean"
          ]
        }
      },
      {
        "signature": "bool bitmap_circle_collision(bitmap bmp,int cell,const point_2d& pt,const circle& circ);",
        "name": "bitmap_circle_collision",
        "method_name": "circle_collision",
        "unique_global_name": "bitmap_circle_collision_for_cell_at_point",
        "unique_method_name": "bitmap.circle_collision_for_cell_at_point",
        "suffix_name": null,
        "description": "Tests if a bitmap cell drawn at `pt` would intersect with a circle.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if a drawn pixel in the cell of the bitmap will\nintersect with `circ` when drawn.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "cell": {
            "type": "int",
            "description": "The cell of the bitmap to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The location where the bitmap is drawn",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "circ": {
            "type": "circle",
            "description": "The circle to test",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "circle_collision",
          "suffix": "for_cell_at_point",
          "group": "physics",
          "static": "collisions",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def bitmap_circle_collision_for_cell_at_point(bmp, cell, pt, circ):"
          ],
          "csharp": [
            "public bool Bitmap.CircleCollision(int cell, Point2D pt, Circle circ);",
            "public static bool SplashKit.BitmapCircleCollision(Bitmap bmp, int cell, Point2D pt, Circle circ);"
          ],
          "cpp": [
            "bool bitmap_circle_collision(bitmap bmp, int cell, const point_2d &pt, const circle &circ)"
          ],
          "pascal": [
            "function BitmapCircleCollision(bmp: Bitmap; cell: Integer; const pt: Point2D; const circ: Circle): Boolean"
          ]
        }
      },
      {
        "signature": "bool bitmap_circle_collision(bitmap bmp,int cell,double x,double y,const circle& circ);",
        "name": "bitmap_circle_collision",
        "method_name": "circle_collision",
        "unique_global_name": "bitmap_circle_collision_for_cell",
        "unique_method_name": "bitmap.circle_collision_for_cell",
        "suffix_name": null,
        "description": "Tests if a bitmap cell drawn at `x`, `y` would intersect with a circle.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if a drawn pixel in the bitmap will\nintersect with `circ` when drawn.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "cell": {
            "type": "int",
            "description": "The cell of the bitmap to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x location where the bitmap is drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location where the bitmap is drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "circ": {
            "type": "circle",
            "description": "The circle to test",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "circle_collision",
          "suffix": "for_cell",
          "group": "physics",
          "static": "collisions",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def bitmap_circle_collision_for_cell(bmp, cell, x, y, circ):"
          ],
          "csharp": [
            "public bool Bitmap.CircleCollision(int cell, double x, double y, Circle circ);",
            "public static bool SplashKit.BitmapCircleCollision(Bitmap bmp, int cell, double x, double y, Circle circ);"
          ],
          "cpp": [
            "bool bitmap_circle_collision(bitmap bmp, int cell, double x, double y, const circle &circ)"
          ],
          "pascal": [
            "function BitmapCircleCollision(bmp: Bitmap; cell: Integer; x: Double; y: Double; const circ: Circle): Boolean"
          ]
        }
      },
      {
        "signature": "bool bitmap_collision(bitmap bmp1,double x1,double y1,bitmap bmp2,double x2,double y2);",
        "name": "bitmap_collision",
        "method_name": "bitmap_collision",
        "unique_global_name": "bitmap_collision",
        "unique_method_name": "bitmap.bitmap_collision",
        "suffix_name": null,
        "description": "Check if two bitmaps collide.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if pixels in the two bitmaps would collide/overlap",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp1": {
            "type": "bitmap",
            "description": "The first bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x1": {
            "type": "double",
            "description": "The x location where the first bitmap is drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y1": {
            "type": "double",
            "description": "The y location where the first bitmap is drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "bmp2": {
            "type": "bitmap",
            "description": "The second bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x2": {
            "type": "double",
            "description": "The x location where the second bitmap is drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y2": {
            "type": "double",
            "description": "The y location where the second bitmap is drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "bitmap_collision",
          "group": "physics",
          "static": "collisions",
          "self": "bmp1"
        },
        "signatures": {
          "python": [
            "def bitmap_collision(bmp1, x1, y1, bmp2, x2, y2):"
          ],
          "csharp": [
            "public bool Bitmap.BitmapCollision(double x1, double y1, Bitmap bmp2, double x2, double y2);",
            "public static bool SplashKit.BitmapCollision(Bitmap bmp1, double x1, double y1, Bitmap bmp2, double x2, double y2);"
          ],
          "cpp": [
            "bool bitmap_collision(bitmap bmp1, double x1, double y1, bitmap bmp2, double x2, double y2)"
          ],
          "pascal": [
            "function BitmapCollision(bmp1: Bitmap; x1: Double; y1: Double; bmp2: Bitmap; x2: Double; y2: Double): Boolean"
          ]
        }
      },
      {
        "signature": "bool bitmap_collision(bitmap bmp1,const point_2d &pt1,bitmap bmp2,const point_2d &pt2);",
        "name": "bitmap_collision",
        "method_name": "bitmap_collision",
        "unique_global_name": "bitmap_collision_at_points",
        "unique_method_name": "bitmap.bitmap_collision_at_points",
        "suffix_name": null,
        "description": "Check if two bitmaps collide.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if pixels in the two bitmaps would collide/overlap",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp1": {
            "type": "bitmap",
            "description": "The first bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt1": {
            "type": "point_2d",
            "description": "The point where bitmap 1 is drawn",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "bmp2": {
            "type": "bitmap",
            "description": "The second bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt2": {
            "type": "point_2d",
            "description": "The point where bitmap 2 is drawn",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "bitmap_collision",
          "suffix": "at_points",
          "group": "physics",
          "static": "collisions",
          "self": "bmp1"
        },
        "signatures": {
          "python": [
            "def bitmap_collision_at_points(bmp1, pt1, bmp2, pt2):"
          ],
          "csharp": [
            "public bool Bitmap.BitmapCollision(Point2D pt1, Bitmap bmp2, Point2D pt2);",
            "public static bool SplashKit.BitmapCollision(Bitmap bmp1, Point2D pt1, Bitmap bmp2, Point2D pt2);"
          ],
          "cpp": [
            "bool bitmap_collision(bitmap bmp1, const point_2d &pt1, bitmap bmp2, const point_2d &pt2)"
          ],
          "pascal": [
            "function BitmapCollision(bmp1: Bitmap; const pt1: Point2D; bmp2: Bitmap; const pt2: Point2D): Boolean"
          ]
        }
      },
      {
        "signature": "bool bitmap_collision(bitmap bmp1,int cell1,const matrix_2d &matrix1,bitmap bmp2,int cell2,const matrix_2d &matrix2);",
        "name": "bitmap_collision",
        "method_name": "bitmap_collision",
        "unique_global_name": "bitmap_collision_for_cells_with_translations",
        "unique_method_name": "bitmap.bitmap_collision_for_cells_with_translations",
        "suffix_name": null,
        "description": "Check if two bitmaps collide, based on their cell and transform\nmatricies.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if pixels in the two bitmaps would collide/overlap",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp1": {
            "type": "bitmap",
            "description": "The first bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "cell1": {
            "type": "int",
            "description": "The cell of the first bitmap.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "matrix1": {
            "type": "matrix_2d",
            "description": "The transformation for the first matrix",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "bmp2": {
            "type": "bitmap",
            "description": "The second bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "cell2": {
            "type": "int",
            "description": "The cell of the second bitmap.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "matrix2": {
            "type": "matrix_2d",
            "description": "The transformation for the second matrix",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "bitmap_collision",
          "suffix": "for_cells_with_translations",
          "group": "physics",
          "static": "collisions",
          "self": "bmp1"
        },
        "signatures": {
          "python": [
            "def bitmap_collision_for_cells_with_translations(bmp1, cell1, matrix1, bmp2, cell2, matrix2):"
          ],
          "csharp": [
            "public bool Bitmap.BitmapCollision(int cell1, Matrix2D matrix1, Bitmap bmp2, int cell2, Matrix2D matrix2);",
            "public static bool SplashKit.BitmapCollision(Bitmap bmp1, int cell1, Matrix2D matrix1, Bitmap bmp2, int cell2, Matrix2D matrix2);"
          ],
          "cpp": [
            "bool bitmap_collision(bitmap bmp1, int cell1, const matrix_2d &matrix1, bitmap bmp2, int cell2, const matrix_2d &matrix2)"
          ],
          "pascal": [
            "function BitmapCollision(bmp1: Bitmap; cell1: Integer; const matrix1: Matrix2D; bmp2: Bitmap; cell2: Integer; const matrix2: Matrix2D): Boolean"
          ]
        }
      },
      {
        "signature": "bool bitmap_collision(bitmap bmp1,int cell1,const point_2d &pt1,bitmap bmp2,int cell2,const point_2d &pt2);",
        "name": "bitmap_collision",
        "method_name": "bitmap_collision",
        "unique_global_name": "bitmap_collision_for_cells_at_points",
        "unique_method_name": "bitmap.bitmap_collision_for_cells_at_points",
        "suffix_name": null,
        "description": "Check if two bitmaps collide.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if pixels in the two bitmaps would collide/overlap",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp1": {
            "type": "bitmap",
            "description": "The first bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "cell1": {
            "type": "int",
            "description": "The cell of the first bitmap.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt1": {
            "type": "point_2d",
            "description": "The point where bitmap 1 is drawn",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "bmp2": {
            "type": "bitmap",
            "description": "The second bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "cell2": {
            "type": "int",
            "description": "The cell of the second bitmap.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt2": {
            "type": "point_2d",
            "description": "The point where bitmap 2 is drawn",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "bitmap_collision",
          "suffix": "for_cells_at_points",
          "group": "physics",
          "static": "collisions",
          "self": "bmp1"
        },
        "signatures": {
          "python": [
            "def bitmap_collision_for_cells_at_points(bmp1, cell1, pt1, bmp2, cell2, pt2):"
          ],
          "csharp": [
            "public bool Bitmap.BitmapCollision(int cell1, Point2D pt1, Bitmap bmp2, int cell2, Point2D pt2);",
            "public static bool SplashKit.BitmapCollision(Bitmap bmp1, int cell1, Point2D pt1, Bitmap bmp2, int cell2, Point2D pt2);"
          ],
          "cpp": [
            "bool bitmap_collision(bitmap bmp1, int cell1, const point_2d &pt1, bitmap bmp2, int cell2, const point_2d &pt2)"
          ],
          "pascal": [
            "function BitmapCollision(bmp1: Bitmap; cell1: Integer; const pt1: Point2D; bmp2: Bitmap; cell2: Integer; const pt2: Point2D): Boolean"
          ]
        }
      },
      {
        "signature": "bool bitmap_collision(bitmap bmp1,int cell1,double x1,double y1,bitmap bmp2,int cell2,double x2,double y2);",
        "name": "bitmap_collision",
        "method_name": "bitmap_collision",
        "unique_global_name": "bitmap_collision_for_cells",
        "unique_method_name": "bitmap.bitmap_collision_for_cells",
        "suffix_name": null,
        "description": "Check if two bitmaps collide.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if pixels in the two bitmaps would collide/overlap",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp1": {
            "type": "bitmap",
            "description": "The first bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "cell1": {
            "type": "int",
            "description": "The cell of the first bitmap.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x1": {
            "type": "double",
            "description": "The x location where the first bitmap is drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y1": {
            "type": "double",
            "description": "The y location where the first bitmap is drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "bmp2": {
            "type": "bitmap",
            "description": "The second bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "cell2": {
            "type": "int",
            "description": "The cell of the second bitmap.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x2": {
            "type": "double",
            "description": "The x location where the second bitmap is drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y2": {
            "type": "double",
            "description": "The y location where the second bitmap is drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "bitmap_collision",
          "suffix": "for_cells",
          "group": "physics",
          "static": "collisions",
          "self": "bmp1"
        },
        "signatures": {
          "python": [
            "def bitmap_collision_for_cells(bmp1, cell1, x1, y1, bmp2, cell2, x2, y2):"
          ],
          "csharp": [
            "public bool Bitmap.BitmapCollision(int cell1, double x1, double y1, Bitmap bmp2, int cell2, double x2, double y2);",
            "public static bool SplashKit.BitmapCollision(Bitmap bmp1, int cell1, double x1, double y1, Bitmap bmp2, int cell2, double x2, double y2);"
          ],
          "cpp": [
            "bool bitmap_collision(bitmap bmp1, int cell1, double x1, double y1, bitmap bmp2, int cell2, double x2, double y2)"
          ],
          "pascal": [
            "function BitmapCollision(bmp1: Bitmap; cell1: Integer; x1: Double; y1: Double; bmp2: Bitmap; cell2: Integer; x2: Double; y2: Double): Boolean"
          ]
        }
      },
      {
        "signature": "bool bitmap_point_collision(bitmap bmp,const matrix_2d& translation,const point_2d& pt);",
        "name": "bitmap_point_collision",
        "method_name": "point_collision",
        "unique_global_name": "bitmap_point_collision_with_translation",
        "unique_method_name": "bitmap.point_collision_with_translation",
        "suffix_name": null,
        "description": "Tests if a bitmap drawn using the passed in translation matrix would draw a pixel\nat the passed in point. Use to check collisions between a point and a bitmap.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if drawing the bitmap, using the passed in translation,\nwill draw a pixel at the indicated point.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to test.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "translation": {
            "type": "matrix_2d",
            "description": "The translation matrix that represents the position, scale,\nand rotation of the bitmap when it is drawn.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The point in the resulting drawing that is being tested.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "point_collision",
          "suffix": "with_translation",
          "group": "physics",
          "static": "collisions",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def bitmap_point_collision_with_translation(bmp, translation, pt):"
          ],
          "csharp": [
            "public bool Bitmap.PointCollision(Matrix2D translation, Point2D pt);",
            "public static bool SplashKit.BitmapPointCollision(Bitmap bmp, Matrix2D translation, Point2D pt);"
          ],
          "cpp": [
            "bool bitmap_point_collision(bitmap bmp, const matrix_2d &translation, const point_2d &pt)"
          ],
          "pascal": [
            "function BitmapPointCollision(bmp: Bitmap; const translation: Matrix2D; const pt: Point2D): Boolean"
          ]
        }
      },
      {
        "signature": "bool bitmap_point_collision(bitmap bmp,const point_2d &bmp_pt,const point_2d& pt);",
        "name": "bitmap_point_collision",
        "method_name": "point_collision",
        "unique_global_name": "bitmap_point_collision_at_point",
        "unique_method_name": "bitmap.point_collision_at_point",
        "suffix_name": null,
        "description": "Tests if a bitmap drawn at the `bmp_pt` point would draw a pixel\nat point `pt`. Use to check collisions between a point and a bitmap.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if drawing the bitmap, at `bmp_pt`,\nwill draw a pixel at the indicated point (`pt`).",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to test.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "bmp_pt": {
            "type": "point_2d",
            "description": "The point where the bitmap is drawn.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The point in the resulting drawing that is being tested.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "point_collision",
          "suffix": "at_point",
          "group": "physics",
          "static": "collisions",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def bitmap_point_collision_at_point(bmp, bmp_pt, pt):"
          ],
          "csharp": [
            "public bool Bitmap.PointCollision(Point2D bmpPt, Point2D pt);",
            "public static bool SplashKit.BitmapPointCollision(Bitmap bmp, Point2D bmpPt, Point2D pt);"
          ],
          "cpp": [
            "bool bitmap_point_collision(bitmap bmp, const point_2d &bmp_pt, const point_2d &pt)"
          ],
          "pascal": [
            "function BitmapPointCollision(bmp: Bitmap; const bmpPt: Point2D; const pt: Point2D): Boolean"
          ]
        }
      },
      {
        "signature": "bool bitmap_point_collision(bitmap bmp,double bmp_x,double bmp_y,double x,double y);",
        "name": "bitmap_point_collision",
        "method_name": "point_collision",
        "unique_global_name": "bitmap_point_collision",
        "unique_method_name": "bitmap.point_collision",
        "suffix_name": null,
        "description": "Tests if a bitmap drawn at x,y would draw a pixel at the passed in point. Use \nto check collisions between a point and a bitmap.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if drawing the bitmap, at the indicated location,\nwill draw a pixel at the indicated point.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to test.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "bmp_x": {
            "type": "double",
            "description": "The x location where the bitmap is drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "bmp_y": {
            "type": "double",
            "description": "The y location where the bitmap is drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x location of the point to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location of the point to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "point_collision",
          "group": "physics",
          "static": "collisions",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def bitmap_point_collision(bmp, bmp_x, bmp_y, x, y):"
          ],
          "csharp": [
            "public bool Bitmap.PointCollision(double bmpX, double bmpY, double x, double y);",
            "public static bool SplashKit.BitmapPointCollision(Bitmap bmp, double bmpX, double bmpY, double x, double y);"
          ],
          "cpp": [
            "bool bitmap_point_collision(bitmap bmp, double bmp_x, double bmp_y, double x, double y)"
          ],
          "pascal": [
            "function BitmapPointCollision(bmp: Bitmap; bmpX: Double; bmpY: Double; x: Double; y: Double): Boolean"
          ]
        }
      },
      {
        "signature": "bool bitmap_point_collision(bitmap bmp,int cell,const matrix_2d& translation,const point_2d& pt);",
        "name": "bitmap_point_collision",
        "method_name": "point_collision",
        "unique_global_name": "bitmap_point_collision_for_cell_with_translation",
        "unique_method_name": "bitmap.point_collision_for_cell_with_translation",
        "suffix_name": null,
        "description": "Tests if a bitmap cell drawn using the passed in translation matrix would draw a pixel\nat the passed in point.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if drawing the bitmap, using the passed in translation,\nwill draw a pixel at the indicated point.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to test.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "cell": {
            "type": "int",
            "description": "The cell of the bitmap to check.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "translation": {
            "type": "matrix_2d",
            "description": "The translation matrix that represents the position, scale,\nand rotation of the bitmap when it is drawn.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The point in the resulting drawing that is being tested.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "point_collision",
          "suffix": "for_cell_with_translation",
          "group": "physics",
          "static": "collisions",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def bitmap_point_collision_for_cell_with_translation(bmp, cell, translation, pt):"
          ],
          "csharp": [
            "public bool Bitmap.PointCollision(int cell, Matrix2D translation, Point2D pt);",
            "public static bool SplashKit.BitmapPointCollision(Bitmap bmp, int cell, Matrix2D translation, Point2D pt);"
          ],
          "cpp": [
            "bool bitmap_point_collision(bitmap bmp, int cell, const matrix_2d &translation, const point_2d &pt)"
          ],
          "pascal": [
            "function BitmapPointCollision(bmp: Bitmap; cell: Integer; const translation: Matrix2D; const pt: Point2D): Boolean"
          ]
        }
      },
      {
        "signature": "bool bitmap_point_collision(bitmap bmp,int cell,const point_2d &bmp_pt,const point_2d& pt);",
        "name": "bitmap_point_collision",
        "method_name": "point_collision",
        "unique_global_name": "bitmap_point_collision_for_cell_at_point",
        "unique_method_name": "bitmap.point_collision_for_cell_at_point",
        "suffix_name": null,
        "description": "Tests if a cell of a bitmap drawn at x,y would draw a pixel at the passed in point. Use\nto check collisions between a point and a bitmap.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if drawing the bitmap cell, at the indicated location,\nwill draw a pixel at the indicated point.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "cell": {
            "type": "int",
            "description": "The cell of the bitmap to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "bmp_pt": {
            "type": "point_2d",
            "description": "The point where the bitmap is drawn.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The point in the resulting drawing that is being tested.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "point_collision",
          "suffix": "for_cell_at_point",
          "group": "physics",
          "static": "collisions",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def bitmap_point_collision_for_cell_at_point(bmp, cell, bmp_pt, pt):"
          ],
          "csharp": [
            "public bool Bitmap.PointCollision(int cell, Point2D bmpPt, Point2D pt);",
            "public static bool SplashKit.BitmapPointCollision(Bitmap bmp, int cell, Point2D bmpPt, Point2D pt);"
          ],
          "cpp": [
            "bool bitmap_point_collision(bitmap bmp, int cell, const point_2d &bmp_pt, const point_2d &pt)"
          ],
          "pascal": [
            "function BitmapPointCollision(bmp: Bitmap; cell: Integer; const bmpPt: Point2D; const pt: Point2D): Boolean"
          ]
        }
      },
      {
        "signature": "bool bitmap_point_collision(bitmap bmp,int cell,double bmp_x,double bmp_y,double x,double y);",
        "name": "bitmap_point_collision",
        "method_name": "point_collision",
        "unique_global_name": "bitmap_point_collision_for_cell",
        "unique_method_name": "bitmap.point_collision_for_cell",
        "suffix_name": null,
        "description": "Tests if a cell of a bitmap drawn at x,y would draw a pixel at the passed in point. Use\nto check collisions between a point and a bitmap.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if drawing the bitmap cell, at the indicated location,\nwill draw a pixel at the indicated point.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "cell": {
            "type": "int",
            "description": "The cell of the bitmap to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "bmp_x": {
            "type": "double",
            "description": "The x location where the bitmap is drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "bmp_y": {
            "type": "double",
            "description": "The y location where the bitmap is drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x location of the point to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location of the point to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "point_collision",
          "suffix": "for_cell",
          "group": "physics",
          "static": "collisions",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def bitmap_point_collision_for_cell(bmp, cell, bmp_x, bmp_y, x, y):"
          ],
          "csharp": [
            "public bool Bitmap.PointCollision(int cell, double bmpX, double bmpY, double x, double y);",
            "public static bool SplashKit.BitmapPointCollision(Bitmap bmp, int cell, double bmpX, double bmpY, double x, double y);"
          ],
          "cpp": [
            "bool bitmap_point_collision(bitmap bmp, int cell, double bmp_x, double bmp_y, double x, double y)"
          ],
          "pascal": [
            "function BitmapPointCollision(bmp: Bitmap; cell: Integer; bmpX: Double; bmpY: Double; x: Double; y: Double): Boolean"
          ]
        }
      },
      {
        "signature": "bool bitmap_quad_collision(bitmap bmp,int cell,const matrix_2d &translation,const quad &q);",
        "name": "bitmap_quad_collision",
        "method_name": "quad_collision",
        "unique_global_name": "bitmap_quad_collision_for_cell_with_translation",
        "unique_method_name": "bitmap.quad_collision_for_cell_with_translation",
        "suffix_name": null,
        "description": "Tests if a bitmap cell drawn using a passed in translation, will\nintersect with a quad. You can use this to detect collisions between\nbitmaps and quads.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if a drawn pixel in the cell of the bitmap will\nintersect with `q` when drawn.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "cell": {
            "type": "int",
            "description": "The cell of the bitmap to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "translation": {
            "type": "matrix_2d",
            "description": "The matrix used to transfrom the bitmap when drawing",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "q": {
            "type": "quad",
            "description": "The quad to test",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "quad_collision",
          "suffix": "for_cell_with_translation",
          "group": "physics",
          "static": "collisions",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def bitmap_quad_collision_for_cell_with_translation(bmp, cell, translation, q):"
          ],
          "csharp": [
            "public bool Bitmap.QuadCollision(int cell, Matrix2D translation, Quad q);",
            "public static bool SplashKit.BitmapQuadCollision(Bitmap bmp, int cell, Matrix2D translation, Quad q);"
          ],
          "cpp": [
            "bool bitmap_quad_collision(bitmap bmp, int cell, const matrix_2d &translation, const quad &q)"
          ],
          "pascal": [
            "function BitmapQuadCollision(bmp: Bitmap; cell: Integer; const translation: Matrix2D; const q: Quad): Boolean"
          ]
        }
      },
      {
        "signature": "bool bitmap_ray_collision(bitmap bmp,const point_2d& pt,const point_2d& origin,const vector_2d& heading);",
        "name": "bitmap_ray_collision",
        "method_name": "ray_collision",
        "unique_global_name": "bitmap_ray_collision_at_point",
        "unique_method_name": "bitmap.ray_collision_at_point",
        "suffix_name": null,
        "description": "Tests if a bitmap drawn at `pt` would intersect with a ray.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if a drawn pixel in the cell of the bitmap will\nintersect with the ray when drawn.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The location where the bitmap is drawn",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "origin": {
            "type": "point_2d",
            "description": "The origin of the ray",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "heading": {
            "type": "vector_2d",
            "description": "The heading of the ray",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "ray_collision",
          "suffix": "at_point",
          "group": "physics",
          "static": "collisions",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def bitmap_ray_collision_at_point(bmp, pt, origin, heading):"
          ],
          "csharp": [
            "public bool Bitmap.RayCollision(Point2D pt, Point2D origin, Vector2D heading);",
            "public static bool SplashKit.BitmapRayCollision(Bitmap bmp, Point2D pt, Point2D origin, Vector2D heading);"
          ],
          "cpp": [
            "bool bitmap_ray_collision(bitmap bmp, const point_2d &pt, const point_2d &origin, const vector_2d &heading)"
          ],
          "pascal": [
            "function BitmapRayCollision(bmp: Bitmap; const pt: Point2D; const origin: Point2D; const heading: Vector2D): Boolean"
          ]
        }
      },
      {
        "signature": "bool bitmap_ray_collision(bitmap bmp,double x,double y,const point_2d& origin,const vector_2d& heading);",
        "name": "bitmap_ray_collision",
        "method_name": "ray_collision",
        "unique_global_name": "bitmap_ray_collision",
        "unique_method_name": "bitmap.ray_collision",
        "suffix_name": null,
        "description": "Tests if a bitmap drawn at `x`, `y` would intersect with a ray.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if a drawn pixel in the bitmap will\nintersect with the ray when drawn.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x location where the bitmap is drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location where the bitmap is drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "origin": {
            "type": "point_2d",
            "description": "The origin of the ray",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "heading": {
            "type": "vector_2d",
            "description": "The heading of the ray",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "ray_collision",
          "group": "physics",
          "static": "collisions",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def bitmap_ray_collision(bmp, x, y, origin, heading):"
          ],
          "csharp": [
            "public bool Bitmap.RayCollision(double x, double y, Point2D origin, Vector2D heading);",
            "public static bool SplashKit.BitmapRayCollision(Bitmap bmp, double x, double y, Point2D origin, Vector2D heading);"
          ],
          "cpp": [
            "bool bitmap_ray_collision(bitmap bmp, double x, double y, const point_2d &origin, const vector_2d &heading)"
          ],
          "pascal": [
            "function BitmapRayCollision(bmp: Bitmap; x: Double; y: Double; const origin: Point2D; const heading: Vector2D): Boolean"
          ]
        }
      },
      {
        "signature": "bool bitmap_ray_collision(bitmap bmp,int cell,const matrix_2d& translation,const point_2d& origin,const vector_2d& heading);",
        "name": "bitmap_ray_collision",
        "method_name": "ray_collision",
        "unique_global_name": "bitmap_ray_collision_for_cell_with_translation",
        "unique_method_name": "bitmap.ray_collision_for_cell_with_translation",
        "suffix_name": null,
        "description": "Tests if a bitmap cell drawn using a passed in translation, will\nintersect with a ray. You can use this to detect collisions between\nbitmaps and rays.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if a drawn pixel in the cell of the bitmap will\nintersect with the ray when drawn.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "cell": {
            "type": "int",
            "description": "The cell of the bitmap to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "translation": {
            "type": "matrix_2d",
            "description": "The matrix used to transfrom the bitmap when drawing",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "origin": {
            "type": "point_2d",
            "description": "The origin of the ray",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "heading": {
            "type": "vector_2d",
            "description": "The heading of the ray",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "ray_collision",
          "suffix": "for_cell_with_translation",
          "group": "physics",
          "static": "collisions",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def bitmap_ray_collision_for_cell_with_translation(bmp, cell, translation, origin, heading):"
          ],
          "csharp": [
            "public bool Bitmap.RayCollision(int cell, Matrix2D translation, Point2D origin, Vector2D heading);",
            "public static bool SplashKit.BitmapRayCollision(Bitmap bmp, int cell, Matrix2D translation, Point2D origin, Vector2D heading);"
          ],
          "cpp": [
            "bool bitmap_ray_collision(bitmap bmp, int cell, const matrix_2d &translation, const point_2d &origin, const vector_2d &heading)"
          ],
          "pascal": [
            "function BitmapRayCollision(bmp: Bitmap; cell: Integer; const translation: Matrix2D; const origin: Point2D; const heading: Vector2D): Boolean"
          ]
        }
      },
      {
        "signature": "bool bitmap_ray_collision(bitmap bmp,int cell,const point_2d& pt,const point_2d& origin,const vector_2d& heading);",
        "name": "bitmap_ray_collision",
        "method_name": "ray_collision",
        "unique_global_name": "bitmap_ray_collision_for_cell_at_point",
        "unique_method_name": "bitmap.ray_collision_for_cell_at_point",
        "suffix_name": null,
        "description": "Tests if a bitmap cell drawn at `pt` would intersect with a ray.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if a drawn pixel in the cell of the bitmap will\nintersect with the ray when drawn.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "cell": {
            "type": "int",
            "description": "The cell of the bitmap to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The location where the bitmap is drawn",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "origin": {
            "type": "point_2d",
            "description": "The origin of the ray",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "heading": {
            "type": "vector_2d",
            "description": "The heading of the ray",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "ray_collision",
          "suffix": "for_cell_at_point",
          "group": "physics",
          "static": "collisions",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def bitmap_ray_collision_for_cell_at_point(bmp, cell, pt, origin, heading):"
          ],
          "csharp": [
            "public bool Bitmap.RayCollision(int cell, Point2D pt, Point2D origin, Vector2D heading);",
            "public static bool SplashKit.BitmapRayCollision(Bitmap bmp, int cell, Point2D pt, Point2D origin, Vector2D heading);"
          ],
          "cpp": [
            "bool bitmap_ray_collision(bitmap bmp, int cell, const point_2d &pt, const point_2d &origin, const vector_2d &heading)"
          ],
          "pascal": [
            "function BitmapRayCollision(bmp: Bitmap; cell: Integer; const pt: Point2D; const origin: Point2D; const heading: Vector2D): Boolean"
          ]
        }
      },
      {
        "signature": "bool bitmap_ray_collision(bitmap bmp,int cell,double x,double y,const point_2d& origin,const vector_2d& heading);",
        "name": "bitmap_ray_collision",
        "method_name": "ray_collision",
        "unique_global_name": "bitmap_ray_collision_for_cell",
        "unique_method_name": "bitmap.ray_collision_for_cell",
        "suffix_name": null,
        "description": "Tests if a bitmap cell drawn at `x`, `y` would intersect with a ray.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if a drawn pixel in the cell of the bitmap will\nintersect with the ray when drawn.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "cell": {
            "type": "int",
            "description": "The cell of the bitmap to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x location where the bitmap is drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location where the bitmap is drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "origin": {
            "type": "point_2d",
            "description": "The origin of the ray",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "heading": {
            "type": "vector_2d",
            "description": "The heading of the ray",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "ray_collision",
          "suffix": "for_cell",
          "group": "physics",
          "static": "collisions",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def bitmap_ray_collision_for_cell(bmp, cell, x, y, origin, heading):"
          ],
          "csharp": [
            "public bool Bitmap.RayCollision(int cell, double x, double y, Point2D origin, Vector2D heading);",
            "public static bool SplashKit.BitmapRayCollision(Bitmap bmp, int cell, double x, double y, Point2D origin, Vector2D heading);"
          ],
          "cpp": [
            "bool bitmap_ray_collision(bitmap bmp, int cell, double x, double y, const point_2d &origin, const vector_2d &heading)"
          ],
          "pascal": [
            "function BitmapRayCollision(bmp: Bitmap; cell: Integer; x: Double; y: Double; const origin: Point2D; const heading: Vector2D): Boolean"
          ]
        }
      },
      {
        "signature": "bool bitmap_rectangle_collision(bitmap bmp,const point_2d& pt,const rectangle& rect);",
        "name": "bitmap_rectangle_collision",
        "method_name": "rectangle_collision",
        "unique_global_name": "bitmap_rectangle_collision_at_point",
        "unique_method_name": "bitmap.rectangle_collision_at_point",
        "suffix_name": null,
        "description": "Tests if a bitmap drawn at `pt` would intersect with a rectangle.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if a drawn pixel in the cell of the bitmap will\nintersect with `rect` when drawn.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The location where the bitmap is drawn",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to test",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "rectangle_collision",
          "suffix": "at_point",
          "group": "physics",
          "static": "collisions",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def bitmap_rectangle_collision_at_point(bmp, pt, rect):"
          ],
          "csharp": [
            "public bool Bitmap.RectangleCollision(Point2D pt, Rectangle rect);",
            "public static bool SplashKit.BitmapRectangleCollision(Bitmap bmp, Point2D pt, Rectangle rect);"
          ],
          "cpp": [
            "bool bitmap_rectangle_collision(bitmap bmp, const point_2d &pt, const rectangle &rect)"
          ],
          "pascal": [
            "function BitmapRectangleCollision(bmp: Bitmap; const pt: Point2D; const rect: Rectangle): Boolean"
          ]
        }
      },
      {
        "signature": "bool bitmap_rectangle_collision(bitmap bmp,double x,double y,const rectangle& rect);",
        "name": "bitmap_rectangle_collision",
        "method_name": "rectangle_collision",
        "unique_global_name": "bitmap_rectangle_collision",
        "unique_method_name": "bitmap.rectangle_collision",
        "suffix_name": null,
        "description": "Tests if a bitmap drawn at `x`, `y` would intersect with a rectangle.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if a drawn pixel in the bitmap will\nintersect with `rect` when drawn.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x location where the bitmap is drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location where the bitmap is drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to test",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "rectangle_collision",
          "group": "physics",
          "static": "collisions",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def bitmap_rectangle_collision(bmp, x, y, rect):"
          ],
          "csharp": [
            "public bool Bitmap.RectangleCollision(double x, double y, Rectangle rect);",
            "public static bool SplashKit.BitmapRectangleCollision(Bitmap bmp, double x, double y, Rectangle rect);"
          ],
          "cpp": [
            "bool bitmap_rectangle_collision(bitmap bmp, double x, double y, const rectangle &rect)"
          ],
          "pascal": [
            "function BitmapRectangleCollision(bmp: Bitmap; x: Double; y: Double; const rect: Rectangle): Boolean"
          ]
        }
      },
      {
        "signature": "bool bitmap_rectangle_collision(bitmap bmp,int cell,const matrix_2d& translation,const rectangle& rect);",
        "name": "bitmap_rectangle_collision",
        "method_name": "rectangle_collision",
        "unique_global_name": "bitmap_rectangle_collision_for_cell_with_translation",
        "unique_method_name": "bitmap.rectangle_collision_for_cell_with_translation",
        "suffix_name": null,
        "description": "Tests if a bitmap cell drawn using a passed in translation, will\nintersect with a rectangle. You can use this to detect collisions between\nbitmaps and rectangles.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if a drawn pixel in the cell of the bitmap will\nintersect with `rect` when drawn.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "cell": {
            "type": "int",
            "description": "The cell of the bitmap to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "translation": {
            "type": "matrix_2d",
            "description": "The matrix used to transfrom the bitmap when drawing",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to test",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "rectangle_collision",
          "suffix": "for_cell_with_translation",
          "group": "physics",
          "static": "collisions",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def bitmap_rectangle_collision_for_cell_with_translation(bmp, cell, translation, rect):"
          ],
          "csharp": [
            "public bool Bitmap.RectangleCollision(int cell, Matrix2D translation, Rectangle rect);",
            "public static bool SplashKit.BitmapRectangleCollision(Bitmap bmp, int cell, Matrix2D translation, Rectangle rect);"
          ],
          "cpp": [
            "bool bitmap_rectangle_collision(bitmap bmp, int cell, const matrix_2d &translation, const rectangle &rect)"
          ],
          "pascal": [
            "function BitmapRectangleCollision(bmp: Bitmap; cell: Integer; const translation: Matrix2D; const rect: Rectangle): Boolean"
          ]
        }
      },
      {
        "signature": "bool bitmap_rectangle_collision(bitmap bmp,int cell,const point_2d& pt,const rectangle& rect);",
        "name": "bitmap_rectangle_collision",
        "method_name": "rectangle_collision",
        "unique_global_name": "bitmap_rectangle_collision_for_cell_at_point",
        "unique_method_name": "bitmap.rectangle_collision_for_cell_at_point",
        "suffix_name": null,
        "description": "Tests if a bitmap cell drawn at `pt` would intersect with a rectangle.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if a drawn pixel in the cell of the bitmap will\nintersect with `rect` when drawn.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "cell": {
            "type": "int",
            "description": "The cell of the bitmap to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The location where the bitmap is drawn",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to test",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "rectangle_collision",
          "suffix": "for_cell_at_point",
          "group": "physics",
          "static": "collisions",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def bitmap_rectangle_collision_for_cell_at_point(bmp, cell, pt, rect):"
          ],
          "csharp": [
            "public bool Bitmap.RectangleCollision(int cell, Point2D pt, Rectangle rect);",
            "public static bool SplashKit.BitmapRectangleCollision(Bitmap bmp, int cell, Point2D pt, Rectangle rect);"
          ],
          "cpp": [
            "bool bitmap_rectangle_collision(bitmap bmp, int cell, const point_2d &pt, const rectangle &rect)"
          ],
          "pascal": [
            "function BitmapRectangleCollision(bmp: Bitmap; cell: Integer; const pt: Point2D; const rect: Rectangle): Boolean"
          ]
        }
      },
      {
        "signature": "bool bitmap_rectangle_collision(bitmap bmp,int cell,double x,double y,const rectangle& rect);",
        "name": "bitmap_rectangle_collision",
        "method_name": "rectangle_collision",
        "unique_global_name": "bitmap_rectangle_collision_for_cell",
        "unique_method_name": "bitmap.rectangle_collision_for_cell",
        "suffix_name": null,
        "description": "Tests if a cell of the bitmap drawn at `x`, `y` would intersect with a rectangle.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if a drawn pixel in the bitmap will\nintersect with `rect` when drawn.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "cell": {
            "type": "int",
            "description": "The cell of the bitmap to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x location where the bitmap is drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location where the bitmap is drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to test",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "rectangle_collision",
          "suffix": "for_cell",
          "group": "physics",
          "static": "collisions",
          "self": "bmp"
        },
        "signatures": {
          "python": [
            "def bitmap_rectangle_collision_for_cell(bmp, cell, x, y, rect):"
          ],
          "csharp": [
            "public bool Bitmap.RectangleCollision(int cell, double x, double y, Rectangle rect);",
            "public static bool SplashKit.BitmapRectangleCollision(Bitmap bmp, int cell, double x, double y, Rectangle rect);"
          ],
          "cpp": [
            "bool bitmap_rectangle_collision(bitmap bmp, int cell, double x, double y, const rectangle &rect)"
          ],
          "pascal": [
            "function BitmapRectangleCollision(bmp: Bitmap; cell: Integer; x: Double; y: Double; const rect: Rectangle): Boolean"
          ]
        }
      },
      {
        "signature": "bool sprite_bitmap_collision(sprite s,bitmap bmp,double x,double y);",
        "name": "sprite_bitmap_collision",
        "method_name": "bitmap_collision",
        "unique_global_name": "sprite_bitmap_collision",
        "unique_method_name": "sprite.bitmap_collision",
        "suffix_name": null,
        "description": "Tests if a sprite will collide with a bitmap drawn at the indicated\nlocation.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the sprite collides with the bitmap when drawn\nat the indicated location.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x location where the bitmap is drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location where the bitmap is drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "bitmap_collision",
          "group": "physics",
          "static": "collisions",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_bitmap_collision(s, bmp, x, y):"
          ],
          "csharp": [
            "public bool Sprite.BitmapCollision(Bitmap bmp, double x, double y);",
            "public static bool SplashKit.SpriteBitmapCollision(Sprite s, Bitmap bmp, double x, double y);"
          ],
          "cpp": [
            "bool sprite_bitmap_collision(sprite s, bitmap bmp, double x, double y)"
          ],
          "pascal": [
            "function SpriteBitmapCollision(s: Sprite; bmp: Bitmap; x: Double; y: Double): Boolean"
          ]
        }
      },
      {
        "signature": "bool sprite_bitmap_collision(sprite s,bitmap bmp,int cell,const point_2d &pt);",
        "name": "sprite_bitmap_collision",
        "method_name": "bitmap_collision",
        "unique_global_name": "sprite_bitmap_collision_with_cell_at_point",
        "unique_method_name": "sprite.bitmap_collision_with_cell_at_point",
        "suffix_name": null,
        "description": "Tests if a sprite will collide with a bitmap drawn at the indicated\nlocation.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the sprite collides with the bitmap cell when drawn\nat the indicated location.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "cell": {
            "type": "int",
            "description": "The cell of the bitmap to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The point where the bitmap is drawn",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "bitmap_collision",
          "suffix": "with_cell_at_point",
          "group": "physics",
          "static": "collisions",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_bitmap_collision_with_cell_at_point(s, bmp, cell, pt):"
          ],
          "csharp": [
            "public bool Sprite.BitmapCollision(Bitmap bmp, int cell, Point2D pt);",
            "public static bool SplashKit.SpriteBitmapCollision(Sprite s, Bitmap bmp, int cell, Point2D pt);"
          ],
          "cpp": [
            "bool sprite_bitmap_collision(sprite s, bitmap bmp, int cell, const point_2d &pt)"
          ],
          "pascal": [
            "function SpriteBitmapCollision(s: Sprite; bmp: Bitmap; cell: Integer; const pt: Point2D): Boolean"
          ]
        }
      },
      {
        "signature": "bool sprite_bitmap_collision(sprite s,bitmap bmp,int cell,double x,double y);",
        "name": "sprite_bitmap_collision",
        "method_name": "bitmap_collision",
        "unique_global_name": "sprite_bitmap_collision_with_cell",
        "unique_method_name": "sprite.bitmap_collision_with_cell",
        "suffix_name": null,
        "description": "Tests if a sprite will collide with a bitmap drawn at the indicated\nlocation.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the sprite collides with the bitmap cell when drawn\nat the indicated location.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "cell": {
            "type": "int",
            "description": "The cell of the bitmap to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x location where the bitmap is drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location where the bitmap is drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "bitmap_collision",
          "suffix": "with_cell",
          "group": "physics",
          "static": "collisions",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_bitmap_collision_with_cell(s, bmp, cell, x, y):"
          ],
          "csharp": [
            "public bool Sprite.BitmapCollision(Bitmap bmp, int cell, double x, double y);",
            "public static bool SplashKit.SpriteBitmapCollision(Sprite s, Bitmap bmp, int cell, double x, double y);"
          ],
          "cpp": [
            "bool sprite_bitmap_collision(sprite s, bitmap bmp, int cell, double x, double y)"
          ],
          "pascal": [
            "function SpriteBitmapCollision(s: Sprite; bmp: Bitmap; cell: Integer; x: Double; y: Double): Boolean"
          ]
        }
      },
      {
        "signature": "bool sprite_collision(sprite s1,sprite s2);",
        "name": "sprite_collision",
        "method_name": "sprite_collision",
        "unique_global_name": "sprite_collision",
        "unique_method_name": "sprite.sprite_collision",
        "suffix_name": null,
        "description": "Tests if two given sprites `s1` and `s2` are collided",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "return `true` if both `s1` and `s2` are colliding, false otherwise.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s1": {
            "type": "sprite",
            "description": "the first `sprite` to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "s2": {
            "type": "sprite",
            "description": "the second `sprite` to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "sprite_collision",
          "self": "s1",
          "group": "physics",
          "static": "collisions"
        },
        "signatures": {
          "python": [
            "def sprite_collision(s1, s2):"
          ],
          "csharp": [
            "public bool Sprite.SpriteCollision(Sprite s2);",
            "public static bool SplashKit.SpriteCollision(Sprite s1, Sprite s2);"
          ],
          "cpp": [
            "bool sprite_collision(sprite s1, sprite s2)"
          ],
          "pascal": [
            "function SpriteCollision(s1: Sprite; s2: Sprite): Boolean"
          ]
        }
      },
      {
        "signature": "bool sprite_point_collision(sprite s,const point_2d& pt);",
        "name": "sprite_point_collision",
        "method_name": "point_collision",
        "unique_global_name": "sprite_point_collision",
        "unique_method_name": "sprite.point_collision",
        "suffix_name": null,
        "description": "Tests if a sprite is drawn at a given point.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the sprite it drawn at the indicated point",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The point to check",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "point_collision",
          "group": "physics",
          "static": "collisions",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_point_collision(s, pt):"
          ],
          "csharp": [
            "public bool Sprite.PointCollision(Point2D pt);",
            "public static bool SplashKit.SpritePointCollision(Sprite s, Point2D pt);"
          ],
          "cpp": [
            "bool sprite_point_collision(sprite s, const point_2d &pt)"
          ],
          "pascal": [
            "function SpritePointCollision(s: Sprite; const pt: Point2D): Boolean"
          ]
        }
      },
      {
        "signature": "bool sprite_ray_collision(sprite s,const point_2d& origin,const vector_2d& heading);",
        "name": "sprite_ray_collision",
        "method_name": "ray_collision",
        "unique_global_name": "sprite_ray_collision",
        "unique_method_name": "sprite.ray_collision",
        "suffix_name": null,
        "description": "Tests if a sprite is drawn along a given ray.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the sprite is drawn along the ray",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "origin": {
            "type": "point_2d",
            "description": "The origin of the ray",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "heading": {
            "type": "vector_2d",
            "description": "The heading of the ray",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "ray_collision",
          "group": "physics",
          "static": "collisions",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_ray_collision(s, origin, heading):"
          ],
          "csharp": [
            "public bool Sprite.RayCollision(Point2D origin, Vector2D heading);",
            "public static bool SplashKit.SpriteRayCollision(Sprite s, Point2D origin, Vector2D heading);"
          ],
          "cpp": [
            "bool sprite_ray_collision(sprite s, const point_2d &origin, const vector_2d &heading)"
          ],
          "pascal": [
            "function SpriteRayCollision(s: Sprite; const origin: Point2D; const heading: Vector2D): Boolean"
          ]
        }
      },
      {
        "signature": "bool sprite_rectangle_collision(sprite s,const rectangle& rect);",
        "name": "sprite_rectangle_collision",
        "method_name": "rectangle_collision",
        "unique_global_name": "sprite_rectangle_collision",
        "unique_method_name": "sprite.rectangle_collision",
        "suffix_name": null,
        "description": "Tests if a sprite is drawn within an given area (rectangle).",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the sprite it drawn in the rectangle area",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to check",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "rectangle_collision",
          "group": "physics",
          "static": "collisions",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_rectangle_collision(s, rect):"
          ],
          "csharp": [
            "public bool Sprite.RectangleCollision(Rectangle rect);",
            "public static bool SplashKit.SpriteRectangleCollision(Sprite s, Rectangle rect);"
          ],
          "cpp": [
            "bool sprite_rectangle_collision(sprite s, const rectangle &rect)"
          ],
          "pascal": [
            "function SpriteRectangleCollision(s: Sprite; const rect: Rectangle): Boolean"
          ]
        }
      },
      {
        "signature": "void apply_matrix(const matrix_2d &matrix,quad &q);",
        "name": "apply_matrix",
        "method_name": null,
        "unique_global_name": "apply_matrix_to_quad",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use a matrix to transform all of the points in a quad.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "matrix": {
            "type": "matrix_2d",
            "description": "The matrix with the transformations needed.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "q": {
            "type": "quad",
            "description": "The quad to transform.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "to_quad",
          "group": "physics",
          "static": "matrix_2d"
        },
        "signatures": {
          "python": [
            "def apply_matrix_to_quad(matrix, q):"
          ],
          "csharp": [
            "public static void SplashKit.ApplyMatrix(Matrix2D matrix, ref Quad q);"
          ],
          "cpp": [
            "void apply_matrix(const matrix_2d &matrix, quad &q)"
          ],
          "pascal": [
            "procedure ApplyMatrix(const matrix: Matrix2D; var q: Quad)"
          ]
        }
      },
      {
        "signature": "void apply_matrix(const matrix_2d &m,triangle &tri);",
        "name": "apply_matrix",
        "method_name": null,
        "unique_global_name": "apply_matrix_to_triangle",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use a matrix to transform all of the points in a triangle.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "m": {
            "type": "matrix_2d",
            "description": "The matrix to be applied to the triangle.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "tri": {
            "type": "triangle",
            "description": "The triangle to tranform.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "to_triangle",
          "group": "physics",
          "static": "matrix_2d"
        },
        "signatures": {
          "python": [
            "def apply_matrix_to_triangle(m, tri):"
          ],
          "csharp": [
            "public static void SplashKit.ApplyMatrix(Matrix2D m, ref Triangle tri);"
          ],
          "cpp": [
            "void apply_matrix(const matrix_2d &m, triangle &tri)"
          ],
          "pascal": [
            "procedure ApplyMatrix(const m: Matrix2D; var tri: Triangle)"
          ]
        }
      },
      {
        "signature": "matrix_2d identity_matrix();",
        "name": "identity_matrix",
        "method_name": null,
        "unique_global_name": "identity_matrix",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the identity matrix. When a matrix_2d or Vector is multiplied by\nthe identity matrix the result is the original matrix or vector.",
        "brief": null,
        "return": {
          "type": "matrix_2d",
          "description": "An identify matrix.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "physics",
          "static": "matrix_2d"
        },
        "signatures": {
          "python": [
            "def identity_matrix():"
          ],
          "csharp": [
            "public static Matrix2D SplashKit.IdentityMatrix();"
          ],
          "cpp": [
            "matrix_2d identity_matrix()"
          ],
          "pascal": [
            "function IdentityMatrix(): Matrix2D"
          ]
        }
      },
      {
        "signature": "matrix_2d matrix_inverse(const matrix_2d &m);",
        "name": "matrix_inverse",
        "method_name": null,
        "unique_global_name": "matrix_inverse",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Calculate the inverse of a matrix.",
        "brief": null,
        "return": {
          "type": "matrix_2d",
          "description": "A matrix that is the inverse of m",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "m": {
            "type": "matrix_2d",
            "description": "The matrix to invert.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "matrix_2d"
        },
        "signatures": {
          "python": [
            "def matrix_inverse(m):"
          ],
          "csharp": [
            "public static Matrix2D SplashKit.MatrixInverse(Matrix2D m);"
          ],
          "cpp": [
            "matrix_2d matrix_inverse(const matrix_2d &m)"
          ],
          "pascal": [
            "function MatrixInverse(const m: Matrix2D): Matrix2D"
          ]
        }
      },
      {
        "signature": "point_2d matrix_multiply(const matrix_2d &m,const point_2d &pt);",
        "name": "matrix_multiply",
        "method_name": null,
        "unique_global_name": "matrix_multiply_point",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Multiplies the `point_2d` parameter `v with the `matrix_2d` `m and\nreturns the result as a `point_2d`. Use this to transform the vector with\nthe matrix (to apply scaling, rotation or translation effects).",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "A new point, the result of applying the transformation to pt.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "m": {
            "type": "matrix_2d",
            "description": "The matrix with the transformation to apply.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The point to be transformed.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "point",
          "group": "physics",
          "static": "matrix_2d"
        },
        "signatures": {
          "python": [
            "def matrix_multiply_point(m, pt):"
          ],
          "csharp": [
            "public static Point2D SplashKit.MatrixMultiply(Matrix2D m, Point2D pt);"
          ],
          "cpp": [
            "point_2d matrix_multiply(const matrix_2d &m, const point_2d &pt)"
          ],
          "pascal": [
            "function MatrixMultiply(const m: Matrix2D; const pt: Point2D): Point2D"
          ]
        }
      },
      {
        "signature": "matrix_2d matrix_multiply(const matrix_2d &m1,const matrix_2d &m2);",
        "name": "matrix_multiply",
        "method_name": null,
        "unique_global_name": "matrix_multiply_matrix",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Multiplies the two `matrix_2d` parameters, `m1` by `m2`, and returns\nthe result as a new `matrix_2d`. Use this to combine the effects to two\nmatrix transformations.",
        "brief": null,
        "return": {
          "type": "matrix_2d",
          "description": "The result of multiplying m1 by m2",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "m1": {
            "type": "matrix_2d",
            "description": "The first matrix",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "m2": {
            "type": "matrix_2d",
            "description": "The second matrix",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "matrix",
          "group": "physics",
          "static": "matrix_2d"
        },
        "signatures": {
          "python": [
            "def matrix_multiply_matrix(m1, m2):"
          ],
          "csharp": [
            "public static Matrix2D SplashKit.MatrixMultiply(Matrix2D m1, Matrix2D m2);"
          ],
          "cpp": [
            "matrix_2d matrix_multiply(const matrix_2d &m1, const matrix_2d &m2)"
          ],
          "pascal": [
            "function MatrixMultiply(const m1: Matrix2D; const m2: Matrix2D): Matrix2D"
          ]
        }
      },
      {
        "signature": "vector_2d matrix_multiply(const matrix_2d &m,const vector_2d &v);",
        "name": "matrix_multiply",
        "method_name": null,
        "unique_global_name": "matrix_multiply_vector",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Multiplies the `Vector` parameter `v` with the `matrix_2d` `m` and\nreturns the result as a `Vector`. Use this to transform the vector with\nthe matrix (to apply scaling, rotation or translation effects).",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "A new vector, the result of applying the transformation to v.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "m": {
            "type": "matrix_2d",
            "description": "The matrix with the transformation to apply.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "v": {
            "type": "vector_2d",
            "description": "The vector to be transformed.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "vector",
          "group": "physics",
          "static": "matrix_2d"
        },
        "signatures": {
          "python": [
            "def matrix_multiply_vector(m, v):"
          ],
          "csharp": [
            "public static Vector2D SplashKit.MatrixMultiply(Matrix2D m, Vector2D v);"
          ],
          "cpp": [
            "vector_2d matrix_multiply(const matrix_2d &m, const vector_2d &v)"
          ],
          "pascal": [
            "function MatrixMultiply(const m: Matrix2D; const v: Vector2D): Vector2D"
          ]
        }
      },
      {
        "signature": "string matrix_to_string(const matrix_2d &matrix);",
        "name": "matrix_to_string",
        "method_name": null,
        "unique_global_name": "matrix_to_string",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "This function returns a string representation of a Matrix.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "A string representation of the matrix.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "matrix": {
            "type": "matrix_2d",
            "description": "The matrix to convert to a string.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "matrix_2d"
        },
        "signatures": {
          "python": [
            "def matrix_to_string(matrix):"
          ],
          "csharp": [
            "public static string SplashKit.MatrixToString(Matrix2D matrix);"
          ],
          "cpp": [
            "string matrix_to_string(const matrix_2d &matrix)"
          ],
          "pascal": [
            "function MatrixToString(const matrix: Matrix2D): String"
          ]
        }
      },
      {
        "signature": "matrix_2d rotation_matrix(double deg);",
        "name": "rotation_matrix",
        "method_name": null,
        "unique_global_name": "rotation_matrix",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a rotation matrix that rotates 2d points by the angle.",
        "brief": null,
        "return": {
          "type": "matrix_2d",
          "description": "A matrix that encodes the rotation by a number of degrees.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "deg": {
            "type": "double",
            "description": "The amount to rotate points",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "matrix_2d"
        },
        "signatures": {
          "python": [
            "def rotation_matrix(deg):"
          ],
          "csharp": [
            "public static Matrix2D SplashKit.RotationMatrix(double deg);"
          ],
          "cpp": [
            "matrix_2d rotation_matrix(double deg)"
          ],
          "pascal": [
            "function RotationMatrix(deg: Double): Matrix2D"
          ]
        }
      },
      {
        "signature": "matrix_2d scale_matrix(const point_2d &scale);",
        "name": "scale_matrix",
        "method_name": null,
        "unique_global_name": "scale_matrix_from_point",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Create a scale matrix that scales x and y to\ndifferent degrees.",
        "brief": null,
        "return": {
          "type": "matrix_2d",
          "description": "A matrix that will scale points based on scale parameter.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "scale": {
            "type": "point_2d",
            "description": "The amount to scale, with separate x and y components.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "from_point",
          "group": "physics",
          "static": "matrix_2d"
        },
        "signatures": {
          "python": [
            "def scale_matrix_from_point(scale):"
          ],
          "csharp": [
            "public static Matrix2D SplashKit.ScaleMatrix(Point2D scale);"
          ],
          "cpp": [
            "matrix_2d scale_matrix(const point_2d &scale)"
          ],
          "pascal": [
            "function ScaleMatrix(const scale: Point2D): Matrix2D"
          ]
        }
      },
      {
        "signature": "matrix_2d scale_matrix(const vector_2d &scale);",
        "name": "scale_matrix",
        "method_name": null,
        "unique_global_name": "scale_matrix_from_vector",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Create a scale matrix that scales x and y to\ndifferent degrees.",
        "brief": null,
        "return": {
          "type": "matrix_2d",
          "description": "A matrix that will scale points based on scale parameter.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "scale": {
            "type": "vector_2d",
            "description": "The amount to scale, with separate x and y components.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "from_vector",
          "group": "physics",
          "static": "matrix_2d"
        },
        "signatures": {
          "python": [
            "def scale_matrix_from_vector(scale):"
          ],
          "csharp": [
            "public static Matrix2D SplashKit.ScaleMatrix(Vector2D scale);"
          ],
          "cpp": [
            "matrix_2d scale_matrix(const vector_2d &scale)"
          ],
          "pascal": [
            "function ScaleMatrix(const scale: Vector2D): Matrix2D"
          ]
        }
      },
      {
        "signature": "matrix_2d scale_matrix(double scale);",
        "name": "scale_matrix",
        "method_name": null,
        "unique_global_name": "scale_matrix",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a matrix that can be used to scale 2d points (both x and y).",
        "brief": null,
        "return": {
          "type": "matrix_2d",
          "description": "A matrix to scale points by.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "scale": {
            "type": "double",
            "description": "The amount to scale points by.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "matrix_2d"
        },
        "signatures": {
          "python": [
            "def scale_matrix(scale):"
          ],
          "csharp": [
            "public static Matrix2D SplashKit.ScaleMatrix(double scale);"
          ],
          "cpp": [
            "matrix_2d scale_matrix(double scale)"
          ],
          "pascal": [
            "function ScaleMatrix(scale: Double): Matrix2D"
          ]
        }
      },
      {
        "signature": "matrix_2d scale_rotate_translate_matrix(const point_2d &scale,double deg,const point_2d &translate);",
        "name": "scale_rotate_translate_matrix",
        "method_name": null,
        "unique_global_name": "scale_rotate_translate_matrix",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Create a matrix that can scale, rotate then translate geometry points.",
        "brief": null,
        "return": {
          "type": "matrix_2d",
          "description": "A matrix that will scale, rotate, and translate.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "scale": {
            "type": "point_2d",
            "description": "The amount to scale",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "deg": {
            "type": "double",
            "description": "The amount to rotate",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "translate": {
            "type": "point_2d",
            "description": "The amount to move",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "matrix_2d"
        },
        "signatures": {
          "python": [
            "def scale_rotate_translate_matrix(scale, deg, translate):"
          ],
          "csharp": [
            "public static Matrix2D SplashKit.ScaleRotateTranslateMatrix(Point2D scale, double deg, Point2D translate);"
          ],
          "cpp": [
            "matrix_2d scale_rotate_translate_matrix(const point_2d &scale, double deg, const point_2d &translate)"
          ],
          "pascal": [
            "function ScaleRotateTranslateMatrix(const scale: Point2D; deg: Double; const translate: Point2D): Matrix2D"
          ]
        }
      },
      {
        "signature": "matrix_2d translation_matrix(const point_2d &pt);",
        "name": "translation_matrix",
        "method_name": null,
        "unique_global_name": "translation_matrix_to_point",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a translation matric used to translate 2d points by the\ndistance in the point_2d.",
        "brief": null,
        "return": {
          "type": "matrix_2d",
          "description": "A matrix that will move points by amount in pt",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "The point to translate to.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "to_point",
          "group": "physics",
          "static": "matrix_2d"
        },
        "signatures": {
          "python": [
            "def translation_matrix_to_point(pt):"
          ],
          "csharp": [
            "public static Matrix2D SplashKit.TranslationMatrix(Point2D pt);"
          ],
          "cpp": [
            "matrix_2d translation_matrix(const point_2d &pt)"
          ],
          "pascal": [
            "function TranslationMatrix(const pt: Point2D): Matrix2D"
          ]
        }
      },
      {
        "signature": "matrix_2d translation_matrix(const vector_2d &pt);",
        "name": "translation_matrix",
        "method_name": null,
        "unique_global_name": "translation_matrix_from_vector",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a translation matric used to translate 2d points by the\ndistance in the vector_2d.",
        "brief": null,
        "return": {
          "type": "matrix_2d",
          "description": "A matrix that will move points by amount in pt",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt": {
            "type": "vector_2d",
            "description": "The point to translate to.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "from_vector",
          "group": "physics",
          "static": "matrix_2d"
        },
        "signatures": {
          "python": [
            "def translation_matrix_from_vector(pt):"
          ],
          "csharp": [
            "public static Matrix2D SplashKit.TranslationMatrix(Vector2D pt);"
          ],
          "cpp": [
            "matrix_2d translation_matrix(const vector_2d &pt)"
          ],
          "pascal": [
            "function TranslationMatrix(const pt: Vector2D): Matrix2D"
          ]
        }
      },
      {
        "signature": "matrix_2d translation_matrix(double dx,double dy);",
        "name": "translation_matrix",
        "method_name": null,
        "unique_global_name": "translation_matrix",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a matrix that can be used to translate 2d points. Moving them\nby dx and dy.",
        "brief": null,
        "return": {
          "type": "matrix_2d",
          "description": "A matrix that will move points by dx, dy",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "dx": {
            "type": "double",
            "description": "The amount to move points along the x axis.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "dy": {
            "type": "double",
            "description": "The amount to move points along the y axis.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "matrix_2d"
        },
        "signatures": {
          "python": [
            "def translation_matrix(dx, dy):"
          ],
          "csharp": [
            "public static Matrix2D SplashKit.TranslationMatrix(double dx, double dy);"
          ],
          "cpp": [
            "matrix_2d translation_matrix(double dx, double dy)"
          ],
          "pascal": [
            "function TranslationMatrix(dx: Double; dy: Double): Matrix2D"
          ]
        }
      },
      {
        "signature": "double angle_between(const vector_2d &v1,const vector_2d &v2);",
        "name": "angle_between",
        "method_name": null,
        "unique_global_name": "angle_between",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Calculates the angle from one vector to another.",
        "brief": null,
        "return": {
          "type": "double",
          "description": "The angle of the line from the end of `v1` to the end of `v2`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "v1": {
            "type": "vector_2d",
            "description": "The first vector",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "v2": {
            "type": "vector_2d",
            "description": "The second vector",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "python": [
            "def angle_between(v1, v2):"
          ],
          "csharp": [
            "public static double SplashKit.AngleBetween(Vector2D v1, Vector2D v2);"
          ],
          "cpp": [
            "double angle_between(const vector_2d &v1, const vector_2d &v2)"
          ],
          "pascal": [
            "function AngleBetween(const v1: Vector2D; const v2: Vector2D): Double"
          ]
        }
      },
      {
        "signature": "double dot_product(const vector_2d &v1,const vector_2d &v2);",
        "name": "dot_product",
        "method_name": null,
        "unique_global_name": "dot_product",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Calculates the dot product (scalar product) between the two vector\nparameters provided (`v1` and `v2`). It returns the result as a\nscalar value.\n\nIf the result is 0.0 it means that the vectors are orthogonal (at right\nangles to each other). If `v1` and `v2` are unit vectors (length of\n1.0) and the dot product is 1.0, it means that `v1` and `v2` vectors\nare parallel.",
        "brief": null,
        "return": {
          "type": "double",
          "description": "The dot product of `v1` . `v2`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "v1": {
            "type": "vector_2d",
            "description": "The first vector",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "v2": {
            "type": "vector_2d",
            "description": "The other vector",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "python": [
            "def dot_product(v1, v2):"
          ],
          "csharp": [
            "public static double SplashKit.DotProduct(Vector2D v1, Vector2D v2);"
          ],
          "cpp": [
            "double dot_product(const vector_2d &v1, const vector_2d &v2)"
          ],
          "pascal": [
            "function DotProduct(const v1: Vector2D; const v2: Vector2D): Double"
          ]
        }
      },
      {
        "signature": "bool is_zero_vector(const vector_2d &v);",
        "name": "is_zero_vector",
        "method_name": null,
        "unique_global_name": "is_zero_vector",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns if the vector is a null/zero vector -- having no size or direction.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if `v` has no magnitude.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "v": {
            "type": "vector_2d",
            "description": "The vector",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "python": [
            "def is_zero_vector(v):"
          ],
          "csharp": [
            "public static bool SplashKit.IsZeroVector(Vector2D v);"
          ],
          "cpp": [
            "bool is_zero_vector(const vector_2d &v)"
          ],
          "pascal": [
            "function IsZeroVector(const v: Vector2D): Boolean"
          ]
        }
      },
      {
        "signature": "bool ray_intersection_point(const point_2d &from_pt,const vector_2d &heading,const line &l,point_2d &pt);",
        "name": "ray_intersection_point",
        "method_name": null,
        "unique_global_name": "ray_intersection_point",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Casts a ray in a heading and returns true is it intersects with a line",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the line and ray will intersect, in which case\nthe value of `pt` will be changed to be the point where\nthe intersection occurs.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "from_pt": {
            "type": "point_2d",
            "description": "The origin of the ray",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "heading": {
            "type": "vector_2d",
            "description": "The direction the ray is heading (as a `vector_2d`)",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "l": {
            "type": "line",
            "description": "The line to be checked",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "Outputs the point where the line and ray intersect",
            "is_pointer": false,
            "is_const": false,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "python": [
            "def ray_intersection_point(from_pt, heading, l, pt):"
          ],
          "csharp": [
            "public static bool SplashKit.RayIntersectionPoint(Point2D fromPt, Vector2D heading, Line l, ref Point2D pt);"
          ],
          "cpp": [
            "bool ray_intersection_point(const point_2d &from_pt, const vector_2d &heading, const line &l, point_2d &pt)"
          ],
          "pascal": [
            "function RayIntersectionPoint(const fromPt: Point2D; const heading: Vector2D; const l: Line; var pt: Point2D): Boolean"
          ]
        }
      },
      {
        "signature": "vector_2d unit_vector(const vector_2d &v);",
        "name": "unit_vector",
        "method_name": null,
        "unique_global_name": "unit_vector",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the unit vector of the parameter vector (v). The unit vector has a\nmagnitude of 1, resulting in a vector that indicates the direction of\nthe original vector.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "The unit vector of `v`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "v": {
            "type": "vector_2d",
            "description": "The vector",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "python": [
            "def unit_vector(v):"
          ],
          "csharp": [
            "public static Vector2D SplashKit.UnitVector(Vector2D v);"
          ],
          "cpp": [
            "vector_2d unit_vector(const vector_2d &v)"
          ],
          "pascal": [
            "function UnitVector(const v: Vector2D): Vector2D"
          ]
        }
      },
      {
        "signature": "vector_2d vector_add(const vector_2d &v1,const vector_2d &v2);",
        "name": "vector_add",
        "method_name": null,
        "unique_global_name": "vector_add",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Adds the two passed in vectors returns the result as new `vector_2d`.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "The result of adding the movements of the two vectors\ntogether.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "v1": {
            "type": "vector_2d",
            "description": "The first vector.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "v2": {
            "type": "vector_2d",
            "description": "The other vector.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "python": [
            "def vector_add(v1, v2):"
          ],
          "csharp": [
            "public static Vector2D SplashKit.VectorAdd(Vector2D v1, Vector2D v2);"
          ],
          "cpp": [
            "vector_2d vector_add(const vector_2d &v1, const vector_2d &v2)"
          ],
          "pascal": [
            "function VectorAdd(const v1: Vector2D; const v2: Vector2D): Vector2D"
          ]
        }
      },
      {
        "signature": "double vector_angle(const vector_2d v);",
        "name": "vector_angle",
        "method_name": null,
        "unique_global_name": "vector_angle",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Calculates the angle of a vector",
        "brief": null,
        "return": {
          "type": "double",
          "description": "The angle of the vector in degrees",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "v": {
            "type": "vector_2d",
            "description": "The vector",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "python": [
            "def vector_angle(v):"
          ],
          "csharp": [
            "public static double SplashKit.VectorAngle(Vector2D v);"
          ],
          "cpp": [
            "double vector_angle(const vector_2d v)"
          ],
          "pascal": [
            "function VectorAngle(v: Vector2D): Double"
          ]
        }
      },
      {
        "signature": "vector_2d vector_from_angle(double angle,double magnitude);",
        "name": "vector_from_angle",
        "method_name": null,
        "unique_global_name": "vector_from_angle",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a `vector_2d` from the supplied angle and distance.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "A vector that will move things at that angle and\nmagnitude",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "angle": {
            "type": "double",
            "description": "The angle in degrees",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "magnitude": {
            "type": "double",
            "description": "The length of the vector",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "python": [
            "def vector_from_angle(angle, magnitude):"
          ],
          "csharp": [
            "public static Vector2D SplashKit.VectorFromAngle(double angle, double magnitude);"
          ],
          "cpp": [
            "vector_2d vector_from_angle(double angle, double magnitude)"
          ],
          "pascal": [
            "function VectorFromAngle(angle: Double; magnitude: Double): Vector2D"
          ]
        }
      },
      {
        "signature": "vector_2d vector_from_line(const line &l);",
        "name": "vector_from_line",
        "method_name": null,
        "unique_global_name": "vector_from_line",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a vector that points from the start to the end of a line.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "A vector that will move things from the start to the end of the\nline",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "l": {
            "type": "line",
            "description": "The line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "python": [
            "def vector_from_line(l):"
          ],
          "csharp": [
            "public static Vector2D SplashKit.VectorFromLine(Line l);"
          ],
          "cpp": [
            "vector_2d vector_from_line(const line &l)"
          ],
          "pascal": [
            "function VectorFromLine(const l: Line): Vector2D"
          ]
        }
      },
      {
        "signature": "vector_2d vector_from_point_to_rect(const point_2d &pt,const rectangle &rect);",
        "name": "vector_from_point_to_rect",
        "method_name": null,
        "unique_global_name": "vector_from_point_to_rect",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a vector from a point to a rectangle.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "A vector representing the distance and direction from `pt`\nto `rect`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "The point",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "python": [
            "def vector_from_point_to_rect(pt, rect):"
          ],
          "csharp": [
            "public static Vector2D SplashKit.VectorFromPointToRect(Point2D pt, Rectangle rect);"
          ],
          "cpp": [
            "vector_2d vector_from_point_to_rect(const point_2d &pt, const rectangle &rect)"
          ],
          "pascal": [
            "function VectorFromPointToRect(const pt: Point2D; const rect: Rectangle): Vector2D"
          ]
        }
      },
      {
        "signature": "bool vector_in_rect(const vector_2d &v,const rectangle &rect);",
        "name": "vector_in_rect",
        "method_name": null,
        "unique_global_name": "vector_in_rect",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if the resulting vector would end in the rectangle if\nplaced at the origin.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the vector would end in the rectangle",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "v": {
            "type": "vector_2d",
            "description": "The vector",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "python": [
            "def vector_in_rect(v, rect):"
          ],
          "csharp": [
            "public static bool SplashKit.VectorInRect(Vector2D v, Rectangle rect);"
          ],
          "cpp": [
            "bool vector_in_rect(const vector_2d &v, const rectangle &rect)"
          ],
          "pascal": [
            "function VectorInRect(const v: Vector2D; const rect: Rectangle): Boolean"
          ]
        }
      },
      {
        "signature": "vector_2d vector_invert(const vector_2d &v);",
        "name": "vector_invert",
        "method_name": null,
        "unique_global_name": "vector_invert",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a new Vector that is an inverted version of the parameter\nvector (v). In other words, the -/+ sign of the x and y values are changed.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "The inverse (reverse) of `v`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "v": {
            "type": "vector_2d",
            "description": "The vector",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "python": [
            "def vector_invert(v):"
          ],
          "csharp": [
            "public static Vector2D SplashKit.VectorInvert(Vector2D v);"
          ],
          "cpp": [
            "vector_2d vector_invert(const vector_2d &v)"
          ],
          "pascal": [
            "function VectorInvert(const v: Vector2D): Vector2D"
          ]
        }
      },
      {
        "signature": "vector_2d vector_limit(const vector_2d &v,double limit);",
        "name": "vector_limit",
        "method_name": null,
        "unique_global_name": "vector_limit",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a scaled vector that ensures the new vector points\nin the same direction as v, but has a magnitude that is\nlimited to the length specified in the limit prameter.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "A new vector in the same direction as v, but with a\nmagnitude that is less than or equal to the limit.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "v": {
            "type": "vector_2d",
            "description": "The vector",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "limit": {
            "type": "double",
            "description": "Its maximum magnitude",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "python": [
            "def vector_limit(v, limit):"
          ],
          "csharp": [
            "public static Vector2D SplashKit.VectorLimit(Vector2D v, double limit);"
          ],
          "cpp": [
            "vector_2d vector_limit(const vector_2d &v, double limit)"
          ],
          "pascal": [
            "function VectorLimit(const v: Vector2D; limit: Double): Vector2D"
          ]
        }
      },
      {
        "signature": "double vector_magnitude(const vector_2d &v);",
        "name": "vector_magnitude",
        "method_name": null,
        "unique_global_name": "vector_magnitude",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the magnitude (or \"length\") of the vector.",
        "brief": null,
        "return": {
          "type": "double",
          "description": "Its magnitude",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "v": {
            "type": "vector_2d",
            "description": "The vector",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "python": [
            "def vector_magnitude(v):"
          ],
          "csharp": [
            "public static double SplashKit.VectorMagnitude(Vector2D v);"
          ],
          "cpp": [
            "double vector_magnitude(const vector_2d &v)"
          ],
          "pascal": [
            "function VectorMagnitude(const v: Vector2D): Double"
          ]
        }
      },
      {
        "signature": "double vector_magnitude_squared(const vector_2d &v);",
        "name": "vector_magnitude_squared",
        "method_name": null,
        "unique_global_name": "vector_magnitude_squared",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the squared magnitude (or \"length\") of the vector.",
        "brief": null,
        "return": {
          "type": "double",
          "description": "Its squared magnitude",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "v": {
            "type": "vector_2d",
            "description": "The vector",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "python": [
            "def vector_magnitude_squared(v):"
          ],
          "csharp": [
            "public static double SplashKit.VectorMagnitudeSquared(Vector2D v);"
          ],
          "cpp": [
            "double vector_magnitude_squared(const vector_2d &v)"
          ],
          "pascal": [
            "function VectorMagnitudeSquared(const v: Vector2D): Double"
          ]
        }
      },
      {
        "signature": "vector_2d vector_multiply(const vector_2d &v1,double s);",
        "name": "vector_multiply",
        "method_name": null,
        "unique_global_name": "vector_multiply",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Multiplies the vector by the passed in value.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "A new vector",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "v1": {
            "type": "vector_2d",
            "description": "The original vector",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "s": {
            "type": "double",
            "description": "The amount to multiply by",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "python": [
            "def vector_multiply(v1, s):"
          ],
          "csharp": [
            "public static Vector2D SplashKit.VectorMultiply(Vector2D v1, double s);"
          ],
          "cpp": [
            "vector_2d vector_multiply(const vector_2d &v1, double s)"
          ],
          "pascal": [
            "function VectorMultiply(const v1: Vector2D; s: Double): Vector2D"
          ]
        }
      },
      {
        "signature": "vector_2d vector_normal(const vector_2d &v);",
        "name": "vector_normal",
        "method_name": null,
        "unique_global_name": "vector_normal",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a new `vector_2d` that is perpendicular (\"normal\") to the parameter\nvector `v` provided. The concept of a \"normal\" vector is usually\nextracted from (or associated with) a line.\n\nNote: when passed a zero or null vector (a vector with no\nmagnitude or direction) then this function returns a zero/null vector.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "The normal of `v`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "v": {
            "type": "vector_2d",
            "description": "The vector",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "python": [
            "def vector_normal(v):"
          ],
          "csharp": [
            "public static Vector2D SplashKit.VectorNormal(Vector2D v);"
          ],
          "cpp": [
            "vector_2d vector_normal(const vector_2d &v)"
          ],
          "pascal": [
            "function VectorNormal(const v: Vector2D): Vector2D"
          ]
        }
      },
      {
        "signature": "vector_2d vector_out_of_circle_from_circle(const circle &src,const circle &bounds,const vector_2d &velocity);",
        "name": "vector_out_of_circle_from_circle",
        "method_name": null,
        "unique_global_name": "vector_out_of_circle_from_circle",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a vector to back one circle out of another, assuming the first circle was\nmoving at a specified velocity.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "A vector that can move the circle out of the bounds",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "src": {
            "type": "circle",
            "description": "The circle that is moving",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "bounds": {
            "type": "circle",
            "description": "The area you want to move the circle out of",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "velocity": {
            "type": "vector_2d",
            "description": "The circle's velocity",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "python": [
            "def vector_out_of_circle_from_circle(src, bounds, velocity):"
          ],
          "csharp": [
            "public static Vector2D SplashKit.VectorOutOfCircleFromCircle(Circle src, Circle bounds, Vector2D velocity);"
          ],
          "cpp": [
            "vector_2d vector_out_of_circle_from_circle(const circle &src, const circle &bounds, const vector_2d &velocity)"
          ],
          "pascal": [
            "function VectorOutOfCircleFromCircle(const src: Circle; const bounds: Circle; const velocity: Vector2D): Vector2D"
          ]
        }
      },
      {
        "signature": "vector_2d vector_out_of_circle_from_point(const point_2d &pt,const circle &c,const vector_2d &velocity);",
        "name": "vector_out_of_circle_from_point",
        "method_name": null,
        "unique_global_name": "vector_out_of_circle_from_point",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the vector out to move a point back out of a circle,\ngiven the point was moving at the specified velocity.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "A vector that can move the point out of the circle",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "The point that is moving",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "c": {
            "type": "circle",
            "description": "The circle you want to move the point out of",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "velocity": {
            "type": "vector_2d",
            "description": "The point's velocity",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "python": [
            "def vector_out_of_circle_from_point(pt, c, velocity):"
          ],
          "csharp": [
            "public static Vector2D SplashKit.VectorOutOfCircleFromPoint(Point2D pt, Circle c, Vector2D velocity);"
          ],
          "cpp": [
            "vector_2d vector_out_of_circle_from_point(const point_2d &pt, const circle &c, const vector_2d &velocity)"
          ],
          "pascal": [
            "function VectorOutOfCircleFromPoint(const pt: Point2D; const c: Circle; const velocity: Vector2D): Vector2D"
          ]
        }
      },
      {
        "signature": "vector_2d vector_out_of_rect_from_circle(const circle &c,const rectangle &rect,const vector_2d &velocity);",
        "name": "vector_out_of_rect_from_circle",
        "method_name": null,
        "unique_global_name": "vector_out_of_rect_from_circle",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a vector that can be used to move a circle back out of a rectangle,\ngiven that the circle is moving at the specified velocity.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "A vector that will move the circle out of the rectangle",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "c": {
            "type": "circle",
            "description": "The circle that is moving",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The area you wan to move the circle out of",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "velocity": {
            "type": "vector_2d",
            "description": "The circle's velocity",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "python": [
            "def vector_out_of_rect_from_circle(c, rect, velocity):"
          ],
          "csharp": [
            "public static Vector2D SplashKit.VectorOutOfRectFromCircle(Circle c, Rectangle rect, Vector2D velocity);"
          ],
          "cpp": [
            "vector_2d vector_out_of_rect_from_circle(const circle &c, const rectangle &rect, const vector_2d &velocity)"
          ],
          "pascal": [
            "function VectorOutOfRectFromCircle(const c: Circle; const rect: Rectangle; const velocity: Vector2D): Vector2D"
          ]
        }
      },
      {
        "signature": "vector_2d vector_out_of_rect_from_point(const point_2d &pt,const rectangle &rect,const vector_2d &velocity);",
        "name": "vector_out_of_rect_from_point",
        "method_name": null,
        "unique_global_name": "vector_out_of_rect_from_point",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Determines the vector needed to move back from point `pt` out of rectangle `rect` given\nthe point was moving at the velocity specified.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "A vector that can move the point outside of the\nrectangle.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "The point you want to move out of a rectangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to move out of",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "velocity": {
            "type": "vector_2d",
            "description": "The velocity of the point. This is used to determine\nwhere the point should return to.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "python": [
            "def vector_out_of_rect_from_point(pt, rect, velocity):"
          ],
          "csharp": [
            "public static Vector2D SplashKit.VectorOutOfRectFromPoint(Point2D pt, Rectangle rect, Vector2D velocity);"
          ],
          "cpp": [
            "vector_2d vector_out_of_rect_from_point(const point_2d &pt, const rectangle &rect, const vector_2d &velocity)"
          ],
          "pascal": [
            "function VectorOutOfRectFromPoint(const pt: Point2D; const rect: Rectangle; const velocity: Vector2D): Vector2D"
          ]
        }
      },
      {
        "signature": "vector_2d vector_out_of_rect_from_rect(const rectangle &src,const rectangle &bounds,const vector_2d &velocity);",
        "name": "vector_out_of_rect_from_rect",
        "method_name": null,
        "unique_global_name": "vector_out_of_rect_from_rect",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the vector needed to move rectangle `src` back out of rectangle `bounds`\nassuming the rectangle was moving at the velocity specified.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "A vector that can move the rectangle out of the bounds",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "src": {
            "type": "rectangle",
            "description": "The rectangle you want to move.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "bounds": {
            "type": "rectangle",
            "description": "The area you want to move the rectangle out of",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "velocity": {
            "type": "vector_2d",
            "description": "The velocity of the `src` rectangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "python": [
            "def vector_out_of_rect_from_rect(src, bounds, velocity):"
          ],
          "csharp": [
            "public static Vector2D SplashKit.VectorOutOfRectFromRect(Rectangle src, Rectangle bounds, Vector2D velocity);"
          ],
          "cpp": [
            "vector_2d vector_out_of_rect_from_rect(const rectangle &src, const rectangle &bounds, const vector_2d &velocity)"
          ],
          "pascal": [
            "function VectorOutOfRectFromRect(const src: Rectangle; const bounds: Rectangle; const velocity: Vector2D): Vector2D"
          ]
        }
      },
      {
        "signature": "vector_2d vector_point_to_point(const point_2d &start,const point_2d &end_pt);",
        "name": "vector_point_to_point",
        "method_name": null,
        "unique_global_name": "vector_point_to_point",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a `vector_2d` created from the difference from the `p1` to\nthe second `p2` points (`Point2D`).",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "A vector that will move things from the starting point to\nthe ending point",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "start": {
            "type": "point_2d",
            "description": "The starting point",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "end_pt": {
            "type": "point_2d",
            "description": "The ending point",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "python": [
            "def vector_point_to_point(start, end_pt):"
          ],
          "csharp": [
            "public static Vector2D SplashKit.VectorPointToPoint(Point2D start, Point2D endPt);"
          ],
          "cpp": [
            "vector_2d vector_point_to_point(const point_2d &start, const point_2d &end_pt)"
          ],
          "pascal": [
            "function VectorPointToPoint(const start: Point2D; const endPt: Point2D): Vector2D"
          ]
        }
      },
      {
        "signature": "vector_2d vector_subtract(const vector_2d &v1,const vector_2d &v2);",
        "name": "vector_subtract",
        "method_name": null,
        "unique_global_name": "vector_subtract",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Subtracts the second vector parameter (`v2`) from the first vector\n(`v1`) and returns the result as new `vector_2d`.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "The result of subtracting the movements of `v2` from `v1`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "v1": {
            "type": "vector_2d",
            "description": "The first vector.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "v2": {
            "type": "vector_2d",
            "description": "The other vector.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "python": [
            "def vector_subtract(v1, v2):"
          ],
          "csharp": [
            "public static Vector2D SplashKit.VectorSubtract(Vector2D v1, Vector2D v2);"
          ],
          "cpp": [
            "vector_2d vector_subtract(const vector_2d &v1, const vector_2d &v2)"
          ],
          "pascal": [
            "function VectorSubtract(const v1: Vector2D; const v2: Vector2D): Vector2D"
          ]
        }
      },
      {
        "signature": "vector_2d vector_to(const point_2d &p1);",
        "name": "vector_to",
        "method_name": null,
        "unique_global_name": "vector_to_point",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a new `vector_2d` using the x and y value of a `point_2d` parameter.\nThis is a vector from the origin to that point.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "A vector from the origin to `p1`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "p1": {
            "type": "point_2d",
            "description": "The point",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "point",
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "python": [
            "def vector_to_point(p1):"
          ],
          "csharp": [
            "public static Vector2D SplashKit.VectorTo(Point2D p1);"
          ],
          "cpp": [
            "vector_2d vector_to(const point_2d &p1)"
          ],
          "pascal": [
            "function VectorTo(const p1: Point2D): Vector2D"
          ]
        }
      },
      {
        "signature": "vector_2d vector_to(double x,double y);",
        "name": "vector_to",
        "method_name": null,
        "unique_global_name": "vector_to",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a vector to the indicated point.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "A vector that will move things the indicated amount",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "x": {
            "type": "double",
            "description": "The amount to move horizontally",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The amount to move vertically",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "python": [
            "def vector_to(x, y):"
          ],
          "csharp": [
            "public static Vector2D SplashKit.VectorTo(double x, double y);"
          ],
          "cpp": [
            "vector_2d vector_to(double x, double y)"
          ],
          "pascal": [
            "function VectorTo(x: Double; y: Double): Vector2D"
          ]
        }
      },
      {
        "signature": "string vector_to_string(const vector_2d &v);",
        "name": "vector_to_string",
        "method_name": null,
        "unique_global_name": "vector_to_string",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Get a text description of the `vector_2d`.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "A string representation of the vector",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "v": {
            "type": "vector_2d",
            "description": "The vector",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "python": [
            "def vector_to_string(v):"
          ],
          "csharp": [
            "public static string SplashKit.VectorToString(Vector2D v);"
          ],
          "cpp": [
            "string vector_to_string(const vector_2d &v)"
          ],
          "pascal": [
            "function VectorToString(const v: Vector2D): String"
          ]
        }
      },
      {
        "signature": "bool vectors_equal(const vector_2d &v1,const vector_2d v2);",
        "name": "vectors_equal",
        "method_name": null,
        "unique_global_name": "vectors_equal",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Determines if two vectors are the same.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the two vectors are equal.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "v1": {
            "type": "vector_2d",
            "description": "The first vector",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "v2": {
            "type": "vector_2d",
            "description": "The other vector",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "python": [
            "def vectors_equal(v1, v2):"
          ],
          "csharp": [
            "public static bool SplashKit.VectorsEqual(Vector2D v1, Vector2D v2);"
          ],
          "cpp": [
            "bool vectors_equal(const vector_2d &v1, const vector_2d v2)"
          ],
          "pascal": [
            "function VectorsEqual(const v1: Vector2D; v2: Vector2D): Boolean"
          ]
        }
      },
      {
        "signature": "bool vectors_not_equal(const vector_2d &v1,const vector_2d v2);",
        "name": "vectors_not_equal",
        "method_name": null,
        "unique_global_name": "vectors_not_equal",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Determines if two vectors are not the same.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the two vectors are different.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "v1": {
            "type": "vector_2d",
            "description": "The first vector",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "v2": {
            "type": "vector_2d",
            "description": "The other vector",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "python": [
            "def vectors_not_equal(v1, v2):"
          ],
          "csharp": [
            "public static bool SplashKit.VectorsNotEqual(Vector2D v1, Vector2D v2);"
          ],
          "cpp": [
            "bool vectors_not_equal(const vector_2d &v1, const vector_2d v2)"
          ],
          "pascal": [
            "function VectorsNotEqual(const v1: Vector2D; v2: Vector2D): Boolean"
          ]
        }
      }
    ],
    "typedefs": [

    ],
    "structs": [
      {
        "signature": "struct matrix_2d {double elements[3][3];};",
        "name": "matrix_2d",
        "description": "In SplashKit, matrices can be used to combine together a number of\noperations that need to be performed on `vector_2d` values. You can\ntranslate, rotate and scale, and combine these together into a\nsingle matrix that can then be applied to vectors and points.",
        "brief": null,
        "fields": {
          "elements": {
            "type": "double",
            "description": "The elements of the matrix",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": true,
            "array_dimension_sizes": [
              3,
              3
            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "matrix_2d"
        },
        "properties": {
        },
        "constructors": [

        ],
        "methods": [

        ],
        "is_alias": false,
        "is_struct": true
      }
    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "raspberry": {
    "brief": "Splashkit allows you to read and write to the GPIO pins on the Raspberry Pi.",
    "description": "",
    "functions": [
      {
        "signature": "bool has_gpio();",
        "name": "has_gpio",
        "method_name": null,
        "unique_global_name": "has_gpio",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks if the system has GPIO capabilities.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "true if the system has GPIO capabilities, false otherwise.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "raspberry",
          "static": "raspberry"
        },
        "signatures": {
          "python": [
            "def has_gpio():"
          ],
          "csharp": [
            "public static bool SplashKit.HasGpio();"
          ],
          "cpp": [
            "bool has_gpio()"
          ],
          "pascal": [
            "function HasGpio(): Boolean"
          ]
        }
      },
      {
        "signature": "void raspi_cleanup();",
        "name": "raspi_cleanup",
        "method_name": null,
        "unique_global_name": "raspi_cleanup",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "This function should be called when you are finished using the GPIO library. It sets all pin modes to INPUT and values to LOW.",
        "brief": "Cleans up and releases any resources used by the GPIO library.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "raspberry",
          "static": "raspberry"
        },
        "signatures": {
          "python": [
            "def raspi_cleanup():"
          ],
          "csharp": [
            "public static void SplashKit.RaspiCleanup();"
          ],
          "cpp": [
            "void raspi_cleanup()"
          ],
          "pascal": [
            "procedure RaspiCleanup()"
          ]
        }
      },
      {
        "signature": "pin_modes raspi_get_mode(pins pin);",
        "name": "raspi_get_mode",
        "method_name": null,
        "unique_global_name": "raspi_get_mode",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "This function retrieves the mode of the specified pin.",
        "brief": "Gets the mode of the specified pin.",
        "return": {
          "type": "pin_modes",
          "description": "The mode of the pin.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pin": {
            "type": "pins",
            "description": "The pin to get the mode for.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "raspberry",
          "static": "raspberry"
        },
        "signatures": {
          "python": [
            "def raspi_get_mode(pin):"
          ],
          "csharp": [
            "public static PinModes SplashKit.RaspiGetMode(Pins pin);"
          ],
          "cpp": [
            "pin_modes raspi_get_mode(pins pin)"
          ],
          "pascal": [
            "function RaspiGetMode(pin: Pins): PinModes"
          ]
        }
      },
      {
        "signature": "void raspi_init();",
        "name": "raspi_init",
        "method_name": null,
        "unique_global_name": "raspi_init",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "This function initializes the GPIO library for use. It should be called before any other GPIO functions.",
        "brief": "Initializes the GPIO library.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "raspberry",
          "static": "raspberry"
        },
        "signatures": {
          "python": [
            "def raspi_init():"
          ],
          "csharp": [
            "public static void SplashKit.RaspiInit();"
          ],
          "cpp": [
            "void raspi_init()"
          ],
          "pascal": [
            "procedure RaspiInit()"
          ]
        }
      },
      {
        "signature": "pin_values raspi_read(pins pin);",
        "name": "raspi_read",
        "method_name": null,
        "unique_global_name": "raspi_read",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "This function reads the value from the specified pin.",
        "brief": "Reads the value from the specified pin.",
        "return": {
          "type": "pin_values",
          "description": "The value read from the pin.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pin": {
            "type": "pins",
            "description": "The pin to read the value from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "raspberry",
          "static": "raspberry"
        },
        "signatures": {
          "python": [
            "def raspi_read(pin):"
          ],
          "csharp": [
            "public static PinValues SplashKit.RaspiRead(Pins pin);"
          ],
          "cpp": [
            "pin_values raspi_read(pins pin)"
          ],
          "pascal": [
            "function RaspiRead(pin: Pins): PinValues"
          ]
        }
      },
      {
        "signature": "void raspi_set_mode(pins pin,pin_modes mode);",
        "name": "raspi_set_mode",
        "method_name": null,
        "unique_global_name": "raspi_set_mode",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "This function sets the mode of the specified pin to the specified mode.",
        "brief": "Sets the mode of the specified pin.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pin": {
            "type": "pins",
            "description": "The pin to set the mode for.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "mode": {
            "type": "pin_modes",
            "description": "The mode to set for the pin.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "raspberry",
          "static": "raspberry"
        },
        "signatures": {
          "python": [
            "def raspi_set_mode(pin, mode):"
          ],
          "csharp": [
            "public static void SplashKit.RaspiSetMode(Pins pin, PinModes mode);"
          ],
          "cpp": [
            "void raspi_set_mode(pins pin, pin_modes mode)"
          ],
          "pascal": [
            "procedure RaspiSetMode(pin: Pins; mode: PinModes)"
          ]
        }
      },
      {
        "signature": "void raspi_set_pull_up_down(pins pin,pull_up_down pud);",
        "name": "raspi_set_pull_up_down",
        "method_name": null,
        "unique_global_name": "raspi_set_pull_up_down",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "This function sets the pull-up/down mode for the specified pin.",
        "brief": "Sets the pull up/down mode for the specified pin.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pin": {
            "type": "pins",
            "description": "The pin to set the pull up/down mode for.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pud": {
            "type": "pull_up_down",
            "description": "The pull up/down mode to set for the pin.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "raspberry",
          "static": "raspberry"
        },
        "signatures": {
          "python": [
            "def raspi_set_pull_up_down(pin, pud):"
          ],
          "csharp": [
            "public static void SplashKit.RaspiSetPullUpDown(Pins pin, PullUpDown pud);"
          ],
          "cpp": [
            "void raspi_set_pull_up_down(pins pin, pull_up_down pud)"
          ],
          "pascal": [
            "procedure RaspiSetPullUpDown(pin: Pins; pud: PullUpDown)"
          ]
        }
      },
      {
        "signature": "void raspi_set_pwm_dutycycle(pins pin,int dutycycle);",
        "name": "raspi_set_pwm_dutycycle",
        "method_name": null,
        "unique_global_name": "raspi_set_pwm_dutycycle",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "This function sets the PWM duty cycle for the specified pin.",
        "brief": "Sets the PWM duty cycle for the specified pin.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pin": {
            "type": "pins",
            "description": "The pin to set the PWM duty cycle for.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "dutycycle": {
            "type": "int",
            "description": "The PWM duty cycle to set for the pin.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "raspberry",
          "static": "raspberry"
        },
        "signatures": {
          "python": [
            "def raspi_set_pwm_dutycycle(pin, dutycycle):"
          ],
          "csharp": [
            "public static void SplashKit.RaspiSetPwmDutycycle(Pins pin, int dutycycle);"
          ],
          "cpp": [
            "void raspi_set_pwm_dutycycle(pins pin, int dutycycle)"
          ],
          "pascal": [
            "procedure RaspiSetPwmDutycycle(pin: Pins; dutycycle: Integer)"
          ]
        }
      },
      {
        "signature": "void raspi_set_pwm_frequency(pins pin,int frequency);",
        "name": "raspi_set_pwm_frequency",
        "method_name": null,
        "unique_global_name": "raspi_set_pwm_frequency",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "This function sets the PWM frequency for the specified pin.",
        "brief": "Sets the PWM frequency for the specified pin.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pin": {
            "type": "pins",
            "description": "The pin to set the PWM frequency for.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "frequency": {
            "type": "int",
            "description": "The PWM frequency to set for the pin.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "raspberry",
          "static": "raspberry"
        },
        "signatures": {
          "python": [
            "def raspi_set_pwm_frequency(pin, frequency):"
          ],
          "csharp": [
            "public static void SplashKit.RaspiSetPwmFrequency(Pins pin, int frequency);"
          ],
          "cpp": [
            "void raspi_set_pwm_frequency(pins pin, int frequency)"
          ],
          "pascal": [
            "procedure RaspiSetPwmFrequency(pin: Pins; frequency: Integer)"
          ]
        }
      },
      {
        "signature": "void raspi_set_pwm_range(pins pin,int range);",
        "name": "raspi_set_pwm_range",
        "method_name": null,
        "unique_global_name": "raspi_set_pwm_range",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "This function sets the PWM range for the specified pin.",
        "brief": "Sets the PWM range for the specified pin.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pin": {
            "type": "pins",
            "description": "The pin to set the PWM range for.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "range": {
            "type": "int",
            "description": "The PWM range to set for the pin.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "raspberry",
          "static": "raspberry"
        },
        "signatures": {
          "python": [
            "def raspi_set_pwm_range(pin, range):"
          ],
          "csharp": [
            "public static void SplashKit.RaspiSetPwmRange(Pins pin, int range);"
          ],
          "cpp": [
            "void raspi_set_pwm_range(pins pin, int range)"
          ],
          "pascal": [
            "procedure RaspiSetPwmRange(pin: Pins; range: Integer)"
          ]
        }
      },
      {
        "signature": "void raspi_write(pins pin,pin_values value);",
        "name": "raspi_write",
        "method_name": null,
        "unique_global_name": "raspi_write",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "This function writes the specified value to the specified pin.",
        "brief": "Writes a value to the specified pin.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pin": {
            "type": "pins",
            "description": "The pin to write the value to.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "pin_values",
            "description": "The value to write to the pin.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "raspberry",
          "static": "raspberry"
        },
        "signatures": {
          "python": [
            "def raspi_write(pin, value):"
          ],
          "csharp": [
            "public static void SplashKit.RaspiWrite(Pins pin, PinValues value);"
          ],
          "cpp": [
            "void raspi_write(pins pin, pin_values value)"
          ],
          "pascal": [
            "procedure RaspiWrite(pin: Pins; value: PinValues)"
          ]
        }
      }
    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "resource_bundles": {
    "brief": "SplashKit resource bundles allow you to quickly and easily load a\nnumber of resources in the `Resources` folder.",
    "description": "Supports the loading and freeing of game resource bundles. Resource types\ninclude images, sounds, music and animation files to name a few. Resource\nfiles must be saved in specific locations of a `Resources` folder for\nyour game.",
    "functions": [
      {
        "signature": "void free_resource_bundle(const string name);",
        "name": "free_resource_bundle",
        "method_name": null,
        "unique_global_name": "free_resource_bundle",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "When you are finished with the resources in a bundle, you can free them all\nby calling this procedure. It will free the resource bundle and all of the\nassociated resources.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the resource bundle to be freed",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "resource_bundles",
          "static": "resource_bundle"
        },
        "signatures": {
          "python": [
            "def free_resource_bundle(name):"
          ],
          "csharp": [
            "public static void SplashKit.FreeResourceBundle(string name);"
          ],
          "cpp": [
            "void free_resource_bundle(const string name)"
          ],
          "pascal": [
            "procedure FreeResourceBundle(name: String)"
          ]
        }
      },
      {
        "signature": "bool has_resource_bundle(const string &name);",
        "name": "has_resource_bundle",
        "method_name": null,
        "unique_global_name": "has_resource_bundle",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true when the named resource bundle has already been loaded.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True when the bundle is already loaded.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the resource bundle.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "resource_bundles",
          "static": "resource_bundle"
        },
        "signatures": {
          "python": [
            "def has_resource_bundle(name):"
          ],
          "csharp": [
            "public static bool SplashKit.HasResourceBundle(string name);"
          ],
          "cpp": [
            "bool has_resource_bundle(const string &name)"
          ],
          "pascal": [
            "function HasResourceBundle(const name: String): Boolean"
          ]
        }
      },
      {
        "signature": "void load_resource_bundle(const string &name,const string &filename);",
        "name": "load_resource_bundle",
        "method_name": null,
        "unique_global_name": "load_resource_bundle",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Loads all of the resources in the resource bundle. The resource bundle is a\ntext file that describes the resources you want to load. These rescources\nare then loaded when you call this procedure, and can all be released when\nyou call `release_resource_bundle`.\n\nSave the resource bundle text files into your projects `Resources` in the\n`bundles` folder. Use the following as the format for each of the\nresources.\n\nStart a line with a `//` to have it ignored when the bundle is loaded. This\ncan be used to add comments to your bundle.\n\n\n-  To load an **animation** use the format:\n\n```\nANIM,name,filename\n```\n\nFor example, the following will load an animation named \"WalkingScript\" that\nloads the animation from \"kermit.txt\" in your games animation `Resources`.\n\n```\nANIM,WalkingScript,kermit.txt\n```\n\n-  To load a **bitmap** use the format: \n\n```\nBMP,name,filename\n```\n\nFor example, the following will load a bitmap named \"Logo\" using the\n\"Logo.png\" file.\n\n```\nBITMAP,Logo,logo.png\n```\n\n-  To load a **bitmap** that has a number of cells, you can extend the\nbitmap format with the cell details. This has the format:\n\n```\nBMP,name,filename,cell-width,cell-height,columns,rows,count\n```\n\nThe following will setup the \"Player\" bitmap to have cells that are 75\npixels wide, and 42 pixels height. There are 4 columns in 1 row, giving\na total of 4 cells.\n\n```\nBITMAP,Player,player.png,75,42,4,1,4\n```\n\n-  To load a font use FONT,name,filename. For example, the following loads a\nfont named \"GameFont\" that represents the \"demolition.otf\".\n\n```\nFONT,GameFont,demolition.otf\n```\n\n-  To load music, use MUSIC,name,filename. The following loads \"GameMusic\"\nfor the \"magical_night.ogg\" file.\n\n```\nMUSIC,GameMusic,magical_night.ogg\n```\n\n-  To load a sound effect, use SOUND,name,filename. For example the following\nloads \"error\" from the \"error.wav\" file.\n\n```\nSOUND,error,error.wav\n```\n\n-  To create a timer use TIMER,name. The following creates a timer named as\n\"my timer\".\n\n```\nTIMER,my timer\n```\n\n-  You can also load another resource bundle using BUNDLE,name,filename.\nThe following loads \"another bundle\" from the \"another.txt\" file.\n\n```\nBUNDLE,another bundle,another.txt\n```",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the bundle when it is loaded.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "filename": {
            "type": "string",
            "description": "The filename to load.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "resource_bundles",
          "static": "resource_bundle"
        },
        "signatures": {
          "python": [
            "def load_resource_bundle(name, filename):"
          ],
          "csharp": [
            "public static void SplashKit.LoadResourceBundle(string name, string filename);"
          ],
          "cpp": [
            "void load_resource_bundle(const string &name, const string &filename)"
          ],
          "pascal": [
            "procedure LoadResourceBundle(const name: String; const filename: String)"
          ]
        }
      }
    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "resources": {
    "brief": "SplashKit resource functions allow you to locate resources in a\nproject's `Resources` folder.",
    "description": "",
    "functions": [
      {
        "signature": "void deregister_free_notifier(free_notifier *handler);",
        "name": "deregister_free_notifier",
        "method_name": null,
        "unique_global_name": "deregister_free_notifier",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Remove the function from the list of functions receiving notification\nof resource freeing.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "handler": {
            "type": "free_notifier",
            "description": "The function to remove",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "resources",
          "static": "resources"
        },
        "signatures": {
          "python": [
            "def deregister_free_notifier(handler):"
          ],
          "csharp": [
            "public static void SplashKit.DeregisterFreeNotifier(FreeNotifier handler);"
          ],
          "cpp": [
            "void deregister_free_notifier(free_notifier *handler)"
          ],
          "pascal": [
            "procedure DeregisterFreeNotifier(handler: FreeNotifier)"
          ]
        }
      },
      {
        "signature": "string path_to_resource(const string &filename,resource_kind kind);",
        "name": "path_to_resource",
        "method_name": null,
        "unique_global_name": "path_to_resource",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Gets the path to a give file of a certain resource kind.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "The full path to the resource.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "filename": {
            "type": "string",
            "description": "The name of the file of the resource kind.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "kind": {
            "type": "resource_kind",
            "description": "The kind of resource you are loading.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "resources",
          "static": "resources"
        },
        "signatures": {
          "python": [
            "def path_to_resource(filename, kind):"
          ],
          "csharp": [
            "public static string SplashKit.PathToResource(string filename, ResourceKind kind);"
          ],
          "cpp": [
            "string path_to_resource(const string &filename, resource_kind kind)"
          ],
          "pascal": [
            "function PathToResource(const filename: String; kind: ResourceKind): String"
          ]
        }
      },
      {
        "signature": "string path_to_resources();",
        "name": "path_to_resources",
        "method_name": null,
        "unique_global_name": "path_to_resources",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the path to the resources folder for the SplashKit program. This\nwill be auto detected at startup, but can be changed using\n`set_resources_path`.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "Path to SplashKit Resources folder.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "resources",
          "static": "resources"
        },
        "signatures": {
          "python": [
            "def path_to_resources():"
          ],
          "csharp": [
            "public static string SplashKit.PathToResources();"
          ],
          "cpp": [
            "string path_to_resources()"
          ],
          "pascal": [
            "function PathToResources(): String"
          ]
        }
      },
      {
        "signature": "string path_to_resources(resource_kind kind);",
        "name": "path_to_resources",
        "method_name": null,
        "unique_global_name": "path_to_resources_for_kind",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the path to the folder containing a given resource kind. This is\nthe path SplashkKit will search when you load a resource.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "The path to the folder containing this kind of resource.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "kind": {
            "type": "resource_kind",
            "description": "The type of resource you want the path for.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "for_kind",
          "group": "resources",
          "static": "resources"
        },
        "signatures": {
          "python": [
            "def path_to_resources_for_kind(kind):"
          ],
          "csharp": [
            "public static string SplashKit.PathToResources(ResourceKind kind);"
          ],
          "cpp": [
            "string path_to_resources(resource_kind kind)"
          ],
          "pascal": [
            "function PathToResources(kind: ResourceKind): String"
          ]
        }
      },
      {
        "signature": "void register_free_notifier(free_notifier *fn);",
        "name": "register_free_notifier",
        "method_name": null,
        "unique_global_name": "register_free_notifier",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Register a function to be called when any resource is freed.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "fn": {
            "type": "free_notifier",
            "description": "The function to be called when a resource is freed.",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "resources",
          "static": "resources"
        },
        "signatures": {
          "python": [
            "def register_free_notifier(fn):"
          ],
          "csharp": [
            "public static void SplashKit.RegisterFreeNotifier(FreeNotifier fn);"
          ],
          "cpp": [
            "void register_free_notifier(free_notifier *fn)"
          ],
          "pascal": [
            "procedure RegisterFreeNotifier(fn: FreeNotifier)"
          ]
        }
      },
      {
        "signature": "void set_resources_path(const string &path);",
        "name": "set_resources_path",
        "method_name": null,
        "unique_global_name": "set_resources_path",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the path to the SplashKit resources folder. Resource paths are then\nlocated within this folder.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "path": {
            "type": "string",
            "description": "The file path to the SplashKit Resources folder.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "resources",
          "static": "resources"
        },
        "signatures": {
          "python": [
            "def set_resources_path(path):"
          ],
          "csharp": [
            "public static void SplashKit.SetResourcesPath(string path);"
          ],
          "cpp": [
            "void set_resources_path(const string &path)"
          ],
          "pascal": [
            "procedure SetResourcesPath(const path: String)"
          ]
        }
      }
    ],
    "typedefs": [
      {
        "signature": "typedef void (free_notifier)(void *pointer);",
        "name": "free_notifier",
        "description": "The free notifier can be registered with the system. It is called every\ntime a resource is freed.",
        "brief": null,
        "attributes": {
          "group": "resources",
          "static": "resources"
        },
        "is_function_pointer": true,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pointer": {
            "type": "void",
            "description": "The pointer to the resource that is being freed.",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        }
      }
    ],
    "structs": [

    ],
    "enums": [
      {
        "signature": "enum resource_kind {ANIMATION_RESOURCE,BUNDLE_RESOURCE,FONT_RESOURCE,IMAGE_RESOURCE,JSON_RESOURCE,MUSIC_RESOURCE,SERVER_RESOURCE,SOUND_RESOURCE,TIMER_RESOURCE,OTHER_RESOURCE};",
        "name": "resource_kind",
        "description": "SplashKit is able to manage a number of different kinds of resources\nfor you.",
        "brief": null,
        "constants": {
          "ANIMATION_RESOURCE": {
            "description": "Animation scripts are loaded as Animation\nresources. These are located in the projects\n`Resources/animations` folder."
          },
          "BUNDLE_RESOURCE": {
            "description": "Resource bundles contain lists of other\nresources. These are located in the projects\n`Resources/bundles` folder."
          },
          "FONT_RESOURCE": {
            "description": "Fonts resources are located in the\n`Resources/fonts` folder."
          },
          "IMAGE_RESOURCE": {
            "description": "Image resources are located in the\n`Resources/images` folder."
          },
          "JSON_RESOURCE": {
            "description": "JSON resources are located in the projects\n`Resources/json` folder."
          },
          "MUSIC_RESOURCE": {
            "description": "Music resources can be played as music, and\nlive in the program's `Resources/sounds`\nfolder."
          },
          "SERVER_RESOURCE": {
            "description": "Server resources that can be sent as responses\nto web server requests."
          },
          "SOUND_RESOURCE": {
            "description": "Sound resources can be played as sound\neffects, and live in the program's\n`Resources/sounds` folder."
          },
          "TIMER_RESOURCE": {
            "description": "Timer resources are not saved to file, but\ncan be created by SplashkKit resource\nbundles."
          },
          "OTHER_RESOURCE": {
            "description": "Other resources can be loaded, these will be\nlocated directly in these project's\n`Resources` folder."
          }
        },
        "attributes": {
          "group": "resources",
          "static": "resources"
        },
        "signatures": {
          "python": "public enum {resource_kind.animation_resource = 0, resource_kind.bundle_resource = 0, resource_kind.font_resource = 0, resource_kind.image_resource = 0, resource_kind.json_resource = 0, resource_kind.music_resource = 0, resource_kind.server_resource = 0, resource_kind.sound_resource = 0, resource_kind.timer_resource = 0, resource_kind.other_resource = 0}",
          "csharp": "public enum {ResourceKind.AnimationResource = 0, ResourceKind.BundleResource = 0, ResourceKind.FontResource = 0, ResourceKind.ImageResource = 0, ResourceKind.JsonResource = 0, ResourceKind.MusicResource = 0, ResourceKind.ServerResource = 0, ResourceKind.SoundResource = 0, ResourceKind.TimerResource = 0, ResourceKind.OtherResource = 0}",
          "cpp": "class resource_kind {ANIMATION_RESOURCE = 0, BUNDLE_RESOURCE = 0, FONT_RESOURCE = 0, IMAGE_RESOURCE = 0, JSON_RESOURCE = 0, MUSIC_RESOURCE = 0, SERVER_RESOURCE = 0, SOUND_RESOURCE = 0, TIMER_RESOURCE = 0, OTHER_RESOURCE = 0};",
          "pascal": "public enum {ResourceKind.AnimationResource = 0, ResourceKind.BundleResource = 0, ResourceKind.FontResource = 0, ResourceKind.ImageResource = 0, ResourceKind.JsonResource = 0, ResourceKind.MusicResource = 0, ResourceKind.ServerResource = 0, ResourceKind.SoundResource = 0, ResourceKind.TimerResource = 0, ResourceKind.OtherResource = 0}"
        }
      }
    ],
    "defines": [

    ]
  },
  "sprites": {
    "brief": "SplashKit Sprites allows you to create images you can easily\nmove and animate.",
    "description": "SplashKit sprites are game elements that can be moved, and animated. Sprites\nare located at a position in the game, have a velocity, and an animation.\nThe sprite can also have arbitary data associated with it for game specific\npurposes.",
    "functions": [
      {
        "signature": "void call_for_all_sprites(sprite_float_function *fn,float val);",
        "name": "call_for_all_sprites",
        "method_name": null,
        "unique_global_name": "call_for_all_sprites_with_value",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Call the supplied function for all sprites in the current pack.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "fn": {
            "type": "sprite_float_function",
            "description": "The sprite function to call on all sprites.",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "val": {
            "type": "float",
            "description": "The value passed to the function for each sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "with_value",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "python": [
            "def call_for_all_sprites_with_value(fn, val):"
          ],
          "csharp": [
            "public static void SplashKit.CallForAllSprites(SpriteFloatFunction fn, float val);"
          ],
          "cpp": [
            "void call_for_all_sprites(sprite_float_function *fn, float val)"
          ],
          "pascal": [
            "procedure CallForAllSprites(fn: SpriteFloatFunction; val: Single)"
          ]
        }
      },
      {
        "signature": "void call_for_all_sprites(sprite_function *fn);",
        "name": "call_for_all_sprites",
        "method_name": null,
        "unique_global_name": "call_for_all_sprites",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Call the supplied function for all sprites in the current pack.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "fn": {
            "type": "sprite_function",
            "description": "The sprite function to call on all sprites.",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "python": [
            "def call_for_all_sprites(fn):"
          ],
          "csharp": [
            "public static void SplashKit.CallForAllSprites(SpriteFunction fn);"
          ],
          "cpp": [
            "void call_for_all_sprites(sprite_function *fn)"
          ],
          "pascal": [
            "procedure CallForAllSprites(fn: SpriteFunction)"
          ]
        }
      },
      {
        "signature": "void call_on_sprite_event(sprite_event_handler *handler);",
        "name": "call_on_sprite_event",
        "method_name": null,
        "unique_global_name": "call_on_sprite_event",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Register a procedure to be called when an events occur on any sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "handler": {
            "type": "sprite_event_handler",
            "description": "The function to call when any sprite raises an event",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "python": [
            "def call_on_sprite_event(handler):"
          ],
          "csharp": [
            "public static void SplashKit.CallOnSpriteEvent(SpriteEventHandler handler);"
          ],
          "cpp": [
            "void call_on_sprite_event(sprite_event_handler *handler)"
          ],
          "pascal": [
            "procedure CallOnSpriteEvent(handler: SpriteEventHandler)"
          ]
        }
      },
      {
        "signature": "sprite create_sprite(bitmap layer);",
        "name": "create_sprite",
        "method_name": null,
        "unique_global_name": "create_sprite",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a sprite for the passed in bitmap image. The sprite will use the\ncell information within the bitmap if it is animated at a later stage.\n\nThis version of create_sprite will initialise the sprite to use\npixel level collisions, no animations, and have one layer named 'layer1'.\nThis version of the constructor will assign a default name to the sprite\nfor resource management purposes.",
        "brief": null,
        "return": {
          "type": "sprite",
          "description": "The new sprite with image.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "layer": {
            "type": "bitmap",
            "description": "The bitmap for the sprite's image.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "constructor": true,
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "python": [
            "def create_sprite(layer):"
          ],
          "csharp": [
            "public static Sprite SplashKit.CreateSprite(Bitmap layer);",
            "public Sprite(Bitmap layer);"
          ],
          "cpp": [
            "sprite create_sprite(bitmap layer)"
          ],
          "pascal": [
            "function CreateSprite(layer: Bitmap): Sprite"
          ]
        }
      },
      {
        "signature": "sprite create_sprite(bitmap layer,animation_script ani);",
        "name": "create_sprite",
        "method_name": null,
        "unique_global_name": "create_sprite_with_animation",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a sprite for the passed in bitmap image. The sprite will use the\ncell information within the bitmap if it is animated at a later stage.\nThis version of `create_sprite` will initialise the sprite to use\npixel level collisions, the specified animation template, the layer have\nname 'layer1'.\n\nThis version of the constructor will assign a default name to the sprite\nfor resource management purposes.",
        "brief": null,
        "return": {
          "type": "sprite",
          "description": "The new sprite with image and animation script.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "layer": {
            "type": "bitmap",
            "description": "The bitmap for the sprite's image.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "ani": {
            "type": "animation_script",
            "description": "The animation script for the sprite's animations.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "constructor": true,
          "suffix": "with_animation",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "python": [
            "def create_sprite_with_animation(layer, ani):"
          ],
          "csharp": [
            "public static Sprite SplashKit.CreateSprite(Bitmap layer, AnimationScript ani);",
            "public Sprite(Bitmap layer, AnimationScript ani);"
          ],
          "cpp": [
            "sprite create_sprite(bitmap layer, animation_script ani)"
          ],
          "pascal": [
            "function CreateSprite(layer: Bitmap; ani: AnimationScript): Sprite"
          ]
        }
      },
      {
        "signature": "sprite create_sprite(const string &bitmap_name);",
        "name": "create_sprite",
        "method_name": null,
        "unique_global_name": "create_sprite_with_bitmap_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a sprite for the passed in bitmap image. The sprite will use the\ncell information within the bitmap if it is animated at a later stage.\n\nThis version of create_sprite will initialise the sprite to use\npixel level collisions, no animations, and have one layer named 'layer1'.\nThis version of the constructor will assign a default name to the sprite\nfor resource management purposes.",
        "brief": null,
        "return": {
          "type": "sprite",
          "description": "The new sprite with image.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bitmap_name": {
            "type": "string",
            "description": "The name of the bitmap to use as the sprite's layer",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "constructor": true,
          "suffix": "with_bitmap_named",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "python": [
            "def create_sprite_with_bitmap_named(bitmap_name):"
          ],
          "csharp": [
            "public static Sprite SplashKit.CreateSprite(string bitmapName);",
            "public Sprite(string bitmapName);"
          ],
          "cpp": [
            "sprite create_sprite(const string &bitmap_name)"
          ],
          "pascal": [
            "function CreateSprite(const bitmapName: String): Sprite"
          ]
        }
      },
      {
        "signature": "sprite create_sprite(const string &name,bitmap layer);",
        "name": "create_sprite",
        "method_name": null,
        "unique_global_name": "create_sprite_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a sprite for the passed in bitmap image. The sprite will use the\ncell information within the sprite if it is animated at a later stage.\nThis version of create_sprite will initialise the sprite to use pixel level\ncollisions, no animation, the layer have name 'layer1'.",
        "brief": null,
        "return": {
          "type": "sprite",
          "description": "The new sprite with image and name.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the sprite for resource management.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "layer": {
            "type": "bitmap",
            "description": "The bitmap for the sprite's image.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "constructor": true,
          "suffix": "named",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "python": [
            "def create_sprite_named(name, layer):"
          ],
          "csharp": [
            "public static Sprite SplashKit.CreateSprite(string name, Bitmap layer);",
            "public Sprite(string name, Bitmap layer);"
          ],
          "cpp": [
            "sprite create_sprite(const string &name, bitmap layer)"
          ],
          "pascal": [
            "function CreateSprite(const name: String; layer: Bitmap): Sprite"
          ]
        }
      },
      {
        "signature": "sprite create_sprite(const string &name,bitmap layer,animation_script ani);",
        "name": "create_sprite",
        "method_name": null,
        "unique_global_name": "create_sprite_named_with_animation",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a sprite for the passed in bitmap image. The sprite will use the cell\ninformation within the sprite if it is animated at a later stage. This\nversion of create_sprite will initialise the sprite to use pixel level\ncollisions, the specified animation template, the layer have name 'layer1'.",
        "brief": null,
        "return": {
          "type": "sprite",
          "description": "The new sprite with image, animation, and name.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the sprite for resource management.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "layer": {
            "type": "bitmap",
            "description": "The bitmap for the sprite's image.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "ani": {
            "type": "animation_script",
            "description": "The animation script for the sprite's animations.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "constructor": true,
          "suffix": "named_with_animation",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "python": [
            "def create_sprite_named_with_animation(name, layer, ani):"
          ],
          "csharp": [
            "public static Sprite SplashKit.CreateSprite(string name, Bitmap layer, AnimationScript ani);",
            "public Sprite(string name, Bitmap layer, AnimationScript ani);"
          ],
          "cpp": [
            "sprite create_sprite(const string &name, bitmap layer, animation_script ani)"
          ],
          "pascal": [
            "function CreateSprite(const name: String; layer: Bitmap; ani: AnimationScript): Sprite"
          ]
        }
      },
      {
        "signature": "sprite create_sprite(const string &bitmap_name,const string &animation_name);",
        "name": "create_sprite",
        "method_name": null,
        "unique_global_name": "create_sprite_with_bitmap_and_animation_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a sprite. The bitmap_name is used to indicate the bitmap the sprite\nwill use, and the animation_name is used to indicate which animation_script\nto use.",
        "brief": null,
        "return": {
          "type": "sprite",
          "description": "The new sprite with the image and animation.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bitmap_name": {
            "type": "string",
            "description": "The name of the bitmap to use as the sprite's image.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "animation_name": {
            "type": "string",
            "description": "The name of the animation script to use for this\nsprite.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "constructor": true,
          "suffix": "with_bitmap_and_animation_named",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "python": [
            "def create_sprite_with_bitmap_and_animation_named(bitmap_name, animation_name):"
          ],
          "csharp": [
            "public static Sprite SplashKit.CreateSprite(string bitmapName, string animationName);",
            "public Sprite(string bitmapName, string animationName);"
          ],
          "cpp": [
            "sprite create_sprite(const string &bitmap_name, const string &animation_name)"
          ],
          "pascal": [
            "function CreateSprite(const bitmapName: String; const animationName: String): Sprite"
          ]
        }
      },
      {
        "signature": "void create_sprite_pack(const string &name);",
        "name": "create_sprite_pack",
        "method_name": null,
        "unique_global_name": "create_sprite_pack",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Create a new sprite_pack with a given name. This pack can then be\nselected and used to control which sprites are drawn/updated in\nthe calls to draw_all_sprites and update_all_sprites.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the new sprite pack.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "python": [
            "def create_sprite_pack(name):"
          ],
          "csharp": [
            "public static void SplashKit.CreateSpritePack(string name);"
          ],
          "cpp": [
            "void create_sprite_pack(const string &name)"
          ],
          "pascal": [
            "procedure CreateSpritePack(const name: String)"
          ]
        }
      },
      {
        "signature": "string current_sprite_pack();",
        "name": "current_sprite_pack",
        "method_name": null,
        "unique_global_name": "current_sprite_pack",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the name of the currently selected sprite_pack.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "The name of the current sprite pack.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "python": [
            "def current_sprite_pack():"
          ],
          "csharp": [
            "public static string SplashKit.CurrentSpritePack();"
          ],
          "cpp": [
            "string current_sprite_pack()"
          ],
          "pascal": [
            "function CurrentSpritePack(): String"
          ]
        }
      },
      {
        "signature": "void draw_all_sprites();",
        "name": "draw_all_sprites",
        "method_name": null,
        "unique_global_name": "draw_all_sprites",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "draws all of the sprites in the current sprite pack. Packs can be\nswitched to select between different sets of sprites.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "python": [
            "def draw_all_sprites():"
          ],
          "csharp": [
            "public static void SplashKit.DrawAllSprites();"
          ],
          "cpp": [
            "void draw_all_sprites()"
          ],
          "pascal": [
            "procedure DrawAllSprites()"
          ]
        }
      },
      {
        "signature": "void draw_sprite(sprite s,const vector_2d &offset);",
        "name": "draw_sprite",
        "method_name": "draw",
        "unique_global_name": "draw_sprite_offset_by",
        "unique_method_name": "sprite.draw_offset_by",
        "suffix_name": null,
        "description": "Draws the sprite at its position in the game offset by a given amount. Only\nuse this method when you want to draw the sprite displaced from its location\nin your game. Otherwise you should change the sprite's location and then\nuse the standard ''draw_sprite'' routine.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to draw.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "offset": {
            "type": "vector_2d",
            "description": "The amount to offset the sprite.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "draw",
          "suffix": "offset_by",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def draw_sprite_offset_by(s, offset):"
          ],
          "csharp": [
            "public void Sprite.Draw(Vector2D offset);",
            "public static void SplashKit.DrawSprite(Sprite s, Vector2D offset);"
          ],
          "cpp": [
            "void draw_sprite(sprite s, const vector_2d &offset)"
          ],
          "pascal": [
            "procedure DrawSprite(s: Sprite; const offset: Vector2D)"
          ]
        }
      },
      {
        "signature": "void draw_sprite(sprite s);",
        "name": "draw_sprite",
        "method_name": "draw",
        "unique_global_name": "draw_sprite",
        "unique_method_name": "sprite.draw",
        "suffix_name": null,
        "description": "Draws the sprite at its location in the world. This is affected by the\nposition of the camera and the sprites current location.\n\nThis is the standard routine for drawing sprites to the screen and should be\nused in most cases.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to draw.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "draw",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def draw_sprite(s):"
          ],
          "csharp": [
            "public void Sprite.Draw();",
            "public static void SplashKit.DrawSprite(Sprite s);"
          ],
          "cpp": [
            "void draw_sprite(sprite s)"
          ],
          "pascal": [
            "procedure DrawSprite(s: Sprite)"
          ]
        }
      },
      {
        "signature": "void draw_sprite(sprite s,double x_offset,double y_offset);",
        "name": "draw_sprite",
        "method_name": "draw",
        "unique_global_name": "draw_sprite_offset_x_y",
        "unique_method_name": "sprite.draw_offset_x_y",
        "suffix_name": null,
        "description": "Draws the sprite at its position in the game offset by a given amount. Only\nuse this method when you want to draw the sprite displaced from its location\nin your game. Otherwise you should change the sprite's location and then\nuse the standard `draw_sprite` routine.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to draw.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x_offset": {
            "type": "double",
            "description": "The amount to offset on the x axis.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y_offset": {
            "type": "double",
            "description": "The amount to offset on the y axis.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "draw",
          "suffix": "offset_x_y",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def draw_sprite_offset_x_y(s, x_offset, y_offset):"
          ],
          "csharp": [
            "public void Sprite.Draw(double xOffset, double yOffset);",
            "public static void SplashKit.DrawSprite(Sprite s, double xOffset, double yOffset);"
          ],
          "cpp": [
            "void draw_sprite(sprite s, double x_offset, double y_offset)"
          ],
          "pascal": [
            "procedure DrawSprite(s: Sprite; xOffset: Double; yOffset: Double)"
          ]
        }
      },
      {
        "signature": "void free_all_sprites();",
        "name": "free_all_sprites",
        "method_name": null,
        "unique_global_name": "free_all_sprites",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Releases all of the sprites that have been loaded.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "python": [
            "def free_all_sprites():"
          ],
          "csharp": [
            "public static void SplashKit.FreeAllSprites();"
          ],
          "cpp": [
            "void free_all_sprites()"
          ],
          "pascal": [
            "procedure FreeAllSprites()"
          ]
        }
      },
      {
        "signature": "void free_sprite(sprite s);",
        "name": "free_sprite",
        "method_name": null,
        "unique_global_name": "free_sprite",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Free the resources associated with a sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to be destroyed.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "destructor": true,
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def free_sprite(s):"
          ],
          "csharp": [
            "public static void SplashKit.FreeSprite(Sprite s);"
          ],
          "cpp": [
            "void free_sprite(sprite s)"
          ],
          "pascal": [
            "procedure FreeSprite(s: Sprite)"
          ]
        }
      },
      {
        "signature": "void free_sprite_pack(const string &name);",
        "name": "free_sprite_pack",
        "method_name": null,
        "unique_global_name": "free_sprite_pack",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Frees the sprite pack and all of its sprites.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the sprite pack to destroy.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "python": [
            "def free_sprite_pack(name):"
          ],
          "csharp": [
            "public static void SplashKit.FreeSpritePack(string name);"
          ],
          "cpp": [
            "void free_sprite_pack(const string &name)"
          ],
          "pascal": [
            "procedure FreeSpritePack(const name: String)"
          ]
        }
      },
      {
        "signature": "bool has_sprite(const string &name);",
        "name": "has_sprite",
        "method_name": null,
        "unique_global_name": "has_sprite",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Determines if SplashKit has a sprite for the supplied name.\nThis checks against all sprites, those loaded without a name\nare assigned a default.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if you have created a sprite with this name.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the sprite to locate.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "python": [
            "def has_sprite(name):"
          ],
          "csharp": [
            "public static bool SplashKit.HasSprite(string name);"
          ],
          "cpp": [
            "bool has_sprite(const string &name)"
          ],
          "pascal": [
            "function HasSprite(const name: String): Boolean"
          ]
        }
      },
      {
        "signature": "bool has_sprite_pack(const string &name);",
        "name": "has_sprite_pack",
        "method_name": null,
        "unique_global_name": "has_sprite_pack",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Indicates if a given sprite_pack has already been created.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if a sprite pack exists with the indicated name.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name for the sprite pack.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "python": [
            "def has_sprite_pack(name):"
          ],
          "csharp": [
            "public static bool SplashKit.HasSpritePack(string name);"
          ],
          "cpp": [
            "bool has_sprite_pack(const string &name)"
          ],
          "pascal": [
            "function HasSpritePack(const name: String): Boolean"
          ]
        }
      },
      {
        "signature": "void move_sprite(sprite s);",
        "name": "move_sprite",
        "method_name": "move",
        "unique_global_name": "move_sprite",
        "unique_method_name": "sprite.move",
        "suffix_name": null,
        "description": "moves the sprite as indicated by its velocity. You can call this directly ot\nalternatively, this action is performed when the sprite is updated using\nthe ''update_sprite'' routine.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to move.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "move",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def move_sprite(s):"
          ],
          "csharp": [
            "public void Sprite.Move();",
            "public static void SplashKit.MoveSprite(Sprite s);"
          ],
          "cpp": [
            "void move_sprite(sprite s)"
          ],
          "pascal": [
            "procedure MoveSprite(s: Sprite)"
          ]
        }
      },
      {
        "signature": "void move_sprite(sprite s,const vector_2d &distance);",
        "name": "move_sprite",
        "method_name": "move",
        "unique_global_name": "move_sprite_by_vector",
        "unique_method_name": "sprite.move_by_vector",
        "suffix_name": null,
        "description": "Moves the sprite a given distance based on the value passed in rather than\nbased on the sprite's velocity. Typically this method is used to apply\nother movement actions to the sprite and the velocity of the sprite is\nused the intended movement of the sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to move.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "distance": {
            "type": "vector_2d",
            "description": "The vector that represents the direction and distance to\nmove the sprite.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "move",
          "suffix": "by_vector",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def move_sprite_by_vector(s, distance):"
          ],
          "csharp": [
            "public void Sprite.Move(Vector2D distance);",
            "public static void SplashKit.MoveSprite(Sprite s, Vector2D distance);"
          ],
          "cpp": [
            "void move_sprite(sprite s, const vector_2d &distance)"
          ],
          "pascal": [
            "procedure MoveSprite(s: Sprite; const distance: Vector2D)"
          ]
        }
      },
      {
        "signature": "void move_sprite(sprite s,const vector_2d &distance,float pct);",
        "name": "move_sprite",
        "method_name": "move",
        "unique_global_name": "move_sprite_by_vector_percent",
        "unique_method_name": "sprite.move_by_vector_percent",
        "suffix_name": null,
        "description": "Moves the sprite a percentage of a given distance based on the value\npassed in rather than based on the sprite's velocity. Typically this\nmethod is used to apply other movement actions to the sprite and the\nvelocity of the sprite is used the intended movement of the sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to move.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "distance": {
            "type": "vector_2d",
            "description": "The vector that represents the direction and distance to\nmove the sprite.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pct": {
            "type": "float",
            "description": "The percentage of the distance to move the sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "move",
          "suffix": "by_vector_percent",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def move_sprite_by_vector_percent(s, distance, pct):"
          ],
          "csharp": [
            "public void Sprite.Move(Vector2D distance, float pct);",
            "public static void SplashKit.MoveSprite(Sprite s, Vector2D distance, float pct);"
          ],
          "cpp": [
            "void move_sprite(sprite s, const vector_2d &distance, float pct)"
          ],
          "pascal": [
            "procedure MoveSprite(s: Sprite; const distance: Vector2D; pct: Single)"
          ]
        }
      },
      {
        "signature": "void move_sprite(sprite s,float pct);",
        "name": "move_sprite",
        "method_name": "move",
        "unique_global_name": "move_sprite_percent",
        "unique_method_name": "sprite.move_percent",
        "suffix_name": null,
        "description": "Moves the sprite as indicated by a percentage of its velocity. You can call\nthis directly ot alternatively, this action is performed when the sprite is\nupdated using the ''update_sprite'' routines that require a percentage.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to move.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pct": {
            "type": "float",
            "description": "The percentage of the sprite's velocity to move.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "move",
          "suffix": "percent",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def move_sprite_percent(s, pct):"
          ],
          "csharp": [
            "public void Sprite.Move(float pct);",
            "public static void SplashKit.MoveSprite(Sprite s, float pct);"
          ],
          "cpp": [
            "void move_sprite(sprite s, float pct)"
          ],
          "pascal": [
            "procedure MoveSprite(s: Sprite; pct: Single)"
          ]
        }
      },
      {
        "signature": "void move_sprite_to(sprite s,double x,double y);",
        "name": "move_sprite_to",
        "method_name": "move_to",
        "unique_global_name": "move_sprite_to",
        "unique_method_name": "sprite.move_to",
        "suffix_name": null,
        "description": "This method moves a sprite to a given position in the game.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to move.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The sprite's new x location.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The sprite's new y location.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "move_to",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def move_sprite_to(s, x, y):"
          ],
          "csharp": [
            "public void Sprite.MoveTo(double x, double y);",
            "public static void SplashKit.MoveSpriteTo(Sprite s, double x, double y);"
          ],
          "cpp": [
            "void move_sprite_to(sprite s, double x, double y)"
          ],
          "pascal": [
            "procedure MoveSpriteTo(s: Sprite; x: Double; y: Double)"
          ]
        }
      },
      {
        "signature": "void select_sprite_pack(const string &name);",
        "name": "select_sprite_pack",
        "method_name": null,
        "unique_global_name": "select_sprite_pack",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Selects the named sprite_pack (if it has been created). The\nselected sprite_pack determines which sprites are drawn and updated\nwith the draw_all_sprites and update_all_sprites code.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the sprite pack to select.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "python": [
            "def select_sprite_pack(name):"
          ],
          "csharp": [
            "public static void SplashKit.SelectSpritePack(string name);"
          ],
          "cpp": [
            "void select_sprite_pack(const string &name)"
          ],
          "pascal": [
            "procedure SelectSpritePack(const name: String)"
          ]
        }
      },
      {
        "signature": "int sprite_add_layer(sprite s,bitmap new_layer,const string &layer_name);",
        "name": "sprite_add_layer",
        "method_name": "add_layer",
        "unique_global_name": "sprite_add_layer",
        "unique_method_name": "sprite.add_layer",
        "suffix_name": null,
        "description": "Adds a new layer to the sprite.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The index of the new layer.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to add the layer to.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "new_layer": {
            "type": "bitmap",
            "description": "The new layer's bitmap.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "layer_name": {
            "type": "string",
            "description": "The name of the new layer.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "add_layer",
          "self": "s",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "python": [
            "def sprite_add_layer(s, new_layer, layer_name):"
          ],
          "csharp": [
            "public int Sprite.AddLayer(Bitmap newLayer, string layerName);",
            "public static int SplashKit.SpriteAddLayer(Sprite s, Bitmap newLayer, string layerName);"
          ],
          "cpp": [
            "int sprite_add_layer(sprite s, bitmap new_layer, const string &layer_name)"
          ],
          "pascal": [
            "function SpriteAddLayer(s: Sprite; newLayer: Bitmap; const layerName: String): Integer"
          ]
        }
      },
      {
        "signature": "void sprite_add_to_velocity(sprite s,const vector_2d &value);",
        "name": "sprite_add_to_velocity",
        "method_name": "add_to_velocity",
        "unique_global_name": "sprite_add_to_velocity",
        "unique_method_name": "sprite.add_to_velocity",
        "suffix_name": null,
        "description": "Alters the current velocity of the sprite, adding the passed in vector_2d to the current velocity.\nWhen the sprite is updated (see `update_sprite`)\nthis vector_2d is used to move the sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "vector_2d",
            "description": "The amount to add to the sprite's velocity.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "add_to_velocity",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_add_to_velocity(s, value):"
          ],
          "csharp": [
            "public void Sprite.AddToVelocity(Vector2D value);",
            "public static void SplashKit.SpriteAddToVelocity(Sprite s, Vector2D value);"
          ],
          "cpp": [
            "void sprite_add_to_velocity(sprite s, const vector_2d &value)"
          ],
          "pascal": [
            "procedure SpriteAddToVelocity(s: Sprite; const value: Vector2D)"
          ]
        }
      },
      {
        "signature": "void sprite_add_value(sprite s,const string &name);",
        "name": "sprite_add_value",
        "method_name": "add_value",
        "unique_global_name": "sprite_add_value",
        "unique_method_name": "sprite.add_value",
        "suffix_name": null,
        "description": "Adds a new kind of value to the sprite",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the new value to store in the sprite.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "add_value",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_add_value(s, name):"
          ],
          "csharp": [
            "public void Sprite.AddValue(string name);",
            "public static void SplashKit.SpriteAddValue(Sprite s, string name);"
          ],
          "cpp": [
            "void sprite_add_value(sprite s, const string &name)"
          ],
          "pascal": [
            "procedure SpriteAddValue(s: Sprite; const name: String)"
          ]
        }
      },
      {
        "signature": "void sprite_add_value(sprite s,const string &name,float init_val);",
        "name": "sprite_add_value",
        "method_name": "add_value",
        "unique_global_name": "sprite_add_value_with_default",
        "unique_method_name": "sprite.add_value_with_default",
        "suffix_name": null,
        "description": "Adds a new kind of value to the sprite, setting the initial value\nto the value passed in.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the new value to store in the sprite.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "init_val": {
            "type": "float",
            "description": "The initial value.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "add_value",
          "suffix": "with_default",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_add_value_with_default(s, name, init_val):"
          ],
          "csharp": [
            "public void Sprite.AddValue(string name, float initVal);",
            "public static void SplashKit.SpriteAddValue(Sprite s, string name, float initVal);"
          ],
          "cpp": [
            "void sprite_add_value(sprite s, const string &name, float init_val)"
          ],
          "pascal": [
            "procedure SpriteAddValue(s: Sprite; const name: String; initVal: Single)"
          ]
        }
      },
      {
        "signature": "point_2d sprite_anchor_point(sprite s);",
        "name": "sprite_anchor_point",
        "method_name": null,
        "unique_global_name": "sprite_anchor_point",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the anchor point of the sprite. This is the point around which the\nsprite rotates. This is in sprite coordinates, so as if the sprite is drawn\nat 0,0.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "The anchor point of the sprite.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "anchor_point",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_anchor_point(s):"
          ],
          "csharp": [
            "public Point2D Sprite.AnchorPoint { get }",
            "public static Point2D SplashKit.SpriteAnchorPoint(Sprite s);"
          ],
          "cpp": [
            "point_2d sprite_anchor_point(sprite s)"
          ],
          "pascal": [
            "function SpriteAnchorPoint(s: Sprite): Point2D"
          ]
        }
      },
      {
        "signature": "point_2d sprite_anchor_position(sprite s);",
        "name": "sprite_anchor_position",
        "method_name": null,
        "unique_global_name": "sprite_anchor_position",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The sprite anchor position, is the location of the anchor point in world\ncoordinates, based upon the position of the sprite.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "The location of the sprite's anchor point positioned at the sprite's location",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to find where the anchor is in world coordinates",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "python": [
            "def sprite_anchor_position(s):"
          ],
          "csharp": [
            "public static Point2D SplashKit.SpriteAnchorPosition(Sprite s);"
          ],
          "cpp": [
            "point_2d sprite_anchor_position(sprite s)"
          ],
          "pascal": [
            "function SpriteAnchorPosition(s: Sprite): Point2D"
          ]
        }
      },
      {
        "signature": "bool sprite_animation_has_ended(sprite s);",
        "name": "sprite_animation_has_ended",
        "method_name": null,
        "unique_global_name": "sprite_animation_has_ended",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Indicates if the sprites animation has ended.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the sprite animation has ended.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "animation_has_ended",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_animation_has_ended(s):"
          ],
          "csharp": [
            "public bool Sprite.AnimationHasEnded { get }",
            "public static bool SplashKit.SpriteAnimationHasEnded(Sprite s);"
          ],
          "cpp": [
            "bool sprite_animation_has_ended(sprite s)"
          ],
          "pascal": [
            "function SpriteAnimationHasEnded(s: Sprite): Boolean"
          ]
        }
      },
      {
        "signature": "string sprite_animation_name(sprite s);",
        "name": "sprite_animation_name",
        "method_name": "animation_name",
        "unique_global_name": "sprite_animation_name",
        "unique_method_name": "sprite.animation_name",
        "suffix_name": null,
        "description": "Returns the name of the sprite's current animation.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "The name of the current animation.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "animation_name",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_animation_name(s):"
          ],
          "csharp": [
            "public string Sprite.AnimationName();",
            "public static string SplashKit.SpriteAnimationName(Sprite s);"
          ],
          "cpp": [
            "string sprite_animation_name(sprite s)"
          ],
          "pascal": [
            "function SpriteAnimationName(s: Sprite): String"
          ]
        }
      },
      {
        "signature": "bool sprite_at(sprite s,const point_2d &pt);",
        "name": "sprite_at",
        "method_name": null,
        "unique_global_name": "sprite_at",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Determines if a sprite is at a given point.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the sprite is at the given point",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The point to check (in world coordinates)",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "python": [
            "def sprite_at(s, pt):"
          ],
          "csharp": [
            "public static bool SplashKit.SpriteAt(Sprite s, Point2D pt);"
          ],
          "cpp": [
            "bool sprite_at(sprite s, const point_2d &pt)"
          ],
          "pascal": [
            "function SpriteAt(s: Sprite; const pt: Point2D): Boolean"
          ]
        }
      },
      {
        "signature": "void sprite_bring_layer_forward(sprite s,int visible_layer);",
        "name": "sprite_bring_layer_forward",
        "method_name": "send_layer_forward",
        "unique_global_name": "sprite_bring_layer_forward",
        "unique_method_name": "sprite.send_layer_forward",
        "suffix_name": null,
        "description": "Sends the layer specified forward in the visible layer order.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "visible_layer": {
            "type": "int",
            "description": "The visible layer to bring forward",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "send_layer_forward",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_bring_layer_forward(s, visible_layer):"
          ],
          "csharp": [
            "public void Sprite.SendLayerForward(int visibleLayer);",
            "public static void SplashKit.SpriteBringLayerForward(Sprite s, int visibleLayer);"
          ],
          "cpp": [
            "void sprite_bring_layer_forward(sprite s, int visible_layer)"
          ],
          "pascal": [
            "procedure SpriteBringLayerForward(s: Sprite; visibleLayer: Integer)"
          ]
        }
      },
      {
        "signature": "void sprite_bring_layer_to_front(sprite s,int visible_layer);",
        "name": "sprite_bring_layer_to_front",
        "method_name": "Send_layer_toFront",
        "unique_global_name": "sprite_bring_layer_to_front",
        "unique_method_name": "sprite.Send_layer_toFront",
        "suffix_name": null,
        "description": "Sends the layer specified to the front in the visible layer order.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "visible_layer": {
            "type": "int",
            "description": "The visible layer to bring to the front",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "Send_layer_toFront",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_bring_layer_to_front(s, visible_layer):"
          ],
          "csharp": [
            "public void Sprite.SendLayerTofront(int visibleLayer);",
            "public static void SplashKit.SpriteBringLayerToFront(Sprite s, int visibleLayer);"
          ],
          "cpp": [
            "void sprite_bring_layer_to_front(sprite s, int visible_layer)"
          ],
          "pascal": [
            "procedure SpriteBringLayerToFront(s: Sprite; visibleLayer: Integer)"
          ]
        }
      },
      {
        "signature": "void sprite_call_on_event(sprite s,sprite_event_handler *handler);",
        "name": "sprite_call_on_event",
        "method_name": "call_on_event",
        "unique_global_name": "sprite_call_on_event",
        "unique_method_name": "sprite.call_on_event",
        "suffix_name": null,
        "description": "Register a procedure to call when events occur on the sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to add the handler to.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "handler": {
            "type": "sprite_event_handler",
            "description": "The function to call when this sprite raises an event.",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "call_on_event",
          "self": "s",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "python": [
            "def sprite_call_on_event(s, handler):"
          ],
          "csharp": [
            "public void Sprite.CallOnEvent(SpriteEventHandler handler);",
            "public static void SplashKit.SpriteCallOnEvent(Sprite s, SpriteEventHandler handler);"
          ],
          "cpp": [
            "void sprite_call_on_event(sprite s, sprite_event_handler *handler)"
          ],
          "pascal": [
            "procedure SpriteCallOnEvent(s: Sprite; handler: SpriteEventHandler)"
          ]
        }
      },
      {
        "signature": "point_2d sprite_center_point(sprite s);",
        "name": "sprite_center_point",
        "method_name": null,
        "unique_global_name": "sprite_center_point",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the center point of the passed in sprite. This is based on the sprite's\nPosition, Width and Height.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "The center point of the sprite",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "sprite_center_point",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_center_point(s):"
          ],
          "csharp": [
            "public Point2D Sprite.SpriteCenterPoint { get }",
            "public static Point2D SplashKit.SpriteCenterPoint(Sprite s);"
          ],
          "cpp": [
            "point_2d sprite_center_point(sprite s)"
          ],
          "pascal": [
            "function SpriteCenterPoint(s: Sprite): Point2D"
          ]
        }
      },
      {
        "signature": "circle sprite_circle(sprite s);",
        "name": "sprite_circle",
        "method_name": "circle",
        "unique_global_name": "sprite_circle",
        "unique_method_name": "sprite.circle",
        "suffix_name": null,
        "description": "Gets a circle in the bounds of the base layer of the indicated sprite.",
        "brief": null,
        "return": {
          "type": "circle",
          "description": "A bounding circle that surrounds the sprite",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "circle",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_circle(s):"
          ],
          "csharp": [
            "public Circle Sprite.Circle();",
            "public static Circle SplashKit.SpriteCircle(Sprite s);"
          ],
          "cpp": [
            "circle sprite_circle(sprite s)"
          ],
          "pascal": [
            "function SpriteCircle(s: Sprite): Circle"
          ]
        }
      },
      {
        "signature": "bitmap sprite_collision_bitmap(sprite s);",
        "name": "sprite_collision_bitmap",
        "method_name": null,
        "unique_global_name": "sprite_collision_bitmap",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the bitmap used by the sprite to determine if it has collided with\nother objects in the game.",
        "brief": null,
        "return": {
          "type": "bitmap",
          "description": "The bitmap used for collisions with this sprite.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "collision_bitmap",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_collision_bitmap(s):"
          ],
          "csharp": [
            "public Bitmap Sprite.CollisionBitmap { get }",
            "public static Bitmap SplashKit.SpriteCollisionBitmap(Sprite s);"
          ],
          "cpp": [
            "bitmap sprite_collision_bitmap(sprite s)"
          ],
          "pascal": [
            "function SpriteCollisionBitmap(s: Sprite): Bitmap"
          ]
        }
      },
      {
        "signature": "circle sprite_collision_circle(sprite s);",
        "name": "sprite_collision_circle",
        "method_name": "collision_circle",
        "unique_global_name": "sprite_collision_circle",
        "unique_method_name": "sprite.collision_circle",
        "suffix_name": null,
        "description": "Gets a circle in the bounds of the indicated sprite's collision rectangle.",
        "brief": null,
        "return": {
          "type": "circle",
          "description": "A bounding circle that surrounds the sprite",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "collision_circle",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_collision_circle(s):"
          ],
          "csharp": [
            "public Circle Sprite.CollisionCircle();",
            "public static Circle SplashKit.SpriteCollisionCircle(Sprite s);"
          ],
          "cpp": [
            "circle sprite_collision_circle(sprite s)"
          ],
          "pascal": [
            "function SpriteCollisionCircle(s: Sprite): Circle"
          ]
        }
      },
      {
        "signature": "collision_test_kind sprite_collision_kind(sprite s);",
        "name": "sprite_collision_kind",
        "method_name": null,
        "unique_global_name": "sprite_collision_kind",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the kind of collision used with this sprite. This is used when\ndetermining if the sprite has collided with other objects in the game.",
        "brief": null,
        "return": {
          "type": "collision_test_kind",
          "description": "The kind of collisions performed with this sprite.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "collision_kind",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_collision_kind(s):"
          ],
          "csharp": [
            "public CollisionTestKind Sprite.CollisionKind { get }",
            "public static CollisionTestKind SplashKit.SpriteCollisionKind(Sprite s);"
          ],
          "cpp": [
            "collision_test_kind sprite_collision_kind(sprite s)"
          ],
          "pascal": [
            "function SpriteCollisionKind(s: Sprite): CollisionTestKind"
          ]
        }
      },
      {
        "signature": "rectangle sprite_collision_rectangle(sprite s);",
        "name": "sprite_collision_rectangle",
        "method_name": null,
        "unique_global_name": "sprite_collision_rectangle",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the collision rectangle for the specified sprite.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "A collision rectangle that surrounds the sprite.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "collision_rectangle",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_collision_rectangle(s):"
          ],
          "csharp": [
            "public Rectangle Sprite.CollisionRectangle { get }",
            "public static Rectangle SplashKit.SpriteCollisionRectangle(Sprite s);"
          ],
          "cpp": [
            "rectangle sprite_collision_rectangle(sprite s)"
          ],
          "pascal": [
            "function SpriteCollisionRectangle(s: Sprite): Rectangle"
          ]
        }
      },
      {
        "signature": "int sprite_current_cell(sprite s);",
        "name": "sprite_current_cell",
        "method_name": null,
        "unique_global_name": "sprite_current_cell",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the current animation cell for an animated sprite. The cell is\nupdated when the sprite's animation data is updated.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The current cell animation of the sprite.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "current_cell",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_current_cell(s):"
          ],
          "csharp": [
            "public int Sprite.CurrentCell { get }",
            "public static int SplashKit.SpriteCurrentCell(Sprite s);"
          ],
          "cpp": [
            "int sprite_current_cell(sprite s)"
          ],
          "pascal": [
            "function SpriteCurrentCell(s: Sprite): Integer"
          ]
        }
      },
      {
        "signature": "rectangle sprite_current_cell_rectangle(sprite s);",
        "name": "sprite_current_cell_rectangle",
        "method_name": null,
        "unique_global_name": "sprite_current_cell_rectangle",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a rectangle of the current cell within the sprite's image. This is used\nto determine what part of the bitmap should be used when the sprite is drawn.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "The current cell rectangle of the sprite.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "current_cell_rectangle",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_current_cell_rectangle(s):"
          ],
          "csharp": [
            "public Rectangle Sprite.CurrentCellRectangle { get }",
            "public static Rectangle SplashKit.SpriteCurrentCellRectangle(Sprite s);"
          ],
          "cpp": [
            "rectangle sprite_current_cell_rectangle(sprite s)"
          ],
          "pascal": [
            "function SpriteCurrentCellRectangle(s: Sprite): Rectangle"
          ]
        }
      },
      {
        "signature": "double sprite_dx(sprite s);",
        "name": "sprite_dx",
        "method_name": null,
        "unique_global_name": "sprite_dx",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the X value of the sprite's velocity.",
        "brief": null,
        "return": {
          "type": "double",
          "description": "The x component of the sprite's velocity.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "dx",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_dx(s):"
          ],
          "csharp": [
            "public double Sprite.Dx { get }",
            "public static double SplashKit.SpriteDx(Sprite s);"
          ],
          "cpp": [
            "double sprite_dx(sprite s)"
          ],
          "pascal": [
            "function SpriteDx(s: Sprite): Double"
          ]
        }
      },
      {
        "signature": "double sprite_dy(sprite s);",
        "name": "sprite_dy",
        "method_name": null,
        "unique_global_name": "sprite_dy",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the Y value of the sprite's velocity.",
        "brief": null,
        "return": {
          "type": "double",
          "description": "The y component of the sprite's velocity.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "dy",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_dy(s):"
          ],
          "csharp": [
            "public double Sprite.Dy { get }",
            "public static double SplashKit.SpriteDy(Sprite s);"
          ],
          "cpp": [
            "double sprite_dy(sprite s)"
          ],
          "pascal": [
            "function SpriteDy(s: Sprite): Double"
          ]
        }
      },
      {
        "signature": "bool sprite_has_value(sprite s,string name);",
        "name": "sprite_has_value",
        "method_name": null,
        "unique_global_name": "sprite_has_value",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Indicates if the sprite has a value with the given name.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the sprite has a value with that name.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the value to check.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "python": [
            "def sprite_has_value(s, name):"
          ],
          "csharp": [
            "public static bool SplashKit.SpriteHasValue(Sprite s, string name);"
          ],
          "cpp": [
            "bool sprite_has_value(sprite s, string name)"
          ],
          "pascal": [
            "function SpriteHasValue(s: Sprite; name: String): Boolean"
          ]
        }
      },
      {
        "signature": "float sprite_heading(sprite s);",
        "name": "sprite_heading",
        "method_name": null,
        "unique_global_name": "sprite_heading",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the direction the sprite is heading in degrees.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The angle of the sprite velocity.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "heading",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_heading(s):"
          ],
          "csharp": [
            "public float Sprite.Heading { get }",
            "public static float SplashKit.SpriteHeading(Sprite s);"
          ],
          "cpp": [
            "float sprite_heading(sprite s)"
          ],
          "pascal": [
            "function SpriteHeading(s: Sprite): Single"
          ]
        }
      },
      {
        "signature": "int sprite_height(sprite s);",
        "name": "sprite_height",
        "method_name": null,
        "unique_global_name": "sprite_height",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The current height of the sprite (aligned to the Y axis).",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The height of the sprite in pixels.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "Height",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_height(s):"
          ],
          "csharp": [
            "public int Sprite.Height { get }",
            "public static int SplashKit.SpriteHeight(Sprite s);"
          ],
          "cpp": [
            "int sprite_height(sprite s)"
          ],
          "pascal": [
            "function SpriteHeight(s: Sprite): Integer"
          ]
        }
      },
      {
        "signature": "void sprite_hide_layer(sprite s,const string &name);",
        "name": "sprite_hide_layer",
        "method_name": "hide_layer",
        "unique_global_name": "sprite_hide_layer_named",
        "unique_method_name": "sprite.hide_layer_named",
        "suffix_name": null,
        "description": "Hide the specified layer of the sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to hide the layer of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the layer to hide.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "hide_layer",
          "suffix": "named",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_hide_layer_named(s, name):"
          ],
          "csharp": [
            "public void Sprite.HideLayer(string name);",
            "public static void SplashKit.SpriteHideLayer(Sprite s, string name);"
          ],
          "cpp": [
            "void sprite_hide_layer(sprite s, const string &name)"
          ],
          "pascal": [
            "procedure SpriteHideLayer(s: Sprite; const name: String)"
          ]
        }
      },
      {
        "signature": "void sprite_hide_layer(sprite s,int id);",
        "name": "sprite_hide_layer",
        "method_name": "Hide_layer",
        "unique_global_name": "sprite_hide_layer",
        "unique_method_name": "sprite.Hide_layer",
        "suffix_name": null,
        "description": "Hide the specified layer of the sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to hide the layer of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "id": {
            "type": "int",
            "description": "The index of the layer to hide.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "Hide_layer",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_hide_layer(s, id):"
          ],
          "csharp": [
            "public void Sprite.HideLayer(int id);",
            "public static void SplashKit.SpriteHideLayer(Sprite s, int id);"
          ],
          "cpp": [
            "void sprite_hide_layer(sprite s, int id)"
          ],
          "pascal": [
            "procedure SpriteHideLayer(s: Sprite; id: Integer)"
          ]
        }
      },
      {
        "signature": "bitmap sprite_layer(sprite s,const string &name);",
        "name": "sprite_layer",
        "method_name": "layer",
        "unique_global_name": "sprite_layer_named",
        "unique_method_name": "sprite.layer_named",
        "suffix_name": null,
        "description": "Returns the bitmap of the indicated layer of the sprite.",
        "brief": null,
        "return": {
          "type": "bitmap",
          "description": "The bitmap at the layer with the indicated name",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the layer from",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the layer to fetch",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "layer",
          "suffix": "named",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_layer_named(s, name):"
          ],
          "csharp": [
            "public Bitmap Sprite.Layer(string name);",
            "public static Bitmap SplashKit.SpriteLayer(Sprite s, string name);"
          ],
          "cpp": [
            "bitmap sprite_layer(sprite s, const string &name)"
          ],
          "pascal": [
            "function SpriteLayer(s: Sprite; const name: String): Bitmap"
          ]
        }
      },
      {
        "signature": "bitmap sprite_layer(sprite s,int idx);",
        "name": "sprite_layer",
        "method_name": "layer",
        "unique_global_name": "sprite_layer_at_index",
        "unique_method_name": "sprite.layer_at_index",
        "suffix_name": null,
        "description": "Returns the bitmap of the indicated layer of the sprite.",
        "brief": null,
        "return": {
          "type": "bitmap",
          "description": "The bitmap of the sprite at that layer",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the layer from",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "idx": {
            "type": "int",
            "description": "The index of the layer",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "layer",
          "suffix": "at_index",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_layer_at_index(s, idx):"
          ],
          "csharp": [
            "public Bitmap Sprite.Layer(int idx);",
            "public static Bitmap SplashKit.SpriteLayer(Sprite s, int idx);"
          ],
          "cpp": [
            "bitmap sprite_layer(sprite s, int idx)"
          ],
          "pascal": [
            "function SpriteLayer(s: Sprite; idx: Integer): Bitmap"
          ]
        }
      },
      {
        "signature": "circle sprite_layer_circle(sprite s,const string &name);",
        "name": "sprite_layer_circle",
        "method_name": "layer_circle",
        "unique_global_name": "sprite_layer_circle_named",
        "unique_method_name": "sprite.layer_circle_named",
        "suffix_name": null,
        "description": "Gets a circle in the bounds of the indicated layer.",
        "brief": null,
        "return": {
          "type": "circle",
          "description": "A bounding circle that surrounds the sprite's layer",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the layer.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "layer_circle",
          "suffix": "named",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_layer_circle_named(s, name):"
          ],
          "csharp": [
            "public Circle Sprite.LayerCircle(string name);",
            "public static Circle SplashKit.SpriteLayerCircle(Sprite s, string name);"
          ],
          "cpp": [
            "circle sprite_layer_circle(sprite s, const string &name)"
          ],
          "pascal": [
            "function SpriteLayerCircle(s: Sprite; const name: String): Circle"
          ]
        }
      },
      {
        "signature": "circle sprite_layer_circle(sprite s,int idx);",
        "name": "sprite_layer_circle",
        "method_name": "layer_circle",
        "unique_global_name": "sprite_layer_circle_at_index",
        "unique_method_name": "sprite.layer_circle_at_index",
        "suffix_name": null,
        "description": "Gets a circle in the bounds of the indicated layer.",
        "brief": null,
        "return": {
          "type": "circle",
          "description": "A bounding circle that surrounds the sprite's layer",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "idx": {
            "type": "int",
            "description": "The index of the layer.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "layer_circle",
          "suffix": "at_index",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_layer_circle_at_index(s, idx):"
          ],
          "csharp": [
            "public Circle Sprite.LayerCircle(int idx);",
            "public static Circle SplashKit.SpriteLayerCircle(Sprite s, int idx);"
          ],
          "cpp": [
            "circle sprite_layer_circle(sprite s, int idx)"
          ],
          "pascal": [
            "function SpriteLayerCircle(s: Sprite; idx: Integer): Circle"
          ]
        }
      },
      {
        "signature": "int sprite_layer_count(sprite s);",
        "name": "sprite_layer_count",
        "method_name": null,
        "unique_global_name": "sprite_layer_count",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the number of layers within the sprite.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The number of image layers in the sprite.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the layer count from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "layer_count",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_layer_count(s):"
          ],
          "csharp": [
            "public int Sprite.LayerCount { get }",
            "public static int SplashKit.SpriteLayerCount(Sprite s);"
          ],
          "cpp": [
            "int sprite_layer_count(sprite s)"
          ],
          "pascal": [
            "function SpriteLayerCount(s: Sprite): Integer"
          ]
        }
      },
      {
        "signature": "int sprite_layer_height(sprite s,const string &name);",
        "name": "sprite_layer_height",
        "method_name": "layer_height",
        "unique_global_name": "sprite_layer_height_named",
        "unique_method_name": "sprite.layer_height_named",
        "suffix_name": null,
        "description": "The height of a given layer of the sprite (aligned to the Y axis).",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The height of the sprite's layer in pixels.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the layer to get the details of.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "layer_height",
          "suffix": "named",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_layer_height_named(s, name):"
          ],
          "csharp": [
            "public int Sprite.LayerHeight(string name);",
            "public static int SplashKit.SpriteLayerHeight(Sprite s, string name);"
          ],
          "cpp": [
            "int sprite_layer_height(sprite s, const string &name)"
          ],
          "pascal": [
            "function SpriteLayerHeight(s: Sprite; const name: String): Integer"
          ]
        }
      },
      {
        "signature": "int sprite_layer_height(sprite s,int idx);",
        "name": "sprite_layer_height",
        "method_name": "layer_height",
        "unique_global_name": "sprite_layer_height",
        "unique_method_name": "sprite.layer_height",
        "suffix_name": null,
        "description": "The height of a given layer of the sprite (aligned to the Y axis).",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The height of the sprite's layer in pixels.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "idx": {
            "type": "int",
            "description": "The index of the layer to get the details of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "layer_height",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_layer_height(s, idx):"
          ],
          "csharp": [
            "public int Sprite.LayerHeight(int idx);",
            "public static int SplashKit.SpriteLayerHeight(Sprite s, int idx);"
          ],
          "cpp": [
            "int sprite_layer_height(sprite s, int idx)"
          ],
          "pascal": [
            "function SpriteLayerHeight(s: Sprite; idx: Integer): Integer"
          ]
        }
      },
      {
        "signature": "int sprite_layer_index(sprite s,const string &name);",
        "name": "sprite_layer_index",
        "method_name": "Index_of_layer",
        "unique_global_name": "sprite_layer_index",
        "unique_method_name": "sprite.Index_of_layer",
        "suffix_name": null,
        "description": "Returns the index of the specified layer.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The index of the layer in the sprite",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the layer from",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the layer to get the index of",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "Index_of_layer",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_layer_index(s, name):"
          ],
          "csharp": [
            "public int Sprite.IndexOfLayer(string name);",
            "public static int SplashKit.SpriteLayerIndex(Sprite s, string name);"
          ],
          "cpp": [
            "int sprite_layer_index(sprite s, const string &name)"
          ],
          "pascal": [
            "function SpriteLayerIndex(s: Sprite; const name: String): Integer"
          ]
        }
      },
      {
        "signature": "string sprite_layer_name(sprite s,int idx);",
        "name": "sprite_layer_name",
        "method_name": "layer_name",
        "unique_global_name": "sprite_layer_name",
        "unique_method_name": "sprite.layer_name",
        "suffix_name": null,
        "description": "Returns the name of the specified layer.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "The name of the sprite's layer at that index",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the layer name from",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "idx": {
            "type": "int",
            "description": "The index of the layer you want the name of",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "layer_name",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_layer_name(s, idx):"
          ],
          "csharp": [
            "public string Sprite.LayerName(int idx);",
            "public static string SplashKit.SpriteLayerName(Sprite s, int idx);"
          ],
          "cpp": [
            "string sprite_layer_name(sprite s, int idx)"
          ],
          "pascal": [
            "function SpriteLayerName(s: Sprite; idx: Integer): String"
          ]
        }
      },
      {
        "signature": "vector_2d sprite_layer_offset(sprite s,const string &name);",
        "name": "sprite_layer_offset",
        "method_name": "layer_offset",
        "unique_global_name": "sprite_layer_offset_named",
        "unique_method_name": "sprite.layer_offset_named",
        "suffix_name": null,
        "description": "Gets the offset of the specified layer.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "The offset of the named layer in the sprite.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the layer to get the offset of.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "layer_offset",
          "suffix": "named",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_layer_offset_named(s, name):"
          ],
          "csharp": [
            "public Vector2D Sprite.LayerOffset(string name);",
            "public static Vector2D SplashKit.SpriteLayerOffset(Sprite s, string name);"
          ],
          "cpp": [
            "vector_2d sprite_layer_offset(sprite s, const string &name)"
          ],
          "pascal": [
            "function SpriteLayerOffset(s: Sprite; const name: String): Vector2D"
          ]
        }
      },
      {
        "signature": "vector_2d sprite_layer_offset(sprite s,int idx);",
        "name": "sprite_layer_offset",
        "method_name": "layer_offset",
        "unique_global_name": "sprite_layer_offset",
        "unique_method_name": "sprite.layer_offset",
        "suffix_name": null,
        "description": "Gets the offset of the specified layer.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "The offset of the layer in the sprite.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "idx": {
            "type": "int",
            "description": "The index of the layer to get the offset of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "layer_offset",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_layer_offset(s, idx):"
          ],
          "csharp": [
            "public Vector2D Sprite.LayerOffset(int idx);",
            "public static Vector2D SplashKit.SpriteLayerOffset(Sprite s, int idx);"
          ],
          "cpp": [
            "vector_2d sprite_layer_offset(sprite s, int idx)"
          ],
          "pascal": [
            "function SpriteLayerOffset(s: Sprite; idx: Integer): Vector2D"
          ]
        }
      },
      {
        "signature": "rectangle sprite_layer_rectangle(sprite s,const string &name);",
        "name": "sprite_layer_rectangle",
        "method_name": "layer_rectangle",
        "unique_global_name": "sprite_layer_rectangle_named",
        "unique_method_name": "sprite.layer_rectangle_named",
        "suffix_name": null,
        "description": "Gets a rectangle that surrounds the indicated layer.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "A bounding rectangle that surrounds the sprite's layer",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the layer.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "layer_rectangle",
          "suffix": "named",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_layer_rectangle_named(s, name):"
          ],
          "csharp": [
            "public Rectangle Sprite.LayerRectangle(string name);",
            "public static Rectangle SplashKit.SpriteLayerRectangle(Sprite s, string name);"
          ],
          "cpp": [
            "rectangle sprite_layer_rectangle(sprite s, const string &name)"
          ],
          "pascal": [
            "function SpriteLayerRectangle(s: Sprite; const name: String): Rectangle"
          ]
        }
      },
      {
        "signature": "rectangle sprite_layer_rectangle(sprite s,int idx);",
        "name": "sprite_layer_rectangle",
        "method_name": "layer_rectangle",
        "unique_global_name": "sprite_layer_rectangle_at_index",
        "unique_method_name": "sprite.layer_rectangle_at_index",
        "suffix_name": null,
        "description": "Gets a rectangle that surrounds the indicated layer.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "A bounding rectangle that surrounds the sprite's layer",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "idx": {
            "type": "int",
            "description": "The index of the layer.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "layer_rectangle",
          "suffix": "at_index",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_layer_rectangle_at_index(s, idx):"
          ],
          "csharp": [
            "public Rectangle Sprite.LayerRectangle(int idx);",
            "public static Rectangle SplashKit.SpriteLayerRectangle(Sprite s, int idx);"
          ],
          "cpp": [
            "rectangle sprite_layer_rectangle(sprite s, int idx)"
          ],
          "pascal": [
            "function SpriteLayerRectangle(s: Sprite; idx: Integer): Rectangle"
          ]
        }
      },
      {
        "signature": "int sprite_layer_width(sprite s,const string &name);",
        "name": "sprite_layer_width",
        "method_name": "layer_width",
        "unique_global_name": "sprite_layer_width_named",
        "unique_method_name": "sprite.layer_width_named",
        "suffix_name": null,
        "description": "The width of a given layer of the sprite (aligned to the X axis).",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The width of the sprite's layer in pixels.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the layer to get the details of.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "layer_width",
          "suffix": "named",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_layer_width_named(s, name):"
          ],
          "csharp": [
            "public int Sprite.LayerWidth(string name);",
            "public static int SplashKit.SpriteLayerWidth(Sprite s, string name);"
          ],
          "cpp": [
            "int sprite_layer_width(sprite s, const string &name)"
          ],
          "pascal": [
            "function SpriteLayerWidth(s: Sprite; const name: String): Integer"
          ]
        }
      },
      {
        "signature": "int sprite_layer_width(sprite s,int idx);",
        "name": "sprite_layer_width",
        "method_name": "layer_width",
        "unique_global_name": "sprite_layer_width",
        "unique_method_name": "sprite.layer_width",
        "suffix_name": null,
        "description": "The width of a given layer of the sprite (aligned to the X axis).",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The width of the sprite's layer in pixels.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "idx": {
            "type": "int",
            "description": "The index of the layer to get the details of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "layer_width",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_layer_width(s, idx):"
          ],
          "csharp": [
            "public int Sprite.LayerWidth(int idx);",
            "public static int SplashKit.SpriteLayerWidth(Sprite s, int idx);"
          ],
          "cpp": [
            "int sprite_layer_width(sprite s, int idx)"
          ],
          "pascal": [
            "function SpriteLayerWidth(s: Sprite; idx: Integer): Integer"
          ]
        }
      },
      {
        "signature": "matrix_2d sprite_location_matrix(sprite s);",
        "name": "sprite_location_matrix",
        "method_name": null,
        "unique_global_name": "sprite_location_matrix",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a matrix that can be used to transform points into the coordinate\nspace of the passed in sprite.",
        "brief": null,
        "return": {
          "type": "matrix_2d",
          "description": "A matrix that transforms points into the sprites coordinate\nspace.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "location_matrix",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_location_matrix(s):"
          ],
          "csharp": [
            "public Matrix2D Sprite.LocationMatrix { get }",
            "public static Matrix2D SplashKit.SpriteLocationMatrix(Sprite s);"
          ],
          "cpp": [
            "matrix_2d sprite_location_matrix(sprite s)"
          ],
          "pascal": [
            "function SpriteLocationMatrix(s: Sprite): Matrix2D"
          ]
        }
      },
      {
        "signature": "float sprite_mass(sprite s);",
        "name": "sprite_mass",
        "method_name": null,
        "unique_global_name": "sprite_mass",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "This indicates the mass of the sprite for any of the collide methods from\nPhysics. The mass of two colliding sprites will determine the relative\nvelocitys after the collision.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The mass of the sprite.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "mass",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_mass(s):"
          ],
          "csharp": [
            "public float Sprite.Mass { get }",
            "public static float SplashKit.SpriteMass(Sprite s);"
          ],
          "cpp": [
            "float sprite_mass(sprite s)"
          ],
          "pascal": [
            "function SpriteMass(s: Sprite): Single"
          ]
        }
      },
      {
        "signature": "bool sprite_move_from_anchor_point(sprite s);",
        "name": "sprite_move_from_anchor_point",
        "method_name": null,
        "unique_global_name": "sprite_move_from_anchor_point",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Indicates if the sprite is moved from its anchor point, or from its top left.\nWhen this returns true the location of the sprite will indicate its anchor point.\nWhen this returns false the location of the sprite is its top left corner.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the sprite moves from its anchor point.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "move_from_anchor_point",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_move_from_anchor_point(s):"
          ],
          "csharp": [
            "public bool Sprite.MoveFromAnchorPoint { get }",
            "public static bool SplashKit.SpriteMoveFromAnchorPoint(Sprite s);"
          ],
          "cpp": [
            "bool sprite_move_from_anchor_point(sprite s)"
          ],
          "pascal": [
            "function SpriteMoveFromAnchorPoint(s: Sprite): Boolean"
          ]
        }
      },
      {
        "signature": "void sprite_move_to(sprite s,const point_2d &pt,float taking_seconds);",
        "name": "sprite_move_to",
        "method_name": "move_to",
        "unique_global_name": "sprite_move_to_taking_seconds",
        "unique_method_name": "sprite.move_to_taking_seconds",
        "suffix_name": null,
        "description": "This void starts the sprite moving to the indicated\ndestination point, over a specified number of seconds. When the\nsprite arrives it will raise the sprite_arrived event.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to move.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The sprite's destination.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "taking_seconds": {
            "type": "float",
            "description": "The time the sprite should take to get to pt.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "move_to",
          "suffix": "taking_seconds",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_move_to_taking_seconds(s, pt, taking_seconds):"
          ],
          "csharp": [
            "public void Sprite.MoveTo(Point2D pt, float takingSeconds);",
            "public static void SplashKit.SpriteMoveTo(Sprite s, Point2D pt, float takingSeconds);"
          ],
          "cpp": [
            "void sprite_move_to(sprite s, const point_2d &pt, float taking_seconds)"
          ],
          "pascal": [
            "procedure SpriteMoveTo(s: Sprite; const pt: Point2D; takingSeconds: Single)"
          ]
        }
      },
      {
        "signature": "string sprite_name(sprite s);",
        "name": "sprite_name",
        "method_name": null,
        "unique_global_name": "sprite_name",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the name of the sprite. This name is used for resource management\nand can be used to interact with the sprite in various routines.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "The name of the sprite.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "name",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_name(s):"
          ],
          "csharp": [
            "public string Sprite.Name { get }",
            "public static string SplashKit.SpriteName(Sprite s);"
          ],
          "cpp": [
            "string sprite_name(sprite s)"
          ],
          "pascal": [
            "function SpriteName(s: Sprite): String"
          ]
        }
      },
      {
        "signature": "sprite sprite_named(const string &name);",
        "name": "sprite_named",
        "method_name": null,
        "unique_global_name": "sprite_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the `sprite` with the specified name.",
        "brief": null,
        "return": {
          "type": "sprite",
          "description": "The sprite with that name.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the sprite to locate.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "python": [
            "def sprite_named(name):"
          ],
          "csharp": [
            "public static Sprite SplashKit.SpriteNamed(string name);"
          ],
          "cpp": [
            "sprite sprite_named(const string &name)"
          ],
          "pascal": [
            "function SpriteNamed(const name: String): Sprite"
          ]
        }
      },
      {
        "signature": "bool sprite_offscreen(sprite s);",
        "name": "sprite_offscreen",
        "method_name": "offscreen",
        "unique_global_name": "sprite_offscreen",
        "unique_method_name": "sprite.offscreen",
        "suffix_name": null,
        "description": "Returns true if the sprite is entirely off the current screen.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the sprite is entirely off the current window.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to test.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "offscreen",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_offscreen(s):"
          ],
          "csharp": [
            "public bool Sprite.Offscreen();",
            "public static bool SplashKit.SpriteOffscreen(Sprite s);"
          ],
          "cpp": [
            "bool sprite_offscreen(sprite s)"
          ],
          "pascal": [
            "function SpriteOffscreen(s: Sprite): Boolean"
          ]
        }
      },
      {
        "signature": "bool sprite_on_screen_at(sprite s,const point_2d &pt);",
        "name": "sprite_on_screen_at",
        "method_name": "on_screen_at",
        "unique_global_name": "sprite_on_screen_at_point",
        "unique_method_name": "sprite.on_screen_at_point",
        "suffix_name": null,
        "description": "Returns true if a pixel of the `sprite` `s` is at the screen location\nspecified (`pt`), which is converted to a world location.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the sprite would draw something at this coordinate on\nthe screen when drawn.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to test.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The location in screen coordinates to check.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "on_screen_at",
          "suffix": "point",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_on_screen_at_point(s, pt):"
          ],
          "csharp": [
            "public bool Sprite.OnScreenAt(Point2D pt);",
            "public static bool SplashKit.SpriteOnScreenAt(Sprite s, Point2D pt);"
          ],
          "cpp": [
            "bool sprite_on_screen_at(sprite s, const point_2d &pt)"
          ],
          "pascal": [
            "function SpriteOnScreenAt(s: Sprite; const pt: Point2D): Boolean"
          ]
        }
      },
      {
        "signature": "bool sprite_on_screen_at(sprite s,double x,double y);",
        "name": "sprite_on_screen_at",
        "method_name": "on_screen_at",
        "unique_global_name": "sprite_on_screen_at",
        "unique_method_name": "sprite.on_screen_at",
        "suffix_name": null,
        "description": "Returns true if a pixel of the `sprite` `s` is at the screen location\nspecified.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the sprite would draw something at this coordinate on\nthe screen when drawn.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to test.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "double",
            "description": "The x location in screen coordinates to check.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The y location in screen coordinates to check.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "on_screen_at",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_on_screen_at(s, x, y):"
          ],
          "csharp": [
            "public bool Sprite.OnScreenAt(double x, double y);",
            "public static bool SplashKit.SpriteOnScreenAt(Sprite s, double x, double y);"
          ],
          "cpp": [
            "bool sprite_on_screen_at(sprite s, double x, double y)"
          ],
          "pascal": [
            "function SpriteOnScreenAt(s: Sprite; x: Double; y: Double): Boolean"
          ]
        }
      },
      {
        "signature": "point_2d sprite_position(sprite s);",
        "name": "sprite_position",
        "method_name": null,
        "unique_global_name": "sprite_position",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the sprite's position.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "The location of the sprite.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "Position",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_position(s):"
          ],
          "csharp": [
            "public Point2D Sprite.Position { get }",
            "public static Point2D SplashKit.SpritePosition(Sprite s);"
          ],
          "cpp": [
            "point_2d sprite_position(sprite s)"
          ],
          "pascal": [
            "function SpritePosition(s: Sprite): Point2D"
          ]
        }
      },
      {
        "signature": "void sprite_replay_animation(sprite s);",
        "name": "sprite_replay_animation",
        "method_name": "Replay_animation",
        "unique_global_name": "sprite_replay_animation",
        "unique_method_name": "sprite.Replay_animation",
        "suffix_name": null,
        "description": "Restart the sprite's current animation, this will play a sound if the\nfirst cell of the animation is associated with a sound effect.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to replay the animation of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "Replay_animation",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_replay_animation(s):"
          ],
          "csharp": [
            "public void Sprite.ReplayAnimation();",
            "public static void SplashKit.SpriteReplayAnimation(Sprite s);"
          ],
          "cpp": [
            "void sprite_replay_animation(sprite s)"
          ],
          "pascal": [
            "procedure SpriteReplayAnimation(s: Sprite)"
          ]
        }
      },
      {
        "signature": "void sprite_replay_animation(sprite s,bool with_sound);",
        "name": "sprite_replay_animation",
        "method_name": "replay_animation",
        "unique_global_name": "sprite_replay_animation_with_sound",
        "unique_method_name": "sprite.replay_animation_with_sound",
        "suffix_name": null,
        "description": "Restart the sprite's current animation, this will play a sound if\nwith_sound is true and the first cell of the animation is associated\nwith a sound effect.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to replay the animation of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "with_sound": {
            "type": "bool",
            "description": "If false, the animation will not play associated sound\neffects when restarted.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "replay_animation",
          "suffix": "with_sound",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_replay_animation_with_sound(s, with_sound):"
          ],
          "csharp": [
            "public void Sprite.ReplayAnimation(bool withSound);",
            "public static void SplashKit.SpriteReplayAnimation(Sprite s, bool withSound);"
          ],
          "cpp": [
            "void sprite_replay_animation(sprite s, bool with_sound)"
          ],
          "pascal": [
            "procedure SpriteReplayAnimation(s: Sprite; withSound: Boolean)"
          ]
        }
      },
      {
        "signature": "float sprite_rotation(sprite s);",
        "name": "sprite_rotation",
        "method_name": null,
        "unique_global_name": "sprite_rotation",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "This indicates the angle of rotation of the sprite. This will rotate any\nimages of the sprite before drawing, which can be very slow. avoid using\nthis method with bitmap based sprites where possible.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The angle of the sprite rotation.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "rotation",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_rotation(s):"
          ],
          "csharp": [
            "public float Sprite.Rotation { get }",
            "public static float SplashKit.SpriteRotation(Sprite s);"
          ],
          "cpp": [
            "float sprite_rotation(sprite s)"
          ],
          "pascal": [
            "function SpriteRotation(s: Sprite): Single"
          ]
        }
      },
      {
        "signature": "float sprite_scale(sprite s);",
        "name": "sprite_scale",
        "method_name": null,
        "unique_global_name": "sprite_scale",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "This indicates the scale of the sprite. This will scale any\nimages of the sprite before drawing, which can be very slow. avoid using\nthis method with bitmap based sprites where possible.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The scale of the sprite.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "scale",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_scale(s):"
          ],
          "csharp": [
            "public float Sprite.Scale { get }",
            "public static float SplashKit.SpriteScale(Sprite s);"
          ],
          "cpp": [
            "float sprite_scale(sprite s)"
          ],
          "pascal": [
            "function SpriteScale(s: Sprite): Single"
          ]
        }
      },
      {
        "signature": "rectangle sprite_screen_rectangle(sprite s);",
        "name": "sprite_screen_rectangle",
        "method_name": null,
        "unique_global_name": "sprite_screen_rectangle",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the rectangle representing the location of the sprite on the\nscreen.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "A rectangle indicating where the sprite is on the screen.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "screen_rectangle",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_screen_rectangle(s):"
          ],
          "csharp": [
            "public Rectangle Sprite.ScreenRectangle { get }",
            "public static Rectangle SplashKit.SpriteScreenRectangle(Sprite s);"
          ],
          "cpp": [
            "rectangle sprite_screen_rectangle(sprite s)"
          ],
          "pascal": [
            "function SpriteScreenRectangle(s: Sprite): Rectangle"
          ]
        }
      },
      {
        "signature": "void sprite_send_layer_backward(sprite s,int visible_layer);",
        "name": "sprite_send_layer_backward",
        "method_name": "Send_layer_toBackward",
        "unique_global_name": "sprite_send_layer_backward",
        "unique_method_name": "sprite.Send_layer_toBackward",
        "suffix_name": null,
        "description": "Sends the layer specified backward in the visible layer order.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "visible_layer": {
            "type": "int",
            "description": "The visible layer to send to backward",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "Send_layer_toBackward",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_send_layer_backward(s, visible_layer):"
          ],
          "csharp": [
            "public void Sprite.SendLayerTobackward(int visibleLayer);",
            "public static void SplashKit.SpriteSendLayerBackward(Sprite s, int visibleLayer);"
          ],
          "cpp": [
            "void sprite_send_layer_backward(sprite s, int visible_layer)"
          ],
          "pascal": [
            "procedure SpriteSendLayerBackward(s: Sprite; visibleLayer: Integer)"
          ]
        }
      },
      {
        "signature": "void sprite_send_layer_to_back(sprite s,int visible_layer);",
        "name": "sprite_send_layer_to_back",
        "method_name": "send_layer_to_back",
        "unique_global_name": "sprite_send_layer_to_back",
        "unique_method_name": "sprite.send_layer_to_back",
        "suffix_name": null,
        "description": "Sends the layer specified to the back in the visible layer order.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "visible_layer": {
            "type": "int",
            "description": "The visible layer to send to back",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "send_layer_to_back",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_send_layer_to_back(s, visible_layer):"
          ],
          "csharp": [
            "public void Sprite.SendLayerToBack(int visibleLayer);",
            "public static void SplashKit.SpriteSendLayerToBack(Sprite s, int visibleLayer);"
          ],
          "cpp": [
            "void sprite_send_layer_to_back(sprite s, int visible_layer)"
          ],
          "pascal": [
            "procedure SpriteSendLayerToBack(s: Sprite; visibleLayer: Integer)"
          ]
        }
      },
      {
        "signature": "void sprite_set_anchor_point(sprite s,const point_2d &pt);",
        "name": "sprite_set_anchor_point",
        "method_name": null,
        "unique_global_name": "sprite_set_anchor_point",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Allows you to set the anchor point for the sprite. This is the point around\nwhich the sprite rotates. This is in sprite coordinates, as if the sprite\nis drawn at 0,0.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The new anchor point in sprite coordinates.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "setter": "anchor_point",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_set_anchor_point(s, pt):"
          ],
          "csharp": [
            "public void Sprite.AnchorPoint { set }",
            "public static void SplashKit.SpriteSetAnchorPoint(Sprite s, Point2D pt);"
          ],
          "cpp": [
            "void sprite_set_anchor_point(sprite s, const point_2d &pt)"
          ],
          "pascal": [
            "procedure SpriteSetAnchorPoint(s: Sprite; const pt: Point2D)"
          ]
        }
      },
      {
        "signature": "void sprite_set_collision_bitmap(sprite s,bitmap bmp);",
        "name": "sprite_set_collision_bitmap",
        "method_name": null,
        "unique_global_name": "sprite_set_collision_bitmap",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the bitmap used by the sprite to determine if it has collided with\nother objects in the game. By default the collision_bitmap is set to the\nbitmap from the sprite's first layer.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "bmp": {
            "type": "bitmap",
            "description": "The new collision bitmap for the sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "setter": "collision_bitmap",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_set_collision_bitmap(s, bmp):"
          ],
          "csharp": [
            "public void Sprite.CollisionBitmap { set }",
            "public static void SplashKit.SpriteSetCollisionBitmap(Sprite s, Bitmap bmp);"
          ],
          "cpp": [
            "void sprite_set_collision_bitmap(sprite s, bitmap bmp)"
          ],
          "pascal": [
            "procedure SpriteSetCollisionBitmap(s: Sprite; bmp: Bitmap)"
          ]
        }
      },
      {
        "signature": "void sprite_set_collision_kind(sprite s,collision_test_kind value);",
        "name": "sprite_set_collision_kind",
        "method_name": null,
        "unique_global_name": "sprite_set_collision_kind",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the kind of collision used with this sprite. This is used when\ndetermining if the sprite has collided with other objects in the game.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "collision_test_kind",
            "description": "The new kind of collision test for this sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "setter": "collision_kind",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_set_collision_kind(s, value):"
          ],
          "csharp": [
            "public void Sprite.CollisionKind { set }",
            "public static void SplashKit.SpriteSetCollisionKind(Sprite s, CollisionTestKind value);"
          ],
          "cpp": [
            "void sprite_set_collision_kind(sprite s, collision_test_kind value)"
          ],
          "pascal": [
            "procedure SpriteSetCollisionKind(s: Sprite; value: CollisionTestKind)"
          ]
        }
      },
      {
        "signature": "void sprite_set_dx(sprite s,double value);",
        "name": "sprite_set_dx",
        "method_name": null,
        "unique_global_name": "sprite_set_dx",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the X value of the sprite's velocity.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "double",
            "description": "The new x component of the sprite's velocity.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "setter": "dx",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_set_dx(s, value):"
          ],
          "csharp": [
            "public void Sprite.Dx { set }",
            "public static void SplashKit.SpriteSetDx(Sprite s, double value);"
          ],
          "cpp": [
            "void sprite_set_dx(sprite s, double value)"
          ],
          "pascal": [
            "procedure SpriteSetDx(s: Sprite; value: Double)"
          ]
        }
      },
      {
        "signature": "void sprite_set_dy(sprite s,double value);",
        "name": "sprite_set_dy",
        "method_name": null,
        "unique_global_name": "sprite_set_dy",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the Y value of the sprite's velocity.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "double",
            "description": "The new y component of the sprite's velocity.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "setter": "dy",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_set_dy(s, value):"
          ],
          "csharp": [
            "public void Sprite.Dy { set }",
            "public static void SplashKit.SpriteSetDy(Sprite s, double value);"
          ],
          "cpp": [
            "void sprite_set_dy(sprite s, double value)"
          ],
          "pascal": [
            "procedure SpriteSetDy(s: Sprite; value: Double)"
          ]
        }
      },
      {
        "signature": "void sprite_set_heading(sprite s,float value);",
        "name": "sprite_set_heading",
        "method_name": null,
        "unique_global_name": "sprite_set_heading",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Alters the direction the sprite is heading without changing the speed.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "float",
            "description": "The new angle for the sprite's velocity -- distance remains the\nsame.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "setter": "heading",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_set_heading(s, value):"
          ],
          "csharp": [
            "public void Sprite.Heading { set }",
            "public static void SplashKit.SpriteSetHeading(Sprite s, float value);"
          ],
          "cpp": [
            "void sprite_set_heading(sprite s, float value)"
          ],
          "pascal": [
            "procedure SpriteSetHeading(s: Sprite; value: Single)"
          ]
        }
      },
      {
        "signature": "void sprite_set_layer_offset(sprite s,const string &name,const vector_2d &value);",
        "name": "sprite_set_layer_offset",
        "method_name": "set_layer_offset",
        "unique_global_name": "sprite_set_layer_offset_named",
        "unique_method_name": "sprite.set_layer_offset_named",
        "suffix_name": null,
        "description": "Sets the offset of the specified layer. The offset is used when the layer\nis drawn in the sprite, and moves the image relative to the sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the layer to change.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "vector_2d",
            "description": "The new offset.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "set_layer_offset",
          "suffix": "named",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_set_layer_offset_named(s, name, value):"
          ],
          "csharp": [
            "public void Sprite.SetLayerOffset(string name, Vector2D value);",
            "public static void SplashKit.SpriteSetLayerOffset(Sprite s, string name, Vector2D value);"
          ],
          "cpp": [
            "void sprite_set_layer_offset(sprite s, const string &name, const vector_2d &value)"
          ],
          "pascal": [
            "procedure SpriteSetLayerOffset(s: Sprite; const name: String; const value: Vector2D)"
          ]
        }
      },
      {
        "signature": "void sprite_set_layer_offset(sprite s,int idx,const vector_2d &value);",
        "name": "sprite_set_layer_offset",
        "method_name": "set_layer_offset",
        "unique_global_name": "sprite_set_layer_offset_at_index",
        "unique_method_name": "sprite.set_layer_offset_at_index",
        "suffix_name": null,
        "description": "Sets the offset of the specified layer.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "idx": {
            "type": "int",
            "description": "The index of the layer to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "vector_2d",
            "description": "The new offset.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "set_layer_offset",
          "suffix": "at_index",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_set_layer_offset_at_index(s, idx, value):"
          ],
          "csharp": [
            "public void Sprite.SetLayerOffset(int idx, Vector2D value);",
            "public static void SplashKit.SpriteSetLayerOffset(Sprite s, int idx, Vector2D value);"
          ],
          "cpp": [
            "void sprite_set_layer_offset(sprite s, int idx, const vector_2d &value)"
          ],
          "pascal": [
            "procedure SpriteSetLayerOffset(s: Sprite; idx: Integer; const value: Vector2D)"
          ]
        }
      },
      {
        "signature": "void sprite_set_mass(sprite s,float value);",
        "name": "sprite_set_mass",
        "method_name": null,
        "unique_global_name": "sprite_set_mass",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Allows you to change the mass of a sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "float",
            "description": "The new mass for the sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "setter": "mass",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_set_mass(s, value):"
          ],
          "csharp": [
            "public void Sprite.Mass { set }",
            "public static void SplashKit.SpriteSetMass(Sprite s, float value);"
          ],
          "cpp": [
            "void sprite_set_mass(sprite s, float value)"
          ],
          "pascal": [
            "procedure SpriteSetMass(s: Sprite; value: Single)"
          ]
        }
      },
      {
        "signature": "void sprite_set_move_from_anchor_point(sprite s,bool value);",
        "name": "sprite_set_move_from_anchor_point",
        "method_name": null,
        "unique_global_name": "sprite_set_move_from_anchor_point",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Allows you to indicate if the sprite is moved from its anchor point, or from its\ntop left.\n\nWhen set to true the location of the sprite will be its anchor point.\nWhen set to false the location of the sprite is its top left corner.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "bool",
            "description": "The value to set this option.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "setter": "move_from_anchor_point",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_set_move_from_anchor_point(s, value):"
          ],
          "csharp": [
            "public void Sprite.MoveFromAnchorPoint { set }",
            "public static void SplashKit.SpriteSetMoveFromAnchorPoint(Sprite s, bool value);"
          ],
          "cpp": [
            "void sprite_set_move_from_anchor_point(sprite s, bool value)"
          ],
          "pascal": [
            "procedure SpriteSetMoveFromAnchorPoint(s: Sprite; value: Boolean)"
          ]
        }
      },
      {
        "signature": "void sprite_set_position(sprite s,const point_2d &value);",
        "name": "sprite_set_position",
        "method_name": null,
        "unique_global_name": "sprite_set_position",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the sprite's position.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "point_2d",
            "description": "The new location for the sprite.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "setter": "Position",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_set_position(s, value):"
          ],
          "csharp": [
            "public void Sprite.Position { set }",
            "public static void SplashKit.SpriteSetPosition(Sprite s, Point2D value);"
          ],
          "cpp": [
            "void sprite_set_position(sprite s, const point_2d &value)"
          ],
          "pascal": [
            "procedure SpriteSetPosition(s: Sprite; const value: Point2D)"
          ]
        }
      },
      {
        "signature": "void sprite_set_rotation(sprite s,float value);",
        "name": "sprite_set_rotation",
        "method_name": null,
        "unique_global_name": "sprite_set_rotation",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Allows you to change the rotation of a sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "float",
            "description": "The new rotation angle for the sprite",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "setter": "rotation",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_set_rotation(s, value):"
          ],
          "csharp": [
            "public void Sprite.Rotation { set }",
            "public static void SplashKit.SpriteSetRotation(Sprite s, float value);"
          ],
          "cpp": [
            "void sprite_set_rotation(sprite s, float value)"
          ],
          "pascal": [
            "procedure SpriteSetRotation(s: Sprite; value: Single)"
          ]
        }
      },
      {
        "signature": "void sprite_set_scale(sprite s,float value);",
        "name": "sprite_set_scale",
        "method_name": null,
        "unique_global_name": "sprite_set_scale",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Allows you to change the scale of a sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "float",
            "description": "The new scale for the sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "setter": "scale",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_set_scale(s, value):"
          ],
          "csharp": [
            "public void Sprite.Scale { set }",
            "public static void SplashKit.SpriteSetScale(Sprite s, float value);"
          ],
          "cpp": [
            "void sprite_set_scale(sprite s, float value)"
          ],
          "pascal": [
            "procedure SpriteSetScale(s: Sprite; value: Single)"
          ]
        }
      },
      {
        "signature": "void sprite_set_speed(sprite s,double value);",
        "name": "sprite_set_speed",
        "method_name": null,
        "unique_global_name": "sprite_set_speed",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Alters the speed of the sprite without effecting the direction.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "double",
            "description": "The new speed of the sprite -- direction will remain the same.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "setter": "speed",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_set_speed(s, value):"
          ],
          "csharp": [
            "public void Sprite.Speed { set }",
            "public static void SplashKit.SpriteSetSpeed(Sprite s, double value);"
          ],
          "cpp": [
            "void sprite_set_speed(sprite s, double value)"
          ],
          "pascal": [
            "procedure SpriteSetSpeed(s: Sprite; value: Double)"
          ]
        }
      },
      {
        "signature": "void sprite_set_value(sprite s,const string &name,float val);",
        "name": "sprite_set_value",
        "method_name": "set_value",
        "unique_global_name": "sprite_set_value_named",
        "unique_method_name": "sprite.set_value_named",
        "suffix_name": null,
        "description": "Assigns a value to the sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the value to change",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "val": {
            "type": "float",
            "description": "The new value.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "set_value",
          "suffix": "named",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_set_value_named(s, name, val):"
          ],
          "csharp": [
            "public void Sprite.SetValue(string name, float val);",
            "public static void SplashKit.SpriteSetValue(Sprite s, string name, float val);"
          ],
          "cpp": [
            "void sprite_set_value(sprite s, const string &name, float val)"
          ],
          "pascal": [
            "procedure SpriteSetValue(s: Sprite; const name: String; val: Single)"
          ]
        }
      },
      {
        "signature": "void sprite_set_velocity(sprite s,const vector_2d &value);",
        "name": "sprite_set_velocity",
        "method_name": null,
        "unique_global_name": "sprite_set_velocity",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the current velocity of the sprite. When the sprite is updated\n(see `update_sprite`) this vector_2d is used to move the sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "vector_2d",
            "description": "The new sprite velocity.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "setter": "velocity",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_set_velocity(s, value):"
          ],
          "csharp": [
            "public void Sprite.Velocity { set }",
            "public static void SplashKit.SpriteSetVelocity(Sprite s, Vector2D value);"
          ],
          "cpp": [
            "void sprite_set_velocity(sprite s, const vector_2d &value)"
          ],
          "pascal": [
            "procedure SpriteSetVelocity(s: Sprite; const value: Vector2D)"
          ]
        }
      },
      {
        "signature": "void sprite_set_x(sprite s,double value);",
        "name": "sprite_set_x",
        "method_name": null,
        "unique_global_name": "sprite_set_x",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the X position of the sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "double",
            "description": "The new x location.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "setter": "x",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_set_x(s, value):"
          ],
          "csharp": [
            "public void Sprite.X { set }",
            "public static void SplashKit.SpriteSetX(Sprite s, double value);"
          ],
          "cpp": [
            "void sprite_set_x(sprite s, double value)"
          ],
          "pascal": [
            "procedure SpriteSetX(s: Sprite; value: Double)"
          ]
        }
      },
      {
        "signature": "void sprite_set_y(sprite s,double value);",
        "name": "sprite_set_y",
        "method_name": null,
        "unique_global_name": "sprite_set_y",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the Y position of the sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "double",
            "description": "The new sprite y.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "setter": "y",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_set_y(s, value):"
          ],
          "csharp": [
            "public void Sprite.Y { set }",
            "public static void SplashKit.SpriteSetY(Sprite s, double value);"
          ],
          "cpp": [
            "void sprite_set_y(sprite s, double value)"
          ],
          "pascal": [
            "procedure SpriteSetY(s: Sprite; value: Double)"
          ]
        }
      },
      {
        "signature": "int sprite_show_layer(sprite s,const string &name);",
        "name": "sprite_show_layer",
        "method_name": "show_layer",
        "unique_global_name": "sprite_show_layer_named",
        "unique_method_name": "sprite.show_layer_named",
        "suffix_name": null,
        "description": "Show the specified layer of the sprite.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The index of the layer shown, or -1 if no layer found.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to show the layer of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The layer to show.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "show_layer",
          "suffix": "named",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_show_layer_named(s, name):"
          ],
          "csharp": [
            "public int Sprite.ShowLayer(string name);",
            "public static int SplashKit.SpriteShowLayer(Sprite s, string name);"
          ],
          "cpp": [
            "int sprite_show_layer(sprite s, const string &name)"
          ],
          "pascal": [
            "function SpriteShowLayer(s: Sprite; const name: String): Integer"
          ]
        }
      },
      {
        "signature": "int sprite_show_layer(sprite s,int id);",
        "name": "sprite_show_layer",
        "method_name": "show_layer",
        "unique_global_name": "sprite_show_layer",
        "unique_method_name": "sprite.show_layer",
        "suffix_name": null,
        "description": "Show the specified layer of the sprite.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The index of the layer shown, or -1 if no layer found.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to show the layer of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "id": {
            "type": "int",
            "description": "The index to show.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "show_layer",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_show_layer(s, id):"
          ],
          "csharp": [
            "public int Sprite.ShowLayer(int id);",
            "public static int SplashKit.SpriteShowLayer(Sprite s, int id);"
          ],
          "cpp": [
            "int sprite_show_layer(sprite s, int id)"
          ],
          "pascal": [
            "function SpriteShowLayer(s: Sprite; id: Integer): Integer"
          ]
        }
      },
      {
        "signature": "double sprite_speed(sprite s);",
        "name": "sprite_speed",
        "method_name": null,
        "unique_global_name": "sprite_speed",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the current speed (distance travelled per update) of the sprite.",
        "brief": null,
        "return": {
          "type": "double",
          "description": "The speed of the sprite (pixels per update).",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "speed",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_speed(s):"
          ],
          "csharp": [
            "public double Sprite.Speed { get }",
            "public static double SplashKit.SpriteSpeed(Sprite s);"
          ],
          "cpp": [
            "double sprite_speed(sprite s)"
          ],
          "pascal": [
            "function SpriteSpeed(s: Sprite): Double"
          ]
        }
      },
      {
        "signature": "void sprite_start_animation(sprite s,const string &named);",
        "name": "sprite_start_animation",
        "method_name": "start_animation",
        "unique_global_name": "sprite_start_animation_named",
        "unique_method_name": "sprite.start_animation_named",
        "suffix_name": null,
        "description": "Start playing an animation from the sprite's animation template.\nThis will play a sound effect if the first cell of the animation\nhas a sound.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to start the animation of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "named": {
            "type": "string",
            "description": "The name of the animation to start from the animation script.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "start_animation",
          "suffix": "named",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_start_animation_named(s, named):"
          ],
          "csharp": [
            "public void Sprite.StartAnimation(string named);",
            "public static void SplashKit.SpriteStartAnimation(Sprite s, string named);"
          ],
          "cpp": [
            "void sprite_start_animation(sprite s, const string &named)"
          ],
          "pascal": [
            "procedure SpriteStartAnimation(s: Sprite; const named: String)"
          ]
        }
      },
      {
        "signature": "void sprite_start_animation(sprite s,const string &named,bool with_sound);",
        "name": "sprite_start_animation",
        "method_name": "start_animation",
        "unique_global_name": "sprite_start_animation_named_with_sound",
        "unique_method_name": "sprite.start_animation_named_with_sound",
        "suffix_name": null,
        "description": "Start playing an animation from the sprite's animation template.\nThe with_sound parameter determines whether to play a sound effect\nif the first cell of the animation has a sound.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to start the animation of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "named": {
            "type": "string",
            "description": "The name of the animation to start from the animation script.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "with_sound": {
            "type": "bool",
            "description": "If false, the animation will not play associated sound\neffects when started.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "start_animation",
          "suffix": "named_with_sound",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_start_animation_named_with_sound(s, named, with_sound):"
          ],
          "csharp": [
            "public void Sprite.StartAnimation(string named, bool withSound);",
            "public static void SplashKit.SpriteStartAnimation(Sprite s, string named, bool withSound);"
          ],
          "cpp": [
            "void sprite_start_animation(sprite s, const string &named, bool with_sound)"
          ],
          "pascal": [
            "procedure SpriteStartAnimation(s: Sprite; const named: String; withSound: Boolean)"
          ]
        }
      },
      {
        "signature": "void sprite_start_animation(sprite s,int idx);",
        "name": "sprite_start_animation",
        "method_name": "start_animation",
        "unique_global_name": "sprite_start_animation",
        "unique_method_name": "sprite.start_animation",
        "suffix_name": null,
        "description": "Start playing an animation from the sprite's animation template.\nThis will play a sound effect if the first cell of the animation\nhas a sound.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to start the animation of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "idx": {
            "type": "int",
            "description": "The index of the animation to start from the animation script.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "start_animation",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_start_animation(s, idx):"
          ],
          "csharp": [
            "public void Sprite.StartAnimation(int idx);",
            "public static void SplashKit.SpriteStartAnimation(Sprite s, int idx);"
          ],
          "cpp": [
            "void sprite_start_animation(sprite s, int idx)"
          ],
          "pascal": [
            "procedure SpriteStartAnimation(s: Sprite; idx: Integer)"
          ]
        }
      },
      {
        "signature": "void sprite_start_animation(sprite s,int idx,bool with_sound);",
        "name": "sprite_start_animation",
        "method_name": "start_animation",
        "unique_global_name": "sprite_start_animation_with_sound",
        "unique_method_name": "sprite.start_animation_with_sound",
        "suffix_name": null,
        "description": "Start playing an animation from the sprite's animation template.\nThe with_sound parameter determines whether to play a sound effect\nif the first cell of the animation has a sound.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to start the animation of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "idx": {
            "type": "int",
            "description": "The index of the animation to start from the animation script.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "with_sound": {
            "type": "bool",
            "description": "If false, the animation will not play associated sound\neffects when started.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "start_animation",
          "suffix": "with_sound",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_start_animation_with_sound(s, idx, with_sound):"
          ],
          "csharp": [
            "public void Sprite.StartAnimation(int idx, bool withSound);",
            "public static void SplashKit.SpriteStartAnimation(Sprite s, int idx, bool withSound);"
          ],
          "cpp": [
            "void sprite_start_animation(sprite s, int idx, bool with_sound)"
          ],
          "pascal": [
            "procedure SpriteStartAnimation(s: Sprite; idx: Integer; withSound: Boolean)"
          ]
        }
      },
      {
        "signature": "void sprite_stop_calling_on_event(sprite s,sprite_event_handler *handler);",
        "name": "sprite_stop_calling_on_event",
        "method_name": "stop_calling_on_event",
        "unique_global_name": "sprite_stop_calling_on_event",
        "unique_method_name": "sprite.stop_calling_on_event",
        "suffix_name": null,
        "description": "Removes an event handler from the sprite, stopping events from this\nsprite calling the indicated method.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to remove the handler from",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "handler": {
            "type": "sprite_event_handler",
            "description": "The function to remove from this sprites handlers",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "stop_calling_on_event",
          "self": "s",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "python": [
            "def sprite_stop_calling_on_event(s, handler):"
          ],
          "csharp": [
            "public void Sprite.StopCallingOnEvent(SpriteEventHandler handler);",
            "public static void SplashKit.SpriteStopCallingOnEvent(Sprite s, SpriteEventHandler handler);"
          ],
          "cpp": [
            "void sprite_stop_calling_on_event(sprite s, sprite_event_handler *handler)"
          ],
          "pascal": [
            "procedure SpriteStopCallingOnEvent(s: Sprite; handler: SpriteEventHandler)"
          ]
        }
      },
      {
        "signature": "void sprite_toggle_layer_visible(sprite s,const string &name);",
        "name": "sprite_toggle_layer_visible",
        "method_name": "toggle_layer_visible",
        "unique_global_name": "sprite_toggle_layer_visible_named",
        "unique_method_name": "sprite.toggle_layer_visible_named",
        "suffix_name": null,
        "description": "Toggle the visibility of the specified layer of the sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the layer to toggle.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "toggle_layer_visible",
          "suffix": "named",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_toggle_layer_visible_named(s, name):"
          ],
          "csharp": [
            "public void Sprite.ToggleLayerVisible(string name);",
            "public static void SplashKit.SpriteToggleLayerVisible(Sprite s, string name);"
          ],
          "cpp": [
            "void sprite_toggle_layer_visible(sprite s, const string &name)"
          ],
          "pascal": [
            "procedure SpriteToggleLayerVisible(s: Sprite; const name: String)"
          ]
        }
      },
      {
        "signature": "void sprite_toggle_layer_visible(sprite s,int id);",
        "name": "sprite_toggle_layer_visible",
        "method_name": "Toggle_layer_visible",
        "unique_global_name": "sprite_toggle_layer_visible",
        "unique_method_name": "sprite.Toggle_layer_visible",
        "suffix_name": null,
        "description": "Toggle the visibility of the specified layer of the sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "id": {
            "type": "int",
            "description": "The index of the layer to toggle.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "Toggle_layer_visible",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_toggle_layer_visible(s, id):"
          ],
          "csharp": [
            "public void Sprite.ToggleLayerVisible(int id);",
            "public static void SplashKit.SpriteToggleLayerVisible(Sprite s, int id);"
          ],
          "cpp": [
            "void sprite_toggle_layer_visible(sprite s, int id)"
          ],
          "pascal": [
            "procedure SpriteToggleLayerVisible(s: Sprite; id: Integer)"
          ]
        }
      },
      {
        "signature": "float sprite_value(sprite s,const string &name);",
        "name": "sprite_value",
        "method_name": "value",
        "unique_global_name": "sprite_value",
        "unique_method_name": "sprite.value",
        "suffix_name": null,
        "description": "Returns the indicated value of the sprite",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The value from the sprite's data store.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the value to fetch.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "value",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_value(s, name):"
          ],
          "csharp": [
            "public float Sprite.Value(string name);",
            "public static float SplashKit.SpriteValue(Sprite s, string name);"
          ],
          "cpp": [
            "float sprite_value(sprite s, const string &name)"
          ],
          "pascal": [
            "function SpriteValue(s: Sprite; const name: String): Single"
          ]
        }
      },
      {
        "signature": "int sprite_value_count(sprite s);",
        "name": "sprite_value_count",
        "method_name": null,
        "unique_global_name": "sprite_value_count",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the number of sprite's values.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The number of values stored in the sprite.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "value_count",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_value_count(s):"
          ],
          "csharp": [
            "public int Sprite.ValueCount { get }",
            "public static int SplashKit.SpriteValueCount(Sprite s);"
          ],
          "cpp": [
            "int sprite_value_count(sprite s)"
          ],
          "pascal": [
            "function SpriteValueCount(s: Sprite): Integer"
          ]
        }
      },
      {
        "signature": "vector_2d sprite_velocity(sprite s);",
        "name": "sprite_velocity",
        "method_name": null,
        "unique_global_name": "sprite_velocity",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the current velocity of the sprite. When the sprite is updated\n(see `update_sprite`) this vector_2d is used to move the sprite.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "The sprite's velocity.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "velocity",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_velocity(s):"
          ],
          "csharp": [
            "public Vector2D Sprite.Velocity { get }",
            "public static Vector2D SplashKit.SpriteVelocity(Sprite s);"
          ],
          "cpp": [
            "vector_2d sprite_velocity(sprite s)"
          ],
          "pascal": [
            "function SpriteVelocity(s: Sprite): Vector2D"
          ]
        }
      },
      {
        "signature": "int sprite_visible_index_of_layer(sprite s,const string &name);",
        "name": "sprite_visible_index_of_layer",
        "method_name": "visible_index_of_layer",
        "unique_global_name": "sprite_visible_index_of_layer_named",
        "unique_method_name": "sprite.visible_index_of_layer_named",
        "suffix_name": null,
        "description": "Returns the index (z-order) of the sprite's layer.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The z index of the sprite's layer",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the layer to get the z index of.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "visible_index_of_layer",
          "suffix": "named",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_visible_index_of_layer_named(s, name):"
          ],
          "csharp": [
            "public int Sprite.VisibleIndexOfLayer(string name);",
            "public static int SplashKit.SpriteVisibleIndexOfLayer(Sprite s, string name);"
          ],
          "cpp": [
            "int sprite_visible_index_of_layer(sprite s, const string &name)"
          ],
          "pascal": [
            "function SpriteVisibleIndexOfLayer(s: Sprite; const name: String): Integer"
          ]
        }
      },
      {
        "signature": "int sprite_visible_index_of_layer(sprite s,int id);",
        "name": "sprite_visible_index_of_layer",
        "method_name": "visible_index_of_layer",
        "unique_global_name": "sprite_visible_index_of_layer",
        "unique_method_name": "sprite.visible_index_of_layer",
        "suffix_name": null,
        "description": "Returns the index (z-order) of the sprite's layer.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The z index of the sprite's layer",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "id": {
            "type": "int",
            "description": "The index of the layer to get the z index of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "visible_index_of_layer",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_visible_index_of_layer(s, id):"
          ],
          "csharp": [
            "public int Sprite.VisibleIndexOfLayer(int id);",
            "public static int SplashKit.SpriteVisibleIndexOfLayer(Sprite s, int id);"
          ],
          "cpp": [
            "int sprite_visible_index_of_layer(sprite s, int id)"
          ],
          "pascal": [
            "function SpriteVisibleIndexOfLayer(s: Sprite; id: Integer): Integer"
          ]
        }
      },
      {
        "signature": "int sprite_visible_layer(sprite s,int idx);",
        "name": "sprite_visible_layer",
        "method_name": "visible_layer",
        "unique_global_name": "sprite_visible_layer",
        "unique_method_name": "sprite.visible_layer",
        "suffix_name": null,
        "description": "Returns the index of the n'th (idx parameter) visible layer.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The layer index of the selected visible layer.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "idx": {
            "type": "int",
            "description": "The index of the visible layer to fetch.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "visible_layer",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_visible_layer(s, idx):"
          ],
          "csharp": [
            "public int Sprite.VisibleLayer(int idx);",
            "public static int SplashKit.SpriteVisibleLayer(Sprite s, int idx);"
          ],
          "cpp": [
            "int sprite_visible_layer(sprite s, int idx)"
          ],
          "pascal": [
            "function SpriteVisibleLayer(s: Sprite; idx: Integer): Integer"
          ]
        }
      },
      {
        "signature": "int sprite_visible_layer_count(sprite s);",
        "name": "sprite_visible_layer_count",
        "method_name": null,
        "unique_global_name": "sprite_visible_layer_count",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the number of layers that are currently visible for the sprite.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The number of visible layers for the sprite.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "visible_layer_count",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_visible_layer_count(s):"
          ],
          "csharp": [
            "public int Sprite.VisibleLayerCount { get }",
            "public static int SplashKit.SpriteVisibleLayerCount(Sprite s);"
          ],
          "cpp": [
            "int sprite_visible_layer_count(sprite s)"
          ],
          "pascal": [
            "function SpriteVisibleLayerCount(s: Sprite): Integer"
          ]
        }
      },
      {
        "signature": "int sprite_visible_layer_id(sprite s,int idx);",
        "name": "sprite_visible_layer_id",
        "method_name": "visible_layer_id_at",
        "unique_global_name": "sprite_visible_layer_id",
        "unique_method_name": "sprite.visible_layer_id_at",
        "suffix_name": null,
        "description": "Returns the id of the layer at index `idx` that is currently visible.\nIndex 0 is the background, with larger indexes moving toward the foreground.\nThis returns -1 if there are no visible layers.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The layer index of the visible layer.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "idx": {
            "type": "int",
            "description": "The index of the visible layer.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "visible_layer_id_at",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_visible_layer_id(s, idx):"
          ],
          "csharp": [
            "public int Sprite.VisibleLayerIdAt(int idx);",
            "public static int SplashKit.SpriteVisibleLayerId(Sprite s, int idx);"
          ],
          "cpp": [
            "int sprite_visible_layer_id(sprite s, int idx)"
          ],
          "pascal": [
            "function SpriteVisibleLayerId(s: Sprite; idx: Integer): Integer"
          ]
        }
      },
      {
        "signature": "int sprite_width(sprite s);",
        "name": "sprite_width",
        "method_name": null,
        "unique_global_name": "sprite_width",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The current Width of the sprite (aligned to the X axis).",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The width of the sprite's layer in pixels.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "Width",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_width(s):"
          ],
          "csharp": [
            "public int Sprite.Width { get }",
            "public static int SplashKit.SpriteWidth(Sprite s);"
          ],
          "cpp": [
            "int sprite_width(sprite s)"
          ],
          "pascal": [
            "function SpriteWidth(s: Sprite): Integer"
          ]
        }
      },
      {
        "signature": "double sprite_x(sprite s);",
        "name": "sprite_x",
        "method_name": null,
        "unique_global_name": "sprite_x",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the X position of the sprite.",
        "brief": null,
        "return": {
          "type": "double",
          "description": "The x location of the sprite",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "x",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_x(s):"
          ],
          "csharp": [
            "public double Sprite.X { get }",
            "public static double SplashKit.SpriteX(Sprite s);"
          ],
          "cpp": [
            "double sprite_x(sprite s)"
          ],
          "pascal": [
            "function SpriteX(s: Sprite): Double"
          ]
        }
      },
      {
        "signature": "double sprite_y(sprite s);",
        "name": "sprite_y",
        "method_name": null,
        "unique_global_name": "sprite_y",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the Y position of the sprite.",
        "brief": null,
        "return": {
          "type": "double",
          "description": "The sprite's y location.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "y",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def sprite_y(s):"
          ],
          "csharp": [
            "public double Sprite.Y { get }",
            "public static double SplashKit.SpriteY(Sprite s);"
          ],
          "cpp": [
            "double sprite_y(sprite s)"
          ],
          "pascal": [
            "function SpriteY(s: Sprite): Double"
          ]
        }
      },
      {
        "signature": "void stop_calling_on_sprite_event(sprite_event_handler *handler);",
        "name": "stop_calling_on_sprite_event",
        "method_name": null,
        "unique_global_name": "stop_calling_on_sprite_event",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Removes an global event handler, stopping events calling the indicated void.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "handler": {
            "type": "sprite_event_handler",
            "description": "The function to remove from the list of sprite event handlers.",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "python": [
            "def stop_calling_on_sprite_event(handler):"
          ],
          "csharp": [
            "public static void SplashKit.StopCallingOnSpriteEvent(SpriteEventHandler handler);"
          ],
          "cpp": [
            "void stop_calling_on_sprite_event(sprite_event_handler *handler)"
          ],
          "pascal": [
            "procedure StopCallingOnSpriteEvent(handler: SpriteEventHandler)"
          ]
        }
      },
      {
        "signature": "void update_all_sprites();",
        "name": "update_all_sprites",
        "method_name": null,
        "unique_global_name": "update_all_sprites",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Update all of the sprites in the current sprite pack.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "python": [
            "def update_all_sprites():"
          ],
          "csharp": [
            "public static void SplashKit.UpdateAllSprites();"
          ],
          "cpp": [
            "void update_all_sprites()"
          ],
          "pascal": [
            "procedure UpdateAllSprites()"
          ]
        }
      },
      {
        "signature": "void update_all_sprites(float pct);",
        "name": "update_all_sprites",
        "method_name": null,
        "unique_global_name": "update_all_sprites_percent",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Update all of the sprites in the current sprite pack, passing in a\npercentage value to indicate the percentage to update.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pct": {
            "type": "float",
            "description": "The percentage of the update to apply.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "percent",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "python": [
            "def update_all_sprites_percent(pct):"
          ],
          "csharp": [
            "public static void SplashKit.UpdateAllSprites(float pct);"
          ],
          "cpp": [
            "void update_all_sprites(float pct)"
          ],
          "pascal": [
            "procedure UpdateAllSprites(pct: Single)"
          ]
        }
      },
      {
        "signature": "void update_sprite(sprite s);",
        "name": "update_sprite",
        "method_name": "update",
        "unique_global_name": "update_sprite",
        "unique_method_name": "sprite.update",
        "suffix_name": null,
        "description": "Update the position and animation details of the sprite.\nThis will play a sound effect if the new cell of the animation\nhas a sound.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to update.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "update",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def update_sprite(s):"
          ],
          "csharp": [
            "public void Sprite.Update();",
            "public static void SplashKit.UpdateSprite(Sprite s);"
          ],
          "cpp": [
            "void update_sprite(sprite s)"
          ],
          "pascal": [
            "procedure UpdateSprite(s: Sprite)"
          ]
        }
      },
      {
        "signature": "void update_sprite(sprite s,bool with_sound);",
        "name": "update_sprite",
        "method_name": "update",
        "unique_global_name": "update_sprite_with_sound",
        "unique_method_name": "sprite.update_with_sound",
        "suffix_name": null,
        "description": "Update the position and animation details of the sprite.\nThis will play a sound effect if the new cell of the animation\nhas a sound and with_sound is true.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to update",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "with_sound": {
            "type": "bool",
            "description": "If false, animations will not play associated sound\neffects when updated.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "update",
          "suffix": "with_sound",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def update_sprite_with_sound(s, with_sound):"
          ],
          "csharp": [
            "public void Sprite.Update(bool withSound);",
            "public static void SplashKit.UpdateSprite(Sprite s, bool withSound);"
          ],
          "cpp": [
            "void update_sprite(sprite s, bool with_sound)"
          ],
          "pascal": [
            "procedure UpdateSprite(s: Sprite; withSound: Boolean)"
          ]
        }
      },
      {
        "signature": "void update_sprite(sprite s,float pct);",
        "name": "update_sprite",
        "method_name": "update",
        "unique_global_name": "update_sprite_percent",
        "unique_method_name": "sprite.update_percent",
        "suffix_name": null,
        "description": "Update the position and animation details of the sprite by a\ngiven percentage of a single unit of movement/animation.\nThis will play a sound effect if the new cell of the animation\nhas a sound.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to update.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pct": {
            "type": "float",
            "description": "The percent to update.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "update",
          "suffix": "percent",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def update_sprite_percent(s, pct):"
          ],
          "csharp": [
            "public void Sprite.Update(float pct);",
            "public static void SplashKit.UpdateSprite(Sprite s, float pct);"
          ],
          "cpp": [
            "void update_sprite(sprite s, float pct)"
          ],
          "pascal": [
            "procedure UpdateSprite(s: Sprite; pct: Single)"
          ]
        }
      },
      {
        "signature": "void update_sprite(sprite s,float pct,bool with_sound);",
        "name": "update_sprite",
        "method_name": "update",
        "unique_global_name": "update_sprite_percent_with_sound",
        "unique_method_name": "sprite.update_percent_with_sound",
        "suffix_name": null,
        "description": "Update the position and animation details of the sprite by a\ngiven percentage of a single unit of movement/animation.\nThis will play a sound effect if the new cell of the animation\nhas a sound and with_sound is true.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to update.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pct": {
            "type": "float",
            "description": "The percent to update.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "with_sound": {
            "type": "bool",
            "description": "If false, animations will not play associated sound\neffects when updated.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "update",
          "suffix": "percent_with_sound",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def update_sprite_percent_with_sound(s, pct, with_sound):"
          ],
          "csharp": [
            "public void Sprite.Update(float pct, bool withSound);",
            "public static void SplashKit.UpdateSprite(Sprite s, float pct, bool withSound);"
          ],
          "cpp": [
            "void update_sprite(sprite s, float pct, bool with_sound)"
          ],
          "pascal": [
            "procedure UpdateSprite(s: Sprite; pct: Single; withSound: Boolean)"
          ]
        }
      },
      {
        "signature": "void update_sprite_animation(sprite s);",
        "name": "update_sprite_animation",
        "method_name": "update_animation",
        "unique_global_name": "update_sprite_animation",
        "unique_method_name": "sprite.update_animation",
        "suffix_name": null,
        "description": "Updates the animation details of the sprite.\nThis will play a sound effect if the new cell of the animation\nhas a sound.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to update.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "update_animation",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def update_sprite_animation(s):"
          ],
          "csharp": [
            "public void Sprite.UpdateAnimation();",
            "public static void SplashKit.UpdateSpriteAnimation(Sprite s);"
          ],
          "cpp": [
            "void update_sprite_animation(sprite s)"
          ],
          "pascal": [
            "procedure UpdateSpriteAnimation(s: Sprite)"
          ]
        }
      },
      {
        "signature": "void update_sprite_animation(sprite s,bool with_sound);",
        "name": "update_sprite_animation",
        "method_name": "update_animation",
        "unique_global_name": "update_sprite_animation_with_sound",
        "unique_method_name": "sprite.update_animation_with_sound",
        "suffix_name": null,
        "description": "Update the animation details of the sprite.\nThis will play a sound effect if the new cell of the animation\nhas a sound and with_sound is true.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to update.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "with_sound": {
            "type": "bool",
            "description": "If false, animations will not play associated sound\neffects when updated.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "update_animation",
          "suffix": "with_sound",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def update_sprite_animation_with_sound(s, with_sound):"
          ],
          "csharp": [
            "public void Sprite.UpdateAnimation(bool withSound);",
            "public static void SplashKit.UpdateSpriteAnimation(Sprite s, bool withSound);"
          ],
          "cpp": [
            "void update_sprite_animation(sprite s, bool with_sound)"
          ],
          "pascal": [
            "procedure UpdateSpriteAnimation(s: Sprite; withSound: Boolean)"
          ]
        }
      },
      {
        "signature": "void update_sprite_animation(sprite s,float pct);",
        "name": "update_sprite_animation",
        "method_name": "update_animation",
        "unique_global_name": "update_sprite_animation_percent",
        "unique_method_name": "sprite.update_animation_percent",
        "suffix_name": null,
        "description": "Update the animation details of the sprite by a\ngiven percentage of a single unit of movement/animation.\nThis will play a sound effect if the new cell of the animation\nhas a sound.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to update.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pct": {
            "type": "float",
            "description": "The percent to update.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "update_animation",
          "suffix": "percent",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def update_sprite_animation_percent(s, pct):"
          ],
          "csharp": [
            "public void Sprite.UpdateAnimation(float pct);",
            "public static void SplashKit.UpdateSpriteAnimation(Sprite s, float pct);"
          ],
          "cpp": [
            "void update_sprite_animation(sprite s, float pct)"
          ],
          "pascal": [
            "procedure UpdateSpriteAnimation(s: Sprite; pct: Single)"
          ]
        }
      },
      {
        "signature": "void update_sprite_animation(sprite s,float pct,bool with_sound);",
        "name": "update_sprite_animation",
        "method_name": "update_animation",
        "unique_global_name": "update_sprite_animation_percent_with_sound",
        "unique_method_name": "sprite.update_animation_percent_with_sound",
        "suffix_name": null,
        "description": "Update the position and animation details of the sprite by a\ngiven percentage of a single unit of movement/animation.\nThis will play a sound effect if the new cell of the animation\nhas a sound and with_sound is true.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to update.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pct": {
            "type": "float",
            "description": "The percent to update.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "with_sound": {
            "type": "bool",
            "description": "If false, animations will not play associated sound\neffects when updated.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "update_animation",
          "suffix": "percent_with_sound",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def update_sprite_animation_percent_with_sound(s, pct, with_sound):"
          ],
          "csharp": [
            "public void Sprite.UpdateAnimation(float pct, bool withSound);",
            "public static void SplashKit.UpdateSpriteAnimation(Sprite s, float pct, bool withSound);"
          ],
          "cpp": [
            "void update_sprite_animation(sprite s, float pct, bool with_sound)"
          ],
          "pascal": [
            "procedure UpdateSpriteAnimation(s: Sprite; pct: Single; withSound: Boolean)"
          ]
        }
      },
      {
        "signature": "vector_2d vector_from_center_sprite_to_point(sprite s,const point_2d &pt);",
        "name": "vector_from_center_sprite_to_point",
        "method_name": "vector_to",
        "unique_global_name": "vector_from_center_sprite_to_point_point",
        "unique_method_name": "sprite.vector_to_point",
        "suffix_name": null,
        "description": "Returns a `vector_2d` that is the difference in location from the center of\nthe sprite `s` to the point `pt`.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "A vector pointing from the sprite to the point.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite that is at the start of the vector.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The point that is at the end of the vector.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "vector_to",
          "suffix": "point",
          "group": "sprites",
          "static": "sprite",
          "self": "s"
        },
        "signatures": {
          "python": [
            "def vector_from_center_sprite_to_point_point(s, pt):"
          ],
          "csharp": [
            "public Vector2D Sprite.VectorTo(Point2D pt);",
            "public static Vector2D SplashKit.VectorFromCenterSpriteToPoint(Sprite s, Point2D pt);"
          ],
          "cpp": [
            "vector_2d vector_from_center_sprite_to_point(sprite s, const point_2d &pt)"
          ],
          "pascal": [
            "function VectorFromCenterSpriteToPoint(s: Sprite; const pt: Point2D): Vector2D"
          ]
        }
      },
      {
        "signature": "vector_2d vector_from_to(sprite s1,sprite s2);",
        "name": "vector_from_to",
        "method_name": "vector_to",
        "unique_global_name": "vector_from_to",
        "unique_method_name": "sprite.vector_to",
        "suffix_name": null,
        "description": "Returns a `vector_2d` that is the difference in the position of two sprites\n(`s1` and `s2`).",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "A vector that points from s1 to s2.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s1": {
            "type": "sprite",
            "description": "The sprite that is at the start of the vector.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "s2": {
            "type": "sprite",
            "description": "The sprite that is at the end of the vector.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "vector_to",
          "group": "sprites",
          "static": "sprite",
          "self": "s1"
        },
        "signatures": {
          "python": [
            "def vector_from_to(s1, s2):"
          ],
          "csharp": [
            "public Vector2D Sprite.VectorTo(Sprite s2);",
            "public static Vector2D SplashKit.VectorFromTo(Sprite s1, Sprite s2);"
          ],
          "cpp": [
            "vector_2d vector_from_to(sprite s1, sprite s2)"
          ],
          "pascal": [
            "function VectorFromTo(s1: Sprite; s2: Sprite): Vector2D"
          ]
        }
      }
    ],
    "typedefs": [
      {
        "signature": "typedef struct _sprite_data *sprite;",
        "name": "sprite",
        "description": "Sprites combine an image, with position and animation details. You can\ncreate a sprite using `create_sprite`, draw it with `draw_sprite`, move it\nusing the `sprite_velocity` with `update_sprite`, and animate it using an\n`animation_script`.",
        "brief": null,
        "attributes": {
          "class": "sprite",
          "group": "sprites",
          "static": "sprite"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      },
      {
        "signature": "typedef void (sprite_event_handler) (void *s,int evt);",
        "name": "sprite_event_handler",
        "description": "The sprite_event_handler function pointer is used when you want to register\nto receive events from a Sprite.",
        "brief": null,
        "attributes": {
          "group": "sprites",
          "static": "sprite"
        },
        "is_function_pointer": true,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "void",
            "description": "The `sprite` raising the event.",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "evt": {
            "type": "int",
            "description": "The `sprite_event_kind` being raised.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        }
      },
      {
        "signature": "typedef void (sprite_float_function)(void *s,float f);",
        "name": "sprite_float_function",
        "description": "The sprite single function is used with sprite packs to provide a\nprocedure to be called for each of the Sprites in the sprite pack,\nwhere a float value is required.",
        "brief": null,
        "attributes": {
          "group": "sprites",
          "static": "sprite"
        },
        "is_function_pointer": true,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "void",
            "description": "The `sprite` being passed to the sprite function.",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "f": {
            "type": "float",
            "description": "The value to be passed to the function.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        }
      },
      {
        "signature": "typedef void (sprite_function)(void *s);",
        "name": "sprite_function",
        "description": "sprite_function is used with SpritePacks to provide a procedure to be\ncalled for each of the Sprites in the SpritePack.",
        "brief": null,
        "attributes": {
          "group": "sprites",
          "static": "sprite"
        },
        "is_function_pointer": true,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "void",
            "description": "The `sprite` being passed to the sprite function.",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        }
      }
    ],
    "structs": [

    ],
    "enums": [
      {
        "signature": "enum collision_test_kind {PIXEL_COLLISIONS,AABB_COLLISIONS};",
        "name": "collision_test_kind",
        "description": "This enumeration can be used to set the kind of collisions a sprite will check for.",
        "brief": null,
        "constants": {
          "PIXEL_COLLISIONS": {
            "description": "The sprite will check for collisions with its collision bitmap."
          },
          "AABB_COLLISIONS": {
            "description": "The sprite will check for collisions with a bounding box around the sprite."
          }
        },
        "attributes": {
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "python": "public enum {collision_test_kind.pixel_collisions = 0, collision_test_kind.aabb_collisions = 0}",
          "csharp": "public enum {CollisionTestKind.PixelCollisions = 0, CollisionTestKind.AabbCollisions = 0}",
          "cpp": "class collision_test_kind {PIXEL_COLLISIONS = 0, AABB_COLLISIONS = 0};",
          "pascal": "public enum {CollisionTestKind.PixelCollisions = 0, CollisionTestKind.AabbCollisions = 0}"
        }
      },
      {
        "signature": "enum sprite_event_kind {SPRITE_ARRIVED_EVENT,SPRITE_ANIMATION_ENDED_EVENT,SPRITE_TOUCHED_EVENT,SPRITE_CLICKED_EVENT};",
        "name": "sprite_event_kind",
        "description": "This enumeration contains a list of all of the different kinds of\nevents that a Sprite can raise. When the event is raised the assocated\nsprite_event_kind value passed to the event handler to indicate the\nkind of event that has occurred.",
        "brief": null,
        "constants": {
          "SPRITE_ARRIVED_EVENT": {
            "description": "The sprite has arrived at the end of a move"
          },
          "SPRITE_ANIMATION_ENDED_EVENT": {
            "description": "The Sprite's animation has ended."
          },
          "SPRITE_TOUCHED_EVENT": {
            "description": "The Sprite was touched"
          },
          "SPRITE_CLICKED_EVENT": {
            "description": "The Sprite was touched"
          }
        },
        "attributes": {
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "python": "public enum {sprite_event_kind.sprite_arrived_event = 0, sprite_event_kind.sprite_animation_ended_event = 0, sprite_event_kind.sprite_touched_event = 0, sprite_event_kind.sprite_clicked_event = 0}",
          "csharp": "public enum {SpriteEventKind.SpriteArrivedEvent = 0, SpriteEventKind.SpriteAnimationEndedEvent = 0, SpriteEventKind.SpriteTouchedEvent = 0, SpriteEventKind.SpriteClickedEvent = 0}",
          "cpp": "class sprite_event_kind {SPRITE_ARRIVED_EVENT = 0, SPRITE_ANIMATION_ENDED_EVENT = 0, SPRITE_TOUCHED_EVENT = 0, SPRITE_CLICKED_EVENT = 0};",
          "pascal": "public enum {SpriteEventKind.SpriteArrivedEvent = 0, SpriteEventKind.SpriteAnimationEndedEvent = 0, SpriteEventKind.SpriteTouchedEvent = 0, SpriteEventKind.SpriteClickedEvent = 0}"
        }
      }
    ],
    "defines": [

    ]
  },
  "terminal": {
    "brief": "SplashKit Terminal allows you to read and write values to the\nterminal in a consistent manner.",
    "description": "",
    "functions": [
      {
        "signature": "char read_char();",
        "name": "read_char",
        "method_name": null,
        "unique_global_name": "read_char",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Get a single character input by the user.",
        "brief": null,
        "return": {
          "type": "char",
          "description": "The character typed by the user.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "terminal",
          "static": "terminal"
        },
        "signatures": {
          "python": [
            "def read_char():"
          ],
          "csharp": [
            "public static char SplashKit.ReadChar();"
          ],
          "cpp": [
            "char read_char()"
          ],
          "pascal": [
            "function ReadChar(): Char"
          ]
        }
      },
      {
        "signature": "string read_line();",
        "name": "read_line",
        "method_name": null,
        "unique_global_name": "read_line",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Read a line of text from the terminal. The user will see the text as\nthey type it.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "The text entered by the user.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "terminal",
          "static": "terminal"
        },
        "signatures": {
          "python": [
            "def read_line():"
          ],
          "csharp": [
            "public static string SplashKit.ReadLine();"
          ],
          "cpp": [
            "string read_line()"
          ],
          "pascal": [
            "function ReadLine(): String"
          ]
        }
      },
      {
        "signature": "bool terminal_has_input();",
        "name": "terminal_has_input",
        "method_name": null,
        "unique_global_name": "terminal_has_input",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks if there is data waiting to be read by read line or read char.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "true if there is data waiting to be read.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "terminal",
          "static": "terminal"
        },
        "signatures": {
          "python": [
            "def terminal_has_input():"
          ],
          "csharp": [
            "public static bool SplashKit.TerminalHasInput();"
          ],
          "cpp": [
            "bool terminal_has_input()"
          ],
          "pascal": [
            "function TerminalHasInput(): Boolean"
          ]
        }
      },
      {
        "signature": "void write(char data);",
        "name": "write",
        "method_name": null,
        "unique_global_name": "write_char",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Write the passed in data to the terminal.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "data": {
            "type": "char",
            "description": "The character to write",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "char",
          "group": "terminal",
          "static": "terminal"
        },
        "signatures": {
          "python": [
            "def write_char(data):"
          ],
          "csharp": [
            "public static void SplashKit.Write(char data);"
          ],
          "cpp": [
            "void write(char data)"
          ],
          "pascal": [
            "procedure Write(data: Char)"
          ]
        }
      },
      {
        "signature": "void write(double data);",
        "name": "write",
        "method_name": null,
        "unique_global_name": "write_double",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Write the passed in data to the terminal.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "data": {
            "type": "double",
            "description": "The text to write",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "double",
          "group": "terminal",
          "static": "terminal"
        },
        "signatures": {
          "python": [
            "def write_double(data):"
          ],
          "csharp": [
            "public static void SplashKit.Write(double data);"
          ],
          "cpp": [
            "void write(double data)"
          ],
          "pascal": [
            "procedure Write(data: Double)"
          ]
        }
      },
      {
        "signature": "void write(int data);",
        "name": "write",
        "method_name": null,
        "unique_global_name": "write_int",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Write the passed in data to the terminal.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "data": {
            "type": "int",
            "description": "The text to write",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "int",
          "group": "terminal",
          "static": "terminal"
        },
        "signatures": {
          "python": [
            "def write_int(data):"
          ],
          "csharp": [
            "public static void SplashKit.Write(int data);"
          ],
          "cpp": [
            "void write(int data)"
          ],
          "pascal": [
            "procedure Write(data: Integer)"
          ]
        }
      },
      {
        "signature": "void write(string text);",
        "name": "write",
        "method_name": null,
        "unique_global_name": "write",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Write the supplied text to the Terminal.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "text": {
            "type": "string",
            "description": "The text to write",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "terminal",
          "static": "terminal"
        },
        "signatures": {
          "python": [
            "def write(text):"
          ],
          "csharp": [
            "public static void SplashKit.Write(string text);"
          ],
          "cpp": [
            "void write(string text)"
          ],
          "pascal": [
            "procedure Write(text: String)"
          ]
        }
      },
      {
        "signature": "void write_line(char data);",
        "name": "write_line",
        "method_name": null,
        "unique_global_name": "write_line_char",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Write the passed in data, then move to the next line/row of the terminal.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "data": {
            "type": "char",
            "description": "The character to write",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "char",
          "group": "terminal",
          "static": "terminal"
        },
        "signatures": {
          "python": [
            "def write_line_char(data):"
          ],
          "csharp": [
            "public static void SplashKit.WriteLine(char data);"
          ],
          "cpp": [
            "void write_line(char data)"
          ],
          "pascal": [
            "procedure WriteLine(data: Char)"
          ]
        }
      },
      {
        "signature": "void write_line();",
        "name": "write_line",
        "method_name": null,
        "unique_global_name": "write_line_empty",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Move to the next line/row of the terminal.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "suffix": "empty",
          "group": "terminal",
          "static": "terminal"
        },
        "signatures": {
          "python": [
            "def write_line_empty():"
          ],
          "csharp": [
            "public static void SplashKit.WriteLine();"
          ],
          "cpp": [
            "void write_line()"
          ],
          "pascal": [
            "procedure WriteLine()"
          ]
        }
      },
      {
        "signature": "void write_line(double data);",
        "name": "write_line",
        "method_name": null,
        "unique_global_name": "write_line_double",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Write the passed in data, then move to the next line/row of the terminal.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "data": {
            "type": "double",
            "description": "The text to write",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "double",
          "group": "terminal",
          "static": "terminal"
        },
        "signatures": {
          "python": [
            "def write_line_double(data):"
          ],
          "csharp": [
            "public static void SplashKit.WriteLine(double data);"
          ],
          "cpp": [
            "void write_line(double data)"
          ],
          "pascal": [
            "procedure WriteLine(data: Double)"
          ]
        }
      },
      {
        "signature": "void write_line(int data);",
        "name": "write_line",
        "method_name": null,
        "unique_global_name": "write_line_int",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Write the passed in data, then move to the next line/row of the terminal.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "data": {
            "type": "int",
            "description": "The text to write",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "int",
          "group": "terminal",
          "static": "terminal"
        },
        "signatures": {
          "python": [
            "def write_line_int(data):"
          ],
          "csharp": [
            "public static void SplashKit.WriteLine(int data);"
          ],
          "cpp": [
            "void write_line(int data)"
          ],
          "pascal": [
            "procedure WriteLine(data: Integer)"
          ]
        }
      },
      {
        "signature": "void write_line(string line);",
        "name": "write_line",
        "method_name": null,
        "unique_global_name": "write_line",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Write the passed in text, then move to the next line/row of the terminal.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "line": {
            "type": "string",
            "description": "The text to write",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "terminal",
          "static": "terminal"
        },
        "signatures": {
          "python": [
            "def write_line(line):"
          ],
          "csharp": [
            "public static void SplashKit.WriteLine(string line);"
          ],
          "cpp": [
            "void write_line(string line)"
          ],
          "pascal": [
            "procedure WriteLine(line: String)"
          ]
        }
      }
    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "timers": {
    "brief": "Timers in SplashKit can be used to track the passing of time.",
    "description": "",
    "functions": [
      {
        "signature": "timer create_timer(string name);",
        "name": "create_timer",
        "method_name": null,
        "unique_global_name": "create_timer",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Create and return a new Timer. The timer will not be started, and will have\nan initial 'ticks' of 0.",
        "brief": null,
        "return": {
          "type": "timer",
          "description": "A new timer.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the timer for resource tracking",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "timer",
          "constructor": true,
          "group": "timers",
          "static": "timers"
        },
        "signatures": {
          "python": [
            "def create_timer(name):"
          ],
          "csharp": [
            "public static Timer SplashKit.CreateTimer(string name);",
            "public Timer(string name);"
          ],
          "cpp": [
            "timer create_timer(string name)"
          ],
          "pascal": [
            "function CreateTimer(name: String): Timer"
          ]
        }
      },
      {
        "signature": "void free_all_timers();",
        "name": "free_all_timers",
        "method_name": null,
        "unique_global_name": "free_all_timers",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Free all of timers that have been created.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "timers",
          "static": "timers"
        },
        "signatures": {
          "python": [
            "def free_all_timers():"
          ],
          "csharp": [
            "public static void SplashKit.FreeAllTimers();"
          ],
          "cpp": [
            "void free_all_timers()"
          ],
          "pascal": [
            "procedure FreeAllTimers()"
          ]
        }
      },
      {
        "signature": "void free_timer(timer to_free);",
        "name": "free_timer",
        "method_name": null,
        "unique_global_name": "free_timer",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Free the memory used to store this timer.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "to_free": {
            "type": "timer",
            "description": "The time to be released.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "timer",
          "destructor": true,
          "group": "timers",
          "static": "timers",
          "self": "to_free"
        },
        "signatures": {
          "python": [
            "def free_timer(to_free):"
          ],
          "csharp": [
            "public static void SplashKit.FreeTimer(Timer toFree);"
          ],
          "cpp": [
            "void free_timer(timer to_free)"
          ],
          "pascal": [
            "procedure FreeTimer(toFree: Timer)"
          ]
        }
      },
      {
        "signature": "bool has_timer(string name);",
        "name": "has_timer",
        "method_name": null,
        "unique_global_name": "has_timer_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks if SplashKit has a timer with the indicated name.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if SplashKit has created a timer with that name.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the timer",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "named",
          "group": "timers",
          "static": "timers"
        },
        "signatures": {
          "python": [
            "def has_timer_named(name):"
          ],
          "csharp": [
            "public static bool SplashKit.HasTimer(string name);"
          ],
          "cpp": [
            "bool has_timer(string name)"
          ],
          "pascal": [
            "function HasTimer(name: String): Boolean"
          ]
        }
      },
      {
        "signature": "void pause_timer(string name);",
        "name": "pause_timer",
        "method_name": null,
        "unique_global_name": "pause_timer_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Pause the timer, getting ticks from a paused timer\nwill continue to return the same time.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the timer",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "named",
          "group": "timers",
          "static": "timers"
        },
        "signatures": {
          "python": [
            "def pause_timer_named(name):"
          ],
          "csharp": [
            "public static void SplashKit.PauseTimer(string name);"
          ],
          "cpp": [
            "void pause_timer(string name)"
          ],
          "pascal": [
            "procedure PauseTimer(name: String)"
          ]
        }
      },
      {
        "signature": "void pause_timer(timer to_pause);",
        "name": "pause_timer",
        "method_name": "pause",
        "unique_global_name": "pause_timer",
        "unique_method_name": "timer.pause",
        "suffix_name": null,
        "description": "Pause the timer, getting ticks from a paused timer\nwill continue to return the same time.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "to_pause": {
            "type": "timer",
            "description": "The timer",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "timer",
          "method": "pause",
          "group": "timers",
          "static": "timers",
          "self": "to_pause"
        },
        "signatures": {
          "python": [
            "def pause_timer(to_pause):"
          ],
          "csharp": [
            "public void Timer.Pause();",
            "public static void SplashKit.PauseTimer(Timer toPause);"
          ],
          "cpp": [
            "void pause_timer(timer to_pause)"
          ],
          "pascal": [
            "procedure PauseTimer(toPause: Timer)"
          ]
        }
      },
      {
        "signature": "void reset_timer(string name);",
        "name": "reset_timer",
        "method_name": null,
        "unique_global_name": "reset_timer_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Resets the named timer",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the timer",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "named",
          "group": "timers",
          "static": "timers"
        },
        "signatures": {
          "python": [
            "def reset_timer_named(name):"
          ],
          "csharp": [
            "public static void SplashKit.ResetTimer(string name);"
          ],
          "cpp": [
            "void reset_timer(string name)"
          ],
          "pascal": [
            "procedure ResetTimer(name: String)"
          ]
        }
      },
      {
        "signature": "void reset_timer(timer tmr);",
        "name": "reset_timer",
        "method_name": "reset",
        "unique_global_name": "reset_timer",
        "unique_method_name": "timer.reset",
        "suffix_name": null,
        "description": "Resets the time of a given timer",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "tmr": {
            "type": "timer",
            "description": "The timer",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "timer",
          "method": "reset",
          "group": "timers",
          "static": "timers",
          "self": "tmr"
        },
        "signatures": {
          "python": [
            "def reset_timer(tmr):"
          ],
          "csharp": [
            "public void Timer.Reset();",
            "public static void SplashKit.ResetTimer(Timer tmr);"
          ],
          "cpp": [
            "void reset_timer(timer tmr)"
          ],
          "pascal": [
            "procedure ResetTimer(tmr: Timer)"
          ]
        }
      },
      {
        "signature": "void resume_timer(string name);",
        "name": "resume_timer",
        "method_name": null,
        "unique_global_name": "resume_timer_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Resumes the named timer.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the timer",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "named",
          "group": "timers",
          "static": "timers"
        },
        "signatures": {
          "python": [
            "def resume_timer_named(name):"
          ],
          "csharp": [
            "public static void SplashKit.ResumeTimer(string name);"
          ],
          "cpp": [
            "void resume_timer(string name)"
          ],
          "pascal": [
            "procedure ResumeTimer(name: String)"
          ]
        }
      },
      {
        "signature": "void resume_timer(timer to_resume);",
        "name": "resume_timer",
        "method_name": "resume",
        "unique_global_name": "resume_timer",
        "unique_method_name": "timer.resume",
        "suffix_name": null,
        "description": "Resumes a paused timer.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "to_resume": {
            "type": "timer",
            "description": "The timer",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "timer",
          "method": "resume",
          "group": "timers",
          "static": "timers",
          "self": "to_resume"
        },
        "signatures": {
          "python": [
            "def resume_timer(to_resume):"
          ],
          "csharp": [
            "public void Timer.Resume();",
            "public static void SplashKit.ResumeTimer(Timer toResume);"
          ],
          "cpp": [
            "void resume_timer(timer to_resume)"
          ],
          "pascal": [
            "procedure ResumeTimer(toResume: Timer)"
          ]
        }
      },
      {
        "signature": "void start_timer(string name);",
        "name": "start_timer",
        "method_name": null,
        "unique_global_name": "start_timer_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Start a timer. The timer will then start recording the time that has passed.\nYou can check how long has past since the timer was started using the\n`timer_ticks` function.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the timer",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "named",
          "group": "timers",
          "static": "timers"
        },
        "signatures": {
          "python": [
            "def start_timer_named(name):"
          ],
          "csharp": [
            "public static void SplashKit.StartTimer(string name);"
          ],
          "cpp": [
            "void start_timer(string name)"
          ],
          "pascal": [
            "procedure StartTimer(name: String)"
          ]
        }
      },
      {
        "signature": "void start_timer(timer to_start);",
        "name": "start_timer",
        "method_name": "start",
        "unique_global_name": "start_timer",
        "unique_method_name": "timer.start",
        "suffix_name": null,
        "description": "Start a timer. The timer will then start recording the time that has passed.\nYou can check how long has past since the timer was started using the\n`timer_ticks` function.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "to_start": {
            "type": "timer",
            "description": "The timer",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "timer",
          "method": "start",
          "group": "timers",
          "static": "timers",
          "self": "to_start"
        },
        "signatures": {
          "python": [
            "def start_timer(to_start):"
          ],
          "csharp": [
            "public void Timer.Start();",
            "public static void SplashKit.StartTimer(Timer toStart);"
          ],
          "cpp": [
            "void start_timer(timer to_start)"
          ],
          "pascal": [
            "procedure StartTimer(toStart: Timer)"
          ]
        }
      },
      {
        "signature": "void stop_timer(string name);",
        "name": "stop_timer",
        "method_name": null,
        "unique_global_name": "stop_timer_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Stop the timer. The time is reset to 0 and you must\nrecall start to begin the timer ticking again.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the timer",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "named",
          "group": "timers",
          "static": "timers"
        },
        "signatures": {
          "python": [
            "def stop_timer_named(name):"
          ],
          "csharp": [
            "public static void SplashKit.StopTimer(string name);"
          ],
          "cpp": [
            "void stop_timer(string name)"
          ],
          "pascal": [
            "procedure StopTimer(name: String)"
          ]
        }
      },
      {
        "signature": "void stop_timer(timer to_stop);",
        "name": "stop_timer",
        "method_name": "stop",
        "unique_global_name": "stop_timer",
        "unique_method_name": "timer.stop",
        "suffix_name": null,
        "description": "Stop the timer. The time is reset to 0 and you must\nrecall start to begin the timer ticking again.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "to_stop": {
            "type": "timer",
            "description": "The timer",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "timer",
          "method": "stop",
          "group": "timers",
          "static": "timers",
          "self": "to_stop"
        },
        "signatures": {
          "python": [
            "def stop_timer(to_stop):"
          ],
          "csharp": [
            "public void Timer.Stop();",
            "public static void SplashKit.StopTimer(Timer toStop);"
          ],
          "cpp": [
            "void stop_timer(timer to_stop)"
          ],
          "pascal": [
            "procedure StopTimer(toStop: Timer)"
          ]
        }
      },
      {
        "signature": "timer timer_named(string name);",
        "name": "timer_named",
        "method_name": null,
        "unique_global_name": "timer_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Get the timer created with the indicated name.",
        "brief": null,
        "return": {
          "type": "timer",
          "description": "Returns the timer fetched from SplashKit",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the timer to fetch",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "timers",
          "static": "timers"
        },
        "signatures": {
          "python": [
            "def timer_named(name):"
          ],
          "csharp": [
            "public static Timer SplashKit.TimerNamed(string name);"
          ],
          "cpp": [
            "timer timer_named(string name)"
          ],
          "pascal": [
            "function TimerNamed(name: String): Timer"
          ]
        }
      },
      {
        "signature": "bool timer_paused(string name);",
        "name": "timer_paused",
        "method_name": null,
        "unique_global_name": "timer_paused_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Indicates if the timer is paused.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the timer is paused",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the timer",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "named",
          "group": "timers",
          "static": "timers"
        },
        "signatures": {
          "python": [
            "def timer_paused_named(name):"
          ],
          "csharp": [
            "public static bool SplashKit.TimerPaused(string name);"
          ],
          "cpp": [
            "bool timer_paused(string name)"
          ],
          "pascal": [
            "function TimerPaused(name: String): Boolean"
          ]
        }
      },
      {
        "signature": "bool timer_paused(timer to_get);",
        "name": "timer_paused",
        "method_name": null,
        "unique_global_name": "timer_paused",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Indicates if the timer is paused.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the timer is paused",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "to_get": {
            "type": "timer",
            "description": "The timer",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "timer",
          "getter": "is_paused",
          "group": "timers",
          "static": "timers",
          "self": "to_get"
        },
        "signatures": {
          "python": [
            "def timer_paused(to_get):"
          ],
          "csharp": [
            "public bool Timer.IsPaused { get }",
            "public static bool SplashKit.TimerPaused(Timer toGet);"
          ],
          "cpp": [
            "bool timer_paused(timer to_get)"
          ],
          "pascal": [
            "function TimerPaused(toGet: Timer): Boolean"
          ]
        }
      },
      {
        "signature": "bool timer_started(string name);",
        "name": "timer_started",
        "method_name": null,
        "unique_global_name": "timer_started_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Indicates if the timer is started.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the timer has been started",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the timer",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "named",
          "group": "timers",
          "static": "timers"
        },
        "signatures": {
          "python": [
            "def timer_started_named(name):"
          ],
          "csharp": [
            "public static bool SplashKit.TimerStarted(string name);"
          ],
          "cpp": [
            "bool timer_started(string name)"
          ],
          "pascal": [
            "function TimerStarted(name: String): Boolean"
          ]
        }
      },
      {
        "signature": "bool timer_started(timer to_get);",
        "name": "timer_started",
        "method_name": null,
        "unique_global_name": "timer_started",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Indicates if the timer is started.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the timer has been started",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "to_get": {
            "type": "timer",
            "description": "The timer",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "timer",
          "getter": "is_started",
          "group": "timers",
          "static": "timers",
          "self": "to_get"
        },
        "signatures": {
          "python": [
            "def timer_started(to_get):"
          ],
          "csharp": [
            "public bool Timer.IsStarted { get }",
            "public static bool SplashKit.TimerStarted(Timer toGet);"
          ],
          "cpp": [
            "bool timer_started(timer to_get)"
          ],
          "pascal": [
            "function TimerStarted(toGet: Timer): Boolean"
          ]
        }
      },
      {
        "signature": "unsigned int timer_ticks(string name);",
        "name": "timer_ticks",
        "method_name": null,
        "unique_global_name": "timer_ticks_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Gets the number of ticks (milliseconds) that have passed since the timer\nwas started/reset. When paused the timer's ticks will not advance until\nthe timer is once again resumed.",
        "brief": null,
        "return": {
          "type": "unsigned int",
          "description": "The number of milliseconds that have passed since the\ntimer was created (excluding the time the timer was\npaused)",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the Timer",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "named",
          "group": "timers",
          "static": "timers"
        },
        "signatures": {
          "python": [
            "def timer_ticks_named(name):"
          ],
          "csharp": [
            "public static uint SplashKit.TimerTicks(string name);"
          ],
          "cpp": [
            "unsigned int timer_ticks(string name)"
          ],
          "pascal": [
            "function TimerTicks(name: String): Cardinal"
          ]
        }
      },
      {
        "signature": "unsigned int timer_ticks(timer to_get);",
        "name": "timer_ticks",
        "method_name": null,
        "unique_global_name": "timer_ticks",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Gets the number of ticks (milliseconds) that have passed since the timer\nwas started/reset. When paused the timer's ticks will not advance until\nthe timer is once again resumed.",
        "brief": null,
        "return": {
          "type": "unsigned int",
          "description": "The number of milliseconds that have passed since the\ntimer was created (excluding the time the timer was\npaused)",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "to_get": {
            "type": "timer",
            "description": "The timer",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "timer",
          "getter": "ticks",
          "group": "timers",
          "static": "timers",
          "self": "to_get"
        },
        "signatures": {
          "python": [
            "def timer_ticks(to_get):"
          ],
          "csharp": [
            "public uint Timer.Ticks { get }",
            "public static uint SplashKit.TimerTicks(Timer toGet);"
          ],
          "cpp": [
            "unsigned int timer_ticks(timer to_get)"
          ],
          "pascal": [
            "function TimerTicks(toGet: Timer): Cardinal"
          ]
        }
      }
    ],
    "typedefs": [
      {
        "signature": "typedef struct _timer_data *timer;",
        "name": "timer",
        "description": "Timers in SplashKit can be used to track the passing of time. In general\nyou will create a timer, start it, then use it to track time by asking\nfor the timer's ticks (milliseconds).",
        "brief": null,
        "attributes": {
          "class": "timer",
          "group": "timers",
          "static": "timers"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      }
    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "types": {
    "brief": "SplashKit Types simplifies data type creation and management for streamlined programming.",
    "description": "",
    "functions": [

    ],
    "typedefs": [
      {
        "signature": "typedef struct _animation_data *animation;",
        "name": "animation",
        "description": "Animations are created from an `animation_script`. Each animation tracks\nthe current frame for one animation sequence. You update this animation\nand draw with it. This allows you to have the one script being used to\ncreate lots of individual animations, where each animation is potentially\nat a different frame.",
        "brief": null,
        "attributes": {
          "class": "animation",
          "group": "types"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      },
      {
        "signature": "typedef struct _animation_script_data *animation_script;",
        "name": "animation_script",
        "description": "Animations in SplashKit are controlled by an animation script. This\nscript tells SplashKit how long to play each frame, which cell in the\nbitmap the frame relates to, and which is the next frame. You load these\nscripts from file and can then use them to create animations that are\nused with the drawing options when you draw a bitmap.",
        "brief": null,
        "attributes": {
          "class": "animation_script",
          "group": "types"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      },
      {
        "signature": "typedef struct _bitmap_data *bitmap;",
        "name": "bitmap",
        "description": "Bitmaps represent image resources in SplashKit. You can load these from\nfile, download them from the internet, or create and draw them yourself.\nOnce created or loaded, you can draw the bitmap and you can draw onto\nthe bitmap.",
        "brief": null,
        "attributes": {
          "class": "bitmap",
          "group": "types"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      },
      {
        "signature": "typedef struct sk_display *display;",
        "name": "display",
        "description": "Each display value represents a physical display attached to the\ncomputer. You can use this to query the displays position and size.",
        "brief": null,
        "attributes": {
          "class": "display",
          "no_destructor": true,
          "group": "types"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      },
      {
        "signature": "typedef struct sk_font_data *font;",
        "name": "font",
        "description": "Fonts are used to draw text in SplashKit. These can be loaded from file\nor downloaded from the internet. Once you have a font you can use the\ndraw text procedures to use that font when drawing.",
        "brief": null,
        "attributes": {
          "class": "font",
          "group": "types"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      }
    ],
    "structs": [
      {
        "signature": "struct circle {point_2d center;double radius;};",
        "name": "circle",
        "description": "Circles have a center point and a radius. This means that, unlike shapes\nlike the `rectangle`, the circle extends out both left and right, and up\nand down from the point you position it at.",
        "brief": null,
        "fields": {
          "center": {
            "type": "point_2d",
            "description": "The center point of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "radius": {
            "type": "double",
            "description": "The radius of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "types"
        },
        "properties": {
        },
        "constructors": [

        ],
        "methods": [
          {
            "signature": "void draw_circle(color clr,const circle &c);",
            "name": "draw_circle",
            "method_name": "draw",
            "unique_global_name": "draw_circle_record",
            "unique_method_name": "circle.draw_record",
            "suffix_name": null,
            "description": "Draw a circle on the current window. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
            "brief": null,
            "return": {
              "type": "void",
              "description": null,
              "is_pointer": false,
              "is_reference": false,
              "is_vector": false,
              "type_parameter": null
            },
            "parameters": {
              "clr": {
                "type": "color",
                "description": "The color of the circle",
                "is_pointer": false,
                "is_const": false,
                "is_reference": false,
                "is_array": false,
                "array_dimension_sizes": [

                ],
                "is_vector": false,
                "type_parameter": null
              },
              "c": {
                "type": "circle",
                "description": "The circle being drawn",
                "is_pointer": false,
                "is_const": true,
                "is_reference": true,
                "is_array": false,
                "array_dimension_sizes": [

                ],
                "is_vector": false,
                "type_parameter": null
              }
            },
            "attributes": {
              "class": "circle",
              "method": "draw",
              "self": "c",
              "suffix": "record",
              "group": "graphics"
            },
            "signatures": {
              "python": [
                "def draw_circle_record(clr, c):"
              ],
              "csharp": [
                "public void Circle.Draw(Color clr);",
                "public static void SplashKit.DrawCircle(Color clr, Circle c);"
              ],
              "cpp": [
                "void draw_circle(color clr, const circle &c)"
              ],
              "pascal": [
                "procedure DrawCircle(clr: Color; const c: Circle)"
              ]
            }
          },
          {
            "signature": "void draw_circle(color clr,const circle &c,drawing_options opts);",
            "name": "draw_circle",
            "method_name": "draw",
            "unique_global_name": "draw_circle_record_with_options",
            "unique_method_name": "circle.draw_record_with_options",
            "suffix_name": null,
            "description": "Draw a circle with the provided drawing options, which may include options related to\nthe drawing destination.",
            "brief": null,
            "return": {
              "type": "void",
              "description": null,
              "is_pointer": false,
              "is_reference": false,
              "is_vector": false,
              "type_parameter": null
            },
            "parameters": {
              "clr": {
                "type": "color",
                "description": "The color of the circle",
                "is_pointer": false,
                "is_const": false,
                "is_reference": false,
                "is_array": false,
                "array_dimension_sizes": [

                ],
                "is_vector": false,
                "type_parameter": null
              },
              "c": {
                "type": "circle",
                "description": "The circle being drawn",
                "is_pointer": false,
                "is_const": true,
                "is_reference": true,
                "is_array": false,
                "array_dimension_sizes": [

                ],
                "is_vector": false,
                "type_parameter": null
              },
              "opts": {
                "type": "drawing_options",
                "description": "Drawing options to configure the drawing operation",
                "is_pointer": false,
                "is_const": false,
                "is_reference": false,
                "is_array": false,
                "array_dimension_sizes": [

                ],
                "is_vector": false,
                "type_parameter": null
              }
            },
            "attributes": {
              "class": "circle",
              "method": "draw",
              "self": "c",
              "suffix": "record_with_options",
              "group": "graphics"
            },
            "signatures": {
              "python": [
                "def draw_circle_record_with_options(clr, c, opts):"
              ],
              "csharp": [
                "public void Circle.Draw(Color clr, DrawingOptions opts);",
                "public static void SplashKit.DrawCircle(Color clr, Circle c, DrawingOptions opts);"
              ],
              "cpp": [
                "void draw_circle(color clr, const circle &c, drawing_options opts)"
              ],
              "pascal": [
                "procedure DrawCircle(clr: Color; const c: Circle; opts: DrawingOptions)"
              ]
            }
          },
          {
            "signature": "void fill_circle(color clr,const circle &c);",
            "name": "fill_circle",
            "method_name": "fill",
            "unique_global_name": "fill_circle_record",
            "unique_method_name": "circle.fill_record",
            "suffix_name": null,
            "description": "Draw a circle on the current window. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
            "brief": null,
            "return": {
              "type": "void",
              "description": null,
              "is_pointer": false,
              "is_reference": false,
              "is_vector": false,
              "type_parameter": null
            },
            "parameters": {
              "clr": {
                "type": "color",
                "description": "The color of the circle",
                "is_pointer": false,
                "is_const": false,
                "is_reference": false,
                "is_array": false,
                "array_dimension_sizes": [

                ],
                "is_vector": false,
                "type_parameter": null
              },
              "c": {
                "type": "circle",
                "description": "The circle being drawn",
                "is_pointer": false,
                "is_const": true,
                "is_reference": true,
                "is_array": false,
                "array_dimension_sizes": [

                ],
                "is_vector": false,
                "type_parameter": null
              }
            },
            "attributes": {
              "class": "circle",
              "method": "fill",
              "self": "c",
              "suffix": "record",
              "group": "graphics"
            },
            "signatures": {
              "python": [
                "def fill_circle_record(clr, c):"
              ],
              "csharp": [
                "public void Circle.Fill(Color clr);",
                "public static void SplashKit.FillCircle(Color clr, Circle c);"
              ],
              "cpp": [
                "void fill_circle(color clr, const circle &c)"
              ],
              "pascal": [
                "procedure FillCircle(clr: Color; const c: Circle)"
              ]
            }
          },
          {
            "signature": "void fill_circle(color clr,const circle &c,drawing_options opts);",
            "name": "fill_circle",
            "method_name": "fill",
            "unique_global_name": "fill_circle_record_with_options",
            "unique_method_name": "circle.fill_record_with_options",
            "suffix_name": null,
            "description": "Fill a circle with the provided drawing options, which may include options related to\nthe drawing destination.",
            "brief": null,
            "return": {
              "type": "void",
              "description": null,
              "is_pointer": false,
              "is_reference": false,
              "is_vector": false,
              "type_parameter": null
            },
            "parameters": {
              "clr": {
                "type": "color",
                "description": "The color of the circle",
                "is_pointer": false,
                "is_const": false,
                "is_reference": false,
                "is_array": false,
                "array_dimension_sizes": [

                ],
                "is_vector": false,
                "type_parameter": null
              },
              "c": {
                "type": "circle",
                "description": "The circle being drawn",
                "is_pointer": false,
                "is_const": true,
                "is_reference": true,
                "is_array": false,
                "array_dimension_sizes": [

                ],
                "is_vector": false,
                "type_parameter": null
              },
              "opts": {
                "type": "drawing_options",
                "description": "Drawing options to configure the drawing operation",
                "is_pointer": false,
                "is_const": false,
                "is_reference": false,
                "is_array": false,
                "array_dimension_sizes": [

                ],
                "is_vector": false,
                "type_parameter": null
              }
            },
            "attributes": {
              "class": "circle",
              "method": "fill",
              "self": "c",
              "suffix": "record_with_options",
              "group": "graphics"
            },
            "signatures": {
              "python": [
                "def fill_circle_record_with_options(clr, c, opts):"
              ],
              "csharp": [
                "public void Circle.Fill(Color clr, DrawingOptions opts);",
                "public static void SplashKit.FillCircle(Color clr, Circle c, DrawingOptions opts);"
              ],
              "cpp": [
                "void fill_circle(color clr, const circle &c, drawing_options opts)"
              ],
              "pascal": [
                "procedure FillCircle(clr: Color; const c: Circle; opts: DrawingOptions)"
              ]
            }
          }
        ],
        "is_alias": false,
        "is_struct": true
      },
      {
        "signature": "struct color {float r, g, b, a;};",
        "name": "color",
        "description": "Colors can be used when drawing shapes and clearing surfaces. Color in\nsplashkit does include a alpha value used for opacity, which allows you\nto have partially transparent colors.",
        "brief": null,
        "fields": {
          "r": {
            "type": "float",
            "description": "The red component of the color (between 0 and 1.0)",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "g": {
            "type": "float",
            "description": "The green component of the color (between 0 and 1.0)",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "b": {
            "type": "float",
            "description": "The blue component of the color (between 0 and 1.0)",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "a": {
            "type": "float",
            "description": "The alpha component of the color (between 0 and 1.0)",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "types"
        },
        "properties": {
          "alice_blue": {
            "getter": {
              "signature": "color color_alice_blue();",
              "name": "color_alice_blue",
              "method_name": null,
              "unique_global_name": "color_alice_blue",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `alice_blue`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `alice_blue`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "alice_blue",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_alice_blue():"
                ],
                "csharp": [
                  "public static Color Color.AliceBlue { get }",
                  "public static Color SplashKit.ColorAliceBlue();"
                ],
                "cpp": [
                  "#define COLOR_ALICE_BLUE",
                  "color color_alice_blue()"
                ],
                "pascal": [
                  "function ColorAliceBlue(): Color"
                ]
              }
            },
            "setter": null
          },
          "antique_white": {
            "getter": {
              "signature": "color color_antique_white();",
              "name": "color_antique_white",
              "method_name": null,
              "unique_global_name": "color_antique_white",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `antique_white`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `antique_white`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "antique_white",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_antique_white():"
                ],
                "csharp": [
                  "public static Color Color.AntiqueWhite { get }",
                  "public static Color SplashKit.ColorAntiqueWhite();"
                ],
                "cpp": [
                  "#define COLOR_ANTIQUE_WHITE",
                  "color color_antique_white()"
                ],
                "pascal": [
                  "function ColorAntiqueWhite(): Color"
                ]
              }
            },
            "setter": null
          },
          "aqua": {
            "getter": {
              "signature": "color color_aqua();",
              "name": "color_aqua",
              "method_name": null,
              "unique_global_name": "color_aqua",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `aqua`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `aqua`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "aqua",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_aqua():"
                ],
                "csharp": [
                  "public static Color Color.Aqua { get }",
                  "public static Color SplashKit.ColorAqua();"
                ],
                "cpp": [
                  "#define COLOR_AQUA",
                  "color color_aqua()"
                ],
                "pascal": [
                  "function ColorAqua(): Color"
                ]
              }
            },
            "setter": null
          },
          "aquamarine": {
            "getter": {
              "signature": "color color_aquamarine();",
              "name": "color_aquamarine",
              "method_name": null,
              "unique_global_name": "color_aquamarine",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `aquamarine`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `aquamarine`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "aquamarine",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_aquamarine():"
                ],
                "csharp": [
                  "public static Color Color.Aquamarine { get }",
                  "public static Color SplashKit.ColorAquamarine();"
                ],
                "cpp": [
                  "#define COLOR_AQUAMARINE",
                  "color color_aquamarine()"
                ],
                "pascal": [
                  "function ColorAquamarine(): Color"
                ]
              }
            },
            "setter": null
          },
          "azure": {
            "getter": {
              "signature": "color color_azure();",
              "name": "color_azure",
              "method_name": null,
              "unique_global_name": "color_azure",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `azure`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `azure`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "azure",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_azure():"
                ],
                "csharp": [
                  "public static Color Color.Azure { get }",
                  "public static Color SplashKit.ColorAzure();"
                ],
                "cpp": [
                  "#define COLOR_AZURE",
                  "color color_azure()"
                ],
                "pascal": [
                  "function ColorAzure(): Color"
                ]
              }
            },
            "setter": null
          },
          "beige": {
            "getter": {
              "signature": "color color_beige();",
              "name": "color_beige",
              "method_name": null,
              "unique_global_name": "color_beige",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `beige`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `beige`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "beige",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_beige():"
                ],
                "csharp": [
                  "public static Color Color.Beige { get }",
                  "public static Color SplashKit.ColorBeige();"
                ],
                "cpp": [
                  "#define COLOR_BEIGE",
                  "color color_beige()"
                ],
                "pascal": [
                  "function ColorBeige(): Color"
                ]
              }
            },
            "setter": null
          },
          "bisque": {
            "getter": {
              "signature": "color color_bisque();",
              "name": "color_bisque",
              "method_name": null,
              "unique_global_name": "color_bisque",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `bisque`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `bisque`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "bisque",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_bisque():"
                ],
                "csharp": [
                  "public static Color Color.Bisque { get }",
                  "public static Color SplashKit.ColorBisque();"
                ],
                "cpp": [
                  "#define COLOR_BISQUE",
                  "color color_bisque()"
                ],
                "pascal": [
                  "function ColorBisque(): Color"
                ]
              }
            },
            "setter": null
          },
          "black": {
            "getter": {
              "signature": "color color_black();",
              "name": "color_black",
              "method_name": null,
              "unique_global_name": "color_black",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `black`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `black`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "black",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_black():"
                ],
                "csharp": [
                  "public static Color Color.Black { get }",
                  "public static Color SplashKit.ColorBlack();"
                ],
                "cpp": [
                  "#define COLOR_BLACK",
                  "color color_black()"
                ],
                "pascal": [
                  "function ColorBlack(): Color"
                ]
              }
            },
            "setter": null
          },
          "blanched_almond": {
            "getter": {
              "signature": "color color_blanched_almond();",
              "name": "color_blanched_almond",
              "method_name": null,
              "unique_global_name": "color_blanched_almond",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `blanched_almond`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `blanched_almond`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "blanched_almond",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_blanched_almond():"
                ],
                "csharp": [
                  "public static Color Color.BlanchedAlmond { get }",
                  "public static Color SplashKit.ColorBlanchedAlmond();"
                ],
                "cpp": [
                  "#define COLOR_BLANCHED_ALMOND",
                  "color color_blanched_almond()"
                ],
                "pascal": [
                  "function ColorBlanchedAlmond(): Color"
                ]
              }
            },
            "setter": null
          },
          "blue": {
            "getter": {
              "signature": "color color_blue();",
              "name": "color_blue",
              "method_name": null,
              "unique_global_name": "color_blue",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `blue`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `blue`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "blue",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_blue():"
                ],
                "csharp": [
                  "public static Color Color.Blue { get }",
                  "public static Color SplashKit.ColorBlue();"
                ],
                "cpp": [
                  "#define COLOR_BLUE",
                  "color color_blue()"
                ],
                "pascal": [
                  "function ColorBlue(): Color"
                ]
              }
            },
            "setter": null
          },
          "blue_violet": {
            "getter": {
              "signature": "color color_blue_violet();",
              "name": "color_blue_violet",
              "method_name": null,
              "unique_global_name": "color_blue_violet",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `blue_violet`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `blue_violet`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "blue_violet",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_blue_violet():"
                ],
                "csharp": [
                  "public static Color Color.BlueViolet { get }",
                  "public static Color SplashKit.ColorBlueViolet();"
                ],
                "cpp": [
                  "#define COLOR_BLUE_VIOLET",
                  "color color_blue_violet()"
                ],
                "pascal": [
                  "function ColorBlueViolet(): Color"
                ]
              }
            },
            "setter": null
          },
          "bright_green": {
            "getter": {
              "signature": "color color_bright_green();",
              "name": "color_bright_green",
              "method_name": null,
              "unique_global_name": "color_bright_green",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `bright_green`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `bright_green`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "bright_green",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_bright_green():"
                ],
                "csharp": [
                  "public static Color Color.BrightGreen { get }",
                  "public static Color SplashKit.ColorBrightGreen();"
                ],
                "cpp": [
                  "#define COLOR_BRIGHT_GREEN",
                  "color color_bright_green()"
                ],
                "pascal": [
                  "function ColorBrightGreen(): Color"
                ]
              }
            },
            "setter": null
          },
          "brown": {
            "getter": {
              "signature": "color color_brown();",
              "name": "color_brown",
              "method_name": null,
              "unique_global_name": "color_brown",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `brown`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `brown`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "brown",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_brown():"
                ],
                "csharp": [
                  "public static Color Color.Brown { get }",
                  "public static Color SplashKit.ColorBrown();"
                ],
                "cpp": [
                  "#define COLOR_BROWN",
                  "color color_brown()"
                ],
                "pascal": [
                  "function ColorBrown(): Color"
                ]
              }
            },
            "setter": null
          },
          "burly_wood": {
            "getter": {
              "signature": "color color_burly_wood();",
              "name": "color_burly_wood",
              "method_name": null,
              "unique_global_name": "color_burly_wood",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `burly_wood`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `burly_wood`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "burly_wood",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_burly_wood():"
                ],
                "csharp": [
                  "public static Color Color.BurlyWood { get }",
                  "public static Color SplashKit.ColorBurlyWood();"
                ],
                "cpp": [
                  "#define COLOR_BURLY_WOOD",
                  "color color_burly_wood()"
                ],
                "pascal": [
                  "function ColorBurlyWood(): Color"
                ]
              }
            },
            "setter": null
          },
          "cadet_blue": {
            "getter": {
              "signature": "color color_cadet_blue();",
              "name": "color_cadet_blue",
              "method_name": null,
              "unique_global_name": "color_cadet_blue",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `cadet_blue`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `cadet_blue`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "cadet_blue",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_cadet_blue():"
                ],
                "csharp": [
                  "public static Color Color.CadetBlue { get }",
                  "public static Color SplashKit.ColorCadetBlue();"
                ],
                "cpp": [
                  "#define COLOR_CADET_BLUE",
                  "color color_cadet_blue()"
                ],
                "pascal": [
                  "function ColorCadetBlue(): Color"
                ]
              }
            },
            "setter": null
          },
          "chartreuse": {
            "getter": {
              "signature": "color color_chartreuse();",
              "name": "color_chartreuse",
              "method_name": null,
              "unique_global_name": "color_chartreuse",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `chartreuse`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `chartreuse`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "chartreuse",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_chartreuse():"
                ],
                "csharp": [
                  "public static Color Color.Chartreuse { get }",
                  "public static Color SplashKit.ColorChartreuse();"
                ],
                "cpp": [
                  "#define COLOR_CHARTREUSE",
                  "color color_chartreuse()"
                ],
                "pascal": [
                  "function ColorChartreuse(): Color"
                ]
              }
            },
            "setter": null
          },
          "chocolate": {
            "getter": {
              "signature": "color color_chocolate();",
              "name": "color_chocolate",
              "method_name": null,
              "unique_global_name": "color_chocolate",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `chocolate`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `chocolate`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "chocolate",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_chocolate():"
                ],
                "csharp": [
                  "public static Color Color.Chocolate { get }",
                  "public static Color SplashKit.ColorChocolate();"
                ],
                "cpp": [
                  "#define COLOR_CHOCOLATE",
                  "color color_chocolate()"
                ],
                "pascal": [
                  "function ColorChocolate(): Color"
                ]
              }
            },
            "setter": null
          },
          "coral": {
            "getter": {
              "signature": "color color_coral();",
              "name": "color_coral",
              "method_name": null,
              "unique_global_name": "color_coral",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `coral`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `coral`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "coral",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_coral():"
                ],
                "csharp": [
                  "public static Color Color.Coral { get }",
                  "public static Color SplashKit.ColorCoral();"
                ],
                "cpp": [
                  "#define COLOR_CORAL",
                  "color color_coral()"
                ],
                "pascal": [
                  "function ColorCoral(): Color"
                ]
              }
            },
            "setter": null
          },
          "cornflower_blue": {
            "getter": {
              "signature": "color color_cornflower_blue();",
              "name": "color_cornflower_blue",
              "method_name": null,
              "unique_global_name": "color_cornflower_blue",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `cornflower_blue`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `cornflower_blue`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "cornflower_blue",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_cornflower_blue():"
                ],
                "csharp": [
                  "public static Color Color.CornflowerBlue { get }",
                  "public static Color SplashKit.ColorCornflowerBlue();"
                ],
                "cpp": [
                  "#define COLOR_CORNFLOWER_BLUE",
                  "color color_cornflower_blue()"
                ],
                "pascal": [
                  "function ColorCornflowerBlue(): Color"
                ]
              }
            },
            "setter": null
          },
          "cornsilk": {
            "getter": {
              "signature": "color color_cornsilk();",
              "name": "color_cornsilk",
              "method_name": null,
              "unique_global_name": "color_cornsilk",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `cornsilk`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `cornsilk`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "cornsilk",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_cornsilk():"
                ],
                "csharp": [
                  "public static Color Color.Cornsilk { get }",
                  "public static Color SplashKit.ColorCornsilk();"
                ],
                "cpp": [
                  "#define COLOR_CORNSILK",
                  "color color_cornsilk()"
                ],
                "pascal": [
                  "function ColorCornsilk(): Color"
                ]
              }
            },
            "setter": null
          },
          "crimson": {
            "getter": {
              "signature": "color color_crimson();",
              "name": "color_crimson",
              "method_name": null,
              "unique_global_name": "color_crimson",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `crimson`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `crimson`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "crimson",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_crimson():"
                ],
                "csharp": [
                  "public static Color Color.Crimson { get }",
                  "public static Color SplashKit.ColorCrimson();"
                ],
                "cpp": [
                  "#define COLOR_CRIMSON",
                  "color color_crimson()"
                ],
                "pascal": [
                  "function ColorCrimson(): Color"
                ]
              }
            },
            "setter": null
          },
          "cyan": {
            "getter": {
              "signature": "color color_cyan();",
              "name": "color_cyan",
              "method_name": null,
              "unique_global_name": "color_cyan",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `cyan`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `cyan`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "cyan",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_cyan():"
                ],
                "csharp": [
                  "public static Color Color.Cyan { get }",
                  "public static Color SplashKit.ColorCyan();"
                ],
                "cpp": [
                  "#define COLOR_CYAN",
                  "color color_cyan()"
                ],
                "pascal": [
                  "function ColorCyan(): Color"
                ]
              }
            },
            "setter": null
          },
          "dark_blue": {
            "getter": {
              "signature": "color color_dark_blue();",
              "name": "color_dark_blue",
              "method_name": null,
              "unique_global_name": "color_dark_blue",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `dark_blue`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `dark_blue`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "dark_blue",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_dark_blue():"
                ],
                "csharp": [
                  "public static Color Color.DarkBlue { get }",
                  "public static Color SplashKit.ColorDarkBlue();"
                ],
                "cpp": [
                  "#define COLOR_DARK_BLUE",
                  "color color_dark_blue()"
                ],
                "pascal": [
                  "function ColorDarkBlue(): Color"
                ]
              }
            },
            "setter": null
          },
          "dark_cyan": {
            "getter": {
              "signature": "color color_dark_cyan();",
              "name": "color_dark_cyan",
              "method_name": null,
              "unique_global_name": "color_dark_cyan",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `dark_cyan`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `dark_cyan`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "dark_cyan",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_dark_cyan():"
                ],
                "csharp": [
                  "public static Color Color.DarkCyan { get }",
                  "public static Color SplashKit.ColorDarkCyan();"
                ],
                "cpp": [
                  "#define COLOR_DARK_CYAN",
                  "color color_dark_cyan()"
                ],
                "pascal": [
                  "function ColorDarkCyan(): Color"
                ]
              }
            },
            "setter": null
          },
          "dark_goldenrod": {
            "getter": {
              "signature": "color color_dark_goldenrod();",
              "name": "color_dark_goldenrod",
              "method_name": null,
              "unique_global_name": "color_dark_goldenrod",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `dark_goldenrod`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `dark_goldenrod`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "dark_goldenrod",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_dark_goldenrod():"
                ],
                "csharp": [
                  "public static Color Color.DarkGoldenrod { get }",
                  "public static Color SplashKit.ColorDarkGoldenrod();"
                ],
                "cpp": [
                  "#define COLOR_DARK_GOLDENROD",
                  "color color_dark_goldenrod()"
                ],
                "pascal": [
                  "function ColorDarkGoldenrod(): Color"
                ]
              }
            },
            "setter": null
          },
          "dark_gray": {
            "getter": {
              "signature": "color color_dark_gray();",
              "name": "color_dark_gray",
              "method_name": null,
              "unique_global_name": "color_dark_gray",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `dark_gray`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `dark_gray`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "dark_gray",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_dark_gray():"
                ],
                "csharp": [
                  "public static Color Color.DarkGray { get }",
                  "public static Color SplashKit.ColorDarkGray();"
                ],
                "cpp": [
                  "#define COLOR_DARK_GRAY",
                  "color color_dark_gray()"
                ],
                "pascal": [
                  "function ColorDarkGray(): Color"
                ]
              }
            },
            "setter": null
          },
          "dark_green": {
            "getter": {
              "signature": "color color_dark_green();",
              "name": "color_dark_green",
              "method_name": null,
              "unique_global_name": "color_dark_green",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `dark_green`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `dark_green`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "dark_green",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_dark_green():"
                ],
                "csharp": [
                  "public static Color Color.DarkGreen { get }",
                  "public static Color SplashKit.ColorDarkGreen();"
                ],
                "cpp": [
                  "#define COLOR_DARK_GREEN",
                  "color color_dark_green()"
                ],
                "pascal": [
                  "function ColorDarkGreen(): Color"
                ]
              }
            },
            "setter": null
          },
          "dark_khaki": {
            "getter": {
              "signature": "color color_dark_khaki();",
              "name": "color_dark_khaki",
              "method_name": null,
              "unique_global_name": "color_dark_khaki",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `dark_khaki`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `dark_khaki`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "dark_khaki",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_dark_khaki():"
                ],
                "csharp": [
                  "public static Color Color.DarkKhaki { get }",
                  "public static Color SplashKit.ColorDarkKhaki();"
                ],
                "cpp": [
                  "#define COLOR_DARK_KHAKI",
                  "color color_dark_khaki()"
                ],
                "pascal": [
                  "function ColorDarkKhaki(): Color"
                ]
              }
            },
            "setter": null
          },
          "dark_magenta": {
            "getter": {
              "signature": "color color_dark_magenta();",
              "name": "color_dark_magenta",
              "method_name": null,
              "unique_global_name": "color_dark_magenta",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `dark_magenta`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `dark_magenta`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "dark_magenta",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_dark_magenta():"
                ],
                "csharp": [
                  "public static Color Color.DarkMagenta { get }",
                  "public static Color SplashKit.ColorDarkMagenta();"
                ],
                "cpp": [
                  "#define COLOR_DARK_MAGENTA",
                  "color color_dark_magenta()"
                ],
                "pascal": [
                  "function ColorDarkMagenta(): Color"
                ]
              }
            },
            "setter": null
          },
          "dark_olive_green": {
            "getter": {
              "signature": "color color_dark_olive_green();",
              "name": "color_dark_olive_green",
              "method_name": null,
              "unique_global_name": "color_dark_olive_green",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `dark_olive_green`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `dark_olive_green`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "dark_olive_green",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_dark_olive_green():"
                ],
                "csharp": [
                  "public static Color Color.DarkOliveGreen { get }",
                  "public static Color SplashKit.ColorDarkOliveGreen();"
                ],
                "cpp": [
                  "#define COLOR_DARK_OLIVE_GREEN",
                  "color color_dark_olive_green()"
                ],
                "pascal": [
                  "function ColorDarkOliveGreen(): Color"
                ]
              }
            },
            "setter": null
          },
          "dark_orange": {
            "getter": {
              "signature": "color color_dark_orange();",
              "name": "color_dark_orange",
              "method_name": null,
              "unique_global_name": "color_dark_orange",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `dark_orange`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `dark_orange`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "dark_orange",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_dark_orange():"
                ],
                "csharp": [
                  "public static Color Color.DarkOrange { get }",
                  "public static Color SplashKit.ColorDarkOrange();"
                ],
                "cpp": [
                  "#define COLOR_DARK_ORANGE",
                  "color color_dark_orange()"
                ],
                "pascal": [
                  "function ColorDarkOrange(): Color"
                ]
              }
            },
            "setter": null
          },
          "dark_orchid": {
            "getter": {
              "signature": "color color_dark_orchid();",
              "name": "color_dark_orchid",
              "method_name": null,
              "unique_global_name": "color_dark_orchid",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `dark_orchid`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `dark_orchid`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "dark_orchid",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_dark_orchid():"
                ],
                "csharp": [
                  "public static Color Color.DarkOrchid { get }",
                  "public static Color SplashKit.ColorDarkOrchid();"
                ],
                "cpp": [
                  "#define COLOR_DARK_ORCHID",
                  "color color_dark_orchid()"
                ],
                "pascal": [
                  "function ColorDarkOrchid(): Color"
                ]
              }
            },
            "setter": null
          },
          "dark_red": {
            "getter": {
              "signature": "color color_dark_red();",
              "name": "color_dark_red",
              "method_name": null,
              "unique_global_name": "color_dark_red",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `dark_red`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `dark_red`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "dark_red",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_dark_red():"
                ],
                "csharp": [
                  "public static Color Color.DarkRed { get }",
                  "public static Color SplashKit.ColorDarkRed();"
                ],
                "cpp": [
                  "#define COLOR_DARK_RED",
                  "color color_dark_red()"
                ],
                "pascal": [
                  "function ColorDarkRed(): Color"
                ]
              }
            },
            "setter": null
          },
          "dark_salmon": {
            "getter": {
              "signature": "color color_dark_salmon();",
              "name": "color_dark_salmon",
              "method_name": null,
              "unique_global_name": "color_dark_salmon",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `dark_salmon`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `dark_salmon`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "dark_salmon",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_dark_salmon():"
                ],
                "csharp": [
                  "public static Color Color.DarkSalmon { get }",
                  "public static Color SplashKit.ColorDarkSalmon();"
                ],
                "cpp": [
                  "#define COLOR_DARK_SALMON",
                  "color color_dark_salmon()"
                ],
                "pascal": [
                  "function ColorDarkSalmon(): Color"
                ]
              }
            },
            "setter": null
          },
          "dark_sea_green": {
            "getter": {
              "signature": "color color_dark_sea_green();",
              "name": "color_dark_sea_green",
              "method_name": null,
              "unique_global_name": "color_dark_sea_green",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `dark_sea_green`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `dark_sea_green`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "dark_sea_green",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_dark_sea_green():"
                ],
                "csharp": [
                  "public static Color Color.DarkSeaGreen { get }",
                  "public static Color SplashKit.ColorDarkSeaGreen();"
                ],
                "cpp": [
                  "#define COLOR_DARK_SEA_GREEN",
                  "color color_dark_sea_green()"
                ],
                "pascal": [
                  "function ColorDarkSeaGreen(): Color"
                ]
              }
            },
            "setter": null
          },
          "dark_slate_blue": {
            "getter": {
              "signature": "color color_dark_slate_blue();",
              "name": "color_dark_slate_blue",
              "method_name": null,
              "unique_global_name": "color_dark_slate_blue",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `dark_slate_blue`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `dark_slate_blue`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "dark_slate_blue",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_dark_slate_blue():"
                ],
                "csharp": [
                  "public static Color Color.DarkSlateBlue { get }",
                  "public static Color SplashKit.ColorDarkSlateBlue();"
                ],
                "cpp": [
                  "#define COLOR_DARK_SLATE_BLUE",
                  "color color_dark_slate_blue()"
                ],
                "pascal": [
                  "function ColorDarkSlateBlue(): Color"
                ]
              }
            },
            "setter": null
          },
          "dark_slate_gray": {
            "getter": {
              "signature": "color color_dark_slate_gray();",
              "name": "color_dark_slate_gray",
              "method_name": null,
              "unique_global_name": "color_dark_slate_gray",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `dark_slate_gray`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `dark_slate_gray`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "dark_slate_gray",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_dark_slate_gray():"
                ],
                "csharp": [
                  "public static Color Color.DarkSlateGray { get }",
                  "public static Color SplashKit.ColorDarkSlateGray();"
                ],
                "cpp": [
                  "#define COLOR_DARK_SLATE_GRAY",
                  "color color_dark_slate_gray()"
                ],
                "pascal": [
                  "function ColorDarkSlateGray(): Color"
                ]
              }
            },
            "setter": null
          },
          "dark_turquoise": {
            "getter": {
              "signature": "color color_dark_turquoise();",
              "name": "color_dark_turquoise",
              "method_name": null,
              "unique_global_name": "color_dark_turquoise",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `dark_turquoise`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `dark_turquoise`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "dark_turquoise",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_dark_turquoise():"
                ],
                "csharp": [
                  "public static Color Color.DarkTurquoise { get }",
                  "public static Color SplashKit.ColorDarkTurquoise();"
                ],
                "cpp": [
                  "#define COLOR_DARK_TURQUOISE",
                  "color color_dark_turquoise()"
                ],
                "pascal": [
                  "function ColorDarkTurquoise(): Color"
                ]
              }
            },
            "setter": null
          },
          "dark_violet": {
            "getter": {
              "signature": "color color_dark_violet();",
              "name": "color_dark_violet",
              "method_name": null,
              "unique_global_name": "color_dark_violet",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `dark_violet`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `dark_violet`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "dark_violet",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_dark_violet():"
                ],
                "csharp": [
                  "public static Color Color.DarkViolet { get }",
                  "public static Color SplashKit.ColorDarkViolet();"
                ],
                "cpp": [
                  "#define COLOR_DARK_VIOLET",
                  "color color_dark_violet()"
                ],
                "pascal": [
                  "function ColorDarkViolet(): Color"
                ]
              }
            },
            "setter": null
          },
          "deep_pink": {
            "getter": {
              "signature": "color color_deep_pink();",
              "name": "color_deep_pink",
              "method_name": null,
              "unique_global_name": "color_deep_pink",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `deep_pink`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `deep_pink`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "deep_pink",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_deep_pink():"
                ],
                "csharp": [
                  "public static Color Color.DeepPink { get }",
                  "public static Color SplashKit.ColorDeepPink();"
                ],
                "cpp": [
                  "#define COLOR_DEEP_PINK",
                  "color color_deep_pink()"
                ],
                "pascal": [
                  "function ColorDeepPink(): Color"
                ]
              }
            },
            "setter": null
          },
          "deep_sky_blue": {
            "getter": {
              "signature": "color color_deep_sky_blue();",
              "name": "color_deep_sky_blue",
              "method_name": null,
              "unique_global_name": "color_deep_sky_blue",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `deep_sky_blue`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `deep_sky_blue`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "deep_sky_blue",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_deep_sky_blue():"
                ],
                "csharp": [
                  "public static Color Color.DeepSkyBlue { get }",
                  "public static Color SplashKit.ColorDeepSkyBlue();"
                ],
                "cpp": [
                  "#define COLOR_DEEP_SKY_BLUE",
                  "color color_deep_sky_blue()"
                ],
                "pascal": [
                  "function ColorDeepSkyBlue(): Color"
                ]
              }
            },
            "setter": null
          },
          "dim_gray": {
            "getter": {
              "signature": "color color_dim_gray();",
              "name": "color_dim_gray",
              "method_name": null,
              "unique_global_name": "color_dim_gray",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `dim_gray`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `dim_gray`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "dim_gray",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_dim_gray():"
                ],
                "csharp": [
                  "public static Color Color.DimGray { get }",
                  "public static Color SplashKit.ColorDimGray();"
                ],
                "cpp": [
                  "#define COLOR_DIM_GRAY",
                  "color color_dim_gray()"
                ],
                "pascal": [
                  "function ColorDimGray(): Color"
                ]
              }
            },
            "setter": null
          },
          "dodger_blue": {
            "getter": {
              "signature": "color color_dodger_blue();",
              "name": "color_dodger_blue",
              "method_name": null,
              "unique_global_name": "color_dodger_blue",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `dodger_blue`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `dodger_blue`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "dodger_blue",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_dodger_blue():"
                ],
                "csharp": [
                  "public static Color Color.DodgerBlue { get }",
                  "public static Color SplashKit.ColorDodgerBlue();"
                ],
                "cpp": [
                  "#define COLOR_DODGER_BLUE",
                  "color color_dodger_blue()"
                ],
                "pascal": [
                  "function ColorDodgerBlue(): Color"
                ]
              }
            },
            "setter": null
          },
          "firebrick": {
            "getter": {
              "signature": "color color_firebrick();",
              "name": "color_firebrick",
              "method_name": null,
              "unique_global_name": "color_firebrick",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `firebrick`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `firebrick`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "firebrick",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_firebrick():"
                ],
                "csharp": [
                  "public static Color Color.Firebrick { get }",
                  "public static Color SplashKit.ColorFirebrick();"
                ],
                "cpp": [
                  "#define COLOR_FIREBRICK",
                  "color color_firebrick()"
                ],
                "pascal": [
                  "function ColorFirebrick(): Color"
                ]
              }
            },
            "setter": null
          },
          "floral_white": {
            "getter": {
              "signature": "color color_floral_white();",
              "name": "color_floral_white",
              "method_name": null,
              "unique_global_name": "color_floral_white",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `floral_white`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `floral_white`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "floral_white",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_floral_white():"
                ],
                "csharp": [
                  "public static Color Color.FloralWhite { get }",
                  "public static Color SplashKit.ColorFloralWhite();"
                ],
                "cpp": [
                  "#define COLOR_FLORAL_WHITE",
                  "color color_floral_white()"
                ],
                "pascal": [
                  "function ColorFloralWhite(): Color"
                ]
              }
            },
            "setter": null
          },
          "forest_green": {
            "getter": {
              "signature": "color color_forest_green();",
              "name": "color_forest_green",
              "method_name": null,
              "unique_global_name": "color_forest_green",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `forest_green`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `forest_green`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "forest_green",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_forest_green():"
                ],
                "csharp": [
                  "public static Color Color.ForestGreen { get }",
                  "public static Color SplashKit.ColorForestGreen();"
                ],
                "cpp": [
                  "#define COLOR_FOREST_GREEN",
                  "color color_forest_green()"
                ],
                "pascal": [
                  "function ColorForestGreen(): Color"
                ]
              }
            },
            "setter": null
          },
          "fuchsia": {
            "getter": {
              "signature": "color color_fuchsia();",
              "name": "color_fuchsia",
              "method_name": null,
              "unique_global_name": "color_fuchsia",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `fuchsia`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `fuchsia`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "fuchsia",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_fuchsia():"
                ],
                "csharp": [
                  "public static Color Color.Fuchsia { get }",
                  "public static Color SplashKit.ColorFuchsia();"
                ],
                "cpp": [
                  "#define COLOR_FUCHSIA",
                  "color color_fuchsia()"
                ],
                "pascal": [
                  "function ColorFuchsia(): Color"
                ]
              }
            },
            "setter": null
          },
          "gainsboro": {
            "getter": {
              "signature": "color color_gainsboro();",
              "name": "color_gainsboro",
              "method_name": null,
              "unique_global_name": "color_gainsboro",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `gainsboro`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `gainsboro`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "gainsboro",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_gainsboro():"
                ],
                "csharp": [
                  "public static Color Color.Gainsboro { get }",
                  "public static Color SplashKit.ColorGainsboro();"
                ],
                "cpp": [
                  "#define COLOR_GAINSBORO",
                  "color color_gainsboro()"
                ],
                "pascal": [
                  "function ColorGainsboro(): Color"
                ]
              }
            },
            "setter": null
          },
          "ghost_white": {
            "getter": {
              "signature": "color color_ghost_white();",
              "name": "color_ghost_white",
              "method_name": null,
              "unique_global_name": "color_ghost_white",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `ghost_white`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `ghost_white`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "ghost_white",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_ghost_white():"
                ],
                "csharp": [
                  "public static Color Color.GhostWhite { get }",
                  "public static Color SplashKit.ColorGhostWhite();"
                ],
                "cpp": [
                  "#define COLOR_GHOST_WHITE",
                  "color color_ghost_white()"
                ],
                "pascal": [
                  "function ColorGhostWhite(): Color"
                ]
              }
            },
            "setter": null
          },
          "gold": {
            "getter": {
              "signature": "color color_gold();",
              "name": "color_gold",
              "method_name": null,
              "unique_global_name": "color_gold",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `gold`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `gold`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "gold",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_gold():"
                ],
                "csharp": [
                  "public static Color Color.Gold { get }",
                  "public static Color SplashKit.ColorGold();"
                ],
                "cpp": [
                  "#define COLOR_GOLD",
                  "color color_gold()"
                ],
                "pascal": [
                  "function ColorGold(): Color"
                ]
              }
            },
            "setter": null
          },
          "goldenrod": {
            "getter": {
              "signature": "color color_goldenrod();",
              "name": "color_goldenrod",
              "method_name": null,
              "unique_global_name": "color_goldenrod",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `goldenrod`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `goldenrod`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "goldenrod",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_goldenrod():"
                ],
                "csharp": [
                  "public static Color Color.Goldenrod { get }",
                  "public static Color SplashKit.ColorGoldenrod();"
                ],
                "cpp": [
                  "#define COLOR_GOLDENROD",
                  "color color_goldenrod()"
                ],
                "pascal": [
                  "function ColorGoldenrod(): Color"
                ]
              }
            },
            "setter": null
          },
          "gray": {
            "getter": {
              "signature": "color color_gray();",
              "name": "color_gray",
              "method_name": null,
              "unique_global_name": "color_gray",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `gray`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `gray`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "gray",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_gray():"
                ],
                "csharp": [
                  "public static Color Color.Gray { get }",
                  "public static Color SplashKit.ColorGray();"
                ],
                "cpp": [
                  "#define COLOR_GRAY",
                  "color color_gray()"
                ],
                "pascal": [
                  "function ColorGray(): Color"
                ]
              }
            },
            "setter": null
          },
          "green": {
            "getter": {
              "signature": "color color_green();",
              "name": "color_green",
              "method_name": null,
              "unique_global_name": "color_green",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `green`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `green`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "green",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_green():"
                ],
                "csharp": [
                  "public static Color Color.Green { get }",
                  "public static Color SplashKit.ColorGreen();"
                ],
                "cpp": [
                  "#define COLOR_GREEN",
                  "color color_green()"
                ],
                "pascal": [
                  "function ColorGreen(): Color"
                ]
              }
            },
            "setter": null
          },
          "green_yellow": {
            "getter": {
              "signature": "color color_green_yellow();",
              "name": "color_green_yellow",
              "method_name": null,
              "unique_global_name": "color_green_yellow",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `green_yellow`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `green_yellow`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "green_yellow",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_green_yellow():"
                ],
                "csharp": [
                  "public static Color Color.GreenYellow { get }",
                  "public static Color SplashKit.ColorGreenYellow();"
                ],
                "cpp": [
                  "#define COLOR_GREEN_YELLOW",
                  "color color_green_yellow()"
                ],
                "pascal": [
                  "function ColorGreenYellow(): Color"
                ]
              }
            },
            "setter": null
          },
          "honeydew": {
            "getter": {
              "signature": "color color_honeydew();",
              "name": "color_honeydew",
              "method_name": null,
              "unique_global_name": "color_honeydew",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `honeydew`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `honeydew`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "honeydew",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_honeydew():"
                ],
                "csharp": [
                  "public static Color Color.Honeydew { get }",
                  "public static Color SplashKit.ColorHoneydew();"
                ],
                "cpp": [
                  "#define COLOR_HONEYDEW",
                  "color color_honeydew()"
                ],
                "pascal": [
                  "function ColorHoneydew(): Color"
                ]
              }
            },
            "setter": null
          },
          "hot_pink": {
            "getter": {
              "signature": "color color_hot_pink();",
              "name": "color_hot_pink",
              "method_name": null,
              "unique_global_name": "color_hot_pink",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `hot_pink`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `hot_pink`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "hot_pink",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_hot_pink():"
                ],
                "csharp": [
                  "public static Color Color.HotPink { get }",
                  "public static Color SplashKit.ColorHotPink();"
                ],
                "cpp": [
                  "#define COLOR_HOT_PINK",
                  "color color_hot_pink()"
                ],
                "pascal": [
                  "function ColorHotPink(): Color"
                ]
              }
            },
            "setter": null
          },
          "indian_red": {
            "getter": {
              "signature": "color color_indian_red();",
              "name": "color_indian_red",
              "method_name": null,
              "unique_global_name": "color_indian_red",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `indian_red`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `indian_red`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "indian_red",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_indian_red():"
                ],
                "csharp": [
                  "public static Color Color.IndianRed { get }",
                  "public static Color SplashKit.ColorIndianRed();"
                ],
                "cpp": [
                  "#define COLOR_INDIAN_RED",
                  "color color_indian_red()"
                ],
                "pascal": [
                  "function ColorIndianRed(): Color"
                ]
              }
            },
            "setter": null
          },
          "indigo": {
            "getter": {
              "signature": "color color_indigo();",
              "name": "color_indigo",
              "method_name": null,
              "unique_global_name": "color_indigo",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `indigo`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `indigo`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "indigo",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_indigo():"
                ],
                "csharp": [
                  "public static Color Color.Indigo { get }",
                  "public static Color SplashKit.ColorIndigo();"
                ],
                "cpp": [
                  "#define COLOR_INDIGO",
                  "color color_indigo()"
                ],
                "pascal": [
                  "function ColorIndigo(): Color"
                ]
              }
            },
            "setter": null
          },
          "ivory": {
            "getter": {
              "signature": "color color_ivory();",
              "name": "color_ivory",
              "method_name": null,
              "unique_global_name": "color_ivory",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `ivory`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `ivory`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "ivory",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_ivory():"
                ],
                "csharp": [
                  "public static Color Color.Ivory { get }",
                  "public static Color SplashKit.ColorIvory();"
                ],
                "cpp": [
                  "#define COLOR_IVORY",
                  "color color_ivory()"
                ],
                "pascal": [
                  "function ColorIvory(): Color"
                ]
              }
            },
            "setter": null
          },
          "khaki": {
            "getter": {
              "signature": "color color_khaki();",
              "name": "color_khaki",
              "method_name": null,
              "unique_global_name": "color_khaki",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `khaki`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `khaki`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "khaki",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_khaki():"
                ],
                "csharp": [
                  "public static Color Color.Khaki { get }",
                  "public static Color SplashKit.ColorKhaki();"
                ],
                "cpp": [
                  "#define COLOR_KHAKI",
                  "color color_khaki()"
                ],
                "pascal": [
                  "function ColorKhaki(): Color"
                ]
              }
            },
            "setter": null
          },
          "lavender": {
            "getter": {
              "signature": "color color_lavender();",
              "name": "color_lavender",
              "method_name": null,
              "unique_global_name": "color_lavender",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `lavender`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `lavender`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "lavender",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_lavender():"
                ],
                "csharp": [
                  "public static Color Color.Lavender { get }",
                  "public static Color SplashKit.ColorLavender();"
                ],
                "cpp": [
                  "#define COLOR_LAVENDER",
                  "color color_lavender()"
                ],
                "pascal": [
                  "function ColorLavender(): Color"
                ]
              }
            },
            "setter": null
          },
          "lavender_blush": {
            "getter": {
              "signature": "color color_lavender_blush();",
              "name": "color_lavender_blush",
              "method_name": null,
              "unique_global_name": "color_lavender_blush",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `lavender_blush`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `lavender_blush`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "lavender_blush",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_lavender_blush():"
                ],
                "csharp": [
                  "public static Color Color.LavenderBlush { get }",
                  "public static Color SplashKit.ColorLavenderBlush();"
                ],
                "cpp": [
                  "#define COLOR_LAVENDER_BLUSH",
                  "color color_lavender_blush()"
                ],
                "pascal": [
                  "function ColorLavenderBlush(): Color"
                ]
              }
            },
            "setter": null
          },
          "lawn_green": {
            "getter": {
              "signature": "color color_lawn_green();",
              "name": "color_lawn_green",
              "method_name": null,
              "unique_global_name": "color_lawn_green",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `lawn_green`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `lawn_green`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "lawn_green",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_lawn_green():"
                ],
                "csharp": [
                  "public static Color Color.LawnGreen { get }",
                  "public static Color SplashKit.ColorLawnGreen();"
                ],
                "cpp": [
                  "#define COLOR_LAWN_GREEN",
                  "color color_lawn_green()"
                ],
                "pascal": [
                  "function ColorLawnGreen(): Color"
                ]
              }
            },
            "setter": null
          },
          "lemon_chiffon": {
            "getter": {
              "signature": "color color_lemon_chiffon();",
              "name": "color_lemon_chiffon",
              "method_name": null,
              "unique_global_name": "color_lemon_chiffon",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `lemon_chiffon`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `lemon_chiffon`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "lemon_chiffon",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_lemon_chiffon():"
                ],
                "csharp": [
                  "public static Color Color.LemonChiffon { get }",
                  "public static Color SplashKit.ColorLemonChiffon();"
                ],
                "cpp": [
                  "#define COLOR_LEMON_CHIFFON",
                  "color color_lemon_chiffon()"
                ],
                "pascal": [
                  "function ColorLemonChiffon(): Color"
                ]
              }
            },
            "setter": null
          },
          "light_blue": {
            "getter": {
              "signature": "color color_light_blue();",
              "name": "color_light_blue",
              "method_name": null,
              "unique_global_name": "color_light_blue",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `light_blue`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `light_blue`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "light_blue",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_light_blue():"
                ],
                "csharp": [
                  "public static Color Color.LightBlue { get }",
                  "public static Color SplashKit.ColorLightBlue();"
                ],
                "cpp": [
                  "#define COLOR_LIGHT_BLUE",
                  "color color_light_blue()"
                ],
                "pascal": [
                  "function ColorLightBlue(): Color"
                ]
              }
            },
            "setter": null
          },
          "light_coral": {
            "getter": {
              "signature": "color color_light_coral();",
              "name": "color_light_coral",
              "method_name": null,
              "unique_global_name": "color_light_coral",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `light_coral`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `light_coral`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "light_coral",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_light_coral():"
                ],
                "csharp": [
                  "public static Color Color.LightCoral { get }",
                  "public static Color SplashKit.ColorLightCoral();"
                ],
                "cpp": [
                  "#define COLOR_LIGHT_CORAL",
                  "color color_light_coral()"
                ],
                "pascal": [
                  "function ColorLightCoral(): Color"
                ]
              }
            },
            "setter": null
          },
          "light_cyan": {
            "getter": {
              "signature": "color color_light_cyan();",
              "name": "color_light_cyan",
              "method_name": null,
              "unique_global_name": "color_light_cyan",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `light_cyan`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `light_cyan`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "light_cyan",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_light_cyan():"
                ],
                "csharp": [
                  "public static Color Color.LightCyan { get }",
                  "public static Color SplashKit.ColorLightCyan();"
                ],
                "cpp": [
                  "#define COLOR_LIGHT_CYAN",
                  "color color_light_cyan()"
                ],
                "pascal": [
                  "function ColorLightCyan(): Color"
                ]
              }
            },
            "setter": null
          },
          "light_goldenrod_yellow": {
            "getter": {
              "signature": "color color_light_goldenrod_yellow();",
              "name": "color_light_goldenrod_yellow",
              "method_name": null,
              "unique_global_name": "color_light_goldenrod_yellow",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `light_goldenrod_yellow`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `light_goldenrod_yellow`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "light_goldenrod_yellow",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_light_goldenrod_yellow():"
                ],
                "csharp": [
                  "public static Color Color.LightGoldenrodYellow { get }",
                  "public static Color SplashKit.ColorLightGoldenrodYellow();"
                ],
                "cpp": [
                  "#define COLOR_LIGHT_GOLDENROD_YELLOW",
                  "color color_light_goldenrod_yellow()"
                ],
                "pascal": [
                  "function ColorLightGoldenrodYellow(): Color"
                ]
              }
            },
            "setter": null
          },
          "light_gray": {
            "getter": {
              "signature": "color color_light_gray();",
              "name": "color_light_gray",
              "method_name": null,
              "unique_global_name": "color_light_gray",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `light_gray`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `light_gray`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "light_gray",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_light_gray():"
                ],
                "csharp": [
                  "public static Color Color.LightGray { get }",
                  "public static Color SplashKit.ColorLightGray();"
                ],
                "cpp": [
                  "#define COLOR_LIGHT_GRAY",
                  "color color_light_gray()"
                ],
                "pascal": [
                  "function ColorLightGray(): Color"
                ]
              }
            },
            "setter": null
          },
          "light_green": {
            "getter": {
              "signature": "color color_light_green();",
              "name": "color_light_green",
              "method_name": null,
              "unique_global_name": "color_light_green",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `light_green`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `light_green`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "light_green",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_light_green():"
                ],
                "csharp": [
                  "public static Color Color.LightGreen { get }",
                  "public static Color SplashKit.ColorLightGreen();"
                ],
                "cpp": [
                  "#define COLOR_LIGHT_GREEN",
                  "color color_light_green()"
                ],
                "pascal": [
                  "function ColorLightGreen(): Color"
                ]
              }
            },
            "setter": null
          },
          "light_pink": {
            "getter": {
              "signature": "color color_light_pink();",
              "name": "color_light_pink",
              "method_name": null,
              "unique_global_name": "color_light_pink",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `light_pink`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `light_pink`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "light_pink",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_light_pink():"
                ],
                "csharp": [
                  "public static Color Color.LightPink { get }",
                  "public static Color SplashKit.ColorLightPink();"
                ],
                "cpp": [
                  "#define COLOR_LIGHT_PINK",
                  "color color_light_pink()"
                ],
                "pascal": [
                  "function ColorLightPink(): Color"
                ]
              }
            },
            "setter": null
          },
          "light_salmon": {
            "getter": {
              "signature": "color color_light_salmon();",
              "name": "color_light_salmon",
              "method_name": null,
              "unique_global_name": "color_light_salmon",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `light_salmon`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `light_salmon`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "light_salmon",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_light_salmon():"
                ],
                "csharp": [
                  "public static Color Color.LightSalmon { get }",
                  "public static Color SplashKit.ColorLightSalmon();"
                ],
                "cpp": [
                  "#define COLOR_LIGHT_SALMON",
                  "color color_light_salmon()"
                ],
                "pascal": [
                  "function ColorLightSalmon(): Color"
                ]
              }
            },
            "setter": null
          },
          "light_sea_green": {
            "getter": {
              "signature": "color color_light_sea_green();",
              "name": "color_light_sea_green",
              "method_name": null,
              "unique_global_name": "color_light_sea_green",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `light_sea_green`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `light_sea_green`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "light_sea_green",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_light_sea_green():"
                ],
                "csharp": [
                  "public static Color Color.LightSeaGreen { get }",
                  "public static Color SplashKit.ColorLightSeaGreen();"
                ],
                "cpp": [
                  "#define COLOR_LIGHT_SEA_GREEN",
                  "color color_light_sea_green()"
                ],
                "pascal": [
                  "function ColorLightSeaGreen(): Color"
                ]
              }
            },
            "setter": null
          },
          "light_sky_blue": {
            "getter": {
              "signature": "color color_light_sky_blue();",
              "name": "color_light_sky_blue",
              "method_name": null,
              "unique_global_name": "color_light_sky_blue",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `light_sky_blue`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `light_sky_blue`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "light_sky_blue",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_light_sky_blue():"
                ],
                "csharp": [
                  "public static Color Color.LightSkyBlue { get }",
                  "public static Color SplashKit.ColorLightSkyBlue();"
                ],
                "cpp": [
                  "#define COLOR_LIGHT_SKY_BLUE",
                  "color color_light_sky_blue()"
                ],
                "pascal": [
                  "function ColorLightSkyBlue(): Color"
                ]
              }
            },
            "setter": null
          },
          "light_slate_gray": {
            "getter": {
              "signature": "color color_light_slate_gray();",
              "name": "color_light_slate_gray",
              "method_name": null,
              "unique_global_name": "color_light_slate_gray",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `light_slate_gray`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `light_slate_gray`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "light_slate_gray",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_light_slate_gray():"
                ],
                "csharp": [
                  "public static Color Color.LightSlateGray { get }",
                  "public static Color SplashKit.ColorLightSlateGray();"
                ],
                "cpp": [
                  "#define COLOR_LIGHT_SLATE_GRAY",
                  "color color_light_slate_gray()"
                ],
                "pascal": [
                  "function ColorLightSlateGray(): Color"
                ]
              }
            },
            "setter": null
          },
          "light_steel_blue": {
            "getter": {
              "signature": "color color_light_steel_blue();",
              "name": "color_light_steel_blue",
              "method_name": null,
              "unique_global_name": "color_light_steel_blue",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `light_steel_blue`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `light_steel_blue`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "light_steel_blue",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_light_steel_blue():"
                ],
                "csharp": [
                  "public static Color Color.LightSteelBlue { get }",
                  "public static Color SplashKit.ColorLightSteelBlue();"
                ],
                "cpp": [
                  "#define COLOR_LIGHT_STEEL_BLUE",
                  "color color_light_steel_blue()"
                ],
                "pascal": [
                  "function ColorLightSteelBlue(): Color"
                ]
              }
            },
            "setter": null
          },
          "light_yellow": {
            "getter": {
              "signature": "color color_light_yellow();",
              "name": "color_light_yellow",
              "method_name": null,
              "unique_global_name": "color_light_yellow",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `light_yellow`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `light_yellow`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "light_yellow",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_light_yellow():"
                ],
                "csharp": [
                  "public static Color Color.LightYellow { get }",
                  "public static Color SplashKit.ColorLightYellow();"
                ],
                "cpp": [
                  "#define COLOR_LIGHT_YELLOW",
                  "color color_light_yellow()"
                ],
                "pascal": [
                  "function ColorLightYellow(): Color"
                ]
              }
            },
            "setter": null
          },
          "lime": {
            "getter": {
              "signature": "color color_lime();",
              "name": "color_lime",
              "method_name": null,
              "unique_global_name": "color_lime",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `lime`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `lime`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "lime",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_lime():"
                ],
                "csharp": [
                  "public static Color Color.Lime { get }",
                  "public static Color SplashKit.ColorLime();"
                ],
                "cpp": [
                  "#define COLOR_LIME",
                  "color color_lime()"
                ],
                "pascal": [
                  "function ColorLime(): Color"
                ]
              }
            },
            "setter": null
          },
          "lime_green": {
            "getter": {
              "signature": "color color_lime_green();",
              "name": "color_lime_green",
              "method_name": null,
              "unique_global_name": "color_lime_green",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `lime_green`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `lime_green`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "lime_green",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_lime_green():"
                ],
                "csharp": [
                  "public static Color Color.LimeGreen { get }",
                  "public static Color SplashKit.ColorLimeGreen();"
                ],
                "cpp": [
                  "#define COLOR_LIME_GREEN",
                  "color color_lime_green()"
                ],
                "pascal": [
                  "function ColorLimeGreen(): Color"
                ]
              }
            },
            "setter": null
          },
          "linen": {
            "getter": {
              "signature": "color color_linen();",
              "name": "color_linen",
              "method_name": null,
              "unique_global_name": "color_linen",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `linen`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `linen`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "linen",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_linen():"
                ],
                "csharp": [
                  "public static Color Color.Linen { get }",
                  "public static Color SplashKit.ColorLinen();"
                ],
                "cpp": [
                  "#define COLOR_LINEN",
                  "color color_linen()"
                ],
                "pascal": [
                  "function ColorLinen(): Color"
                ]
              }
            },
            "setter": null
          },
          "magenta": {
            "getter": {
              "signature": "color color_magenta();",
              "name": "color_magenta",
              "method_name": null,
              "unique_global_name": "color_magenta",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `magenta`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `magenta`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "magenta",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_magenta():"
                ],
                "csharp": [
                  "public static Color Color.Magenta { get }",
                  "public static Color SplashKit.ColorMagenta();"
                ],
                "cpp": [
                  "#define COLOR_MAGENTA",
                  "color color_magenta()"
                ],
                "pascal": [
                  "function ColorMagenta(): Color"
                ]
              }
            },
            "setter": null
          },
          "maroon": {
            "getter": {
              "signature": "color color_maroon();",
              "name": "color_maroon",
              "method_name": null,
              "unique_global_name": "color_maroon",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `maroon`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `maroon`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "maroon",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_maroon():"
                ],
                "csharp": [
                  "public static Color Color.Maroon { get }",
                  "public static Color SplashKit.ColorMaroon();"
                ],
                "cpp": [
                  "#define COLOR_MAROON",
                  "color color_maroon()"
                ],
                "pascal": [
                  "function ColorMaroon(): Color"
                ]
              }
            },
            "setter": null
          },
          "medium_aquamarine": {
            "getter": {
              "signature": "color color_medium_aquamarine();",
              "name": "color_medium_aquamarine",
              "method_name": null,
              "unique_global_name": "color_medium_aquamarine",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `medium_aquamarine`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `medium_aquamarine`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "medium_aquamarine",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_medium_aquamarine():"
                ],
                "csharp": [
                  "public static Color Color.MediumAquamarine { get }",
                  "public static Color SplashKit.ColorMediumAquamarine();"
                ],
                "cpp": [
                  "#define COLOR_MEDIUM_AQUAMARINE",
                  "color color_medium_aquamarine()"
                ],
                "pascal": [
                  "function ColorMediumAquamarine(): Color"
                ]
              }
            },
            "setter": null
          },
          "medium_blue": {
            "getter": {
              "signature": "color color_medium_blue();",
              "name": "color_medium_blue",
              "method_name": null,
              "unique_global_name": "color_medium_blue",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `medium_blue`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `medium_blue`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "medium_blue",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_medium_blue():"
                ],
                "csharp": [
                  "public static Color Color.MediumBlue { get }",
                  "public static Color SplashKit.ColorMediumBlue();"
                ],
                "cpp": [
                  "#define COLOR_MEDIUM_BLUE",
                  "color color_medium_blue()"
                ],
                "pascal": [
                  "function ColorMediumBlue(): Color"
                ]
              }
            },
            "setter": null
          },
          "medium_orchid": {
            "getter": {
              "signature": "color color_medium_orchid();",
              "name": "color_medium_orchid",
              "method_name": null,
              "unique_global_name": "color_medium_orchid",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `medium_orchid`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `medium_orchid`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "medium_orchid",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_medium_orchid():"
                ],
                "csharp": [
                  "public static Color Color.MediumOrchid { get }",
                  "public static Color SplashKit.ColorMediumOrchid();"
                ],
                "cpp": [
                  "#define COLOR_MEDIUM_ORCHID",
                  "color color_medium_orchid()"
                ],
                "pascal": [
                  "function ColorMediumOrchid(): Color"
                ]
              }
            },
            "setter": null
          },
          "medium_purple": {
            "getter": {
              "signature": "color color_medium_purple();",
              "name": "color_medium_purple",
              "method_name": null,
              "unique_global_name": "color_medium_purple",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `medium_purple`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `medium_purple`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "medium_purple",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_medium_purple():"
                ],
                "csharp": [
                  "public static Color Color.MediumPurple { get }",
                  "public static Color SplashKit.ColorMediumPurple();"
                ],
                "cpp": [
                  "#define COLOR_MEDIUM_PURPLE",
                  "color color_medium_purple()"
                ],
                "pascal": [
                  "function ColorMediumPurple(): Color"
                ]
              }
            },
            "setter": null
          },
          "medium_sea_green": {
            "getter": {
              "signature": "color color_medium_sea_green();",
              "name": "color_medium_sea_green",
              "method_name": null,
              "unique_global_name": "color_medium_sea_green",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `medium_sea_green`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `medium_sea_green`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "medium_sea_green",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_medium_sea_green():"
                ],
                "csharp": [
                  "public static Color Color.MediumSeaGreen { get }",
                  "public static Color SplashKit.ColorMediumSeaGreen();"
                ],
                "cpp": [
                  "#define COLOR_MEDIUM_SEA_GREEN",
                  "color color_medium_sea_green()"
                ],
                "pascal": [
                  "function ColorMediumSeaGreen(): Color"
                ]
              }
            },
            "setter": null
          },
          "medium_slate_blue": {
            "getter": {
              "signature": "color color_medium_slate_blue();",
              "name": "color_medium_slate_blue",
              "method_name": null,
              "unique_global_name": "color_medium_slate_blue",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `medium_slate_blue`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `medium_slate_blue`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "medium_slate_blue",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_medium_slate_blue():"
                ],
                "csharp": [
                  "public static Color Color.MediumSlateBlue { get }",
                  "public static Color SplashKit.ColorMediumSlateBlue();"
                ],
                "cpp": [
                  "#define COLOR_MEDIUM_SLATE_BLUE",
                  "color color_medium_slate_blue()"
                ],
                "pascal": [
                  "function ColorMediumSlateBlue(): Color"
                ]
              }
            },
            "setter": null
          },
          "medium_spring_green": {
            "getter": {
              "signature": "color color_medium_spring_green();",
              "name": "color_medium_spring_green",
              "method_name": null,
              "unique_global_name": "color_medium_spring_green",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `medium_spring_green`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `medium_spring_green`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "medium_spring_green",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_medium_spring_green():"
                ],
                "csharp": [
                  "public static Color Color.MediumSpringGreen { get }",
                  "public static Color SplashKit.ColorMediumSpringGreen();"
                ],
                "cpp": [
                  "#define COLOR_MEDIUM_SPRING_GREEN",
                  "color color_medium_spring_green()"
                ],
                "pascal": [
                  "function ColorMediumSpringGreen(): Color"
                ]
              }
            },
            "setter": null
          },
          "medium_turquoise": {
            "getter": {
              "signature": "color color_medium_turquoise();",
              "name": "color_medium_turquoise",
              "method_name": null,
              "unique_global_name": "color_medium_turquoise",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `medium_turquoise`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `medium_turquoise`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "medium_turquoise",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_medium_turquoise():"
                ],
                "csharp": [
                  "public static Color Color.MediumTurquoise { get }",
                  "public static Color SplashKit.ColorMediumTurquoise();"
                ],
                "cpp": [
                  "#define COLOR_MEDIUM_TURQUOISE",
                  "color color_medium_turquoise()"
                ],
                "pascal": [
                  "function ColorMediumTurquoise(): Color"
                ]
              }
            },
            "setter": null
          },
          "medium_violet_red": {
            "getter": {
              "signature": "color color_medium_violet_red();",
              "name": "color_medium_violet_red",
              "method_name": null,
              "unique_global_name": "color_medium_violet_red",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `medium_violet_red`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `medium_violet_red`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "medium_violet_red",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_medium_violet_red():"
                ],
                "csharp": [
                  "public static Color Color.MediumVioletRed { get }",
                  "public static Color SplashKit.ColorMediumVioletRed();"
                ],
                "cpp": [
                  "#define COLOR_MEDIUM_VIOLET_RED",
                  "color color_medium_violet_red()"
                ],
                "pascal": [
                  "function ColorMediumVioletRed(): Color"
                ]
              }
            },
            "setter": null
          },
          "midnight_blue": {
            "getter": {
              "signature": "color color_midnight_blue();",
              "name": "color_midnight_blue",
              "method_name": null,
              "unique_global_name": "color_midnight_blue",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `midnight_blue`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `midnight_blue`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "midnight_blue",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_midnight_blue():"
                ],
                "csharp": [
                  "public static Color Color.MidnightBlue { get }",
                  "public static Color SplashKit.ColorMidnightBlue();"
                ],
                "cpp": [
                  "#define COLOR_MIDNIGHT_BLUE",
                  "color color_midnight_blue()"
                ],
                "pascal": [
                  "function ColorMidnightBlue(): Color"
                ]
              }
            },
            "setter": null
          },
          "mint_cream": {
            "getter": {
              "signature": "color color_mint_cream();",
              "name": "color_mint_cream",
              "method_name": null,
              "unique_global_name": "color_mint_cream",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `mint_cream`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `mint_cream`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "mint_cream",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_mint_cream():"
                ],
                "csharp": [
                  "public static Color Color.MintCream { get }",
                  "public static Color SplashKit.ColorMintCream();"
                ],
                "cpp": [
                  "#define COLOR_MINT_CREAM",
                  "color color_mint_cream()"
                ],
                "pascal": [
                  "function ColorMintCream(): Color"
                ]
              }
            },
            "setter": null
          },
          "misty_rose": {
            "getter": {
              "signature": "color color_misty_rose();",
              "name": "color_misty_rose",
              "method_name": null,
              "unique_global_name": "color_misty_rose",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `misty_rose`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `misty_rose`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "misty_rose",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_misty_rose():"
                ],
                "csharp": [
                  "public static Color Color.MistyRose { get }",
                  "public static Color SplashKit.ColorMistyRose();"
                ],
                "cpp": [
                  "#define COLOR_MISTY_ROSE",
                  "color color_misty_rose()"
                ],
                "pascal": [
                  "function ColorMistyRose(): Color"
                ]
              }
            },
            "setter": null
          },
          "moccasin": {
            "getter": {
              "signature": "color color_moccasin();",
              "name": "color_moccasin",
              "method_name": null,
              "unique_global_name": "color_moccasin",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `moccasin`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `moccasin`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "moccasin",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_moccasin():"
                ],
                "csharp": [
                  "public static Color Color.Moccasin { get }",
                  "public static Color SplashKit.ColorMoccasin();"
                ],
                "cpp": [
                  "#define COLOR_MOCCASIN",
                  "color color_moccasin()"
                ],
                "pascal": [
                  "function ColorMoccasin(): Color"
                ]
              }
            },
            "setter": null
          },
          "navajo_white": {
            "getter": {
              "signature": "color color_navajo_white();",
              "name": "color_navajo_white",
              "method_name": null,
              "unique_global_name": "color_navajo_white",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `navajo_white`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `navajo_white`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "navajo_white",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_navajo_white():"
                ],
                "csharp": [
                  "public static Color Color.NavajoWhite { get }",
                  "public static Color SplashKit.ColorNavajoWhite();"
                ],
                "cpp": [
                  "#define COLOR_NAVAJO_WHITE",
                  "color color_navajo_white()"
                ],
                "pascal": [
                  "function ColorNavajoWhite(): Color"
                ]
              }
            },
            "setter": null
          },
          "navy": {
            "getter": {
              "signature": "color color_navy();",
              "name": "color_navy",
              "method_name": null,
              "unique_global_name": "color_navy",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `navy`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `navy`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "navy",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_navy():"
                ],
                "csharp": [
                  "public static Color Color.Navy { get }",
                  "public static Color SplashKit.ColorNavy();"
                ],
                "cpp": [
                  "#define COLOR_NAVY",
                  "color color_navy()"
                ],
                "pascal": [
                  "function ColorNavy(): Color"
                ]
              }
            },
            "setter": null
          },
          "old_lace": {
            "getter": {
              "signature": "color color_old_lace();",
              "name": "color_old_lace",
              "method_name": null,
              "unique_global_name": "color_old_lace",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `old_lace`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `old_lace`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "old_lace",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_old_lace():"
                ],
                "csharp": [
                  "public static Color Color.OldLace { get }",
                  "public static Color SplashKit.ColorOldLace();"
                ],
                "cpp": [
                  "#define COLOR_OLD_LACE",
                  "color color_old_lace()"
                ],
                "pascal": [
                  "function ColorOldLace(): Color"
                ]
              }
            },
            "setter": null
          },
          "olive": {
            "getter": {
              "signature": "color color_olive();",
              "name": "color_olive",
              "method_name": null,
              "unique_global_name": "color_olive",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `olive`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `olive`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "olive",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_olive():"
                ],
                "csharp": [
                  "public static Color Color.Olive { get }",
                  "public static Color SplashKit.ColorOlive();"
                ],
                "cpp": [
                  "#define COLOR_OLIVE",
                  "color color_olive()"
                ],
                "pascal": [
                  "function ColorOlive(): Color"
                ]
              }
            },
            "setter": null
          },
          "olive_drab": {
            "getter": {
              "signature": "color color_olive_drab();",
              "name": "color_olive_drab",
              "method_name": null,
              "unique_global_name": "color_olive_drab",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `olive_drab`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `olive_drab`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "olive_drab",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_olive_drab():"
                ],
                "csharp": [
                  "public static Color Color.OliveDrab { get }",
                  "public static Color SplashKit.ColorOliveDrab();"
                ],
                "cpp": [
                  "#define COLOR_OLIVE_DRAB",
                  "color color_olive_drab()"
                ],
                "pascal": [
                  "function ColorOliveDrab(): Color"
                ]
              }
            },
            "setter": null
          },
          "orange": {
            "getter": {
              "signature": "color color_orange();",
              "name": "color_orange",
              "method_name": null,
              "unique_global_name": "color_orange",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `orange`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `orange`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "orange",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_orange():"
                ],
                "csharp": [
                  "public static Color Color.Orange { get }",
                  "public static Color SplashKit.ColorOrange();"
                ],
                "cpp": [
                  "#define COLOR_ORANGE",
                  "color color_orange()"
                ],
                "pascal": [
                  "function ColorOrange(): Color"
                ]
              }
            },
            "setter": null
          },
          "orange_red": {
            "getter": {
              "signature": "color color_orange_red();",
              "name": "color_orange_red",
              "method_name": null,
              "unique_global_name": "color_orange_red",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `orange_red`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `orange_red`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "orange_red",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_orange_red():"
                ],
                "csharp": [
                  "public static Color Color.OrangeRed { get }",
                  "public static Color SplashKit.ColorOrangeRed();"
                ],
                "cpp": [
                  "#define COLOR_ORANGE_RED",
                  "color color_orange_red()"
                ],
                "pascal": [
                  "function ColorOrangeRed(): Color"
                ]
              }
            },
            "setter": null
          },
          "orchid": {
            "getter": {
              "signature": "color color_orchid();",
              "name": "color_orchid",
              "method_name": null,
              "unique_global_name": "color_orchid",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `orchid`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `orchid`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "orchid",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_orchid():"
                ],
                "csharp": [
                  "public static Color Color.Orchid { get }",
                  "public static Color SplashKit.ColorOrchid();"
                ],
                "cpp": [
                  "#define COLOR_ORCHID",
                  "color color_orchid()"
                ],
                "pascal": [
                  "function ColorOrchid(): Color"
                ]
              }
            },
            "setter": null
          },
          "pale_goldenrod": {
            "getter": {
              "signature": "color color_pale_goldenrod();",
              "name": "color_pale_goldenrod",
              "method_name": null,
              "unique_global_name": "color_pale_goldenrod",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `pale_goldenrod`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `pale_goldenrod`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "pale_goldenrod",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_pale_goldenrod():"
                ],
                "csharp": [
                  "public static Color Color.PaleGoldenrod { get }",
                  "public static Color SplashKit.ColorPaleGoldenrod();"
                ],
                "cpp": [
                  "#define COLOR_PALE_GOLDENROD",
                  "color color_pale_goldenrod()"
                ],
                "pascal": [
                  "function ColorPaleGoldenrod(): Color"
                ]
              }
            },
            "setter": null
          },
          "pale_green": {
            "getter": {
              "signature": "color color_pale_green();",
              "name": "color_pale_green",
              "method_name": null,
              "unique_global_name": "color_pale_green",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `pale_green`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `pale_green`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "pale_green",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_pale_green():"
                ],
                "csharp": [
                  "public static Color Color.PaleGreen { get }",
                  "public static Color SplashKit.ColorPaleGreen();"
                ],
                "cpp": [
                  "#define COLOR_PALE_GREEN",
                  "color color_pale_green()"
                ],
                "pascal": [
                  "function ColorPaleGreen(): Color"
                ]
              }
            },
            "setter": null
          },
          "pale_turquoise": {
            "getter": {
              "signature": "color color_pale_turquoise();",
              "name": "color_pale_turquoise",
              "method_name": null,
              "unique_global_name": "color_pale_turquoise",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `pale_turquoise`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `pale_turquoise`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "pale_turquoise",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_pale_turquoise():"
                ],
                "csharp": [
                  "public static Color Color.PaleTurquoise { get }",
                  "public static Color SplashKit.ColorPaleTurquoise();"
                ],
                "cpp": [
                  "#define COLOR_PALE_TURQUOISE",
                  "color color_pale_turquoise()"
                ],
                "pascal": [
                  "function ColorPaleTurquoise(): Color"
                ]
              }
            },
            "setter": null
          },
          "pale_violet_red": {
            "getter": {
              "signature": "color color_pale_violet_red();",
              "name": "color_pale_violet_red",
              "method_name": null,
              "unique_global_name": "color_pale_violet_red",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `pale_violet_red`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `pale_violet_red`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "pale_violet_red",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_pale_violet_red():"
                ],
                "csharp": [
                  "public static Color Color.PaleVioletRed { get }",
                  "public static Color SplashKit.ColorPaleVioletRed();"
                ],
                "cpp": [
                  "#define COLOR_PALE_VIOLET_RED",
                  "color color_pale_violet_red()"
                ],
                "pascal": [
                  "function ColorPaleVioletRed(): Color"
                ]
              }
            },
            "setter": null
          },
          "papaya_whip": {
            "getter": {
              "signature": "color color_papaya_whip();",
              "name": "color_papaya_whip",
              "method_name": null,
              "unique_global_name": "color_papaya_whip",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `papaya_whip`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `papaya_whip`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "papaya_whip",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_papaya_whip():"
                ],
                "csharp": [
                  "public static Color Color.PapayaWhip { get }",
                  "public static Color SplashKit.ColorPapayaWhip();"
                ],
                "cpp": [
                  "#define COLOR_PAPAYA_WHIP",
                  "color color_papaya_whip()"
                ],
                "pascal": [
                  "function ColorPapayaWhip(): Color"
                ]
              }
            },
            "setter": null
          },
          "peach_puff": {
            "getter": {
              "signature": "color color_peach_puff();",
              "name": "color_peach_puff",
              "method_name": null,
              "unique_global_name": "color_peach_puff",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `peach_puff`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `peach_puff`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "peach_puff",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_peach_puff():"
                ],
                "csharp": [
                  "public static Color Color.PeachPuff { get }",
                  "public static Color SplashKit.ColorPeachPuff();"
                ],
                "cpp": [
                  "#define COLOR_PEACH_PUFF",
                  "color color_peach_puff()"
                ],
                "pascal": [
                  "function ColorPeachPuff(): Color"
                ]
              }
            },
            "setter": null
          },
          "peru": {
            "getter": {
              "signature": "color color_peru();",
              "name": "color_peru",
              "method_name": null,
              "unique_global_name": "color_peru",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `peru`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `peru`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "peru",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_peru():"
                ],
                "csharp": [
                  "public static Color Color.Peru { get }",
                  "public static Color SplashKit.ColorPeru();"
                ],
                "cpp": [
                  "#define COLOR_PERU",
                  "color color_peru()"
                ],
                "pascal": [
                  "function ColorPeru(): Color"
                ]
              }
            },
            "setter": null
          },
          "pink": {
            "getter": {
              "signature": "color color_pink();",
              "name": "color_pink",
              "method_name": null,
              "unique_global_name": "color_pink",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `pink`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `pink`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "pink",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_pink():"
                ],
                "csharp": [
                  "public static Color Color.Pink { get }",
                  "public static Color SplashKit.ColorPink();"
                ],
                "cpp": [
                  "#define COLOR_PINK",
                  "color color_pink()"
                ],
                "pascal": [
                  "function ColorPink(): Color"
                ]
              }
            },
            "setter": null
          },
          "plum": {
            "getter": {
              "signature": "color color_plum();",
              "name": "color_plum",
              "method_name": null,
              "unique_global_name": "color_plum",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `plum`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `plum`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "plum",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_plum():"
                ],
                "csharp": [
                  "public static Color Color.Plum { get }",
                  "public static Color SplashKit.ColorPlum();"
                ],
                "cpp": [
                  "#define COLOR_PLUM",
                  "color color_plum()"
                ],
                "pascal": [
                  "function ColorPlum(): Color"
                ]
              }
            },
            "setter": null
          },
          "powder_blue": {
            "getter": {
              "signature": "color color_powder_blue();",
              "name": "color_powder_blue",
              "method_name": null,
              "unique_global_name": "color_powder_blue",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `powder_blue`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `powder_blue`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "powder_blue",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_powder_blue():"
                ],
                "csharp": [
                  "public static Color Color.PowderBlue { get }",
                  "public static Color SplashKit.ColorPowderBlue();"
                ],
                "cpp": [
                  "#define COLOR_POWDER_BLUE",
                  "color color_powder_blue()"
                ],
                "pascal": [
                  "function ColorPowderBlue(): Color"
                ]
              }
            },
            "setter": null
          },
          "purple": {
            "getter": {
              "signature": "color color_purple();",
              "name": "color_purple",
              "method_name": null,
              "unique_global_name": "color_purple",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `purple`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `purple`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "purple",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_purple():"
                ],
                "csharp": [
                  "public static Color Color.Purple { get }",
                  "public static Color SplashKit.ColorPurple();"
                ],
                "cpp": [
                  "#define COLOR_PURPLE",
                  "color color_purple()"
                ],
                "pascal": [
                  "function ColorPurple(): Color"
                ]
              }
            },
            "setter": null
          },
          "red": {
            "getter": {
              "signature": "color color_red();",
              "name": "color_red",
              "method_name": null,
              "unique_global_name": "color_red",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `red`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `red`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "red",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_red():"
                ],
                "csharp": [
                  "public static Color Color.Red { get }",
                  "public static Color SplashKit.ColorRed();"
                ],
                "cpp": [
                  "#define COLOR_RED",
                  "color color_red()"
                ],
                "pascal": [
                  "function ColorRed(): Color"
                ]
              }
            },
            "setter": null
          },
          "rosy_brown": {
            "getter": {
              "signature": "color color_rosy_brown();",
              "name": "color_rosy_brown",
              "method_name": null,
              "unique_global_name": "color_rosy_brown",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `rosy_brown`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `rosy_brown`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "rosy_brown",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_rosy_brown():"
                ],
                "csharp": [
                  "public static Color Color.RosyBrown { get }",
                  "public static Color SplashKit.ColorRosyBrown();"
                ],
                "cpp": [
                  "#define COLOR_ROSY_BROWN",
                  "color color_rosy_brown()"
                ],
                "pascal": [
                  "function ColorRosyBrown(): Color"
                ]
              }
            },
            "setter": null
          },
          "royal_blue": {
            "getter": {
              "signature": "color color_royal_blue();",
              "name": "color_royal_blue",
              "method_name": null,
              "unique_global_name": "color_royal_blue",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `royal_blue`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `royal_blue`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "royal_blue",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_royal_blue():"
                ],
                "csharp": [
                  "public static Color Color.RoyalBlue { get }",
                  "public static Color SplashKit.ColorRoyalBlue();"
                ],
                "cpp": [
                  "#define COLOR_ROYAL_BLUE",
                  "color color_royal_blue()"
                ],
                "pascal": [
                  "function ColorRoyalBlue(): Color"
                ]
              }
            },
            "setter": null
          },
          "saddle_brown": {
            "getter": {
              "signature": "color color_saddle_brown();",
              "name": "color_saddle_brown",
              "method_name": null,
              "unique_global_name": "color_saddle_brown",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `saddle_brown`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `saddle_brown`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "saddle_brown",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_saddle_brown():"
                ],
                "csharp": [
                  "public static Color Color.SaddleBrown { get }",
                  "public static Color SplashKit.ColorSaddleBrown();"
                ],
                "cpp": [
                  "#define COLOR_SADDLE_BROWN",
                  "color color_saddle_brown()"
                ],
                "pascal": [
                  "function ColorSaddleBrown(): Color"
                ]
              }
            },
            "setter": null
          },
          "salmon": {
            "getter": {
              "signature": "color color_salmon();",
              "name": "color_salmon",
              "method_name": null,
              "unique_global_name": "color_salmon",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `salmon`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `salmon`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "salmon",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_salmon():"
                ],
                "csharp": [
                  "public static Color Color.Salmon { get }",
                  "public static Color SplashKit.ColorSalmon();"
                ],
                "cpp": [
                  "#define COLOR_SALMON",
                  "color color_salmon()"
                ],
                "pascal": [
                  "function ColorSalmon(): Color"
                ]
              }
            },
            "setter": null
          },
          "sandy_brown": {
            "getter": {
              "signature": "color color_sandy_brown();",
              "name": "color_sandy_brown",
              "method_name": null,
              "unique_global_name": "color_sandy_brown",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `sandy_brown`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `sandy_brown`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "sandy_brown",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_sandy_brown():"
                ],
                "csharp": [
                  "public static Color Color.SandyBrown { get }",
                  "public static Color SplashKit.ColorSandyBrown();"
                ],
                "cpp": [
                  "#define COLOR_SANDY_BROWN",
                  "color color_sandy_brown()"
                ],
                "pascal": [
                  "function ColorSandyBrown(): Color"
                ]
              }
            },
            "setter": null
          },
          "sea_green": {
            "getter": {
              "signature": "color color_sea_green();",
              "name": "color_sea_green",
              "method_name": null,
              "unique_global_name": "color_sea_green",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `sea_green`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `sea_green`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "sea_green",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_sea_green():"
                ],
                "csharp": [
                  "public static Color Color.SeaGreen { get }",
                  "public static Color SplashKit.ColorSeaGreen();"
                ],
                "cpp": [
                  "#define COLOR_SEA_GREEN",
                  "color color_sea_green()"
                ],
                "pascal": [
                  "function ColorSeaGreen(): Color"
                ]
              }
            },
            "setter": null
          },
          "sea_shell": {
            "getter": {
              "signature": "color color_sea_shell();",
              "name": "color_sea_shell",
              "method_name": null,
              "unique_global_name": "color_sea_shell",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `sea_shell`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `sea_shell`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "sea_shell",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_sea_shell():"
                ],
                "csharp": [
                  "public static Color Color.SeaShell { get }",
                  "public static Color SplashKit.ColorSeaShell();"
                ],
                "cpp": [
                  "#define COLOR_SEA_SHELL",
                  "color color_sea_shell()"
                ],
                "pascal": [
                  "function ColorSeaShell(): Color"
                ]
              }
            },
            "setter": null
          },
          "sienna": {
            "getter": {
              "signature": "color color_sienna();",
              "name": "color_sienna",
              "method_name": null,
              "unique_global_name": "color_sienna",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `sienna`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `sienna`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "sienna",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_sienna():"
                ],
                "csharp": [
                  "public static Color Color.Sienna { get }",
                  "public static Color SplashKit.ColorSienna();"
                ],
                "cpp": [
                  "#define COLOR_SIENNA",
                  "color color_sienna()"
                ],
                "pascal": [
                  "function ColorSienna(): Color"
                ]
              }
            },
            "setter": null
          },
          "silver": {
            "getter": {
              "signature": "color color_silver();",
              "name": "color_silver",
              "method_name": null,
              "unique_global_name": "color_silver",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `silver`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `silver`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "silver",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_silver():"
                ],
                "csharp": [
                  "public static Color Color.Silver { get }",
                  "public static Color SplashKit.ColorSilver();"
                ],
                "cpp": [
                  "#define COLOR_SILVER",
                  "color color_silver()"
                ],
                "pascal": [
                  "function ColorSilver(): Color"
                ]
              }
            },
            "setter": null
          },
          "sky_blue": {
            "getter": {
              "signature": "color color_sky_blue();",
              "name": "color_sky_blue",
              "method_name": null,
              "unique_global_name": "color_sky_blue",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `sky_blue`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `sky_blue`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "sky_blue",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_sky_blue():"
                ],
                "csharp": [
                  "public static Color Color.SkyBlue { get }",
                  "public static Color SplashKit.ColorSkyBlue();"
                ],
                "cpp": [
                  "#define COLOR_SKY_BLUE",
                  "color color_sky_blue()"
                ],
                "pascal": [
                  "function ColorSkyBlue(): Color"
                ]
              }
            },
            "setter": null
          },
          "slate_blue": {
            "getter": {
              "signature": "color color_slate_blue();",
              "name": "color_slate_blue",
              "method_name": null,
              "unique_global_name": "color_slate_blue",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `slate_blue`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `slate_blue`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "slate_blue",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_slate_blue():"
                ],
                "csharp": [
                  "public static Color Color.SlateBlue { get }",
                  "public static Color SplashKit.ColorSlateBlue();"
                ],
                "cpp": [
                  "#define COLOR_SLATE_BLUE",
                  "color color_slate_blue()"
                ],
                "pascal": [
                  "function ColorSlateBlue(): Color"
                ]
              }
            },
            "setter": null
          },
          "slate_gray": {
            "getter": {
              "signature": "color color_slate_gray();",
              "name": "color_slate_gray",
              "method_name": null,
              "unique_global_name": "color_slate_gray",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `slate_gray`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `slate_gray`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "slate_gray",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_slate_gray():"
                ],
                "csharp": [
                  "public static Color Color.SlateGray { get }",
                  "public static Color SplashKit.ColorSlateGray();"
                ],
                "cpp": [
                  "#define COLOR_SLATE_GRAY",
                  "color color_slate_gray()"
                ],
                "pascal": [
                  "function ColorSlateGray(): Color"
                ]
              }
            },
            "setter": null
          },
          "snow": {
            "getter": {
              "signature": "color color_snow();",
              "name": "color_snow",
              "method_name": null,
              "unique_global_name": "color_snow",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `snow`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `snow`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "snow",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_snow():"
                ],
                "csharp": [
                  "public static Color Color.Snow { get }",
                  "public static Color SplashKit.ColorSnow();"
                ],
                "cpp": [
                  "#define COLOR_SNOW",
                  "color color_snow()"
                ],
                "pascal": [
                  "function ColorSnow(): Color"
                ]
              }
            },
            "setter": null
          },
          "spring_green": {
            "getter": {
              "signature": "color color_spring_green();",
              "name": "color_spring_green",
              "method_name": null,
              "unique_global_name": "color_spring_green",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `spring_green`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `spring_green`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "spring_green",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_spring_green():"
                ],
                "csharp": [
                  "public static Color Color.SpringGreen { get }",
                  "public static Color SplashKit.ColorSpringGreen();"
                ],
                "cpp": [
                  "#define COLOR_SPRING_GREEN",
                  "color color_spring_green()"
                ],
                "pascal": [
                  "function ColorSpringGreen(): Color"
                ]
              }
            },
            "setter": null
          },
          "steel_blue": {
            "getter": {
              "signature": "color color_steel_blue();",
              "name": "color_steel_blue",
              "method_name": null,
              "unique_global_name": "color_steel_blue",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `steel_blue`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `steel_blue`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "steel_blue",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_steel_blue():"
                ],
                "csharp": [
                  "public static Color Color.SteelBlue { get }",
                  "public static Color SplashKit.ColorSteelBlue();"
                ],
                "cpp": [
                  "#define COLOR_STEEL_BLUE",
                  "color color_steel_blue()"
                ],
                "pascal": [
                  "function ColorSteelBlue(): Color"
                ]
              }
            },
            "setter": null
          },
          "swinburne_red": {
            "getter": {
              "signature": "color color_swinburne_red();",
              "name": "color_swinburne_red",
              "method_name": null,
              "unique_global_name": "color_swinburne_red",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `swinburne_red`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `swinburne_red`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "swinburne_red",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_swinburne_red():"
                ],
                "csharp": [
                  "public static Color Color.SwinburneRed { get }",
                  "public static Color SplashKit.ColorSwinburneRed();"
                ],
                "cpp": [
                  "#define COLOR_SWINBURNE_RED",
                  "color color_swinburne_red()"
                ],
                "pascal": [
                  "function ColorSwinburneRed(): Color"
                ]
              }
            },
            "setter": null
          },
          "tan": {
            "getter": {
              "signature": "color color_tan();",
              "name": "color_tan",
              "method_name": null,
              "unique_global_name": "color_tan",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `tan`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `tan`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "tan",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_tan():"
                ],
                "csharp": [
                  "public static Color Color.Tan { get }",
                  "public static Color SplashKit.ColorTan();"
                ],
                "cpp": [
                  "#define COLOR_TAN",
                  "color color_tan()"
                ],
                "pascal": [
                  "function ColorTan(): Color"
                ]
              }
            },
            "setter": null
          },
          "teal": {
            "getter": {
              "signature": "color color_teal();",
              "name": "color_teal",
              "method_name": null,
              "unique_global_name": "color_teal",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `teal`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `teal`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "teal",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_teal():"
                ],
                "csharp": [
                  "public static Color Color.Teal { get }",
                  "public static Color SplashKit.ColorTeal();"
                ],
                "cpp": [
                  "#define COLOR_TEAL",
                  "color color_teal()"
                ],
                "pascal": [
                  "function ColorTeal(): Color"
                ]
              }
            },
            "setter": null
          },
          "thistle": {
            "getter": {
              "signature": "color color_thistle();",
              "name": "color_thistle",
              "method_name": null,
              "unique_global_name": "color_thistle",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `thistle`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `thistle`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "thistle",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_thistle():"
                ],
                "csharp": [
                  "public static Color Color.Thistle { get }",
                  "public static Color SplashKit.ColorThistle();"
                ],
                "cpp": [
                  "#define COLOR_THISTLE",
                  "color color_thistle()"
                ],
                "pascal": [
                  "function ColorThistle(): Color"
                ]
              }
            },
            "setter": null
          },
          "tomato": {
            "getter": {
              "signature": "color color_tomato();",
              "name": "color_tomato",
              "method_name": null,
              "unique_global_name": "color_tomato",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `tomato`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `tomato`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "tomato",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_tomato():"
                ],
                "csharp": [
                  "public static Color Color.Tomato { get }",
                  "public static Color SplashKit.ColorTomato();"
                ],
                "cpp": [
                  "#define COLOR_TOMATO",
                  "color color_tomato()"
                ],
                "pascal": [
                  "function ColorTomato(): Color"
                ]
              }
            },
            "setter": null
          },
          "transparent": {
            "getter": {
              "signature": "color color_transparent();",
              "name": "color_transparent",
              "method_name": null,
              "unique_global_name": "color_transparent",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `transparent`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A `transparent` color (i.e., a color with an `alpha` of 0).",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "transparent",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_transparent():"
                ],
                "csharp": [
                  "public static Color Color.Transparent { get }",
                  "public static Color SplashKit.ColorTransparent();"
                ],
                "cpp": [
                  "#define COLOR_TRANSPARENT",
                  "color color_transparent()"
                ],
                "pascal": [
                  "function ColorTransparent(): Color"
                ]
              }
            },
            "setter": null
          },
          "turquoise": {
            "getter": {
              "signature": "color color_turquoise();",
              "name": "color_turquoise",
              "method_name": null,
              "unique_global_name": "color_turquoise",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `turquoise`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `turquoise`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "turquoise",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_turquoise():"
                ],
                "csharp": [
                  "public static Color Color.Turquoise { get }",
                  "public static Color SplashKit.ColorTurquoise();"
                ],
                "cpp": [
                  "#define COLOR_TURQUOISE",
                  "color color_turquoise()"
                ],
                "pascal": [
                  "function ColorTurquoise(): Color"
                ]
              }
            },
            "setter": null
          },
          "violet": {
            "getter": {
              "signature": "color color_violet();",
              "name": "color_violet",
              "method_name": null,
              "unique_global_name": "color_violet",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `violet`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `violet`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "violet",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_violet():"
                ],
                "csharp": [
                  "public static Color Color.Violet { get }",
                  "public static Color SplashKit.ColorViolet();"
                ],
                "cpp": [
                  "#define COLOR_VIOLET",
                  "color color_violet()"
                ],
                "pascal": [
                  "function ColorViolet(): Color"
                ]
              }
            },
            "setter": null
          },
          "wheat": {
            "getter": {
              "signature": "color color_wheat();",
              "name": "color_wheat",
              "method_name": null,
              "unique_global_name": "color_wheat",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `wheat`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `wheat`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "wheat",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_wheat():"
                ],
                "csharp": [
                  "public static Color Color.Wheat { get }",
                  "public static Color SplashKit.ColorWheat();"
                ],
                "cpp": [
                  "#define COLOR_WHEAT",
                  "color color_wheat()"
                ],
                "pascal": [
                  "function ColorWheat(): Color"
                ]
              }
            },
            "setter": null
          },
          "white": {
            "getter": {
              "signature": "color color_white();",
              "name": "color_white",
              "method_name": null,
              "unique_global_name": "color_white",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `white`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `white`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "white",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_white():"
                ],
                "csharp": [
                  "public static Color Color.White { get }",
                  "public static Color SplashKit.ColorWhite();"
                ],
                "cpp": [
                  "#define COLOR_WHITE",
                  "color color_white()"
                ],
                "pascal": [
                  "function ColorWhite(): Color"
                ]
              }
            },
            "setter": null
          },
          "white_smoke": {
            "getter": {
              "signature": "color color_white_smoke();",
              "name": "color_white_smoke",
              "method_name": null,
              "unique_global_name": "color_white_smoke",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `white_smoke`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `white_smoke`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "white_smoke",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_white_smoke():"
                ],
                "csharp": [
                  "public static Color Color.WhiteSmoke { get }",
                  "public static Color SplashKit.ColorWhiteSmoke();"
                ],
                "cpp": [
                  "#define COLOR_WHITE_SMOKE",
                  "color color_white_smoke()"
                ],
                "pascal": [
                  "function ColorWhiteSmoke(): Color"
                ]
              }
            },
            "setter": null
          },
          "yellow": {
            "getter": {
              "signature": "color color_yellow();",
              "name": "color_yellow",
              "method_name": null,
              "unique_global_name": "color_yellow",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `yellow`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `yellow`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "yellow",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_yellow():"
                ],
                "csharp": [
                  "public static Color Color.Yellow { get }",
                  "public static Color SplashKit.ColorYellow();"
                ],
                "cpp": [
                  "#define COLOR_YELLOW",
                  "color color_yellow()"
                ],
                "pascal": [
                  "function ColorYellow(): Color"
                ]
              }
            },
            "setter": null
          },
          "yellow_green": {
            "getter": {
              "signature": "color color_yellow_green();",
              "name": "color_yellow_green",
              "method_name": null,
              "unique_global_name": "color_yellow_green",
              "unique_method_name": null,
              "suffix_name": null,
              "description": "Generates a new `color` associated to the color `yellow_green`.",
              "brief": null,
              "return": {
                "type": "color",
                "description": "A new `color` set to `yellow_green`.",
                "is_pointer": false,
                "is_reference": false,
                "is_vector": false,
                "type_parameter": null
              },
              "parameters": {
              },
              "attributes": {
                "getter": "yellow_green",
                "static": "color",
                "group": "color"
              },
              "signatures": {
                "python": [
                  "def color_yellow_green():"
                ],
                "csharp": [
                  "public static Color Color.YellowGreen { get }",
                  "public static Color SplashKit.ColorYellowGreen();"
                ],
                "cpp": [
                  "#define COLOR_YELLOW_GREEN",
                  "color color_yellow_green()"
                ],
                "pascal": [
                  "function ColorYellowGreen(): Color"
                ]
              }
            },
            "setter": null
          }
        },
        "constructors": [

        ],
        "methods": [
          {
            "signature": "color hsb_color(double hue,double saturation,double brightness);",
            "name": "hsb_color",
            "method_name": "hsb_color",
            "unique_global_name": "hsb_color",
            "unique_method_name": ".hsb_color",
            "suffix_name": null,
            "description": "Returs a color from a combination of hue, saturation, and brightness.",
            "brief": null,
            "return": {
              "type": "color",
              "description": "The color from its hue, saturation and brightness.",
              "is_pointer": false,
              "is_reference": false,
              "is_vector": false,
              "type_parameter": null
            },
            "parameters": {
              "hue": {
                "type": "double",
                "description": "The hue of the color. Value must be between 0 and 1.",
                "is_pointer": false,
                "is_const": false,
                "is_reference": false,
                "is_array": false,
                "array_dimension_sizes": [

                ],
                "is_vector": false,
                "type_parameter": null
              },
              "saturation": {
                "type": "double",
                "description": "The saturation of that hue. Value must be between 0 and 1.",
                "is_pointer": false,
                "is_const": false,
                "is_reference": false,
                "is_array": false,
                "array_dimension_sizes": [

                ],
                "is_vector": false,
                "type_parameter": null
              },
              "brightness": {
                "type": "double",
                "description": "The brightness of the color. Value must be between 0 and 1.",
                "is_pointer": false,
                "is_const": false,
                "is_reference": false,
                "is_array": false,
                "array_dimension_sizes": [

                ],
                "is_vector": false,
                "type_parameter": null
              }
            },
            "attributes": {
              "method": "hsb_color",
              "static": "color",
              "group": "color"
            },
            "signatures": {
              "python": [
                "def hsb_color(hue, saturation, brightness):"
              ],
              "csharp": [
                "public static Color Color.HSBColor(double hue, double saturation, double brightness);",
                "public static Color SplashKit.HSBColor(double hue, double saturation, double brightness);"
              ],
              "cpp": [
                "color hsb_color(double hue, double saturation, double brightness)"
              ],
              "pascal": [
                "function HSBColor(hue: Double; saturation: Double; brightness: Double): Color"
              ]
            }
          },
          {
            "signature": "color random_color();",
            "name": "random_color",
            "method_name": "random",
            "unique_global_name": "random_color",
            "unique_method_name": ".random",
            "suffix_name": null,
            "description": "Creates and returns a random color where the color and its opacity are\nrandom.",
            "brief": null,
            "return": {
              "type": "color",
              "description": "A random color",
              "is_pointer": false,
              "is_reference": false,
              "is_vector": false,
              "type_parameter": null
            },
            "parameters": {
            },
            "attributes": {
              "method": "random",
              "static": "color",
              "group": "color"
            },
            "signatures": {
              "python": [
                "def random_color():"
              ],
              "csharp": [
                "public static Color Color.Random();",
                "public static Color SplashKit.RandomColor();"
              ],
              "cpp": [
                "color random_color()"
              ],
              "pascal": [
                "function RandomColor(): Color"
              ]
            }
          },
          {
            "signature": "color random_rgb_color(int alpha);",
            "name": "random_rgb_color",
            "method_name": "random_rgb",
            "unique_global_name": "random_rgb_color",
            "unique_method_name": ".random_rgb",
            "suffix_name": null,
            "description": "Creates and returns a random color where the color is random, but the\nopacity is set to the passed in value.",
            "brief": null,
            "return": {
              "type": "color",
              "description": "A random color with the set alpha",
              "is_pointer": false,
              "is_reference": false,
              "is_vector": false,
              "type_parameter": null
            },
            "parameters": {
              "alpha": {
                "type": "int",
                "description": "The set alpha (opacity) value (between 0 and 255)",
                "is_pointer": false,
                "is_const": false,
                "is_reference": false,
                "is_array": false,
                "array_dimension_sizes": [

                ],
                "is_vector": false,
                "type_parameter": null
              }
            },
            "attributes": {
              "method": "random_rgb",
              "static": "color",
              "group": "color"
            },
            "signatures": {
              "python": [
                "def random_rgb_color(alpha):"
              ],
              "csharp": [
                "public static Color Color.RandomRGB(int alpha);",
                "public static Color SplashKit.RandomRGBColor(int alpha);"
              ],
              "cpp": [
                "color random_rgb_color(int alpha)"
              ],
              "pascal": [
                "function RandomRGBColor(alpha: Integer): Color"
              ]
            }
          },
          {
            "signature": "color rgb_color(double red,double green,double blue);",
            "name": "rgb_color",
            "method_name": "rgb_color",
            "unique_global_name": "rgb_color_from_double",
            "unique_method_name": ".rgb_color_from_double",
            "suffix_name": null,
            "description": "Gets a color given its RGB components. Each of the components has\na value between 0 and 1.",
            "brief": null,
            "return": {
              "type": "color",
              "description": "The color from its different component",
              "is_pointer": false,
              "is_reference": false,
              "is_vector": false,
              "type_parameter": null
            },
            "parameters": {
              "red": {
                "type": "double",
                "description": "The red component",
                "is_pointer": false,
                "is_const": false,
                "is_reference": false,
                "is_array": false,
                "array_dimension_sizes": [

                ],
                "is_vector": false,
                "type_parameter": null
              },
              "green": {
                "type": "double",
                "description": "The green component",
                "is_pointer": false,
                "is_const": false,
                "is_reference": false,
                "is_array": false,
                "array_dimension_sizes": [

                ],
                "is_vector": false,
                "type_parameter": null
              },
              "blue": {
                "type": "double",
                "description": "The blue component",
                "is_pointer": false,
                "is_const": false,
                "is_reference": false,
                "is_array": false,
                "array_dimension_sizes": [

                ],
                "is_vector": false,
                "type_parameter": null
              }
            },
            "attributes": {
              "method": "rgb_color",
              "static": "color",
              "suffix": "from_double",
              "group": "color"
            },
            "signatures": {
              "python": [
                "def rgb_color_from_double(red, green, blue):"
              ],
              "csharp": [
                "public static Color Color.RGBColor(double red, double green, double blue);",
                "public static Color SplashKit.RGBColor(double red, double green, double blue);"
              ],
              "cpp": [
                "color rgb_color(double red, double green, double blue)"
              ],
              "pascal": [
                "function RGBColor(red: Double; green: Double; blue: Double): Color"
              ]
            }
          },
          {
            "signature": "color rgb_color(int red,int green,int blue);",
            "name": "rgb_color",
            "method_name": "rgb_color",
            "unique_global_name": "rgb_color",
            "unique_method_name": ".rgb_color",
            "suffix_name": null,
            "description": "Gets a color given its RGB components. Each of the components has\na value between 0 and 255.",
            "brief": null,
            "return": {
              "type": "color",
              "description": "The color from its different component",
              "is_pointer": false,
              "is_reference": false,
              "is_vector": false,
              "type_parameter": null
            },
            "parameters": {
              "red": {
                "type": "int",
                "description": "The red component",
                "is_pointer": false,
                "is_const": false,
                "is_reference": false,
                "is_array": false,
                "array_dimension_sizes": [

                ],
                "is_vector": false,
                "type_parameter": null
              },
              "green": {
                "type": "int",
                "description": "The green component",
                "is_pointer": false,
                "is_const": false,
                "is_reference": false,
                "is_array": false,
                "array_dimension_sizes": [

                ],
                "is_vector": false,
                "type_parameter": null
              },
              "blue": {
                "type": "int",
                "description": "The blue component",
                "is_pointer": false,
                "is_const": false,
                "is_reference": false,
                "is_array": false,
                "array_dimension_sizes": [

                ],
                "is_vector": false,
                "type_parameter": null
              }
            },
            "attributes": {
              "method": "rgb_color",
              "static": "color",
              "group": "color"
            },
            "signatures": {
              "python": [
                "def rgb_color(red, green, blue):"
              ],
              "csharp": [
                "public static Color Color.RGBColor(int red, int green, int blue);",
                "public static Color SplashKit.RGBColor(int red, int green, int blue);"
              ],
              "cpp": [
                "color rgb_color(int red, int green, int blue)"
              ],
              "pascal": [
                "function RGBColor(red: Integer; green: Integer; blue: Integer): Color"
              ]
            }
          },
          {
            "signature": "color rgba_color(double red,double green,double blue,double alpha);",
            "name": "rgba_color",
            "method_name": "rgba_color",
            "unique_global_name": "rgba_color_from_double",
            "unique_method_name": ".rgba_color_from_double",
            "suffix_name": null,
            "description": "Gets a color given its color components. Each of the components has\na value between 0 and 1.0.",
            "brief": null,
            "return": {
              "type": "color",
              "description": "The color from its different component",
              "is_pointer": false,
              "is_reference": false,
              "is_vector": false,
              "type_parameter": null
            },
            "parameters": {
              "red": {
                "type": "double",
                "description": "The red component (between 0 and 1.0)",
                "is_pointer": false,
                "is_const": false,
                "is_reference": false,
                "is_array": false,
                "array_dimension_sizes": [

                ],
                "is_vector": false,
                "type_parameter": null
              },
              "green": {
                "type": "double",
                "description": "The green component (between 0 and 1.0)",
                "is_pointer": false,
                "is_const": false,
                "is_reference": false,
                "is_array": false,
                "array_dimension_sizes": [

                ],
                "is_vector": false,
                "type_parameter": null
              },
              "blue": {
                "type": "double",
                "description": "The blue component (between 0 and 1.0)",
                "is_pointer": false,
                "is_const": false,
                "is_reference": false,
                "is_array": false,
                "array_dimension_sizes": [

                ],
                "is_vector": false,
                "type_parameter": null
              },
              "alpha": {
                "type": "double",
                "description": "The alpha (opacity) component (between 0 and 1.0)",
                "is_pointer": false,
                "is_const": false,
                "is_reference": false,
                "is_array": false,
                "array_dimension_sizes": [

                ],
                "is_vector": false,
                "type_parameter": null
              }
            },
            "attributes": {
              "method": "rgba_color",
              "static": "color",
              "suffix": "from_double",
              "group": "color"
            },
            "signatures": {
              "python": [
                "def rgba_color_from_double(red, green, blue, alpha):"
              ],
              "csharp": [
                "public static Color Color.RGBAColor(double red, double green, double blue, double alpha);",
                "public static Color SplashKit.RGBAColor(double red, double green, double blue, double alpha);"
              ],
              "cpp": [
                "color rgba_color(double red, double green, double blue, double alpha)"
              ],
              "pascal": [
                "function RGBAColor(red: Double; green: Double; blue: Double; alpha: Double): Color"
              ]
            }
          },
          {
            "signature": "color rgba_color(int red,int green,int blue,int alpha);",
            "name": "rgba_color",
            "method_name": "rgba_color",
            "unique_global_name": "rgba_color",
            "unique_method_name": ".rgba_color",
            "suffix_name": null,
            "description": "Gets a color given its color components. Each of the components has\na value between 0 and 255.",
            "brief": null,
            "return": {
              "type": "color",
              "description": "The color from its different component",
              "is_pointer": false,
              "is_reference": false,
              "is_vector": false,
              "type_parameter": null
            },
            "parameters": {
              "red": {
                "type": "int",
                "description": "The red component (between 0 and 255)",
                "is_pointer": false,
                "is_const": false,
                "is_reference": false,
                "is_array": false,
                "array_dimension_sizes": [

                ],
                "is_vector": false,
                "type_parameter": null
              },
              "green": {
                "type": "int",
                "description": "The green component (between 0 and 255)",
                "is_pointer": false,
                "is_const": false,
                "is_reference": false,
                "is_array": false,
                "array_dimension_sizes": [

                ],
                "is_vector": false,
                "type_parameter": null
              },
              "blue": {
                "type": "int",
                "description": "The blue component (between 0 and 255)",
                "is_pointer": false,
                "is_const": false,
                "is_reference": false,
                "is_array": false,
                "array_dimension_sizes": [

                ],
                "is_vector": false,
                "type_parameter": null
              },
              "alpha": {
                "type": "int",
                "description": "The alpha (opacity) component (between 0 and 255)",
                "is_pointer": false,
                "is_const": false,
                "is_reference": false,
                "is_array": false,
                "array_dimension_sizes": [

                ],
                "is_vector": false,
                "type_parameter": null
              }
            },
            "attributes": {
              "method": "rgba_color",
              "static": "color",
              "group": "color"
            },
            "signatures": {
              "python": [
                "def rgba_color(red, green, blue, alpha):"
              ],
              "csharp": [
                "public static Color Color.RGBAColor(int red, int green, int blue, int alpha);",
                "public static Color SplashKit.RGBAColor(int red, int green, int blue, int alpha);"
              ],
              "cpp": [
                "color rgba_color(int red, int green, int blue, int alpha)"
              ],
              "pascal": [
                "function RGBAColor(red: Integer; green: Integer; blue: Integer; alpha: Integer): Color"
              ]
            }
          }
        ],
        "is_alias": false,
        "is_struct": true
      },
      {
        "signature": "struct drawing_options {void *dest; // The bitmap or window used to draw on tofloat scale_x; // Scale datafloat scale_y; //float angle; // Angle for rotationsfloat anchor_offset_x; // Centre point for rotationsfloat anchor_offset_y; //bool flip_x; // Flip databool flip_y; //bool is_part; // Draw just a part?rectangle part; // Part to drawint draw_cell; // The cell to draw - overridden by animation or partdrawing_dest camera; // Draw to world or screen coordinates (camera has effect?)int line_width; // Specify the width of line drawings.animation anim; // The animation for bitmap drawing};",
        "name": "drawing_options",
        "description": "Drawing options allow you to customise drawing options. These should be\ninitialised using the drawing option functions such as `option_defaults`.",
        "brief": null,
        "fields": {
          "dest": {
            "type": "void",
            "description": "The destination of the drawing: a window or bitmap.",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "scale_x": {
            "type": "float",
            "description": "How much x values are scaled.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "scale_y": {
            "type": "float",
            "description": "How much y values are scaled.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "angle": {
            "type": "float",
            "description": "A rotation angle for bitmap drawing.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "anchor_offset_x": {
            "type": "float",
            "description": "The x location of the anchor point around which\nbitmap drawing will rotate.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "anchor_offset_y": {
            "type": "float",
            "description": "The y location of the anchor point around which\nbitmap drawing will rotate.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "flip_x": {
            "type": "bool",
            "description": "Should bitmaps be flipped horizontally",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "flip_y": {
            "type": "bool",
            "description": "Should bitmaps be flipped vertically",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "is_part": {
            "type": "bool",
            "description": "Indicates that part of a bitmap should be drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "part": {
            "type": "rectangle",
            "description": "The area of the bitmap to draw",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "draw_cell": {
            "type": "int",
            "description": "Which cell of a bitmap to draw, or -1 for all. Overrides\nparts and animation settings.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "camera": {
            "type": "drawing_dest",
            "description": "How the current window camera affects the drawing",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "line_width": {
            "type": "int",
            "description": "How wide are lines (only lines at this stage)",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "anim": {
            "type": "animation",
            "description": "The animation to use, which overrides the part\noption",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "types"
        },
        "properties": {
        },
        "constructors": [

        ],
        "methods": [

        ],
        "is_alias": false,
        "is_struct": true
      },
      {
        "signature": "struct line {point_2d start_point;point_2d end_point;};",
        "name": "line",
        "description": "A line goes from a start point to an end point.",
        "brief": null,
        "fields": {
          "start_point": {
            "type": "point_2d",
            "description": "The start of the line",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "end_point": {
            "type": "point_2d",
            "description": "The end of the line",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "types"
        },
        "properties": {
        },
        "constructors": [

        ],
        "methods": [

        ],
        "is_alias": false,
        "is_struct": true
      },
      {
        "signature": "struct point_2d {double x, y;};",
        "name": "point_2d",
        "description": "A Point2D represents an location in Cartesian coordinates (x,y).\nThe x value represents the distance from the left edge of the window or bitmap, increasing\nin value as you travel right. The y value represents the distance from the top\nedge of the window or bitmap, and increases as you travel down toward the bottom.\n\nPoint2D is a great way to keep track of the location of something in a 2D space like\na Window or Bitmap.",
        "brief": null,
        "fields": {
          "x": {
            "type": "double",
            "description": "The distance from the left side of the bitmap or window (\nincreasing as you go to the right)",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The distance from the top of a bitmap or window (increasing\nas you go down).",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "types"
        },
        "properties": {
        },
        "constructors": [

        ],
        "methods": [

        ],
        "is_alias": false,
        "is_struct": true
      },
      {
        "signature": "struct quad {point_2d points[4];};",
        "name": "quad",
        "description": "Quads (quadrilaterals) are shapes with 4 sides, but unlike `rectangle`,\nthese shapes can have axis that do not line up with screen/bitmap axis.\n\nPoints should be constructed with the top left as the first point, top\nright as the second, bottom left as the third, and bottom right as the\nlast point. Other orders may give unexpected outcomes.",
        "brief": null,
        "fields": {
          "points": {
            "type": "point_2d",
            "description": "The array of points: top left, top right, bottom left,\nbottom right",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": true,
            "array_dimension_sizes": [
              4
            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "types"
        },
        "properties": {
        },
        "constructors": [

        ],
        "methods": [

        ],
        "is_alias": false,
        "is_struct": true
      },
      {
        "signature": "struct rectangle {double x, y;double width, height;};",
        "name": "rectangle",
        "description": "Rectangles are simple rectangle shapes that exist at a point and have a\nset width and height. This means that the rectangle always has edges that\nfollow the sides of the `window` or `bitmap` (so they are aligned with\nthe x and y axes). The rectangle's position is its top left corner - it\nthen extends to the right and down from this position.",
        "brief": null,
        "fields": {
          "x": {
            "type": "double",
            "description": "The distance to the left edge of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The distance to the top edge of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "double",
            "description": "The width of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "double",
            "description": "The height of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "types"
        },
        "properties": {
        },
        "constructors": [

        ],
        "methods": [

        ],
        "is_alias": false,
        "is_struct": true
      },
      {
        "signature": "struct triangle {point_2d points[3];};",
        "name": "triangle",
        "description": "A triangle consists of three points, being the three points of the\ntriangle.",
        "brief": null,
        "fields": {
          "points": {
            "type": "point_2d",
            "description": "The points of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": true,
            "array_dimension_sizes": [
              3
            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "types"
        },
        "properties": {
        },
        "constructors": [

        ],
        "methods": [

        ],
        "is_alias": false,
        "is_struct": true
      },
      {
        "signature": "struct vector_2d {double x;double y;};",
        "name": "vector_2d",
        "description": "Vectors represent a direction and distance, and can be visualised as an\narrow from one point to another in 2 dimensional space. Internally, the\n`vector_2d` is stored as its x and y components.\n\nVector is a great way to represent movement or forces. You could use a\n`vector_2d` to track how much a character moves each update (as the\nvector stores the direction and distance). Similarly, you could use a\n`vector_2d` to represent gravity or other forces. You can then\nadd a number of force vectors together to get a final force to be applied\nto a character.",
        "brief": null,
        "fields": {
          "x": {
            "type": "double",
            "description": "The distance to move horizontally",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The distance to move vertically",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "types"
        },
        "properties": {
        },
        "constructors": [

        ],
        "methods": [

        ],
        "is_alias": false,
        "is_struct": true
      }
    ],
    "enums": [
      {
        "signature": "enum drawing_dest {DRAW_TO_SCREEN, // no camera effectDRAW_TO_WORLD, // camera effectDRAW_DEFAULT // camera effect on screen, but not on bitmaps};",
        "name": "drawing_dest",
        "description": "Determines the effect of the camera on a drawing operation.",
        "brief": null,
        "constants": {
          "DRAW_TO_SCREEN": {
            "description": "means camera has no affect."
          },
          "DRAW_TO_WORLD": {
            "description": "means camera has an affect."
          },
          "DRAW_DEFAULT": {
            "description": "means camera has an affect only if drawn to a\nwindow."
          }
        },
        "attributes": {
          "group": "types"
        },
        "signatures": {
          "python": "public enum {drawing_dest.draw_to_screen = 0, drawing_dest.draw_to_world = 0, drawing_dest.draw_default = 0}",
          "csharp": "public enum {DrawingDest.DrawToScreen = 0, DrawingDest.DrawToWorld = 0, DrawingDest.DrawDefault = 0}",
          "cpp": "class drawing_dest {DRAW_TO_SCREEN = 0, DRAW_TO_WORLD = 0, DRAW_DEFAULT = 0};",
          "pascal": "public enum {DrawingDest.DrawToScreen = 0, DrawingDest.DrawToWorld = 0, DrawingDest.DrawDefault = 0}"
        }
      },
      {
        "signature": "enum font_style {NORMAL_FONT = 0,BOLD_FONT = 1,ITALIC_FONT = 2,UNDERLINE_FONT = 4};",
        "name": "font_style",
        "description": "Use font styles to set the style of a font. Setting the style is time\nconsuming, so create alternative font variables for each different\nstyle you want to work with. Note that these values can be logical\nORed together to combine styles, e.g. BoldFont or ItalicFont = both\nbold and italic.",
        "brief": null,
        "constants": {
          "NORMAL_FONT": {
            "description": "Normal font.",
            "number": 0
          },
          "BOLD_FONT": {
            "description": "Bold font.",
            "number": 1
          },
          "ITALIC_FONT": {
            "description": "Italic font.",
            "number": 2
          },
          "UNDERLINE_FONT": {
            "description": "Underlined font.",
            "number": 4
          }
        },
        "attributes": {
          "group": "types"
        },
        "signatures": {
          "python": "public enum {font_style.normal_font = 0, font_style.bold_font = 1, font_style.italic_font = 2, font_style.underline_font = 4}",
          "csharp": "public enum {FontStyle.NormalFont = 0, FontStyle.BoldFont = 1, FontStyle.ItalicFont = 2, FontStyle.UnderlineFont = 4}",
          "cpp": "class font_style {NORMAL_FONT = 0, BOLD_FONT = 1, ITALIC_FONT = 2, UNDERLINE_FONT = 4};",
          "pascal": "public enum {FontStyle.NormalFont = 0, FontStyle.BoldFont = 1, FontStyle.ItalicFont = 2, FontStyle.UnderlineFont = 4}"
        }
      },
      {
        "signature": "enum http_status_code {HTTP_STATUS_OK = 200,HTTP_STATUS_CREATED = 201,HTTP_STATUS_NO_CONTENT = 204,HTTP_STATUS_MOVED_PERMANENTLY = 301,HTTP_STATUS_FOUND = 302,HTTP_STATUS_SEE_OTHER = 303,HTTP_STATUS_BAD_REQUEST = 400,HTTP_STATUS_UNAUTHORIZED = 401,HTTP_STATUS_FORBIDDEN = 403,HTTP_STATUS_NOT_FOUND = 404,HTTP_STATUS_METHOD_NOT_ALLOWED = 405,HTTP_STATUS_REQUEST_TIMEOUT = 408,HTTP_STATUS_CONFLICT = 409,HTTP_STATUS_INTERNAL_SERVER_ERROR = 500,HTTP_STATUS_NOT_IMPLEMENTED = 501,HTTP_STATUS_SERVICE_UNAVAILABLE = 503};",
        "name": "http_status_code",
        "description": "Defines the HTTP status codes supported by SplashKit.\nRefer to [this article](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes)\nfor a detailed description of each code.",
        "brief": null,
        "constants": {
          "HTTP_STATUS_OK": {
            "description": "The server accepted the request.",
            "number": 200
          },
          "HTTP_STATUS_CREATED": {
            "description": "The request has been fulfilled, resulting in the creation of a new resource.",
            "number": 201
          },
          "HTTP_STATUS_NO_CONTENT": {
            "description": "The server successfully processed the request and is not returning any content.",
            "number": 204
          },
          "HTTP_STATUS_MOVED_PERMANENTLY": {
            "description": "The URL of the requested resource has been changed permanently.",
            "number": 301
          },
          "HTTP_STATUS_FOUND": {
            "description": "The URI of requested resource has been changed temporarily.",
            "number": 302
          },
          "HTTP_STATUS_SEE_OTHER": {
            "description": "The server sent this response to direct the client to get the requested resource at another URI with a GET request.",
            "number": 303
          },
          "HTTP_STATUS_BAD_REQUEST": {
            "description": "The server cannot or will not process the request due to an apparent client error.",
            "number": 400
          },
          "HTTP_STATUS_UNAUTHORIZED": {
            "description": "The server requires authentication or has failed to process provided authentication.",
            "number": 401
          },
          "HTTP_STATUS_FORBIDDEN": {
            "description": "The request was a valid request, but the server is refusing to respond to it.",
            "number": 403
          },
          "HTTP_STATUS_NOT_FOUND": {
            "description": "The requested resource could not be found but may be available in the future.",
            "number": 404
          },
          "HTTP_STATUS_METHOD_NOT_ALLOWED": {
            "description": "The request method is not support for the requested resource.",
            "number": 405
          },
          "HTTP_STATUS_REQUEST_TIMEOUT": {
            "description": "The server timed out waiting for the request.",
            "number": 408
          },
          "HTTP_STATUS_CONFLICT": {
            "description": "The request conflicts with current state of the server.",
            "number": 409
          },
          "HTTP_STATUS_INTERNAL_SERVER_ERROR": {
            "description": "The server encountered an unexpected condition.",
            "number": 500
          },
          "HTTP_STATUS_NOT_IMPLEMENTED": {
            "description": "The server does not recognize or implement the request method.",
            "number": 501
          },
          "HTTP_STATUS_SERVICE_UNAVAILABLE": {
            "description": "The server is currently unavailable.",
            "number": 503
          }
        },
        "attributes": {
          "group": "types"
        },
        "signatures": {
          "python": "public enum {http_status_code.http_status_ok = 200, http_status_code.http_status_created = 201, http_status_code.http_status_no_content = 204, http_status_code.http_status_moved_permanently = 301, http_status_code.http_status_found = 302, http_status_code.http_status_see_other = 303, http_status_code.http_status_bad_request = 400, http_status_code.http_status_unauthorized = 401, http_status_code.http_status_forbidden = 403, http_status_code.http_status_not_found = 404, http_status_code.http_status_method_not_allowed = 405, http_status_code.http_status_request_timeout = 408, http_status_code.http_status_conflict = 409, http_status_code.http_status_internal_server_error = 500, http_status_code.http_status_not_implemented = 501, http_status_code.http_status_service_unavailable = 503}",
          "csharp": "public enum {HttpStatusCode.HttpStatusOk = 200, HttpStatusCode.HttpStatusCreated = 201, HttpStatusCode.HttpStatusNoContent = 204, HttpStatusCode.HttpStatusMovedPermanently = 301, HttpStatusCode.HttpStatusFound = 302, HttpStatusCode.HttpStatusSeeOther = 303, HttpStatusCode.HttpStatusBadRequest = 400, HttpStatusCode.HttpStatusUnauthorized = 401, HttpStatusCode.HttpStatusForbidden = 403, HttpStatusCode.HttpStatusNotFound = 404, HttpStatusCode.HttpStatusMethodNotAllowed = 405, HttpStatusCode.HttpStatusRequestTimeout = 408, HttpStatusCode.HttpStatusConflict = 409, HttpStatusCode.HttpStatusInternalServerError = 500, HttpStatusCode.HttpStatusNotImplemented = 501, HttpStatusCode.HttpStatusServiceUnavailable = 503}",
          "cpp": "class http_status_code {HTTP_STATUS_OK = 200, HTTP_STATUS_CREATED = 201, HTTP_STATUS_NO_CONTENT = 204, HTTP_STATUS_MOVED_PERMANENTLY = 301, HTTP_STATUS_FOUND = 302, HTTP_STATUS_SEE_OTHER = 303, HTTP_STATUS_BAD_REQUEST = 400, HTTP_STATUS_UNAUTHORIZED = 401, HTTP_STATUS_FORBIDDEN = 403, HTTP_STATUS_NOT_FOUND = 404, HTTP_STATUS_METHOD_NOT_ALLOWED = 405, HTTP_STATUS_REQUEST_TIMEOUT = 408, HTTP_STATUS_CONFLICT = 409, HTTP_STATUS_INTERNAL_SERVER_ERROR = 500, HTTP_STATUS_NOT_IMPLEMENTED = 501, HTTP_STATUS_SERVICE_UNAVAILABLE = 503};",
          "pascal": "public enum {HttpStatusCode.HttpStatusOk = 200, HttpStatusCode.HttpStatusCreated = 201, HttpStatusCode.HttpStatusNoContent = 204, HttpStatusCode.HttpStatusMovedPermanently = 301, HttpStatusCode.HttpStatusFound = 302, HttpStatusCode.HttpStatusSeeOther = 303, HttpStatusCode.HttpStatusBadRequest = 400, HttpStatusCode.HttpStatusUnauthorized = 401, HttpStatusCode.HttpStatusForbidden = 403, HttpStatusCode.HttpStatusNotFound = 404, HttpStatusCode.HttpStatusMethodNotAllowed = 405, HttpStatusCode.HttpStatusRequestTimeout = 408, HttpStatusCode.HttpStatusConflict = 409, HttpStatusCode.HttpStatusInternalServerError = 500, HttpStatusCode.HttpStatusNotImplemented = 501, HttpStatusCode.HttpStatusServiceUnavailable = 503}"
        }
      },
      {
        "signature": "enum interface_style {FLAT_DARK_STYLE = 0,SHADED_DARK_STYLE = 1,FLAT_LIGHT_STYLE = 2,SHADED_LIGHT_STYLE = 3,BUBBLE = 4,BUBBLE_MULTICOLORED = 5};",
        "name": "interface_style",
        "description": "Use these interface styles as a way to quickly\ncustomize your interface.",
        "brief": null,
        "constants": {
          "FLAT_DARK_STYLE": {
            "description": "A flat, dark-mode interface.",
            "number": 0
          },
          "SHADED_DARK_STYLE": {
            "description": "A dark-mode interface with shadows and depth.",
            "number": 1
          },
          "FLAT_LIGHT_STYLE": {
            "description": "A flat, light-mode interface.",
            "number": 2
          },
          "SHADED_LIGHT_STYLE": {
            "description": "A light-mode interface with shadows and depth.",
            "number": 3
          },
          "BUBBLE": {
            "description": "A light-mode interface with a semi-transparent bubbly look.",
            "number": 4
          },
          "BUBBLE_MULTICOLORED": {
            "description": "A light-mode interface with a semi-transparent bubbly look - gives a multi-coloured result when provided a color.",
            "number": 5
          }
        },
        "attributes": {
          "group": "types"
        },
        "signatures": {
          "python": "public enum {interface_style.flat_dark_style = 0, interface_style.shaded_dark_style = 1, interface_style.flat_light_style = 2, interface_style.shaded_light_style = 3, interface_style.bubble = 4, interface_style.bubble_multicolored = 5}",
          "csharp": "public enum {InterfaceStyle.FlatDarkStyle = 0, InterfaceStyle.ShadedDarkStyle = 1, InterfaceStyle.FlatLightStyle = 2, InterfaceStyle.ShadedLightStyle = 3, InterfaceStyle.Bubble = 4, InterfaceStyle.BubbleMulticolored = 5}",
          "cpp": "class interface_style {FLAT_DARK_STYLE = 0, SHADED_DARK_STYLE = 1, FLAT_LIGHT_STYLE = 2, SHADED_LIGHT_STYLE = 3, BUBBLE = 4, BUBBLE_MULTICOLORED = 5};",
          "pascal": "public enum {InterfaceStyle.FlatDarkStyle = 0, InterfaceStyle.ShadedDarkStyle = 1, InterfaceStyle.FlatLightStyle = 2, InterfaceStyle.ShadedLightStyle = 3, InterfaceStyle.Bubble = 4, InterfaceStyle.BubbleMulticolored = 5}"
        }
      },
      {
        "signature": "enum pin_modes {GPIO_INPUT = 0,GPIO_OUTPUT = 1,GPIO_ALT0 = 4,GPIO_ALT1 = 5,GPIO_ALT2 = 6,GPIO_ALT3 = 7,GPIO_ALT4 = 3,GPIO_ALT5 = 2,GPIO_DEFAULT_MODE = -1,};",
        "name": "pin_modes",
        "description": "GPIO Pin Modes:",
        "brief": null,
        "constants": {
          "GPIO_INPUT": {
            "description": "Input mode.",
            "number": 0
          },
          "GPIO_OUTPUT": {
            "description": "Output mode.",
            "number": 1
          },
          "GPIO_ALT0": {
            "description": "Alternate function mode 0.",
            "number": 4
          },
          "GPIO_ALT1": {
            "description": "Alternate function mode 1.",
            "number": 5
          },
          "GPIO_ALT2": {
            "description": "Alternate function mode 2.",
            "number": 6
          },
          "GPIO_ALT3": {
            "description": "Alternate function mode 3.",
            "number": 7
          },
          "GPIO_ALT4": {
            "description": "Alternate function mode 4.",
            "number": 3
          },
          "GPIO_ALT5": {
            "description": "Alternate function mode 5.",
            "number": 2
          },
          "GPIO_DEFAULT_MODE": {
            "description": "Default mode.",
            "number": 1
          }
        },
        "attributes": {
          "group": "types"
        },
        "signatures": {
          "python": "public enum {pin_modes.gpio_input = 0, pin_modes.gpio_output = 1, pin_modes.gpio_alt0 = 4, pin_modes.gpio_alt1 = 5, pin_modes.gpio_alt2 = 6, pin_modes.gpio_alt3 = 7, pin_modes.gpio_alt4 = 3, pin_modes.gpio_alt5 = 2, pin_modes.gpio_default_mode = 1}",
          "csharp": "public enum {PinModes.GpioInput = 0, PinModes.GpioOutput = 1, PinModes.GpioAlt0 = 4, PinModes.GpioAlt1 = 5, PinModes.GpioAlt2 = 6, PinModes.GpioAlt3 = 7, PinModes.GpioAlt4 = 3, PinModes.GpioAlt5 = 2, PinModes.GpioDefaultMode = 1}",
          "cpp": "class pin_modes {GPIO_INPUT = 0, GPIO_OUTPUT = 1, GPIO_ALT0 = 4, GPIO_ALT1 = 5, GPIO_ALT2 = 6, GPIO_ALT3 = 7, GPIO_ALT4 = 3, GPIO_ALT5 = 2, GPIO_DEFAULT_MODE = 1};",
          "pascal": "public enum {PinModes.GpioInput = 0, PinModes.GpioOutput = 1, PinModes.GpioAlt0 = 4, PinModes.GpioAlt1 = 5, PinModes.GpioAlt2 = 6, PinModes.GpioAlt3 = 7, PinModes.GpioAlt4 = 3, PinModes.GpioAlt5 = 2, PinModes.GpioDefaultMode = 1}"
        }
      },
      {
        "signature": "enum pin_values {GPIO_LOW = 0,GPIO_HIGH = 1,GPIO_DEFAULT_VALUE = -1};",
        "name": "pin_values",
        "description": "GPIO Pin Values:",
        "brief": null,
        "constants": {
          "GPIO_LOW": {
            "description": "Logic low (0).",
            "number": 0
          },
          "GPIO_HIGH": {
            "description": "Logic high (1).",
            "number": 1
          },
          "GPIO_DEFAULT_VALUE": {
            "description": "Default value.",
            "number": 1
          }
        },
        "attributes": {
          "group": "types"
        },
        "signatures": {
          "python": "public enum {pin_values.gpio_low = 0, pin_values.gpio_high = 1, pin_values.gpio_default_value = 1}",
          "csharp": "public enum {PinValues.GpioLow = 0, PinValues.GpioHigh = 1, PinValues.GpioDefaultValue = 1}",
          "cpp": "class pin_values {GPIO_LOW = 0, GPIO_HIGH = 1, GPIO_DEFAULT_VALUE = 1};",
          "pascal": "public enum {PinValues.GpioLow = 0, PinValues.GpioHigh = 1, PinValues.GpioDefaultValue = 1}"
        }
      },
      {
        "signature": "enum pins {PIN_1 = 1,PIN_2 = 2,PIN_3 = 3,PIN_4 = 4,PIN_5 = 5,PIN_6 = 6,PIN_7 = 7,PIN_8 = 8,PIN_9 = 9,PIN_10 = 10,PIN_11 = 11,PIN_12 = 12,PIN_13 = 13,PIN_14 = 14,PIN_15 = 15,PIN_16 = 16,PIN_17 = 17,PIN_18 = 18,PIN_19 = 19,PIN_20 = 20,PIN_21 = 21,PIN_22 = 22,PIN_23 = 23,PIN_24 = 24,PIN_25 = 25,PIN_26 = 26,PIN_27 = 27,PIN_28 = 28,PIN_29 = 29,PIN_30 = 30,PIN_31 = 31,PIN_32 = 32,PIN_33 = 33,PIN_34 = 34,PIN_35 = 35,PIN_36 = 36,PIN_37 = 37,PIN_38 = 38,PIN_39 = 39,PIN_40 = 40,};",
        "name": "pins",
        "description": "Raspberry Pi GPIO Board Pin Descriptions:",
        "brief": null,
        "constants": {
          "PIN_1": {
            "description": "3.3V Power Supply",
            "number": 1
          },
          "PIN_2": {
            "description": "5V Power Supply",
            "number": 2
          },
          "PIN_3": {
            "description": "GPIO2 / SDA (I2C)",
            "number": 3
          },
          "PIN_4": {
            "description": "5V Power Supply",
            "number": 4
          },
          "PIN_5": {
            "description": "GPIO3 / SCL (I2C)",
            "number": 5
          },
          "PIN_6": {
            "description": "Ground",
            "number": 6
          },
          "PIN_7": {
            "description": "GPIO4",
            "number": 7
          },
          "PIN_8": {
            "description": "GPIO14 / TXD (UART)",
            "number": 8
          },
          "PIN_9": {
            "description": "Ground",
            "number": 9
          },
          "PIN_10": {
            "description": "GPIO15 / RXD (UART)",
            "number": 10
          },
          "PIN_11": {
            "description": "GPIO17",
            "number": 11
          },
          "PIN_12": {
            "description": "GPIO18 / PCM_CLK",
            "number": 12
          },
          "PIN_13": {
            "description": "GPIO27",
            "number": 13
          },
          "PIN_14": {
            "description": "Ground",
            "number": 14
          },
          "PIN_15": {
            "description": "GPIO22",
            "number": 15
          },
          "PIN_16": {
            "description": "GPIO23",
            "number": 16
          },
          "PIN_17": {
            "description": "3.3V Power Supply",
            "number": 17
          },
          "PIN_18": {
            "description": "GPIO24",
            "number": 18
          },
          "PIN_19": {
            "description": "GPIO10 / MOSI (SPI)",
            "number": 19
          },
          "PIN_20": {
            "description": "Ground",
            "number": 20
          },
          "PIN_21": {
            "description": "GPIO9 / MISO (SPI)",
            "number": 21
          },
          "PIN_22": {
            "description": "GPIO25",
            "number": 22
          },
          "PIN_23": {
            "description": "GPIO11 / SCLK (SPI)",
            "number": 23
          },
          "PIN_24": {
            "description": "GPIO8 / CE0 (SPI)",
            "number": 24
          },
          "PIN_25": {
            "description": "Ground",
            "number": 25
          },
          "PIN_26": {
            "description": "GPIO7 / CE1 (SPI)",
            "number": 26
          },
          "PIN_27": {
            "description": "ID_SD (I2C ID EEPROM)",
            "number": 27
          },
          "PIN_28": {
            "description": "ID_SC (I2C ID EEPROM)",
            "number": 28
          },
          "PIN_29": {
            "description": "GPIO5",
            "number": 29
          },
          "PIN_30": {
            "description": "Ground",
            "number": 30
          },
          "PIN_31": {
            "description": "GPIO6",
            "number": 31
          },
          "PIN_32": {
            "description": "GPIO12",
            "number": 32
          },
          "PIN_33": {
            "description": "GPIO13",
            "number": 33
          },
          "PIN_34": {
            "description": "Ground",
            "number": 34
          },
          "PIN_35": {
            "description": "GPIO19 / MISO (PCM)",
            "number": 35
          },
          "PIN_36": {
            "description": "GPIO16 / CE0 (PCM)",
            "number": 36
          },
          "PIN_37": {
            "description": "GPIO26",
            "number": 37
          },
          "PIN_38": {
            "description": "GPIO20 / MOSI (PCM)",
            "number": 38
          },
          "PIN_39": {
            "description": "Ground",
            "number": 39
          },
          "PIN_40": {
            "description": "GPIO21 / SCLK (PCM)",
            "number": 40
          }
        },
        "attributes": {
          "group": "types"
        },
        "signatures": {
          "python": "public enum {pins.pin_1 = 1, pins.pin_2 = 2, pins.pin_3 = 3, pins.pin_4 = 4, pins.pin_5 = 5, pins.pin_6 = 6, pins.pin_7 = 7, pins.pin_8 = 8, pins.pin_9 = 9, pins.pin_10 = 10, pins.pin_11 = 11, pins.pin_12 = 12, pins.pin_13 = 13, pins.pin_14 = 14, pins.pin_15 = 15, pins.pin_16 = 16, pins.pin_17 = 17, pins.pin_18 = 18, pins.pin_19 = 19, pins.pin_20 = 20, pins.pin_21 = 21, pins.pin_22 = 22, pins.pin_23 = 23, pins.pin_24 = 24, pins.pin_25 = 25, pins.pin_26 = 26, pins.pin_27 = 27, pins.pin_28 = 28, pins.pin_29 = 29, pins.pin_30 = 30, pins.pin_31 = 31, pins.pin_32 = 32, pins.pin_33 = 33, pins.pin_34 = 34, pins.pin_35 = 35, pins.pin_36 = 36, pins.pin_37 = 37, pins.pin_38 = 38, pins.pin_39 = 39, pins.pin_40 = 40}",
          "csharp": "public enum {Pins.Pin1 = 1, Pins.Pin2 = 2, Pins.Pin3 = 3, Pins.Pin4 = 4, Pins.Pin5 = 5, Pins.Pin6 = 6, Pins.Pin7 = 7, Pins.Pin8 = 8, Pins.Pin9 = 9, Pins.Pin10 = 10, Pins.Pin11 = 11, Pins.Pin12 = 12, Pins.Pin13 = 13, Pins.Pin14 = 14, Pins.Pin15 = 15, Pins.Pin16 = 16, Pins.Pin17 = 17, Pins.Pin18 = 18, Pins.Pin19 = 19, Pins.Pin20 = 20, Pins.Pin21 = 21, Pins.Pin22 = 22, Pins.Pin23 = 23, Pins.Pin24 = 24, Pins.Pin25 = 25, Pins.Pin26 = 26, Pins.Pin27 = 27, Pins.Pin28 = 28, Pins.Pin29 = 29, Pins.Pin30 = 30, Pins.Pin31 = 31, Pins.Pin32 = 32, Pins.Pin33 = 33, Pins.Pin34 = 34, Pins.Pin35 = 35, Pins.Pin36 = 36, Pins.Pin37 = 37, Pins.Pin38 = 38, Pins.Pin39 = 39, Pins.Pin40 = 40}",
          "cpp": "class pins {PIN_1 = 1, PIN_2 = 2, PIN_3 = 3, PIN_4 = 4, PIN_5 = 5, PIN_6 = 6, PIN_7 = 7, PIN_8 = 8, PIN_9 = 9, PIN_10 = 10, PIN_11 = 11, PIN_12 = 12, PIN_13 = 13, PIN_14 = 14, PIN_15 = 15, PIN_16 = 16, PIN_17 = 17, PIN_18 = 18, PIN_19 = 19, PIN_20 = 20, PIN_21 = 21, PIN_22 = 22, PIN_23 = 23, PIN_24 = 24, PIN_25 = 25, PIN_26 = 26, PIN_27 = 27, PIN_28 = 28, PIN_29 = 29, PIN_30 = 30, PIN_31 = 31, PIN_32 = 32, PIN_33 = 33, PIN_34 = 34, PIN_35 = 35, PIN_36 = 36, PIN_37 = 37, PIN_38 = 38, PIN_39 = 39, PIN_40 = 40};",
          "pascal": "public enum {Pins.Pin1 = 1, Pins.Pin2 = 2, Pins.Pin3 = 3, Pins.Pin4 = 4, Pins.Pin5 = 5, Pins.Pin6 = 6, Pins.Pin7 = 7, Pins.Pin8 = 8, Pins.Pin9 = 9, Pins.Pin10 = 10, Pins.Pin11 = 11, Pins.Pin12 = 12, Pins.Pin13 = 13, Pins.Pin14 = 14, Pins.Pin15 = 15, Pins.Pin16 = 16, Pins.Pin17 = 17, Pins.Pin18 = 18, Pins.Pin19 = 19, Pins.Pin20 = 20, Pins.Pin21 = 21, Pins.Pin22 = 22, Pins.Pin23 = 23, Pins.Pin24 = 24, Pins.Pin25 = 25, Pins.Pin26 = 26, Pins.Pin27 = 27, Pins.Pin28 = 28, Pins.Pin29 = 29, Pins.Pin30 = 30, Pins.Pin31 = 31, Pins.Pin32 = 32, Pins.Pin33 = 33, Pins.Pin34 = 34, Pins.Pin35 = 35, Pins.Pin36 = 36, Pins.Pin37 = 37, Pins.Pin38 = 38, Pins.Pin39 = 39, Pins.Pin40 = 40}"
        }
      },
      {
        "signature": "enum pull_up_down {PUD_OFF = 0,PUD_DOWN = 1,PUD_UP = 2};",
        "name": "pull_up_down",
        "description": "GPIO Pull-up/Pull-down Configurations:",
        "brief": null,
        "constants": {
          "PUD_OFF": {
            "description": "No pull-up or pull-down resistor.",
            "number": 0
          },
          "PUD_DOWN": {
            "description": "Enable pull-down resistor.",
            "number": 1
          },
          "PUD_UP": {
            "description": "Enable pull-up resistor.",
            "number": 2
          }
        },
        "attributes": {
          "group": "types"
        },
        "signatures": {
          "python": "public enum {pull_up_down.pud_off = 0, pull_up_down.pud_down = 1, pull_up_down.pud_up = 2}",
          "csharp": "public enum {PullUpDown.PudOff = 0, PullUpDown.PudDown = 1, PullUpDown.PudUp = 2}",
          "cpp": "class pull_up_down {PUD_OFF = 0, PUD_DOWN = 1, PUD_UP = 2};",
          "pascal": "public enum {PullUpDown.PudOff = 0, PullUpDown.PudDown = 1, PullUpDown.PudUp = 2}"
        }
      }
    ],
    "defines": [

    ]
  },
  "utilities": {
    "brief": "SplashKit provides some basic data manipulation functions to\nhelp make it easy to get some basic tasks performed.SplashKit random provides a simple implementation of random.SplashKit provides miscellaneous utilities for unclassified functionality.",
    "description": "The SplashKit`s random library provides two rnd methods, a `rnd()` which generates\na random number between 0 and 1, and `rnd(int ubound)` which\ngenerates a random number between 0 and the value scpeficied in `ubound`.",
    "functions": [
      {
        "signature": "bool contains(const string &text,const string &subtext);",
        "name": "contains",
        "method_name": null,
        "unique_global_name": "contains",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if the string contains the substring.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the substring is found in the text.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "text": {
            "type": "string",
            "description": "The text to search",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "subtext": {
            "type": "string",
            "description": "The substring to search for",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "utilities",
          "static": "utilities"
        },
        "signatures": {
          "python": [
            "def contains(text, subtext):"
          ],
          "csharp": [
            "public static bool SplashKit.Contains(string text, string subtext);"
          ],
          "cpp": [
            "bool contains(const string &text, const string &subtext)"
          ],
          "pascal": [
            "function Contains(const text: String; const subtext: String): Boolean"
          ]
        }
      },
      {
        "signature": "double convert_to_double(const string &text);",
        "name": "convert_to_double",
        "method_name": null,
        "unique_global_name": "convert_to_double",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Convert the passed in string into a double. This can fail in an error if\nthe value is not a number, consider using `is_number` to check before\nconverting a string.",
        "brief": null,
        "return": {
          "type": "double",
          "description": "The double value read from the text.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "text": {
            "type": "string",
            "description": "The text to convert.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "utilities",
          "static": "utilities"
        },
        "signatures": {
          "python": [
            "def convert_to_double(text):"
          ],
          "csharp": [
            "public static double SplashKit.ConvertToDouble(string text);"
          ],
          "cpp": [
            "double convert_to_double(const string &text)"
          ],
          "pascal": [
            "function ConvertToDouble(const text: String): Double"
          ]
        }
      },
      {
        "signature": "int convert_to_integer(const string &text);",
        "name": "convert_to_integer",
        "method_name": null,
        "unique_global_name": "convert_to_integer",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Convert the passed in string into an integer. This can fail in an error if\nthe value is not an integer, consider using `is_integer` to check before\nconverting a string.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The integer value read from the text.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "text": {
            "type": "string",
            "description": "The text to convert.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "utilities",
          "static": "utilities"
        },
        "signatures": {
          "python": [
            "def convert_to_integer(text):"
          ],
          "csharp": [
            "public static int SplashKit.ConvertToInteger(string text);"
          ],
          "cpp": [
            "int convert_to_integer(const string &text)"
          ],
          "pascal": [
            "function ConvertToInteger(const text: String): Integer"
          ]
        }
      },
      {
        "signature": "int index_of(const string &text,const string &subtext);",
        "name": "index_of",
        "method_name": null,
        "unique_global_name": "index_of",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the index of the first occurrence of the substring in the text.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The index of the first occurrence of the substring in the text, or -1 if the substring is not found.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "text": {
            "type": "string",
            "description": "The text to search",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "subtext": {
            "type": "string",
            "description": "The substring to search for",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "utilities",
          "static": "utilities"
        },
        "signatures": {
          "python": [
            "def index_of(text, subtext):"
          ],
          "csharp": [
            "public static int SplashKit.IndexOf(string text, string subtext);"
          ],
          "cpp": [
            "int index_of(const string &text, const string &subtext)"
          ],
          "pascal": [
            "function IndexOf(const text: String; const subtext: String): Integer"
          ]
        }
      },
      {
        "signature": "bool is_double(const string &text);",
        "name": "is_double",
        "method_name": null,
        "unique_global_name": "is_double",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks if a string contains a number.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the text contains a number (and only a number).",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "text": {
            "type": "string",
            "description": "The text to check.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "utilities",
          "static": "utilities"
        },
        "signatures": {
          "python": [
            "def is_double(text):"
          ],
          "csharp": [
            "public static bool SplashKit.IsDouble(string text);"
          ],
          "cpp": [
            "bool is_double(const string &text)"
          ],
          "pascal": [
            "function IsDouble(const text: String): Boolean"
          ]
        }
      },
      {
        "signature": "bool is_integer(const string &text);",
        "name": "is_integer",
        "method_name": null,
        "unique_global_name": "is_integer",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks if a string contains an integer value.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the text contains a whole number (and only a whole\nnumber).",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "text": {
            "type": "string",
            "description": "The text to check.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "utilities",
          "static": "utilities"
        },
        "signatures": {
          "python": [
            "def is_integer(text):"
          ],
          "csharp": [
            "public static bool SplashKit.IsInteger(string text);"
          ],
          "cpp": [
            "bool is_integer(const string &text)"
          ],
          "pascal": [
            "function IsInteger(const text: String): Boolean"
          ]
        }
      },
      {
        "signature": "bool is_number(const string &text);",
        "name": "is_number",
        "method_name": null,
        "unique_global_name": "is_number",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks if a string contains a number.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the text contains a number (and only a number).",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "text": {
            "type": "string",
            "description": "The text to check.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "utilities",
          "static": "utilities"
        },
        "signatures": {
          "python": [
            "def is_number(text):"
          ],
          "csharp": [
            "public static bool SplashKit.IsNumber(string text);"
          ],
          "cpp": [
            "bool is_number(const string &text)"
          ],
          "pascal": [
            "function IsNumber(const text: String): Boolean"
          ]
        }
      },
      {
        "signature": "int length_of(const string &text);",
        "name": "length_of",
        "method_name": null,
        "unique_global_name": "length_of",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the length of a string in characters.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The number of characters in the string.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "text": {
            "type": "string",
            "description": "The text to get the length of",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "utilities",
          "static": "utilities"
        },
        "signatures": {
          "python": [
            "def length_of(text):"
          ],
          "csharp": [
            "public static int SplashKit.LengthOf(string text);"
          ],
          "cpp": [
            "int length_of(const string &text)"
          ],
          "pascal": [
            "function LengthOf(const text: String): Integer"
          ]
        }
      },
      {
        "signature": "string replace_all(const string &text,const string &substr,const string &new_text);",
        "name": "replace_all",
        "method_name": null,
        "unique_global_name": "replace_all",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Replace all occurrences of a substring in a string with another string.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "The text with all occurrences of the substring replaced with the new text.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "text": {
            "type": "string",
            "description": "The text to search",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "substr": {
            "type": "string",
            "description": "The substring to find and replace",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "new_text": {
            "type": "string",
            "description": "The string to replace the substring with",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "utilities",
          "static": "utilities"
        },
        "signatures": {
          "python": [
            "def replace_all(text, substr, new_text):"
          ],
          "csharp": [
            "public static string SplashKit.ReplaceAll(string text, string substr, string newText);"
          ],
          "cpp": [
            "string replace_all(const string &text, const string &substr, const string &new_text)"
          ],
          "pascal": [
            "function ReplaceAll(const text: String; const substr: String; const newText: String): String"
          ]
        }
      },
      {
        "signature": "vector<string> split(const string &text,char delimiter);",
        "name": "split",
        "method_name": null,
        "unique_global_name": "split",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Split a string into an array of strings based on a delimiter.",
        "brief": null,
        "return": {
          "type": "vector",
          "description": "An array of strings",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": true,
          "type_parameter": "string"
        },
        "parameters": {
          "text": {
            "type": "string",
            "description": "The text to split",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "delimiter": {
            "type": "char",
            "description": "The character to split the text on",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "utilities",
          "static": "utilities"
        },
        "signatures": {
          "python": [
            "def split(text, delimiter):"
          ],
          "csharp": [
            "public static List<string> SplashKit.Split(string text, char delimiter);"
          ],
          "cpp": [
            "vector<string> split(const string &text, char delimiter)"
          ],
          "pascal": [
            "function Split(const text: String; delimiter: Char): ArrayOfString"
          ]
        }
      },
      {
        "signature": "string to_lowercase(const string &text);",
        "name": "to_lowercase",
        "method_name": null,
        "unique_global_name": "to_lowercase",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Return a lowercase version of the passed in string.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "A lower case version of the passed in text.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "text": {
            "type": "string",
            "description": "The text to convert.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "utilities",
          "static": "utilities"
        },
        "signatures": {
          "python": [
            "def to_lowercase(text):"
          ],
          "csharp": [
            "public static string SplashKit.ToLowercase(string text);"
          ],
          "cpp": [
            "string to_lowercase(const string &text)"
          ],
          "pascal": [
            "function ToLowercase(const text: String): String"
          ]
        }
      },
      {
        "signature": "string to_uppercase(const string &text);",
        "name": "to_uppercase",
        "method_name": null,
        "unique_global_name": "to_uppercase",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Return a UPPERCASE version of the passed in string.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "An upper case version of the passed in text.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "text": {
            "type": "string",
            "description": "The text to convert.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "utilities",
          "static": "utilities"
        },
        "signatures": {
          "python": [
            "def to_uppercase(text):"
          ],
          "csharp": [
            "public static string SplashKit.ToUppercase(string text);"
          ],
          "cpp": [
            "string to_uppercase(const string &text)"
          ],
          "pascal": [
            "function ToUppercase(const text: String): String"
          ]
        }
      },
      {
        "signature": "string trim(const string &text);",
        "name": "trim",
        "method_name": null,
        "unique_global_name": "trim",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Return a new string that removes the spaces from the start and end of\nthe input string.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "A new string with the contents of `text`, after removing spaces\nfrom the start and end.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "text": {
            "type": "string",
            "description": "The string to trim.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "utilities",
          "static": "utilities"
        },
        "signatures": {
          "python": [
            "def trim(text):"
          ],
          "csharp": [
            "public static string SplashKit.Trim(string text);"
          ],
          "cpp": [
            "string trim(const string &text)"
          ],
          "pascal": [
            "function Trim(const text: String): String"
          ]
        }
      },
      {
        "signature": "int rnd(int min,int max);",
        "name": "rnd",
        "method_name": null,
        "unique_global_name": "rnd_range",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a random number between 'min' and `max`, including 'min' and 'max'.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "Returns an `int` between and including `min` and `max`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "min": {
            "type": "int",
            "description": "the `int` representing of minimum bound.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "max": {
            "type": "int",
            "description": "the `int` representing of maximum bound.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "range",
          "group": "utilities",
          "static": "random"
        },
        "signatures": {
          "python": [
            "def rnd_range(min, max):"
          ],
          "csharp": [
            "public static int SplashKit.Rnd(int min, int max);"
          ],
          "cpp": [
            "int rnd(int min, int max)"
          ],
          "pascal": [
            "function Rnd(min: Integer; max: Integer): Integer"
          ]
        }
      },
      {
        "signature": "float rnd();",
        "name": "rnd",
        "method_name": null,
        "unique_global_name": "rnd",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a random number between 0 and 1",
        "brief": null,
        "return": {
          "type": "float",
          "description": "Returns a `float` between `0` and `1`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "utilities",
          "static": "random"
        },
        "signatures": {
          "python": [
            "def rnd():"
          ],
          "csharp": [
            "public static float SplashKit.Rnd();"
          ],
          "cpp": [
            "float rnd()"
          ],
          "pascal": [
            "function Rnd(): Single"
          ]
        }
      },
      {
        "signature": "int rnd(int ubound);",
        "name": "rnd",
        "method_name": null,
        "unique_global_name": "rnd_int",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a random number between 0 and `ubound`.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "Returns an `int` between `0` and `ubound`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "ubound": {
            "type": "int",
            "description": "the `int` representing the upper bound.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "int",
          "group": "utilities",
          "static": "random"
        },
        "signatures": {
          "python": [
            "def rnd_int(ubound):"
          ],
          "csharp": [
            "public static int SplashKit.Rnd(int ubound);"
          ],
          "cpp": [
            "int rnd(int ubound)"
          ],
          "pascal": [
            "function Rnd(ubound: Integer): Integer"
          ]
        }
      },
      {
        "signature": "unsigned int current_ticks();",
        "name": "current_ticks",
        "method_name": null,
        "unique_global_name": "current_ticks",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Gets the number of milliseconds that have passed since the program was\nstarted.",
        "brief": null,
        "return": {
          "type": "unsigned int",
          "description": "The number of milliseconds passed",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "utilities",
          "static": "utilities"
        },
        "signatures": {
          "python": [
            "def current_ticks():"
          ],
          "csharp": [
            "public static uint SplashKit.CurrentTicks();"
          ],
          "cpp": [
            "unsigned int current_ticks()"
          ],
          "pascal": [
            "function CurrentTicks(): Cardinal"
          ]
        }
      },
      {
        "signature": "void delay(int milliseconds);",
        "name": "delay",
        "method_name": null,
        "unique_global_name": "delay",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Puts the program to sleep for a specified number of milliseconds. If this\nis larger than 1 second, SplashKit will check to see if the user tries to\nquit during the delay. If the user does quit, the delay function returns\nwithout waiting.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "milliseconds": {
            "type": "int",
            "description": "The number of milliseconds to wait",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "utilities",
          "static": "utilities"
        },
        "signatures": {
          "python": [
            "def delay(milliseconds):"
          ],
          "csharp": [
            "public static void SplashKit.Delay(int milliseconds);"
          ],
          "cpp": [
            "void delay(int milliseconds)"
          ],
          "pascal": [
            "procedure Delay(milliseconds: Integer)"
          ]
        }
      },
      {
        "signature": "void display_dialog(const string &title,const string &msg,font output_font,int font_size);",
        "name": "display_dialog",
        "method_name": null,
        "unique_global_name": "display_dialog",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Display a dialog to the screen with a message for the user.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "title": {
            "type": "string",
            "description": "The title of the dialog window.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "msg": {
            "type": "string",
            "description": "The message for the dialog window.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "output_font": {
            "type": "font",
            "description": "The font for the dialog text",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "font_size": {
            "type": "int",
            "description": "The size of the font for the dialog text",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "utilities",
          "static": "utilities"
        },
        "signatures": {
          "python": [
            "def display_dialog(title, msg, output_font, font_size):"
          ],
          "csharp": [
            "public static void SplashKit.DisplayDialog(string title, string msg, Font outputFont, int fontSize);"
          ],
          "cpp": [
            "void display_dialog(const string &title, const string &msg, font output_font, int font_size)"
          ],
          "pascal": [
            "procedure DisplayDialog(const title: String; const msg: String; outputFont: Font; fontSize: Integer)"
          ]
        }
      },
      {
        "signature": "string file_as_string(string filename,resource_kind kind);",
        "name": "file_as_string",
        "method_name": null,
        "unique_global_name": "file_as_string",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Return a SplashKit resource of `resource_kind` with name `filename`\nas a string.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "The file loaded into a string.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "filename": {
            "type": "string",
            "description": "The filename of the resource.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "kind": {
            "type": "resource_kind",
            "description": "The kind of resource.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "utilities",
          "static": "utilities"
        },
        "signatures": {
          "python": [
            "def file_as_string(filename, kind):"
          ],
          "csharp": [
            "public static string SplashKit.FileAsString(string filename, ResourceKind kind);"
          ],
          "cpp": [
            "string file_as_string(string filename, resource_kind kind)"
          ],
          "pascal": [
            "function FileAsString(filename: String; kind: ResourceKind): String"
          ]
        }
      }
    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "windows": {
    "brief": "Window Manager in SplashKit can be used create, and manipulate\ngraphics windows",
    "description": "",
    "functions": [
      {
        "signature": "void clear_window(window wind,color clr);",
        "name": "clear_window",
        "method_name": "clear",
        "unique_global_name": "clear_window",
        "unique_method_name": "window.clear",
        "suffix_name": null,
        "description": "clears a window to the specified color given in `clr`",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "the `window` to clear",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "the `color` to clear the window to.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "clear",
          "group": "windows",
          "static": "window_manager",
          "self": "wind"
        },
        "signatures": {
          "python": [
            "def clear_window(wind, clr):"
          ],
          "csharp": [
            "public void Window.Clear(Color clr);",
            "public static void SplashKit.ClearWindow(Window wind, Color clr);"
          ],
          "cpp": [
            "void clear_window(window wind, color clr)"
          ],
          "pascal": [
            "procedure ClearWindow(wind: Window; clr: Color)"
          ]
        }
      },
      {
        "signature": "void close_all_windows();",
        "name": "close_all_windows",
        "method_name": null,
        "unique_global_name": "close_all_windows",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Releases all of the windows which have been loaded.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "windows",
          "static": "window_manager"
        },
        "signatures": {
          "python": [
            "def close_all_windows():"
          ],
          "csharp": [
            "public static void SplashKit.CloseAllWindows();"
          ],
          "cpp": [
            "void close_all_windows()"
          ],
          "pascal": [
            "procedure CloseAllWindows()"
          ]
        }
      },
      {
        "signature": "void close_current_window();",
        "name": "close_current_window",
        "method_name": null,
        "unique_global_name": "close_current_window",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Closes and frees the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "windows",
          "static": "window_manager"
        },
        "signatures": {
          "python": [
            "def close_current_window():"
          ],
          "csharp": [
            "public static void SplashKit.CloseCurrentWindow();"
          ],
          "cpp": [
            "void close_current_window()"
          ],
          "pascal": [
            "procedure CloseCurrentWindow()"
          ]
        }
      },
      {
        "signature": "void close_window(const string &name);",
        "name": "close_window",
        "method_name": null,
        "unique_global_name": "close_window_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Closes and frees the graphics window identified by `name`.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name (caption) of the window to close",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "named",
          "group": "windows",
          "static": "window_manager"
        },
        "signatures": {
          "python": [
            "def close_window_named(name):"
          ],
          "csharp": [
            "public static void SplashKit.CloseWindow(string name);"
          ],
          "cpp": [
            "void close_window(const string &name)"
          ],
          "pascal": [
            "procedure CloseWindow(const name: String)"
          ]
        }
      },
      {
        "signature": "void close_window(window wind);",
        "name": "close_window",
        "method_name": "close",
        "unique_global_name": "close_window",
        "unique_method_name": "window.close",
        "suffix_name": null,
        "description": "Closes and frees the graphics window supplied in `wind`.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "The window to close",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "destructor": true,
          "method": "close",
          "self": "wind",
          "group": "windows",
          "static": "window_manager"
        },
        "signatures": {
          "python": [
            "def close_window(wind):"
          ],
          "csharp": [
            "public void Window.Close();",
            "public static void SplashKit.CloseWindow(Window wind);"
          ],
          "cpp": [
            "void close_window(window wind)"
          ],
          "pascal": [
            "procedure CloseWindow(wind: Window)"
          ]
        }
      },
      {
        "signature": "window current_window();",
        "name": "current_window",
        "method_name": null,
        "unique_global_name": "current_window",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the window that you are currently interacting with. This will be\nthe default window for drawing options, and events.",
        "brief": null,
        "return": {
          "type": "window",
          "description": "The current window",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "windows",
          "static": "window_manager"
        },
        "signatures": {
          "python": [
            "def current_window():"
          ],
          "csharp": [
            "public static Window SplashKit.CurrentWindow();"
          ],
          "cpp": [
            "window current_window()"
          ],
          "pascal": [
            "function CurrentWindow(): Window"
          ]
        }
      },
      {
        "signature": "bool current_window_has_border();",
        "name": "current_window_has_border",
        "method_name": null,
        "unique_global_name": "current_window_has_border",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Indicate if the current window has a border.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the window has a border",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "windows",
          "static": "window_manager"
        },
        "signatures": {
          "python": [
            "def current_window_has_border():"
          ],
          "csharp": [
            "public static bool SplashKit.CurrentWindowHasBorder();"
          ],
          "cpp": [
            "bool current_window_has_border()"
          ],
          "pascal": [
            "function CurrentWindowHasBorder(): Boolean"
          ]
        }
      },
      {
        "signature": "int current_window_height();",
        "name": "current_window_height",
        "method_name": null,
        "unique_global_name": "current_window_height",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the height of the current window.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The height of the current window",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "windows",
          "static": "window_manager"
        },
        "signatures": {
          "python": [
            "def current_window_height():"
          ],
          "csharp": [
            "public static int SplashKit.CurrentWindowHeight();"
          ],
          "cpp": [
            "int current_window_height()"
          ],
          "pascal": [
            "function CurrentWindowHeight(): Integer"
          ]
        }
      },
      {
        "signature": "bool current_window_is_fullscreen();",
        "name": "current_window_is_fullscreen",
        "method_name": null,
        "unique_global_name": "current_window_is_fullscreen",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Is the current window currently fullscreen?",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True when the window is fullscreen",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "windows",
          "static": "window_manager"
        },
        "signatures": {
          "python": [
            "def current_window_is_fullscreen():"
          ],
          "csharp": [
            "public static bool SplashKit.CurrentWindowIsFullscreen();"
          ],
          "cpp": [
            "bool current_window_is_fullscreen()"
          ],
          "pascal": [
            "function CurrentWindowIsFullscreen(): Boolean"
          ]
        }
      },
      {
        "signature": "point_2d current_window_position();",
        "name": "current_window_position",
        "method_name": null,
        "unique_global_name": "current_window_position",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The location of the current window.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "Its location on the displays",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "windows",
          "static": "window_manager"
        },
        "signatures": {
          "python": [
            "def current_window_position():"
          ],
          "csharp": [
            "public static Point2D SplashKit.CurrentWindowPosition();"
          ],
          "cpp": [
            "point_2d current_window_position()"
          ],
          "pascal": [
            "function CurrentWindowPosition(): Point2D"
          ]
        }
      },
      {
        "signature": "void current_window_toggle_border();",
        "name": "current_window_toggle_border",
        "method_name": null,
        "unique_global_name": "current_window_toggle_border",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Toggle the current window border.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "windows",
          "static": "window_manager"
        },
        "signatures": {
          "python": [
            "def current_window_toggle_border():"
          ],
          "csharp": [
            "public static void SplashKit.CurrentWindowToggleBorder();"
          ],
          "cpp": [
            "void current_window_toggle_border()"
          ],
          "pascal": [
            "procedure CurrentWindowToggleBorder()"
          ]
        }
      },
      {
        "signature": "void current_window_toggle_fullscreen();",
        "name": "current_window_toggle_fullscreen",
        "method_name": null,
        "unique_global_name": "current_window_toggle_fullscreen",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Toggle the fullscreen property of the current window",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "windows",
          "static": "window_manager"
        },
        "signatures": {
          "python": [
            "def current_window_toggle_fullscreen():"
          ],
          "csharp": [
            "public static void SplashKit.CurrentWindowToggleFullscreen();"
          ],
          "cpp": [
            "void current_window_toggle_fullscreen()"
          ],
          "pascal": [
            "procedure CurrentWindowToggleFullscreen()"
          ]
        }
      },
      {
        "signature": "int current_window_width();",
        "name": "current_window_width",
        "method_name": null,
        "unique_global_name": "current_window_width",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the width of the current window.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The width of the current window",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "windows",
          "static": "window_manager"
        },
        "signatures": {
          "python": [
            "def current_window_width():"
          ],
          "csharp": [
            "public static int SplashKit.CurrentWindowWidth();"
          ],
          "cpp": [
            "int current_window_width()"
          ],
          "pascal": [
            "function CurrentWindowWidth(): Integer"
          ]
        }
      },
      {
        "signature": "int current_window_x();",
        "name": "current_window_x",
        "method_name": null,
        "unique_global_name": "current_window_x",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The x location of the current window on the displays.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "Its location on the displays",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "windows",
          "static": "window_manager"
        },
        "signatures": {
          "python": [
            "def current_window_x():"
          ],
          "csharp": [
            "public static int SplashKit.CurrentWindowX();"
          ],
          "cpp": [
            "int current_window_x()"
          ],
          "pascal": [
            "function CurrentWindowX(): Integer"
          ]
        }
      },
      {
        "signature": "int current_window_y();",
        "name": "current_window_y",
        "method_name": null,
        "unique_global_name": "current_window_y",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The y location of the current window on the displays.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "Its location on the displays",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "windows",
          "static": "window_manager"
        },
        "signatures": {
          "python": [
            "def current_window_y():"
          ],
          "csharp": [
            "public static int SplashKit.CurrentWindowY();"
          ],
          "cpp": [
            "int current_window_y()"
          ],
          "pascal": [
            "function CurrentWindowY(): Integer"
          ]
        }
      },
      {
        "signature": "bool has_window(string caption);",
        "name": "has_window",
        "method_name": null,
        "unique_global_name": "has_window",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Determines if SplashKit has a window loaded with the supplied name.\nThis checks against all windows loaded, those loaded without a name\nare assigned the filename as a default. If this returns `false`, you may\nwant to use `load_window` to load in a specific window and give\nit the desired name.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Returns `true` if there is a window with the given `caption`\nwhich has has been loaded.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "caption": {
            "type": "string",
            "description": "The name of the window to check for.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "windows",
          "static": "window_manager"
        },
        "signatures": {
          "python": [
            "def has_window(caption):"
          ],
          "csharp": [
            "public static bool SplashKit.HasWindow(string caption);"
          ],
          "cpp": [
            "bool has_window(string caption)"
          ],
          "pascal": [
            "function HasWindow(caption: String): Boolean"
          ]
        }
      },
      {
        "signature": "bool is_current_window(window wind);",
        "name": "is_current_window",
        "method_name": null,
        "unique_global_name": "is_current_window",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Check if the requested window is the current window.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "true if the window is the current window",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "The window to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "getter": "is_current_window",
          "group": "windows",
          "static": "window_manager",
          "self": "wind"
        },
        "signatures": {
          "python": [
            "def is_current_window(wind):"
          ],
          "csharp": [
            "public bool Window.IsCurrentWindow { get }",
            "public static bool SplashKit.IsCurrentWindow(Window wind);"
          ],
          "cpp": [
            "bool is_current_window(window wind)"
          ],
          "pascal": [
            "function IsCurrentWindow(wind: Window): Boolean"
          ]
        }
      },
      {
        "signature": "void move_current_window_to(int x,int y);",
        "name": "move_current_window_to",
        "method_name": null,
        "unique_global_name": "move_current_window_to",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Move the current window to the new location on the displays.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "x": {
            "type": "int",
            "description": "The new x location",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "int",
            "description": "The new y location",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "windows",
          "static": "window_manager"
        },
        "signatures": {
          "python": [
            "def move_current_window_to(x, y):"
          ],
          "csharp": [
            "public static void SplashKit.MoveCurrentWindowTo(int x, int y);"
          ],
          "cpp": [
            "void move_current_window_to(int x, int y)"
          ],
          "pascal": [
            "procedure MoveCurrentWindowTo(x: Integer; y: Integer)"
          ]
        }
      },
      {
        "signature": "void move_window_to(const string &name,int x,int y);",
        "name": "move_window_to",
        "method_name": null,
        "unique_global_name": "move_window_to_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Move the window to the new location on the displays.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the window to move",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "int",
            "description": "The new x location",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "int",
            "description": "The new y location",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "named",
          "group": "windows",
          "static": "window_manager"
        },
        "signatures": {
          "python": [
            "def move_window_to_named(name, x, y):"
          ],
          "csharp": [
            "public static void SplashKit.MoveWindowTo(string name, int x, int y);"
          ],
          "cpp": [
            "void move_window_to(const string &name, int x, int y)"
          ],
          "pascal": [
            "procedure MoveWindowTo(const name: String; x: Integer; y: Integer)"
          ]
        }
      },
      {
        "signature": "void move_window_to(window wind,int x,int y);",
        "name": "move_window_to",
        "method_name": "move_to",
        "unique_global_name": "move_window_to",
        "unique_method_name": "window.move_to",
        "suffix_name": null,
        "description": "Move the window to the new location on the displays.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "the window to move.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "int",
            "description": "The new x location",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "int",
            "description": "The new y location",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "move_to",
          "group": "windows",
          "static": "window_manager",
          "self": "wind"
        },
        "signatures": {
          "python": [
            "def move_window_to(wind, x, y):"
          ],
          "csharp": [
            "public void Window.MoveTo(int x, int y);",
            "public static void SplashKit.MoveWindowTo(Window wind, int x, int y);"
          ],
          "cpp": [
            "void move_window_to(window wind, int x, int y)"
          ],
          "pascal": [
            "procedure MoveWindowTo(wind: Window; x: Integer; y: Integer)"
          ]
        }
      },
      {
        "signature": "window open_window(string caption,int width,int height);",
        "name": "open_window",
        "method_name": null,
        "unique_global_name": "open_window",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Opens a new graphics window. The supplied `caption` is used to\nname and identify the window. The supplied `width` and `height` indicate\nthe size of the window. The window can be retrieved by passing `caption`\nto the `window_named` function.",
        "brief": null,
        "return": {
          "type": "window",
          "description": "A new window",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "caption": {
            "type": "string",
            "description": "The title of the window. If a window with this caption\nalready exists, SplashKit will alter the caption to\nensure that it is unique.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "int",
            "description": "The width of the window",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "int",
            "description": "The height of the window",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "constructor": true,
          "group": "windows",
          "static": "window_manager"
        },
        "signatures": {
          "python": [
            "def open_window(caption, width, height):"
          ],
          "csharp": [
            "public static Window SplashKit.OpenWindow(string caption, int width, int height);",
            "public Window(string caption, int width, int height);"
          ],
          "cpp": [
            "window open_window(string caption, int width, int height)"
          ],
          "pascal": [
            "function OpenWindow(caption: String; width: Integer; height: Integer): Window"
          ]
        }
      },
      {
        "signature": "void refresh_window(window wind);",
        "name": "refresh_window",
        "method_name": "refresh",
        "unique_global_name": "refresh_window",
        "unique_method_name": "window.refresh",
        "suffix_name": null,
        "description": "Refreshes the window `wind`.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "the `window` to refresh.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "refresh",
          "group": "windows",
          "static": "window_manager",
          "self": "wind"
        },
        "signatures": {
          "python": [
            "def refresh_window(wind):"
          ],
          "csharp": [
            "public void Window.Refresh();",
            "public static void SplashKit.RefreshWindow(Window wind);"
          ],
          "cpp": [
            "void refresh_window(window wind)"
          ],
          "pascal": [
            "procedure RefreshWindow(wind: Window)"
          ]
        }
      },
      {
        "signature": "void refresh_window(window wind,unsigned int target_fps);",
        "name": "refresh_window",
        "method_name": "refresh",
        "unique_global_name": "refresh_window_with_target_fps",
        "unique_method_name": "window.refresh_with_target_fps",
        "suffix_name": null,
        "description": "Refreshes the window `wind`.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "the `window` to refresh.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "target_fps": {
            "type": "unsigned int",
            "description": "the desired framerate",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "refresh",
          "suffix": "with_target_fps",
          "group": "windows",
          "static": "window_manager",
          "self": "wind"
        },
        "signatures": {
          "python": [
            "def refresh_window_with_target_fps(wind, target_fps):"
          ],
          "csharp": [
            "public void Window.Refresh(uint targetFps);",
            "public static void SplashKit.RefreshWindow(Window wind, uint targetFps);"
          ],
          "cpp": [
            "void refresh_window(window wind, unsigned int target_fps)"
          ],
          "pascal": [
            "procedure RefreshWindow(wind: Window; targetFps: Cardinal)"
          ]
        }
      },
      {
        "signature": "void resize_current_window(int width,int height);",
        "name": "resize_current_window",
        "method_name": null,
        "unique_global_name": "resize_current_window",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Change the size of the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "width": {
            "type": "int",
            "description": "Its new width",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "int",
            "description": "Its new height",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "windows",
          "static": "window_manager"
        },
        "signatures": {
          "python": [
            "def resize_current_window(width, height):"
          ],
          "csharp": [
            "public static void SplashKit.ResizeCurrentWindow(int width, int height);"
          ],
          "cpp": [
            "void resize_current_window(int width, int height)"
          ],
          "pascal": [
            "procedure ResizeCurrentWindow(width: Integer; height: Integer)"
          ]
        }
      },
      {
        "signature": "void resize_window(window wnd,int width,int height);",
        "name": "resize_window",
        "method_name": "resize",
        "unique_global_name": "resize_window",
        "unique_method_name": "window.resize",
        "suffix_name": null,
        "description": "Change the size of the window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wnd": {
            "type": "window",
            "description": "The window to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "int",
            "description": "Its new width",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "int",
            "description": "Its new height",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "resize",
          "group": "windows",
          "static": "window_manager",
          "self": "wnd"
        },
        "signatures": {
          "python": [
            "def resize_window(wnd, width, height):"
          ],
          "csharp": [
            "public void Window.Resize(int width, int height);",
            "public static void SplashKit.ResizeWindow(Window wnd, int width, int height);"
          ],
          "cpp": [
            "void resize_window(window wnd, int width, int height)"
          ],
          "pascal": [
            "procedure ResizeWindow(wnd: Window; width: Integer; height: Integer)"
          ]
        }
      },
      {
        "signature": "void set_current_window(const string &name);",
        "name": "set_current_window",
        "method_name": null,
        "unique_global_name": "set_current_window_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Set the current window to the window with the supplied caption.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The caption of the new current window.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "named",
          "group": "windows",
          "static": "window_manager"
        },
        "signatures": {
          "python": [
            "def set_current_window_named(name):"
          ],
          "csharp": [
            "public static void SplashKit.SetCurrentWindow(string name);"
          ],
          "cpp": [
            "void set_current_window(const string &name)"
          ],
          "pascal": [
            "procedure SetCurrentWindow(const name: String)"
          ]
        }
      },
      {
        "signature": "void set_current_window(window wind);",
        "name": "set_current_window",
        "method_name": "make_current",
        "unique_global_name": "set_current_window",
        "unique_method_name": "window.make_current",
        "suffix_name": null,
        "description": "Change the current window. Use this so that you can draw to different\nwindows by default.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "The new current window",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "make_current",
          "group": "windows",
          "static": "window_manager",
          "self": "wind"
        },
        "signatures": {
          "python": [
            "def set_current_window(wind):"
          ],
          "csharp": [
            "public void Window.MakeCurrent();",
            "public static void SplashKit.SetCurrentWindow(Window wind);"
          ],
          "cpp": [
            "void set_current_window(window wind)"
          ],
          "pascal": [
            "procedure SetCurrentWindow(wind: Window)"
          ]
        }
      },
      {
        "signature": "string window_caption(window wind);",
        "name": "window_caption",
        "method_name": null,
        "unique_global_name": "window_caption",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The caption of the window.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "The window's caption.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "The window",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "getter": "caption",
          "group": "windows",
          "static": "window_manager",
          "self": "wind"
        },
        "signatures": {
          "python": [
            "def window_caption(wind):"
          ],
          "csharp": [
            "public string Window.Caption { get }",
            "public static string SplashKit.WindowCaption(Window wind);"
          ],
          "cpp": [
            "string window_caption(window wind)"
          ],
          "pascal": [
            "function WindowCaption(wind: Window): String"
          ]
        }
      },
      {
        "signature": "bool window_close_requested(const string &name);",
        "name": "window_close_requested",
        "method_name": null,
        "unique_global_name": "window_close_requested_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks all opened windows in the current program\nto determin if a window with the name `name` is\ncurrently open, and will close a window if one is found.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Returns `true` if the window has been asked to close.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the window to close",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "named",
          "group": "windows",
          "static": "window_manager"
        },
        "signatures": {
          "python": [
            "def window_close_requested_named(name):"
          ],
          "csharp": [
            "public static bool SplashKit.WindowCloseRequested(string name);"
          ],
          "cpp": [
            "bool window_close_requested(const string &name)"
          ],
          "pascal": [
            "function WindowCloseRequested(const name: String): Boolean"
          ]
        }
      },
      {
        "signature": "bool window_close_requested(window wind);",
        "name": "window_close_requested",
        "method_name": null,
        "unique_global_name": "window_close_requested",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Closes the window given in `wind`",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Returns `true` if the window is closed,\n`false` if there is an error.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "the `window` to be closed",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "getter": "close_requested",
          "self": "wind",
          "group": "windows",
          "static": "window_manager"
        },
        "signatures": {
          "python": [
            "def window_close_requested(wind):"
          ],
          "csharp": [
            "public bool Window.CloseRequested { get }",
            "public static bool SplashKit.WindowCloseRequested(Window wind);"
          ],
          "cpp": [
            "bool window_close_requested(window wind)"
          ],
          "pascal": [
            "function WindowCloseRequested(wind: Window): Boolean"
          ]
        }
      },
      {
        "signature": "bool window_has_border(const string &name);",
        "name": "window_has_border",
        "method_name": null,
        "unique_global_name": "window_has_border_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Indicate if the window has a border.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the window has a border",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the window",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "named",
          "group": "windows",
          "static": "window_manager"
        },
        "signatures": {
          "python": [
            "def window_has_border_named(name):"
          ],
          "csharp": [
            "public static bool SplashKit.WindowHasBorder(string name);"
          ],
          "cpp": [
            "bool window_has_border(const string &name)"
          ],
          "pascal": [
            "function WindowHasBorder(const name: String): Boolean"
          ]
        }
      },
      {
        "signature": "bool window_has_border(window wnd);",
        "name": "window_has_border",
        "method_name": null,
        "unique_global_name": "window_has_border",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Indicate if the window has a border.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the window has a border",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wnd": {
            "type": "window",
            "description": "The window",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "getter": "has_border",
          "group": "windows",
          "static": "window_manager",
          "self": "wnd"
        },
        "signatures": {
          "python": [
            "def window_has_border(wnd):"
          ],
          "csharp": [
            "public bool Window.HasBorder { get }",
            "public static bool SplashKit.WindowHasBorder(Window wnd);"
          ],
          "cpp": [
            "bool window_has_border(window wnd)"
          ],
          "pascal": [
            "function WindowHasBorder(wnd: Window): Boolean"
          ]
        }
      },
      {
        "signature": "bool window_has_focus(window wind);",
        "name": "window_has_focus",
        "method_name": null,
        "unique_global_name": "window_has_focus",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Indicates if the window has focus.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the window has the user's focus",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "The window",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "getter": "has_focus",
          "group": "windows",
          "static": "window_manager",
          "self": "wind"
        },
        "signatures": {
          "python": [
            "def window_has_focus(wind):"
          ],
          "csharp": [
            "public bool Window.HasFocus { get }",
            "public static bool SplashKit.WindowHasFocus(Window wind);"
          ],
          "cpp": [
            "bool window_has_focus(window wind)"
          ],
          "pascal": [
            "function WindowHasFocus(wind: Window): Boolean"
          ]
        }
      },
      {
        "signature": "int window_height(const string &name);",
        "name": "window_height",
        "method_name": null,
        "unique_global_name": "window_height_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the height of the window with the indicated name in pixels.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The height of the window",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the window",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "named",
          "group": "windows",
          "static": "window_manager"
        },
        "signatures": {
          "python": [
            "def window_height_named(name):"
          ],
          "csharp": [
            "public static int SplashKit.WindowHeight(string name);"
          ],
          "cpp": [
            "int window_height(const string &name)"
          ],
          "pascal": [
            "function WindowHeight(const name: String): Integer"
          ]
        }
      },
      {
        "signature": "int window_height(window wind);",
        "name": "window_height",
        "method_name": null,
        "unique_global_name": "window_height",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the height of the window in pixels.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The height of the window",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "The window",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "getter": "height",
          "group": "windows",
          "static": "window_manager",
          "self": "wind"
        },
        "signatures": {
          "python": [
            "def window_height(wind):"
          ],
          "csharp": [
            "public int Window.Height { get }",
            "public static int SplashKit.WindowHeight(Window wind);"
          ],
          "cpp": [
            "int window_height(window wind)"
          ],
          "pascal": [
            "function WindowHeight(wind: Window): Integer"
          ]
        }
      },
      {
        "signature": "bool window_is_fullscreen(const string &name);",
        "name": "window_is_fullscreen",
        "method_name": null,
        "unique_global_name": "window_is_fullscreen_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Is the window currently fullscreen?",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True when the window is fullscreen",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the window to check",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "named",
          "group": "windows",
          "static": "window_manager"
        },
        "signatures": {
          "python": [
            "def window_is_fullscreen_named(name):"
          ],
          "csharp": [
            "public static bool SplashKit.WindowIsFullscreen(string name);"
          ],
          "cpp": [
            "bool window_is_fullscreen(const string &name)"
          ],
          "pascal": [
            "function WindowIsFullscreen(const name: String): Boolean"
          ]
        }
      },
      {
        "signature": "bool window_is_fullscreen(window wnd);",
        "name": "window_is_fullscreen",
        "method_name": null,
        "unique_global_name": "window_is_fullscreen",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Is the window currently fullscreen?",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True when the window is fullscreen",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wnd": {
            "type": "window",
            "description": "The window to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "getter": "is_fullscreen",
          "group": "windows",
          "static": "window_manager",
          "self": "wnd"
        },
        "signatures": {
          "python": [
            "def window_is_fullscreen(wnd):"
          ],
          "csharp": [
            "public bool Window.IsFullscreen { get }",
            "public static bool SplashKit.WindowIsFullscreen(Window wnd);"
          ],
          "cpp": [
            "bool window_is_fullscreen(window wnd)"
          ],
          "pascal": [
            "function WindowIsFullscreen(wnd: Window): Boolean"
          ]
        }
      },
      {
        "signature": "window window_named(string caption);",
        "name": "window_named",
        "method_name": null,
        "unique_global_name": "window_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns an opened `window` with the given name `caption`, if a window with\nname `caption` is found.",
        "brief": null,
        "return": {
          "type": "window",
          "description": "Returns a `window` with the name specified by `caption`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "caption": {
            "type": "string",
            "description": "the `string` name of the window.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "windows",
          "static": "window_manager"
        },
        "signatures": {
          "python": [
            "def window_named(caption):"
          ],
          "csharp": [
            "public static Window SplashKit.WindowNamed(string caption);"
          ],
          "cpp": [
            "window window_named(string caption)"
          ],
          "pascal": [
            "function WindowNamed(caption: String): Window"
          ]
        }
      },
      {
        "signature": "point_2d window_position(const string &name);",
        "name": "window_position",
        "method_name": null,
        "unique_global_name": "window_position_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The location of the window.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "Its location on the displays",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the window.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "named",
          "group": "windows",
          "static": "window_manager"
        },
        "signatures": {
          "python": [
            "def window_position_named(name):"
          ],
          "csharp": [
            "public static Point2D SplashKit.WindowPosition(string name);"
          ],
          "cpp": [
            "point_2d window_position(const string &name)"
          ],
          "pascal": [
            "function WindowPosition(const name: String): Point2D"
          ]
        }
      },
      {
        "signature": "point_2d window_position(window wnd);",
        "name": "window_position",
        "method_name": null,
        "unique_global_name": "window_position",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The location of the window.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "Its location on the displays",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wnd": {
            "type": "window",
            "description": "The window.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "getter": "position",
          "group": "windows",
          "static": "window_manager",
          "self": "wnd"
        },
        "signatures": {
          "python": [
            "def window_position(wnd):"
          ],
          "csharp": [
            "public Point2D Window.Position { get }",
            "public static Point2D SplashKit.WindowPosition(Window wnd);"
          ],
          "cpp": [
            "point_2d window_position(window wnd)"
          ],
          "pascal": [
            "function WindowPosition(wnd: Window): Point2D"
          ]
        }
      },
      {
        "signature": "void window_set_icon(window wind,bitmap bmp);",
        "name": "window_set_icon",
        "method_name": null,
        "unique_global_name": "window_set_icon",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the icon of the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "The window to change the icon of",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "bmp": {
            "type": "bitmap",
            "description": "The image with the details to show in the icon",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "setter": "icon",
          "group": "windows",
          "static": "window_manager",
          "self": "wind"
        },
        "signatures": {
          "python": [
            "def window_set_icon(wind, bmp):"
          ],
          "csharp": [
            "public void Window.Icon { set }",
            "public static void SplashKit.WindowSetIcon(Window wind, Bitmap bmp);"
          ],
          "cpp": [
            "void window_set_icon(window wind, bitmap bmp)"
          ],
          "pascal": [
            "procedure WindowSetIcon(wind: Window; bmp: Bitmap)"
          ]
        }
      },
      {
        "signature": "void window_toggle_border(const string &name);",
        "name": "window_toggle_border",
        "method_name": null,
        "unique_global_name": "window_toggle_border_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Toggle the window border.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the window to change",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "named",
          "group": "windows",
          "static": "window_manager"
        },
        "signatures": {
          "python": [
            "def window_toggle_border_named(name):"
          ],
          "csharp": [
            "public static void SplashKit.WindowToggleBorder(string name);"
          ],
          "cpp": [
            "void window_toggle_border(const string &name)"
          ],
          "pascal": [
            "procedure WindowToggleBorder(const name: String)"
          ]
        }
      },
      {
        "signature": "void window_toggle_border(window wnd);",
        "name": "window_toggle_border",
        "method_name": "toggle_border",
        "unique_global_name": "window_toggle_border",
        "unique_method_name": "window.toggle_border",
        "suffix_name": null,
        "description": "Toggle the window border.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wnd": {
            "type": "window",
            "description": "The window to change",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "toggle_border",
          "group": "windows",
          "static": "window_manager",
          "self": "wnd"
        },
        "signatures": {
          "python": [
            "def window_toggle_border(wnd):"
          ],
          "csharp": [
            "public void Window.ToggleBorder();",
            "public static void SplashKit.WindowToggleBorder(Window wnd);"
          ],
          "cpp": [
            "void window_toggle_border(window wnd)"
          ],
          "pascal": [
            "procedure WindowToggleBorder(wnd: Window)"
          ]
        }
      },
      {
        "signature": "void window_toggle_fullscreen(const string &name);",
        "name": "window_toggle_fullscreen",
        "method_name": null,
        "unique_global_name": "window_toggle_fullscreen_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Toggle the fullscreen property of the window",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the window to change",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "named",
          "group": "windows",
          "static": "window_manager"
        },
        "signatures": {
          "python": [
            "def window_toggle_fullscreen_named(name):"
          ],
          "csharp": [
            "public static void SplashKit.WindowToggleFullscreen(string name);"
          ],
          "cpp": [
            "void window_toggle_fullscreen(const string &name)"
          ],
          "pascal": [
            "procedure WindowToggleFullscreen(const name: String)"
          ]
        }
      },
      {
        "signature": "void window_toggle_fullscreen(window wnd);",
        "name": "window_toggle_fullscreen",
        "method_name": "toggle_fullscreen",
        "unique_global_name": "window_toggle_fullscreen",
        "unique_method_name": "window.toggle_fullscreen",
        "suffix_name": null,
        "description": "Toggle the fullscreen property of the window",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wnd": {
            "type": "window",
            "description": "The window to change",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "toggle_fullscreen",
          "group": "windows",
          "static": "window_manager",
          "self": "wnd"
        },
        "signatures": {
          "python": [
            "def window_toggle_fullscreen(wnd):"
          ],
          "csharp": [
            "public void Window.ToggleFullscreen();",
            "public static void SplashKit.WindowToggleFullscreen(Window wnd);"
          ],
          "cpp": [
            "void window_toggle_fullscreen(window wnd)"
          ],
          "pascal": [
            "procedure WindowToggleFullscreen(wnd: Window)"
          ]
        }
      },
      {
        "signature": "int window_width(const string &name);",
        "name": "window_width",
        "method_name": null,
        "unique_global_name": "window_width_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the width of the window with the indicated name in pixels.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The width of the window",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the window",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "named",
          "group": "windows",
          "static": "window_manager"
        },
        "signatures": {
          "python": [
            "def window_width_named(name):"
          ],
          "csharp": [
            "public static int SplashKit.WindowWidth(string name);"
          ],
          "cpp": [
            "int window_width(const string &name)"
          ],
          "pascal": [
            "function WindowWidth(const name: String): Integer"
          ]
        }
      },
      {
        "signature": "int window_width(window wind);",
        "name": "window_width",
        "method_name": null,
        "unique_global_name": "window_width",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the width of the window in pixels.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The width of the window",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "The window",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "getter": "width",
          "group": "windows",
          "static": "window_manager",
          "self": "wind"
        },
        "signatures": {
          "python": [
            "def window_width(wind):"
          ],
          "csharp": [
            "public int Window.Width { get }",
            "public static int SplashKit.WindowWidth(Window wind);"
          ],
          "cpp": [
            "int window_width(window wind)"
          ],
          "pascal": [
            "function WindowWidth(wind: Window): Integer"
          ]
        }
      },
      {
        "signature": "window window_with_focus();",
        "name": "window_with_focus",
        "method_name": null,
        "unique_global_name": "window_with_focus",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the window that the user currently has selected. This may be\ndifferent to the current window.",
        "brief": null,
        "return": {
          "type": "window",
          "description": "The window the user has selected",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "windows",
          "static": "window_manager"
        },
        "signatures": {
          "python": [
            "def window_with_focus():"
          ],
          "csharp": [
            "public static Window SplashKit.WindowWithFocus();"
          ],
          "cpp": [
            "window window_with_focus()"
          ],
          "pascal": [
            "function WindowWithFocus(): Window"
          ]
        }
      },
      {
        "signature": "int window_x(const string &name);",
        "name": "window_x",
        "method_name": null,
        "unique_global_name": "window_x_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The x location of the window on the displays.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "Its location on the displays",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the window",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "named",
          "group": "windows",
          "static": "window_manager"
        },
        "signatures": {
          "python": [
            "def window_x_named(name):"
          ],
          "csharp": [
            "public static int SplashKit.WindowX(string name);"
          ],
          "cpp": [
            "int window_x(const string &name)"
          ],
          "pascal": [
            "function WindowX(const name: String): Integer"
          ]
        }
      },
      {
        "signature": "int window_x(window wnd);",
        "name": "window_x",
        "method_name": null,
        "unique_global_name": "window_x",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The x location of the window on the displays.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "Its location on the displays",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wnd": {
            "type": "window",
            "description": "The window",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "getter": "x",
          "group": "windows",
          "static": "window_manager",
          "self": "wnd"
        },
        "signatures": {
          "python": [
            "def window_x(wnd):"
          ],
          "csharp": [
            "public int Window.X { get }",
            "public static int SplashKit.WindowX(Window wnd);"
          ],
          "cpp": [
            "int window_x(window wnd)"
          ],
          "pascal": [
            "function WindowX(wnd: Window): Integer"
          ]
        }
      },
      {
        "signature": "int window_y(const string &name);",
        "name": "window_y",
        "method_name": null,
        "unique_global_name": "window_y_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The y location of the window on the displays.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "Its location on the displays",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the window",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "named",
          "group": "windows",
          "static": "window_manager"
        },
        "signatures": {
          "python": [
            "def window_y_named(name):"
          ],
          "csharp": [
            "public static int SplashKit.WindowY(string name);"
          ],
          "cpp": [
            "int window_y(const string &name)"
          ],
          "pascal": [
            "function WindowY(const name: String): Integer"
          ]
        }
      },
      {
        "signature": "int window_y(window wnd);",
        "name": "window_y",
        "method_name": null,
        "unique_global_name": "window_y",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The y location of the window on the displays.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "Its location on the displays",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wnd": {
            "type": "window",
            "description": "The window",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "getter": "y",
          "group": "windows",
          "static": "window_manager",
          "self": "wnd"
        },
        "signatures": {
          "python": [
            "def window_y(wnd):"
          ],
          "csharp": [
            "public int Window.Y { get }",
            "public static int SplashKit.WindowY(Window wnd);"
          ],
          "cpp": [
            "int window_y(window wnd)"
          ],
          "pascal": [
            "function WindowY(wnd: Window): Integer"
          ]
        }
      }
    ],
    "typedefs": [
      {
        "signature": "typedef struct _window_data *window;",
        "name": "window",
        "description": "The Window type is used to refer to a window that you have opened\nin SplashKit. You create new Windows using `open_window` and they can\nbe closed using `close_window`.\n\n\n- opened with `open_window`\n\n- and must be released using `close_window` (to close a specific\nwindow) or `delete_all_windows` (to close all loaded\nwindows).",
        "brief": null,
        "attributes": {
          "class": "window",
          "group": "windows",
          "static": "window_manager"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      }
    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  }
}